/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_spdd_AC.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_0122_13(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C78214 = ae + be;
    const double C78213 = xA - xB;
    const double C78238 = 0 * ce;
    const double C78237 = ce * de;
    const double C78236 = 0 * de;
    const double C78235 = 0 * de;
    const double C78234 = ce + de;
    const double C78233 = 0 * de;
    const double C78232 = xC - xD;
    const double C78293 = 0 * de;
    const double C78326 = 0 * de;
    const double C78325 = yC - yD;
    const double C78341 = 0 * de;
    const double C78340 = zC - zD;
    const double C78396 = 0 * ce;
    const double C78391 = 0 * de;
    const double C78390 = 0 * de;
    const double C78441 = 0 * de;
    const double C78487 = 0 * ce;
    const double C78482 = 0 * de;
    const double C78481 = 0 * de;
    const double C78532 = 0 * de;
    const double C78610 = yA - yB;
    const double C78617 = zA - zB;
    const double C78623 = p + q;
    const double C78622 = p * q;
    const double C78628 = xP - xQ;
    const double C78627 = bs[2];
    const double C78637 = ae * ce;
    const double C78633 = bs[3];
    const double C78646 = bs[4];
    const double C78667 = bs[5];
    const double C78709 = bs[6];
    const double C78770 = yP - yQ;
    const double C78828 = zP - zQ;
    const double C99 = bs[0];
    const double C80912 = ae * be;
    const double C80913 = 2 * C78214;
    const double C80911 = std::pow(C78213, 2);
    const double C78245 = C78238 / C78234;
    const double C78242 = C78236 / C78234;
    const double C78240 = 2 * C78234;
    const double C78239 = std::pow(C78234, 2);
    const double C78629 = C78234 * C78214;
    const double C78244 = C78237 * C78232;
    const double C78243 = C78232 * C78236;
    const double C78241 = C78232 * C78235;
    const double C80584 = C78232 * de;
    const double C80583 = C78232 * ce;
    const double C80582 = std::pow(C78232, 2);
    const double C78294 = C78293 / C78234;
    const double C78392 = C78326 / C78234;
    const double C78327 = C78237 * C78325;
    const double C78393 = C78325 * C78326;
    const double C80624 = std::pow(C78325, 2);
    const double C80678 = C78325 * de;
    const double C80676 = C78325 * ce;
    const double C78483 = C78341 / C78234;
    const double C78342 = C78237 * C78340;
    const double C78484 = C78340 * C78341;
    const double C80635 = std::pow(C78340, 2);
    const double C80718 = C78340 * de;
    const double C80716 = C78340 * ce;
    const double C78403 = C78396 / C78234;
    const double C78398 = C78325 * C78391;
    const double C78442 = C78441 / C78234;
    const double C78494 = C78487 / C78234;
    const double C78489 = C78340 * C78482;
    const double C78533 = C78532 / C78234;
    const double C80926 = std::pow(C78610, 2);
    const double C80927 = std::pow(C78617, 2);
    const double C78624 = 2 * C78622;
    const double C78638 = C78628 * ae;
    const double C78636 = std::pow(C78628, 2);
    const double C78634 = C78628 * ce;
    const double C78773 = C78628 * C78770;
    const double C78772 = C78770 * ce;
    const double C78888 = C78770 * C78628;
    const double C78887 = C78770 * ae;
    const double C78942 = std::pow(C78770, 2);
    const double C78831 = C78628 * C78828;
    const double C78830 = C78828 * ce;
    const double C78967 = C78770 * C78828;
    const double C78989 = C78828 * C78628;
    const double C78988 = C78828 * ae;
    const double C79043 = C78828 * C78770;
    const double C79064 = std::pow(C78828, 2);
    const double C80947 = std::pow(C80913, -1);
    const double C80946 = C80911 * C80912;
    const double C80596 = std::pow(C78240, -1);
    const double C80921 = std::pow(C78240, -2);
    const double C78246 = 2 * C78239;
    const double C80925 = C78239 * C78240;
    const double C80924 = 4 * C78239;
    const double C78248 = C78243 / C78234;
    const double C78247 = C78241 / C78234;
    const double C80914 = std::pow(C80583, 2);
    const double C80585 = C80582 * C78237;
    const double C78401 = C78393 / C78234;
    const double C80625 = C80624 * C78237;
    const double C80928 = std::pow(C80676, 2);
    const double C78492 = C78484 / C78234;
    const double C80636 = C80635 * C78237;
    const double C80930 = std::pow(C80716, 2);
    const double C78404 = C78398 / C78234;
    const double C78495 = C78489 / C78234;
    const double C80958 = C80926 * C80912;
    const double C80959 = C80927 * C80912;
    const double C78626 = C78624 / C78623;
    const double C117 =
        (-((std::pow(xP - xQ, 2) * bs[2] * std::pow(C78624 / C78623, 2) -
            (bs[1] * C78624) / C78623) *
           ae * ce) /
         C78234) /
        C78214;
    const double C100 = -(C78628 * bs[1] * C78624) / C78623;
    const double C748 = -(C78770 * bs[1] * C78624) / C78623;
    const double C1684 = -(C78828 * bs[1] * C78624) / C78623;
    const double C78641 = C78633 * C78638;
    const double C78652 = C78646 * C78638;
    const double C78676 = C78667 * C78638;
    const double C78724 = C78709 * C78638;
    const double C105 = (-(bs[1] * C78638 * C78624) / C78623) / C78214;
    const double C78648 = C78636 * C78646;
    const double C78671 = C78636 * C78667;
    const double C78718 = C78636 * C78709;
    const double C78640 = C78633 * C78634;
    const double C78649 = C78646 * C78634;
    const double C78672 = C78667 * C78634;
    const double C78720 = C78709 * C78634;
    const double C107 = (bs[1] * C78634 * C78624) / (C78623 * C78234);
    const double C78775 = C78773 * ae;
    const double C78774 = C78633 * C78772;
    const double C78780 = C78646 * C78772;
    const double C78787 = C78667 * C78772;
    const double C78803 = C78709 * C78772;
    const double C166 = (bs[1] * C78772 * C78624) / (C78623 * C78234);
    const double C78890 = C78888 * ae;
    const double C78889 = C78633 * C78887;
    const double C78895 = C78646 * C78887;
    const double C78902 = C78667 * C78887;
    const double C78918 = C78709 * C78887;
    const double C276 = (-(bs[1] * C78887 * C78624) / C78623) / C78214;
    const double C78944 = C78942 * C78646;
    const double C78949 = C78942 * C78667;
    const double C78954 = C78942 * C78709;
    const double C78833 = C78831 * ae;
    const double C78832 = C78633 * C78830;
    const double C78838 = C78646 * C78830;
    const double C78845 = C78667 * C78830;
    const double C78861 = C78709 * C78830;
    const double C221 = (bs[1] * C78830 * C78624) / (C78623 * C78234);
    const double C78968 = C78967 * ae;
    const double C78991 = C78989 * ae;
    const double C78990 = C78633 * C78988;
    const double C78996 = C78646 * C78988;
    const double C79003 = C78667 * C78988;
    const double C79019 = C78709 * C78988;
    const double C491 = (-(bs[1] * C78988 * C78624) / C78623) / C78214;
    const double C79044 = C79043 * ae;
    const double C79066 = C79064 * C78646;
    const double C79071 = C79064 * C78667;
    const double C79076 = C79064 * C78709;
    const double C80979 = C80946 / C78214;
    const double C78255 = C78236 / C78246;
    const double C78252 = C78235 / C78246;
    const double C78251 = C78233 / C78246;
    const double C78395 = C78326 / C78246;
    const double C78400 = C78391 / C78246;
    const double C78399 = C78390 / C78246;
    const double C78486 = C78341 / C78246;
    const double C78491 = C78482 / C78246;
    const double C78490 = C78481 / C78246;
    const double C80957 = 4 * C80925;
    const double C80956 = C78234 * C80924;
    const double C78253 = 0 - C78248;
    const double C78250 = 0 - C78247;
    const double C80586 = C80585 / C78234;
    const double C78405 = 0 - C78401;
    const double C80626 = C80625 / C78234;
    const double C78496 = 0 - C78492;
    const double C80637 = C80636 / C78234;
    const double C78408 = 0 - C78404;
    const double C78499 = 0 - C78495;
    const double C80985 = C80958 / C78214;
    const double C80986 = C80959 / C78214;
    const double C78630 = std::pow(C78626, 2);
    const double C78632 = -C78626;
    const double C78647 = std::pow(C78626, 4);
    const double C78710 = std::pow(C78626, 6);
    const double C78777 = C78775 * ce;
    const double C78892 = C78890 * ce;
    const double C78835 = C78833 * ce;
    const double C78969 = C78968 * ce;
    const double C78993 = C78991 * ce;
    const double C79045 = C79044 * ce;
    const double C80997 = -C80979;
    const double C78258 = C78253 * ce;
    const double C78257 = C78250 * ce;
    const double C80587 = -C80586;
    const double C78409 = C78405 * ce;
    const double C80627 = -C80626;
    const double C78500 = C78496 * ce;
    const double C80638 = -C80637;
    const double C78412 = C78408 * ce;
    const double C78503 = C78499 * ce;
    const double C81001 = -C80985;
    const double C81002 = -C80986;
    const double C78635 = C78627 * C78630;
    const double C118 =
        (-(C78630 * C78627 * C78628 * ae * ce) / C78234) / C78214 -
        (ae * C78630 * C78627 * C78628 * ce) / C78629 -
        (C78628 *
         (C78627 * C78630 +
          std::pow(C78628, 2) * bs[3] * std::pow(-C78626, 3)) *
         ae * ce) /
            C78629;
    const double C172 =
        (-(C78630 * C78627 * C78628 * (yP - yQ) * ae * ce) / C78234) / C78214;
    const double C227 =
        (-(C78630 * C78627 * C78628 * (zP - zQ) * ae * ce) / C78234) / C78214;
    const double C282 =
        (-(C78630 * C78627 * C78770 * C78628 * ae * ce) / C78234) / C78214;
    const double C354 =
        (-((std::pow(C78770, 2) * C78627 * C78630 - (bs[1] * C78624) / C78623) *
           C78637) /
         C78234) /
        C78214;
    const double C422 =
        (-(C78630 * C78627 * C78770 * C78828 * ae * ce) / C78234) / C78214;
    const double C497 =
        (-(C78630 * C78627 * C78828 * C78628 * ae * ce) / C78234) / C78214;
    const double C569 =
        (-(C78630 * C78627 * C78828 * C78770 * ae * ce) / C78234) / C78214;
    const double C637 =
        (-((std::pow(C78828, 2) * C78627 * C78630 - (bs[1] * C78624) / C78623) *
           C78637) /
         C78234) /
        C78214;
    const double C106 = (C78628 * C78630 * C78627 * C78638) / C78214 -
                        (ae * bs[1] * C78624) / (C78623 * C78214);
    const double C108 = (ce * bs[1] * C78624) / (C78623 * C78234) -
                        (C78628 * C78630 * C78627 * C78634) / C78234;
    const double C167 = -(C78628 * C78630 * C78627 * C78772) / C78234;
    const double C222 = -(C78628 * C78630 * C78627 * C78830) / C78234;
    const double C277 = (C78628 * C78630 * C78627 * C78887) / C78214;
    const double C492 = (C78628 * C78630 * C78627 * C78988) / C78214;
    const double C757 = -(C78770 * C78630 * C78627 * C78634) / C78234;
    const double C758 = (C78770 * C78630 * C78627 * C78638) / C78214;
    const double C856 = (ce * bs[1] * C78624) / (C78623 * C78234) -
                        (C78770 * C78630 * C78627 * C78772) / C78234;
    const double C946 = -(C78770 * C78630 * C78627 * C78830) / C78234;
    const double C1036 = (C78770 * C78630 * C78627 * C78887) / C78214 -
                         (ae * bs[1] * C78624) / (C78623 * C78214);
    const double C1358 = (C78770 * C78630 * C78627 * C78988) / C78214;
    const double C1693 = -(C78828 * C78630 * C78627 * C78634) / C78234;
    const double C1694 = (C78828 * C78630 * C78627 * C78638) / C78214;
    const double C1790 = -(C78828 * C78630 * C78627 * C78772) / C78234;
    const double C1882 = (ce * bs[1] * C78624) / (C78623 * C78234) -
                         (C78828 * C78630 * C78627 * C78830) / C78234;
    const double C1972 = (C78828 * C78630 * C78627 * C78887) / C78214;
    const double C2294 = (C78828 * C78630 * C78627 * C78988) / C78214 -
                         (ae * bs[1] * C78624) / (C78623 * C78214);
    const double C78639 = std::pow(C78632, 3);
    const double C78668 = std::pow(C78632, 5);
    const double C78656 = C78647 * C78652;
    const double C78655 = C78647 * C78649;
    const double C78654 = C78648 * C78647;
    const double C78666 = C78646 * C78647;
    const double C78782 = C78647 * C78780;
    const double C78840 = C78647 * C78838;
    const double C78897 = C78647 * C78895;
    const double C78945 = C78944 * C78647;
    const double C78998 = C78647 * C78996;
    const double C79067 = C79066 * C78647;
    const double C78732 = C78710 * C78724;
    const double C78729 = C78710 * C78720;
    const double C78728 = C78718 * C78710;
    const double C78808 = C78710 * C78803;
    const double C78866 = C78710 * C78861;
    const double C78923 = C78710 * C78918;
    const double C78956 = C78954 * C78710;
    const double C79024 = C78710 * C79019;
    const double C79078 = C79076 * C78710;
    const double C78779 = C78646 * C78777;
    const double C78785 = C78667 * C78777;
    const double C78801 = C78709 * C78777;
    const double C78894 = C78646 * C78892;
    const double C78900 = C78667 * C78892;
    const double C78916 = C78709 * C78892;
    const double C78837 = C78646 * C78835;
    const double C78843 = C78667 * C78835;
    const double C78859 = C78709 * C78835;
    const double C78971 = C78646 * C78969;
    const double C78974 = C78667 * C78969;
    const double C78977 = C78709 * C78969;
    const double C78995 = C78646 * C78993;
    const double C79001 = C78667 * C78993;
    const double C79017 = C78709 * C78993;
    const double C79047 = C78646 * C79045;
    const double C79050 = C78667 * C79045;
    const double C79053 = C78709 * C79045;
    const double C81009 = std::exp(C80997);
    const double C78262 = C78258 / C78234;
    const double C78261 = C78257 / C78234;
    const double C80588 = std::exp(C80587);
    const double C78413 = C78409 / C78234;
    const double C80628 = std::exp(C80627);
    const double C78504 = C78500 / C78234;
    const double C80639 = std::exp(C80638);
    const double C78416 = C78412 / C78234;
    const double C78507 = C78503 / C78234;
    const double C81011 = std::exp(C81001);
    const double C81012 = std::exp(C81002);
    const double C101 = C78635 * C78636 - (bs[1] * C78624) / C78623;
    const double C746 = C78770 * C78628 * C78635;
    const double C750 = C78635 * C78942 - (bs[1] * C78624) / C78623;
    const double C1682 = C78828 * C78628 * C78635;
    const double C1686 = C78635 * C79064 - (bs[1] * C78624) / C78623;
    const double C3979 = C78828 * C78770 * C78635;
    const double C78643 = C78639 * C78641;
    const double C78642 = C78639 * C78640;
    const double C78645 = C78633 * C78639;
    const double C78776 = C78639 * C78774;
    const double C78834 = C78639 * C78832;
    const double C78891 = C78639 * C78889;
    const double C78992 = C78639 * C78990;
    const double C173 =
        (-(C78628 * C78639 * C78633 * C78628 * C78770 * ae * ce) / C78234) /
            C78214 -
        (ae * C78630 * C78627 * C78770 * ce) / C78629;
    const double C228 =
        (-(C78628 * C78639 * C78633 * C78628 * C78828 * ae * ce) / C78234) /
            C78214 -
        (ae * C78630 * C78627 * C78828 * ce) / C78629;
    const double C283 =
        (-(C78628 * C78639 * C78633 * C78770 * C78628 * ae * ce) / C78234) /
            C78214 -
        (C78630 * C78627 * C78770 * ae * ce) / C78629;
    const double C355 =
        (-(C78628 * (C78635 + std::pow(C78770, 2) * C78633 * C78639) * C78637) /
         C78234) /
        C78214;
    const double C423 =
        (-(C78628 * C78639 * C78633 * C78770 * C78828 * ae * ce) / C78234) /
        C78214;
    const double C424 =
        (-(C78647 * C78646 * C78969 * C78636) / C78234) / C78214 -
        (C78639 * C78633 * C78969) / C78629;
    const double C498 =
        (-(C78628 * C78639 * C78633 * C78828 * C78628 * ae * ce) / C78234) /
            C78214 -
        (C78630 * C78627 * C78828 * ae * ce) / C78629;
    const double C570 =
        (-(C78628 * C78639 * C78633 * C78828 * C78770 * ae * ce) / C78234) /
        C78214;
    const double C571 =
        (-(C78647 * C78646 * C79045 * C78636) / C78234) / C78214 -
        (C78639 * C78633 * C79045) / C78629;
    const double C638 =
        (-(C78628 * (C78635 + std::pow(C78828, 2) * C78633 * C78639) * C78637) /
         C78234) /
        C78214;
    const double C771 =
        (-(C78770 * (C78635 + C78636 * C78633 * C78639) * C78637) / C78234) /
        C78214;
    const double C864 =
        (-(C78770 * C78639 * C78633 * C78777) / C78234) / C78214 -
        (C78630 * C78627 * C78638 * ce) / C78629;
    const double C954 =
        (-(C78770 * C78639 * C78633 * C78835) / C78234) / C78214;
    const double C1043 =
        (-(C78770 * C78639 * C78633 * C78892) / C78234) / C78214 -
        (ae * C78630 * C78627 * C78634) / C78629;
    const double C1149 =
        (-(C78630 * C78627 * C78887 * ce) / C78234) / C78214 -
        (ae * C78630 * C78627 * C78772) / C78629 -
        (C78770 * (C78635 + C78942 * C78633 * C78639) * C78637) / C78629;
    const double C1256 =
        (-(C78770 * C78639 * C78633 * C78969) / C78234) / C78214 -
        (ae * C78630 * C78627 * C78830) / C78629;
    const double C1365 =
        (-(C78770 * C78639 * C78633 * C78993) / C78234) / C78214;
    const double C1471 =
        (-(C78770 * C78639 * C78633 * C79045) / C78234) / C78214 -
        (C78630 * C78627 * C78988 * ce) / C78629;
    const double C1578 =
        (-(C78770 * (C78635 + C79064 * C78633 * C78639) * C78637) / C78234) /
        C78214;
    const double C1707 =
        (-(C78828 * (C78635 + C78636 * C78633 * C78639) * C78637) / C78234) /
        C78214;
    const double C1798 =
        (-(C78828 * C78639 * C78633 * C78777) / C78234) / C78214;
    const double C1890 =
        (-(C78828 * C78639 * C78633 * C78835) / C78234) / C78214 -
        (C78630 * C78627 * C78638 * ce) / C78629;
    const double C1979 =
        (-(C78828 * C78639 * C78633 * C78892) / C78234) / C78214;
    const double C2087 =
        (-(C78828 * (C78635 + C78942 * C78633 * C78639) * C78637) / C78234) /
        C78214;
    const double C2187 =
        (-(C78828 * C78639 * C78633 * C78969) / C78234) / C78214 -
        (C78630 * C78627 * C78887 * ce) / C78629;
    const double C2301 =
        (-(C78828 * C78639 * C78633 * C78993) / C78234) / C78214 -
        (ae * C78630 * C78627 * C78634) / C78629;
    const double C2409 =
        (-(C78828 * C78639 * C78633 * C79045) / C78234) / C78214 -
        (ae * C78630 * C78627 * C78772) / C78629;
    const double C2509 =
        (-(C78630 * C78627 * C78988 * ce) / C78234) / C78214 -
        (ae * C78630 * C78627 * C78830) / C78629 -
        (C78828 * (C78635 + C79064 * C78633 * C78639) * C78637) / C78629;
    const double C78683 = C78668 * C78676;
    const double C78680 = C78668 * C78672;
    const double C78679 = C78671 * C78668;
    const double C78708 = C78667 * C78668;
    const double C78790 = C78668 * C78787;
    const double C78848 = C78668 * C78845;
    const double C78905 = C78668 * C78902;
    const double C78950 = C78949 * C78668;
    const double C79006 = C78668 * C79003;
    const double C79072 = C79071 * C78668;
    const double C78659 = C78628 * C78656;
    const double C78664 = C78656 * ce;
    const double C79330 = C78770 * C78656;
    const double C79606 = C78828 * C78656;
    const double C78658 = C78628 * C78655;
    const double C78665 = ae * C78655;
    const double C79352 = C78770 * C78655;
    const double C79641 = C78828 * C78655;
    const double C78677 = C78666 * ae;
    const double C78675 = C78666 * C78636;
    const double C78674 = C78628 * C78666;
    const double C78673 = C78666 * ce;
    const double C79378 = C78666 * C78942;
    const double C79377 = C78770 * C78666;
    const double C79686 = C78666 * C79064;
    const double C79685 = C78828 * C78666;
    const double C78786 = ae * C78782;
    const double C78784 = C78628 * C78782;
    const double C79368 = C78770 * C78782;
    const double C79658 = C78828 * C78782;
    const double C78844 = ae * C78840;
    const double C78842 = C78628 * C78840;
    const double C79431 = C78770 * C78840;
    const double C79676 = C78828 * C78840;
    const double C78901 = C78897 * ce;
    const double C78899 = C78628 * C78897;
    const double C79370 = C78770 * C78897;
    const double C79630 = C78828 * C78897;
    const double C79002 = C78998 * ce;
    const double C79000 = C78628 * C78998;
    const double C79457 = C78770 * C78998;
    const double C79678 = C78828 * C78998;
    const double C78740 = C78628 * C78732;
    const double C79803 = C78732 * C78942;
    const double C80002 = C78770 * C78732;
    const double C80084 = C78732 * C79064;
    const double C78737 = C78628 * C78729;
    const double C79823 = C78729 * C78942;
    const double C80020 = C78770 * C78729;
    const double C80104 = C78729 * C79064;
    const double C78812 = C78808 * C78636;
    const double C79406 = C78628 * C78808;
    const double C79844 = C78770 * C78808;
    const double C80123 = C78808 * C79064;
    const double C78870 = C78866 * C78636;
    const double C79443 = C78628 * C78866;
    const double C79891 = C78866 * C78942;
    const double C80038 = C78770 * C78866;
    const double C80144 = C78828 * C78866;
    const double C78926 = C78923 * C78636;
    const double C79409 = C78628 * C78923;
    const double C79849 = C78770 * C78923;
    const double C80014 = C78923 * C79064;
    const double C79027 = C79024 * C78636;
    const double C79471 = C78628 * C79024;
    const double C79917 = C79024 * C78942;
    const double C80041 = C78770 * C79024;
    const double C80150 = C78828 * C79024;
    const double C78781 = C78647 * C78779;
    const double C78788 = C78668 * C78785;
    const double C78805 = C78710 * C78801;
    const double C78896 = C78647 * C78894;
    const double C78903 = C78668 * C78900;
    const double C78920 = C78710 * C78916;
    const double C78839 = C78647 * C78837;
    const double C78846 = C78668 * C78843;
    const double C78863 = C78710 * C78859;
    const double C78972 = C78647 * C78971;
    const double C78975 = C78668 * C78974;
    const double C78979 = C78710 * C78977;
    const double C78997 = C78647 * C78995;
    const double C79004 = C78668 * C79001;
    const double C79021 = C78710 * C79017;
    const double C79048 = C78647 * C79047;
    const double C79051 = C78668 * C79050;
    const double C79055 = C78710 * C79053;
    const double C27341 = C81009 * C758;
    const double C53789 = C81009 * C1694;
    const double C92 =
        ((C81009 - (C78213 * 2 * ae * be * C78213 * C81009) / C78214) * ae) /
            C78214 -
        (0 * be) / (2 * std::pow(C78214, 2));
    const double C93 =
        (0 * ae) / C78214 - (ae * be * C78213 * C81009) / std::pow(C78214, 2);
    const double C26926 = -(2 * ae * be * C78213 * C81009) / C78214;
    const double C81 = (C81009 * C78213 * ae) / C78214;
    const double C82 = C80947 * C81009;
    const double C78266 = C78262 - C78252;
    const double C78265 = C78261 - C78251;
    const double C78249 = C78244 * C80588;
    const double C80590 = C80588 * C80583;
    const double C80589 = C80588 / C78240;
    const double C80598 = C80596 * C80588;
    const double C80917 = C80588 * C80584;
    const double C80954 = C80921 * C80588;
    const double C80948 = C80588 * C80914;
    const double C78417 = C78413 - C78400;
    const double C78328 = C78327 * C80628;
    const double C165 = -(2 * C78237 * (yC - yD) * C80628) / C78234;
    const double C80677 = C80628 / C78240;
    const double C80679 = C80628 * C80676;
    const double C80686 = C80596 * C80628;
    const double C80934 = C80628 * C80678;
    const double C80962 = C80921 * C80628;
    const double C80960 = C80628 * C80928;
    const double C78508 = C78504 - C78491;
    const double C78343 = C78342 * C80639;
    const double C220 = -(2 * C78237 * (zC - zD) * C80639) / C78234;
    const double C80717 = C80639 / C78240;
    const double C80719 = C80639 * C80716;
    const double C80726 = C80596 * C80639;
    const double C80940 = C80639 * C80718;
    const double C80965 = C80921 * C80639;
    const double C80963 = C80639 * C80930;
    const double C78420 = C78416 - C78399;
    const double C78511 = C78507 - C78490;
    const double C290 = C81011 * C277;
    const double C54107 = C81011 * C1972;
    const double C275 = -(2 * ae * be * (yA - yB) * C81011) / C78214;
    const double C27053 =
        ((C81011 - (C78610 * 2 * ae * be * C78610 * C81011) / C78214) * ae) /
            C78214 -
        (0 * be) / (2 * std::pow(C78214, 2));
    const double C27054 =
        (0 * ae) / C78214 - (ae * be * C78610 * C81011) / std::pow(C78214, 2);
    const double C26924 = (C81011 * C78610 * ae) / C78214;
    const double C26925 = C80947 * C81011;
    const double C505 = C81012 * C492;
    const double C27881 = C81012 * C1358;
    const double C490 = -(2 * ae * be * (zA - zB) * C81012) / C78214;
    const double C52961 =
        ((C81012 - (C78617 * 2 * ae * be * C78617 * C81012) / C78214) * ae) /
            C78214 -
        (0 * be) / (2 * std::pow(C78214, 2));
    const double C52962 =
        (0 * ae) / C78214 - (ae * be * C78617 * C81012) / std::pow(C78214, 2);
    const double C52707 = (C81012 * C78617 * ae) / C78214;
    const double C52708 = C80947 * C81012;
    const double C109 =
        (C78630 * C78627 * C78638 + C78628 * (C78628 * C78643 + C78635 * ae) +
         C78628 * C78635 * ae) /
        C78214;
    const double C754 = (C78770 * (C78628 * C78643 + C78635 * ae)) / C78214;
    const double C762 = (C78630 * C78627 * C78638 + C78643 * C78942) / C78214;
    const double C1690 = (C78828 * (C78628 * C78643 + C78635 * ae)) / C78214;
    const double C1698 = (C78630 * C78627 * C78638 + C78643 * C79064) / C78214;
    const double C3983 = (C78828 * C78770 * C78643) / C78214;
    const double C5665 =
        (2 * C78770 * C78643 + C78770 * (C78643 + C78656 * C78942)) / C78214;
    const double C6150 = (C78828 * (C78643 + C78656 * C78942)) / C78214;
    const double C10475 =
        (2 * C78828 * C78643 + C78828 * (C78643 + C78656 * C79064)) / C78214;
    const double C119 =
        (-(ae * (C78628 * C78642 + C78635 * ce)) / C78234) / C78214 -
        ((C78635 + C78636 * C78633 * C78639) * C78637) / C78629 -
        ((C78628 * C78643 + C78635 * ae) * ce) / C78629 +
        C78628 * ((-(C78643 * ce) / C78234) / C78214 - (ae * C78642) / C78629 -
                  (C78628 *
                   (C78633 * C78639 + C78636 * bs[4] * std::pow(C78626, 4)) *
                   C78637) /
                      C78629);
    const double C110 = -(C78628 * (C78628 * C78642 + C78635 * ce) +
                          C78630 * C78627 * C78634 + C78628 * C78635 * ce) /
                        C78234;
    const double C756 = -(C78770 * (C78628 * C78642 + C78635 * ce)) / C78234;
    const double C764 = -(C78642 * C78942 + C78630 * C78627 * C78634) / C78234;
    const double C1692 = -(C78828 * (C78628 * C78642 + C78635 * ce)) / C78234;
    const double C1700 = -(C78642 * C79064 + C78630 * C78627 * C78634) / C78234;
    const double C3985 = -(C78828 * C78770 * C78642) / C78234;
    const double C5663 = (-2 * C78770 * C78642) / C78234 -
                         (C78770 * (C78655 * C78942 + C78642)) / C78234;
    const double C6148 = -(C78828 * (C78655 * C78942 + C78642)) / C78234;
    const double C10473 = (-2 * C78828 * C78642) / C78234 -
                          (C78828 * (C78655 * C79064 + C78642)) / C78234;
    const double C78653 = C78645 * ae;
    const double C78651 = C78628 * C78645;
    const double C78650 = C78645 * ce;
    const double C78657 = C78645 + C78654;
    const double C78946 = C78645 + C78945;
    const double C79068 = C78645 + C79067;
    const double C79369 = C78770 * C78645;
    const double C79677 = C78828 * C78645;
    const double C356 =
        (-((C78645 + C78942 * C78646 * C78647) * C78637 * C78636) / C78234) /
            C78214 -
        ((C78635 + C78942 * C78633 * C78639) * C78637) / C78629;
    const double C639 =
        (-((C78645 + C79064 * C78646 * C78647) * C78637 * C78636) / C78234) /
            C78214 -
        ((C78635 + C79064 * C78633 * C78639) * C78637) / C78629;
    const double C102 =
        2 * C78628 * C78635 + C78628 * (C78635 + C78645 * C78636);
    const double C747 = C78770 * (C78635 + C78645 * C78636);
    const double C1683 = C78828 * (C78635 + C78645 * C78636);
    const double C5659 =
        2 * C78770 * C78635 + C78770 * (C78635 + C78645 * C78942);
    const double C6140 = C78828 * (C78635 + C78645 * C78942);
    const double C10469 =
        2 * C78828 * C78635 + C78828 * (C78635 + C78645 * C79064);
    const double C174 =
        (-(ae * C78628 * C78776) / C78234) / C78214 -
        (C78639 * C78633 * C78777) / C78629 +
        C78628 * ((-(C78628 * C78647 * C78646 * C78777) / C78234) / C78214 -
                  (ae * C78776) / C78629);
    const double C168 = -(C78776 * C78636 + C78630 * C78627 * C78772) / C78234;
    const double C169 = (-2 * C78628 * C78776) / C78234 -
                        (C78628 * (C78782 * C78636 + C78776)) / C78234;
    const double C855 =
        -(C78770 * C78628 * C78776 + C78628 * C78635 * ce) / C78234;
    const double C857 = -(C78770 * (C78770 * C78776 + C78635 * ce) +
                          C78630 * C78627 * C78772 + C78770 * C78635 * ce) /
                        C78234;
    const double C859 = -(C78770 * (C78782 * C78636 + C78776) +
                          (C78635 + C78645 * C78636) * ce) /
                        C78234;
    const double C1788 = -(C78828 * C78628 * C78776) / C78234;
    const double C1789 = -(C78828 * (C78782 * C78636 + C78776)) / C78234;
    const double C1792 = -(C78776 * C79064 + C78630 * C78627 * C78772) / C78234;
    const double C4093 = -(C78828 * (C78770 * C78776 + C78635 * ce)) / C78234;
    const double C10527 = (-2 * C78828 * C78776) / C78234 -
                          (C78828 * (C78782 * C79064 + C78776)) / C78234;
    const double C229 =
        (-(ae * C78628 * C78834) / C78234) / C78214 -
        (C78639 * C78633 * C78835) / C78629 +
        C78628 * ((-(C78628 * C78647 * C78646 * C78835) / C78234) / C78214 -
                  (ae * C78834) / C78629);
    const double C223 = -(C78834 * C78636 + C78630 * C78627 * C78830) / C78234;
    const double C224 = (-2 * C78628 * C78834) / C78234 -
                        (C78628 * (C78840 * C78636 + C78834)) / C78234;
    const double C945 = -(C78770 * C78628 * C78834) / C78234;
    const double C947 = -(C78834 * C78942 + C78630 * C78627 * C78830) / C78234;
    const double C949 = -(C78770 * (C78840 * C78636 + C78834)) / C78234;
    const double C1881 =
        -(C78828 * C78628 * C78834 + C78628 * C78635 * ce) / C78234;
    const double C1883 = -(C78828 * (C78828 * C78834 + C78635 * ce) +
                           C78630 * C78627 * C78830 + C78828 * C78635 * ce) /
                         C78234;
    const double C1885 = -(C78828 * (C78840 * C78636 + C78834) +
                           (C78635 + C78645 * C78636) * ce) /
                         C78234;
    const double C4199 =
        -(C78828 * C78770 * C78834 + C78770 * C78635 * ce) / C78234;
    const double C5772 = (-2 * C78770 * C78834) / C78234 -
                         (C78770 * (C78840 * C78942 + C78834)) / C78234;
    const double C6324 = -(C78828 * (C78840 * C78942 + C78834) +
                           (C78635 + C78645 * C78942) * ce) /
                         C78234;
    const double C284 =
        (-(C78628 * C78891 * ce) / C78234) / C78214 -
        (C78639 * C78633 * C78892) / C78629 +
        C78628 * ((-(C78628 * C78647 * C78646 * C78892) / C78234) / C78214 -
                  (C78891 * ce) / C78629);
    const double C278 = (C78630 * C78627 * C78887 + C78891 * C78636) / C78214;
    const double C279 =
        (2 * C78628 * C78891 + C78628 * (C78891 + C78897 * C78636)) / C78214;
    const double C1035 =
        (C78770 * C78628 * C78891 + C78628 * C78635 * ae) / C78214;
    const double C1037 = (C78770 * (C78891 + C78897 * C78636) +
                          (C78635 + C78645 * C78636) * ae) /
                         C78214;
    const double C1039 =
        (C78630 * C78627 * C78887 + C78770 * (C78770 * C78891 + C78635 * ae) +
         C78770 * C78635 * ae) /
        C78214;
    const double C1971 = (C78828 * C78628 * C78891) / C78214;
    const double C1973 = (C78828 * (C78891 + C78897 * C78636)) / C78214;
    const double C1975 = (C78630 * C78627 * C78887 + C78891 * C79064) / C78214;
    const double C4305 = (C78828 * (C78770 * C78891 + C78635 * ae)) / C78214;
    const double C10632 =
        (2 * C78828 * C78891 + C78828 * (C78891 + C78897 * C79064)) / C78214;
    const double C499 =
        (-(C78628 * C78992 * ce) / C78234) / C78214 -
        (C78639 * C78633 * C78993) / C78629 +
        C78628 * ((-(C78628 * C78647 * C78646 * C78993) / C78234) / C78214 -
                  (C78992 * ce) / C78629);
    const double C493 = (C78630 * C78627 * C78988 + C78992 * C78636) / C78214;
    const double C494 =
        (2 * C78628 * C78992 + C78628 * (C78992 + C78998 * C78636)) / C78214;
    const double C1357 = (C78770 * C78628 * C78992) / C78214;
    const double C1359 = (C78770 * (C78992 + C78998 * C78636)) / C78214;
    const double C1361 = (C78630 * C78627 * C78988 + C78992 * C78942) / C78214;
    const double C2293 =
        (C78828 * C78628 * C78992 + C78628 * C78635 * ae) / C78214;
    const double C2295 = (C78828 * (C78992 + C78998 * C78636) +
                          (C78635 + C78645 * C78636) * ae) /
                         C78214;
    const double C2297 =
        (C78630 * C78627 * C78988 + C78828 * (C78828 * C78992 + C78635 * ae) +
         C78828 * C78635 * ae) /
        C78214;
    const double C4655 =
        (C78828 * C78770 * C78992 + C78770 * C78635 * ae) / C78214;
    const double C5964 =
        (2 * C78770 * C78992 + C78770 * (C78992 + C78998 * C78942)) / C78214;
    const double C6656 = (C78828 * (C78992 + C78998 * C78942) +
                          (C78635 + C78645 * C78942) * ae) /
                         C78214;
    const double C292 = C81011 * C283;
    const double C363 = C81011 * C355;
    const double C431 = C81011 * C423;
    const double C433 = C81011 * C424;
    const double C507 = C81012 * C498;
    const double C578 = C81012 * C570;
    const double C580 = C81012 * C571;
    const double C646 = C81012 * C638;
    const double C27343 = C81009 * C771;
    const double C27463 = C81009 * C864;
    const double C27556 = C81009 * C954;
    const double C27883 = C81012 * C1365;
    const double C27979 = C81012 * C1471;
    const double C28060 = C81012 * C1578;
    const double C53791 = C81009 * C1707;
    const double C53912 = C81009 * C1798;
    const double C54015 = C81009 * C1890;
    const double C54109 = C81011 * C1979;
    const double C54206 = C81011 * C2087;
    const double C54289 = C81011 * C2187;
    const double C78688 = C78628 * C78683;
    const double C78706 = C78683 * ce;
    const double C79243 = C78770 * C78683;
    const double C79265 = C78828 * C78683;
    const double C79333 = C78683 * C78942;
    const double C79608 = C78683 * C79064;
    const double C78687 = C78628 * C78680;
    const double C78707 = ae * C78680;
    const double C79244 = C78770 * C78680;
    const double C79266 = C78828 * C78680;
    const double C79354 = C78680 * C78942;
    const double C79643 = C78680 * C79064;
    const double C78686 = C78666 + C78679;
    const double C78725 = C78708 * ae;
    const double C78723 = C78708 * C78636;
    const double C78722 = C78628 * C78708;
    const double C78721 = C78708 * ce;
    const double C78736 = C78708 + C78728;
    const double C78957 = C78708 + C78956;
    const double C79079 = C78708 + C79078;
    const double C79846 = C78708 * C78942;
    const double C79845 = C78770 * C78708;
    const double C80013 = C78708 * C79064;
    const double C80145 = C78828 * C78708;
    const double C78792 = C78790 * C78636;
    const double C78802 = ae * C78790;
    const double C78799 = C78628 * C78790;
    const double C79376 = C78770 * C78790;
    const double C79660 = C78790 * C79064;
    const double C79980 = C78828 * C78790;
    const double C78850 = C78848 * C78636;
    const double C78860 = ae * C78848;
    const double C78857 = C78628 * C78848;
    const double C79433 = C78848 * C78942;
    const double C79684 = C78828 * C78848;
    const double C79781 = C78770 * C78848;
    const double C78907 = C78905 * C78636;
    const double C78917 = C78905 * ce;
    const double C78914 = C78628 * C78905;
    const double C79379 = C78770 * C78905;
    const double C79631 = C78905 * C79064;
    const double C79953 = C78828 * C78905;
    const double C78951 = C78666 + C78950;
    const double C79008 = C79006 * C78636;
    const double C79018 = C79006 * ce;
    const double C79015 = C78628 * C79006;
    const double C79459 = C79006 * C78942;
    const double C79687 = C78828 * C79006;
    const double C79783 = C78770 * C79006;
    const double C79073 = C78666 + C79072;
    const double C78669 = C78664 / C78234;
    const double C79332 = C78664 / C78629;
    const double C6146 = (C78770 * C78643 + C79330 * C79064) / C78214;
    const double C78670 = C78665 / C78629;
    const double C6144 = -(C79352 * C79064 + C78770 * C78642) / C78234;
    const double C78682 = C78645 + C78675;
    const double C78684 = C78674 * ae;
    const double C78681 = C78674 * ce;
    const double C78712 = 2 * C78674;
    const double C79399 = C78770 * C78674;
    const double C79706 = C78828 * C78674;
    const double C79384 = C78645 + C79378;
    const double C79386 = C79377 * ae;
    const double C79383 = C79377 * ce;
    const double C79782 = C78828 * C79377;
    const double C79847 = 2 * C79377;
    const double C79692 = C78645 + C79686;
    const double C79694 = C79685 * ae;
    const double C79691 = C79685 * ce;
    const double C80147 = 2 * C79685;
    const double C78789 = C78786 / C78629;
    const double C1793 = -(C78784 * C79064 + C78628 * C78776) / C78234;
    const double C78847 = C78844 / C78629;
    const double C948 = -(C78842 * C78942 + C78628 * C78834) / C78234;
    const double C78904 = C78901 / C78629;
    const double C79374 = C78901 / C78234;
    const double C1976 = (C78628 * C78891 + C78899 * C79064) / C78214;
    const double C79005 = C79002 / C78629;
    const double C79682 = C79002 / C78234;
    const double C1362 = (C78628 * C78992 + C79000 * C78942) / C78214;
    const double C79805 = C78683 + C79803;
    const double C80004 = C80002 * C79064;
    const double C80086 = C78683 + C80084;
    const double C79827 = C79823 + C78680;
    const double C80022 = C80020 * C79064;
    const double C80108 = C80104 + C78680;
    const double C78815 = C78812 + C78790;
    const double C79412 = C78770 * C79406;
    const double C79669 = C79406 * C79064;
    const double C80127 = C80123 + C78790;
    const double C78873 = C78870 + C78848;
    const double C79445 = C79443 * C78942;
    const double C79713 = C78828 * C79443;
    const double C79790 = C78770 * C79443;
    const double C79895 = C79891 + C78848;
    const double C80044 = C78828 * C80038;
    const double C78929 = C78905 + C78926;
    const double C79415 = C78770 * C79409;
    const double C79636 = C79409 * C79064;
    const double C80016 = C78905 + C80014;
    const double C79030 = C79006 + C79027;
    const double C79473 = C79471 * C78942;
    const double C79716 = C78828 * C79471;
    const double C79792 = C78770 * C79471;
    const double C79920 = C79006 + C79917;
    const double C80047 = C78828 * C80041;
    const double C175 =
        2 * ((-(C78628 * C78781) / C78234) / C78214 - (ae * C78776) / C78629) -
        (ae * (C78782 * C78636 + C78776)) / C78629 +
        C78628 *
            ((-(ae * C78628 * C78782) / C78234) / C78214 - C78781 / C78629 +
             C78628 *
                 ((-(C78628 * C78668 * C78667 * C78777) / C78234) / C78214 -
                  (ae * C78782) / C78629));
    const double C863 = C78770 * ((-(C78628 * C78781) / C78234) / C78214 -
                                  (ae * C78776) / C78629) -
                        ((C78628 * C78643 + C78635 * ae) * ce) / C78629;
    const double C865 = (-(C78770 * C78643 * ce) / C78234) / C78214 -
                        (C78639 * C78633 * C78777) / C78629 +
                        C78770 * ((-(C78770 * C78781) / C78234) / C78214 -
                                  (C78643 * ce) / C78629);
    const double C1796 = C78828 * ((-(C78628 * C78781) / C78234) / C78214 -
                                   (ae * C78776) / C78629);
    const double C1800 = (-(C78781 * C79064) / C78234) / C78214 -
                         (C78639 * C78633 * C78777) / C78629;
    const double C4097 = C78828 * ((-(C78770 * C78781) / C78234) / C78214 -
                                   (C78643 * ce) / C78629);
    const double C78791 = C78628 * C78788;
    const double C78800 = C78788 / C78629;
    const double C79331 = C78770 * C78788;
    const double C5726 =
        2 * ((-(C78770 * C78781) / C78234) / C78214 - (C78643 * ce) / C78629) -
        ((C78643 + C78656 * C78942) * ce) / C78629 +
        C78770 *
            ((-(C78770 * C78656 * ce) / C78234) / C78214 - C78781 / C78629 +
             C78770 *
                 ((-(C78770 * C78788) / C78234) / C78214 - C78664 / C78629));
    const double C10531 =
        (-2 * C78828 * C78781) / C78629 +
        C78828 * ((-(C78788 * C79064) / C78234) / C78214 - C78781 / C78629);
    const double C78810 = C78628 * C78805;
    const double C79800 = C78770 * C78805;
    const double C80075 = C78805 * C79064;
    const double C285 =
        2 * ((-(C78628 * C78896) / C78234) / C78214 - (C78891 * ce) / C78629) -
        ((C78891 + C78897 * C78636) * ce) / C78629 +
        C78628 *
            ((-(C78628 * C78897 * ce) / C78234) / C78214 - C78896 / C78629 +
             C78628 *
                 ((-(C78628 * C78668 * C78667 * C78892) / C78234) / C78214 -
                  (C78897 * ce) / C78629));
    const double C1044 = C78770 * ((-(C78628 * C78896) / C78234) / C78214 -
                                   (C78891 * ce) / C78629) -
                         (ae * (C78628 * C78642 + C78635 * ce)) / C78629;
    const double C1047 = (-(ae * C78770 * C78642) / C78234) / C78214 -
                         (C78639 * C78633 * C78892) / C78629 +
                         C78770 * ((-(C78770 * C78896) / C78234) / C78214 -
                                   (ae * C78642) / C78629);
    const double C1980 = C78828 * ((-(C78628 * C78896) / C78234) / C78214 -
                                   (C78891 * ce) / C78629);
    const double C1983 = (-(C78896 * C79064) / C78234) / C78214 -
                         (C78639 * C78633 * C78892) / C78629;
    const double C4309 = (-(C78770 * C78828 * C78896) / C78234) / C78214 -
                         (ae * C78828 * C78642) / C78629;
    const double C78906 = C78628 * C78903;
    const double C78915 = C78903 / C78629;
    const double C79353 = C78770 * C78903;
    const double C79569 = C78828 * C78903;
    const double C6414 =
        C78770 * ((-(C78903 * C79064) / C78234) / C78214 - C78896 / C78629) -
        (ae * (C78655 * C79064 + C78642)) / C78629;
    const double C6416 =
        (-(ae * C78828 * C79352) / C78234) / C78214 -
        (C78828 * C78896) / C78629 +
        C78770 * ((-(C78770 * C78828 * C78903) / C78234) / C78214 -
                  (ae * C78828 * C78655) / C78629);
    const double C10636 =
        (-2 * C78828 * C78896) / C78629 +
        C78828 * ((-(C78903 * C79064) / C78234) / C78214 - C78896 / C78629);
    const double C78925 = C78628 * C78920;
    const double C79821 = C78770 * C78920;
    const double C79941 = C78920 * C79064;
    const double C79973 = C78828 * C78920;
    const double C230 =
        2 * ((-(C78628 * C78839) / C78234) / C78214 - (ae * C78834) / C78629) -
        (ae * (C78840 * C78636 + C78834)) / C78629 +
        C78628 *
            ((-(ae * C78628 * C78840) / C78234) / C78214 - C78839 / C78629 +
             C78628 *
                 ((-(C78628 * C78668 * C78667 * C78835) / C78234) / C78214 -
                  (ae * C78840) / C78629));
    const double C953 = C78770 * ((-(C78628 * C78839) / C78234) / C78214 -
                                  (ae * C78834) / C78629);
    const double C955 = (-(C78839 * C78942) / C78234) / C78214 -
                        (C78639 * C78633 * C78835) / C78629;
    const double C1889 = C78828 * ((-(C78628 * C78839) / C78234) / C78214 -
                                   (ae * C78834) / C78629) -
                         ((C78628 * C78643 + C78635 * ae) * ce) / C78629;
    const double C1891 = (-(C78828 * C78643 * ce) / C78234) / C78214 -
                         (C78639 * C78633 * C78835) / C78629 +
                         C78828 * ((-(C78828 * C78839) / C78234) / C78214 -
                                   (C78643 * ce) / C78629);
    const double C4203 = (-(C78828 * C78770 * C78839) / C78234) / C78214 -
                         (C78770 * C78643 * ce) / C78629;
    const double C78849 = C78628 * C78846;
    const double C78858 = C78846 / C78629;
    const double C79607 = C78828 * C78846;
    const double C79762 = C78770 * C78846;
    const double C5776 =
        (-2 * C78770 * C78839) / C78629 +
        C78770 * ((-(C78846 * C78942) / C78234) / C78214 - C78839 / C78629);
    const double C6328 =
        (-(C78828 * C79330 * ce) / C78234) / C78214 -
        (C78770 * C78839) / C78629 +
        C78828 * ((-(C78828 * C78770 * C78846) / C78234) / C78214 -
                  (C79330 * ce) / C78629);
    const double C6330 =
        C78828 * ((-(C78846 * C78942) / C78234) / C78214 - C78839 / C78629) -
        ((C78643 + C78656 * C78942) * ce) / C78629;
    const double C78868 = C78628 * C78863;
    const double C79814 = C78863 * C78942;
    const double C80000 = C78770 * C78863;
    const double C80082 = C78828 * C78863;
    const double C425 =
        (-2 * C78628 * C78972) / C78629 +
        C78628 * ((-(C78668 * C78667 * C78969 * C78636) / C78234) / C78214 -
                  C78972 / C78629);
    const double C1255 = (-(C78770 * C78628 * C78972) / C78234) / C78214 -
                         (ae * C78628 * C78834) / C78629;
    const double C1257 = (-(ae * C78770 * C78834) / C78234) / C78214 -
                         (C78639 * C78633 * C78969) / C78629 +
                         C78770 * ((-(C78770 * C78972) / C78234) / C78214 -
                                   (ae * C78834) / C78629);
    const double C2188 = (-(C78828 * C78891 * ce) / C78234) / C78214 -
                         (C78639 * C78633 * C78969) / C78629 +
                         C78828 * ((-(C78828 * C78972) / C78234) / C78214 -
                                   (C78891 * ce) / C78629);
    const double C2189 = (-(C78828 * C78628 * C78972) / C78234) / C78214 -
                         (C78628 * C78891 * ce) / C78629;
    const double C4539 = C78770 * ((-(C78828 * C78972) / C78234) / C78214 -
                                   (C78891 * ce) / C78629) -
                         (ae * (C78828 * C78834 + C78635 * ce)) / C78629;
    const double C78978 = C78975 / C78629;
    const double C79428 = C78628 * C78975;
    const double C79432 = C78770 * C78975;
    const double C79577 = C78828 * C78975;
    const double C426 =
        3 * ((-(C78975 * C78636) / C78234) / C78214 - C78972 / C78629) +
        C78628 * ((-2 * C78628 * C78975) / C78629 +
                  C78628 * ((-(C78710 * C78709 * C78969 * C78636) / C78234) /
                                C78214 -
                            C78975 / C78629));
    const double C1258 =
        (-(ae * C78770 * C78842) / C78234) / C78214 -
        (C78628 * C78972) / C78629 +
        C78770 * ((-(C78770 * C78628 * C78975) / C78234) / C78214 -
                  (ae * C78842) / C78629);
    const double C1259 =
        C78770 * ((-(C78975 * C78636) / C78234) / C78214 - C78972 / C78629) -
        (ae * (C78840 * C78636 + C78834)) / C78629;
    const double C2190 =
        (-(C78828 * C78899 * ce) / C78234) / C78214 -
        (C78628 * C78972) / C78629 +
        C78828 * ((-(C78828 * C78628 * C78975) / C78234) / C78214 -
                  (C78899 * ce) / C78629);
    const double C2191 =
        C78828 * ((-(C78975 * C78636) / C78234) / C78214 - C78972 / C78629) -
        ((C78891 + C78897 * C78636) * ce) / C78629;
    const double C78980 = C78979 * C78636;
    const double C79441 = C78628 * C78979;
    const double C79889 = C78770 * C78979;
    const double C79954 = C78828 * C78979;
    const double C500 =
        2 * ((-(C78628 * C78997) / C78234) / C78214 - (C78992 * ce) / C78629) -
        ((C78992 + C78998 * C78636) * ce) / C78629 +
        C78628 *
            ((-(C78628 * C78998 * ce) / C78234) / C78214 - C78997 / C78629 +
             C78628 *
                 ((-(C78628 * C78668 * C78667 * C78993) / C78234) / C78214 -
                  (C78998 * ce) / C78629));
    const double C1366 = C78770 * ((-(C78628 * C78997) / C78234) / C78214 -
                                   (C78992 * ce) / C78629);
    const double C1369 = (-(C78997 * C78942) / C78234) / C78214 -
                         (C78639 * C78633 * C78993) / C78629;
    const double C2302 = C78828 * ((-(C78628 * C78997) / C78234) / C78214 -
                                   (C78992 * ce) / C78629) -
                         (ae * (C78628 * C78642 + C78635 * ce)) / C78629;
    const double C2305 = (-(ae * C78828 * C78642) / C78234) / C78214 -
                         (C78639 * C78633 * C78993) / C78629 +
                         C78828 * ((-(C78828 * C78997) / C78234) / C78214 -
                                   (ae * C78642) / C78629);
    const double C4659 = (-(C78828 * C78770 * C78997) / C78234) / C78214 -
                         (ae * C78770 * C78642) / C78629;
    const double C79007 = C78628 * C79004;
    const double C79016 = C79004 / C78629;
    const double C79642 = C78828 * C79004;
    const double C79773 = C78770 * C79004;
    const double C5968 =
        (-2 * C78770 * C78997) / C78629 +
        C78770 * ((-(C79004 * C78942) / C78234) / C78214 - C78997 / C78629);
    const double C6660 =
        (-(ae * C78828 * C79352) / C78234) / C78214 -
        (C78770 * C78997) / C78629 +
        C78828 * ((-(C78828 * C78770 * C79004) / C78234) / C78214 -
                  (ae * C79352) / C78629);
    const double C6662 =
        C78828 * ((-(C79004 * C78942) / C78234) / C78214 - C78997 / C78629) -
        (ae * (C78655 * C78942 + C78642)) / C78629;
    const double C79026 = C78628 * C79021;
    const double C79908 = C79021 * C78942;
    const double C80019 = C78770 * C79021;
    const double C80102 = C78828 * C79021;
    const double C572 =
        (-2 * C78628 * C79048) / C78629 +
        C78628 * ((-(C78668 * C78667 * C79045 * C78636) / C78234) / C78214 -
                  C79048 / C78629);
    const double C1472 = (-(C78770 * C78992 * ce) / C78234) / C78214 -
                         (C78639 * C78633 * C79045) / C78629 +
                         C78770 * ((-(C78770 * C79048) / C78234) / C78214 -
                                   (C78992 * ce) / C78629);
    const double C1473 = (-(C78770 * C78628 * C79048) / C78234) / C78214 -
                         (C78628 * C78992 * ce) / C78629;
    const double C2407 = (-(C78828 * C78628 * C79048) / C78234) / C78214 -
                         (ae * C78628 * C78776) / C78629;
    const double C2411 = (-(ae * C78828 * C78776) / C78234) / C78214 -
                         (C78639 * C78633 * C79045) / C78629 +
                         C78828 * ((-(C78828 * C79048) / C78234) / C78214 -
                                   (ae * C78776) / C78629);
    const double C4773 = C78828 * ((-(C78770 * C79048) / C78234) / C78214 -
                                   (C78992 * ce) / C78629) -
                         (ae * (C78770 * C78776 + C78635 * ce)) / C78629;
    const double C79054 = C79051 / C78629;
    const double C79458 = C78770 * C79051;
    const double C79466 = C78628 * C79051;
    const double C79659 = C78828 * C79051;
    const double C573 =
        3 * ((-(C79051 * C78636) / C78234) / C78214 - C79048 / C78629) +
        C78628 * ((-2 * C78628 * C79051) / C78629 +
                  C78628 * ((-(C78710 * C78709 * C79045 * C78636) / C78234) /
                                C78214 -
                            C79051 / C78629));
    const double C1474 =
        (-(C78770 * C79000 * ce) / C78234) / C78214 -
        (C78628 * C79048) / C78629 +
        C78770 * ((-(C78770 * C78628 * C79051) / C78234) / C78214 -
                  (C79000 * ce) / C78629);
    const double C1475 =
        C78770 * ((-(C79051 * C78636) / C78234) / C78214 - C79048 / C78629) -
        ((C78992 + C78998 * C78636) * ce) / C78629;
    const double C2408 =
        C78828 * ((-(C79051 * C78636) / C78234) / C78214 - C79048 / C78629) -
        (ae * (C78782 * C78636 + C78776)) / C78629;
    const double C2412 =
        (-(ae * C78828 * C78784) / C78234) / C78214 -
        (C78628 * C79048) / C78629 +
        C78828 * ((-(C78828 * C78628 * C79051) / C78234) / C78214 -
                  (ae * C78784) / C78629);
    const double C79056 = C79055 * C78636;
    const double C79469 = C78628 * C79055;
    const double C79915 = C78770 * C79055;
    const double C80121 = C78828 * C79055;
    const double C27356 = C26926 * C750;
    const double C27344 = C26926 * C746;
    const double C27342 = C26926 * C757;
    const double C27340 = C26926 * C748;
    const double C27462 = C26926 * C856;
    const double C27555 = C26926 * C946;
    const double C30054 = C26926 * C3979;
    const double C53804 = C26926 * C1686;
    const double C53792 = C26926 * C1682;
    const double C53790 = C26926 * C1693;
    const double C53788 = C26926 * C1684;
    const double C53911 = C26926 * C1790;
    const double C54014 = C26926 * C1882;
    const double C78271 = C78266 / C78240;
    const double C78270 = C78232 * C78266;
    const double C78269 = C78265 + C78242;
    const double C78256 = C78249 / C78239;
    const double C78254 = 2 * C78249;
    const double C80591 = C80590 * C80584;
    const double C80597 = C80590 / C78246;
    const double C80918 = C80596 * C80590;
    const double C80916 = C80590 / C78234;
    const double C737 = (C80588 * std::pow(C80584, 2)) / C78239 + C80589;
    const double C80599 = C80598 * C80584;
    const double C80922 = C80583 * C80598;
    const double C80920 = 2 * C80598;
    const double C80966 = C80598 / C80924;
    const double C87 = C80598 / C80957;
    const double C15341 = C80598 / C78240;
    const double C80950 = C80917 / C78234;
    const double C738 = (-2 * C80596 * C80917) / C78234;
    const double C80980 = C80948 / C78239;
    const double C78422 = C78417 / C78240;
    const double C78421 = C78325 * C78417;
    const double C78373 = 2 * C78328;
    const double C78397 = C78328 / C78239;
    const double C854 =
        ((0 * ce) / C78234 - C78328 / C78239) / C78240 + (0 * ce) / C78234;
    const double C2687 =
        ((C80628 - (C78325 * 2 * C78328) / C78234) * ce) / C78234 -
        C78326 / C78246;
    const double C2688 = (0 * ce) / C78234 - C78328 / C78239;
    const double C4984 = (C80628 * std::pow(C80678, 2)) / C78239 + C80677;
    const double C80680 = C80679 * C80678;
    const double C80685 = C80679 / C78246;
    const double C80932 = C80679 / C78234;
    const double C80929 = C80596 * C80679;
    const double C853 =
        (((C80628 - (C78325 * 2 * C78328) / C78234) * ce) / C78234 -
         C78326 / C78246) /
            C78240 +
        ((C78325 * ((0 * ce) / C78234 - C78328 / C78239) + C80686) * ce) /
            C78234;
    const double C80687 = C80686 * C80678;
    const double C80938 = C80676 * C80686;
    const double C80937 = 2 * C80686;
    const double C80972 = C80686 / C80924;
    const double C5656 = C80686 / C80957;
    const double C15344 = C80686 / C78240;
    const double C80968 = C80934 / C78234;
    const double C4985 = (-2 * C80596 * C80934) / C78234;
    const double C80987 = C80960 / C78239;
    const double C78513 = C78508 / C78240;
    const double C78512 = C78340 * C78508;
    const double C78466 = 2 * C78343;
    const double C78488 = C78343 / C78239;
    const double C1880 =
        ((0 * ce) / C78234 - C78343 / C78239) / C78240 + (0 * ce) / C78234;
    const double C3421 =
        ((C80639 - (C78340 * 2 * C78343) / C78234) * ce) / C78234 -
        C78341 / C78246;
    const double C3422 = (0 * ce) / C78234 - C78343 / C78239;
    const double C9133 = (C80639 * std::pow(C80718, 2)) / C78239 + C80717;
    const double C80720 = C80719 * C80718;
    const double C80725 = C80719 / C78246;
    const double C80933 = C80719 / C78234;
    const double C80931 = C80596 * C80719;
    const double C1879 =
        (((C80639 - (C78340 * 2 * C78343) / C78234) * ce) / C78234 -
         C78341 / C78246) /
            C78240 +
        ((C78340 * ((0 * ce) / C78234 - C78343 / C78239) + C80726) * ce) /
            C78234;
    const double C80727 = C80726 * C80718;
    const double C80944 = C80716 * C80726;
    const double C80943 = 2 * C80726;
    const double C80978 = C80726 / C80924;
    const double C10467 = C80726 / C80957;
    const double C20867 = C80726 / C78240;
    const double C80974 = C80940 / C78234;
    const double C9134 = (-2 * C80596 * C80940) / C78234;
    const double C80989 = C80963 / C78239;
    const double C78426 = C78420 + C78392;
    const double C78517 = C78511 + C78483;
    const double C293 = C275 * C101;
    const double C291 = C275 * C108;
    const double C289 = C275 * C100;
    const double C362 = C275 * C167;
    const double C430 = C275 * C222;
    const double C1052 = C275 * C746;
    const double C1988 = C275 * C1682;
    const double C54117 = C275 * C1686;
    const double C54108 = C275 * C1693;
    const double C54106 = C275 * C1684;
    const double C54205 = C275 * C1790;
    const double C54288 = C275 * C1882;
    const double C56141 = C275 * C3979;
    const double C508 = C490 * C101;
    const double C506 = C490 * C108;
    const double C504 = C490 * C100;
    const double C577 = C490 * C167;
    const double C645 = C490 * C222;
    const double C1374 = C490 * C746;
    const double C2310 = C490 * C1682;
    const double C27891 = C490 * C750;
    const double C27882 = C490 * C757;
    const double C27880 = C490 * C748;
    const double C27978 = C490 * C856;
    const double C28059 = C490 * C946;
    const double C30695 = C490 * C3979;
    const double C27345 = C81009 * C754;
    const double C27357 = C81009 * C762;
    const double C53793 = C81009 * C1690;
    const double C53805 = C81009 * C1698;
    const double C30055 = C81009 * C3983;
    const double C31651 = C81009 * C5665;
    const double C32151 = C81009 * C6150;
    const double C61985 = C81009 * C10475;
    const double C295 = C275 * C110;
    const double C510 = C490 * C110;
    const double C1054 = C275 * C756;
    const double C1376 = C490 * C756;
    const double C27346 = C26926 * C756;
    const double C27354 = C26926 * C764;
    const double C27889 = C490 * C764;
    const double C1990 = C275 * C1692;
    const double C2312 = C490 * C1692;
    const double C53794 = C26926 * C1692;
    const double C53802 = C26926 * C1700;
    const double C54115 = C275 * C1700;
    const double C30052 = C26926 * C3985;
    const double C30693 = C490 * C3985;
    const double C56139 = C275 * C3985;
    const double C31652 = C26926 * C5663;
    const double C31950 = C490 * C5663;
    const double C32152 = C26926 * C6148;
    const double C32662 = C490 * C6148;
    const double C58018 = C275 * C6148;
    const double C61986 = C26926 * C10473;
    const double C62150 = C275 * C10473;
    const double C78662 = C78659 + C78653;
    const double C79372 = C79370 + C78653;
    const double C79680 = C79678 + C78653;
    const double C4540 =
        C78770 * ((-(C78828 * C78628 * C78975) / C78234) / C78214 -
                  (C78899 * ce) / C78629) -
        (ae * (C78828 * C78842 + C78651 * ce)) / C78629;
    const double C4774 =
        C78828 * ((-(C78770 * C78628 * C79051) / C78234) / C78214 -
                  (C79000 * ce) / C78629) -
        (ae * (C78770 * C78784 + C78651 * ce)) / C78629;
    const double C858 = -(C78770 * (C78770 * C78784 + C78651 * ce) +
                          C78628 * C78776 + C78770 * C78651 * ce) /
                        C78234;
    const double C1040 =
        (C78628 * C78891 + C78770 * (C78770 * C78899 + C78651 * ae) +
         C78770 * C78651 * ae) /
        C78214;
    const double C1884 = -(C78828 * (C78828 * C78842 + C78651 * ce) +
                           C78628 * C78834 + C78828 * C78651 * ce) /
                         C78234;
    const double C2298 =
        (C78628 * C78992 + C78828 * (C78828 * C79000 + C78651 * ae) +
         C78828 * C78651 * ae) /
        C78214;
    const double C4094 = -(C78828 * (C78770 * C78784 + C78651 * ce)) / C78234;
    const double C4200 =
        -(C78828 * C78770 * C78842 + C78770 * C78651 * ce) / C78234;
    const double C4306 = (C78828 * (C78770 * C78899 + C78651 * ae)) / C78214;
    const double C4656 =
        (C78828 * C78770 * C79000 + C78770 * C78651 * ae) / C78214;
    const double C751 = C78628 * C78635 + C78651 * C78942;
    const double C1687 = C78628 * C78635 + C78651 * C79064;
    const double C3980 = C78828 * C78770 * C78651;
    const double C5658 =
        2 * C78770 * C78651 + C78770 * (C78651 + C78674 * C78942);
    const double C6139 = C78828 * (C78651 + C78674 * C78942);
    const double C10468 =
        2 * C78828 * C78651 + C78828 * (C78651 + C78674 * C79064);
    const double C78661 = C78658 + C78650;
    const double C79371 = C79368 + C78650;
    const double C79679 = C79676 + C78650;
    const double C78660 = C78657 * C78637;
    const double C78947 = C78946 * C78637;
    const double C79069 = C79068 * C78637;
    const double C6322 = -(C78828 * (C78828 * C79431 + C79369 * ce) +
                           C78770 * C78834 + C78828 * C79369 * ce) /
                         C78234;
    const double C6654 =
        (C78770 * C78992 + C78828 * (C78828 * C79457 + C79369 * ae) +
         C78828 * C79369 * ae) /
        C78214;
    const double C6138 = C78770 * C78635 + C79369 * C79064;
    const double C12543 =
        2 * C78828 * C79369 + C78828 * (C79369 + C79377 * C79064);
    const double C365 = C81011 * C356;
    const double C648 = C81012 * C639;
    const double C297 = C275 * C102;
    const double C512 = C490 * C102;
    const double C1056 = C275 * C747;
    const double C1378 = C490 * C747;
    const double C27348 = C26926 * C747;
    const double C1992 = C275 * C1683;
    const double C2314 = C490 * C1683;
    const double C53796 = C26926 * C1683;
    const double C31650 = C26926 * C5659;
    const double C31948 = C490 * C5659;
    const double C32150 = C26926 * C6140;
    const double C32660 = C490 * C6140;
    const double C58016 = C275 * C6140;
    const double C61984 = C26926 * C10469;
    const double C62148 = C275 * C10469;
    const double C364 = C275 * C168;
    const double C579 = C490 * C168;
    const double C368 = C275 * C169;
    const double C583 = C490 * C169;
    const double C1161 = C275 * C855;
    const double C1483 = C490 * C855;
    const double C27466 = C26926 * C855;
    const double C27464 = C26926 * C857;
    const double C27980 = C490 * C857;
    const double C1169 = C275 * C859;
    const double C1491 = C490 * C859;
    const double C27470 = C26926 * C859;
    const double C2095 = C275 * C1788;
    const double C2417 = C490 * C1788;
    const double C53913 = C26926 * C1788;
    const double C2098 = C275 * C1789;
    const double C2420 = C490 * C1789;
    const double C53917 = C26926 * C1789;
    const double C53922 = C26926 * C1792;
    const double C54207 = C275 * C1792;
    const double C30172 = C26926 * C4093;
    const double C30802 = C490 * C4093;
    const double C56251 = C275 * C4093;
    const double C62045 = C26926 * C10527;
    const double C62208 = C275 * C10527;
    const double C432 = C275 * C223;
    const double C647 = C490 * C223;
    const double C436 = C275 * C224;
    const double C651 = C490 * C224;
    const double C1264 = C275 * C945;
    const double C1586 = C490 * C945;
    const double C27561 = C26926 * C945;
    const double C27557 = C26926 * C947;
    const double C28061 = C490 * C947;
    const double C1271 = C275 * C949;
    const double C1593 = C490 * C949;
    const double C27567 = C26926 * C949;
    const double C2199 = C275 * C1881;
    const double C2521 = C490 * C1881;
    const double C54018 = C26926 * C1881;
    const double C54016 = C26926 * C1883;
    const double C54290 = C275 * C1883;
    const double C2207 = C275 * C1885;
    const double C2529 = C490 * C1885;
    const double C54022 = C26926 * C1885;
    const double C30282 = C26926 * C4199;
    const double C30906 = C490 * C4199;
    const double C56353 = C275 * C4199;
    const double C31761 = C26926 * C5772;
    const double C32057 = C490 * C5772;
    const double C32341 = C26926 * C6324;
    const double C32849 = C490 * C6324;
    const double C58207 = C275 * C6324;
    const double C296 = C81011 * C284;
    const double C294 = C81011 * C278;
    const double C298 = C81011 * C279;
    const double C1053 = C81011 * C1035;
    const double C1057 = C81011 * C1037;
    const double C1989 = C81011 * C1971;
    const double C1993 = C81011 * C1973;
    const double C54118 = C81011 * C1975;
    const double C56142 = C81011 * C4305;
    const double C62149 = C81011 * C10632;
    const double C511 = C81012 * C499;
    const double C509 = C81012 * C493;
    const double C513 = C81012 * C494;
    const double C1375 = C81012 * C1357;
    const double C1379 = C81012 * C1359;
    const double C27892 = C81012 * C1361;
    const double C2311 = C81012 * C2293;
    const double C2315 = C81012 * C2295;
    const double C30696 = C81012 * C4655;
    const double C31949 = C81012 * C5964;
    const double C32661 = C81012 * C6656;
    const double C78692 = C78688 + C78677;
    const double C78716 = C78706 / C78234;
    const double C79801 = C78706 / C78629;
    const double C79246 = C79243 * ce;
    const double C79802 = 2 * C79243;
    const double C79999 = C78828 * C79243;
    const double C12545 =
        (2 * C78828 * C79330 + C78828 * (C79330 + C79243 * C79064)) / C78214;
    const double C79268 = C79265 * ce;
    const double C80083 = 2 * C79265;
    const double C79335 = C78656 + C79333;
    const double C79610 = C78656 + C79608;
    const double C78691 = C78687 + C78673;
    const double C78717 = C78707 / C78629;
    const double C79247 = ae * C79244;
    const double C79822 = -2 * C79244;
    const double C80018 = C78828 * C79244;
    const double C12547 = (-2 * C78828 * C79352) / C78234 -
                          (C78828 * (C79244 * C79064 + C79352)) / C78234;
    const double C79269 = ae * C79266;
    const double C80103 = -2 * C79266;
    const double C79356 = C79354 + C78655;
    const double C79645 = C79643 + C78655;
    const double C78690 = C78686 * C78637;
    const double C78748 = C78740 + C78725;
    const double C79858 = C79849 + C78725;
    const double C80161 = C80150 + C78725;
    const double C78731 = C78666 + C78723;
    const double C78733 = C78722 * ae;
    const double C78730 = C78722 * ce;
    const double C79408 = C78722 * C78942;
    const double C79407 = C78770 * C78722;
    const double C79715 = C78722 * C79064;
    const double C79714 = C78828 * C78722;
    const double C78745 = C78737 + C78721;
    const double C79855 = C79844 + C78721;
    const double C80157 = C80144 + C78721;
    const double C78744 = C78736 * C78637;
    const double C78958 = C78957 * C78637;
    const double C79080 = C79079 * C78637;
    const double C79857 = C78666 + C79846;
    const double C79859 = C79845 * ae;
    const double C79856 = C79845 * ce;
    const double C80040 = C79845 * C79064;
    const double C80039 = C78828 * C79845;
    const double C80015 = C78666 + C80013;
    const double C80162 = C80145 * ae;
    const double C80158 = C80145 * ce;
    const double C78794 = C78792 + C78782;
    const double C78806 = C78802 / C78629;
    const double C78807 = -2 * C78799;
    const double C78804 = ae * C78799;
    const double C79398 = C78770 * C78799;
    const double C79667 = C78828 * C78799;
    const double C10526 = (-2 * C78828 * C78784) / C78234 -
                          (C78828 * (C78799 * C79064 + C78784)) / C78234;
    const double C79382 = C79376 + C78673;
    const double C79662 = C79660 + C78782;
    const double C79982 = ae * C79980;
    const double C80122 = -2 * C79980;
    const double C78852 = C78850 + C78840;
    const double C78864 = C78860 / C78629;
    const double C78865 = -2 * C78857;
    const double C78862 = ae * C78857;
    const double C79440 = C78770 * C78857;
    const double C79705 = C78828 * C78857;
    const double C5771 = (-2 * C78770 * C78842) / C78234 -
                         (C78770 * (C78857 * C78942 + C78842)) / C78234;
    const double C6323 = -(C78828 * (C78857 * C78942 + C78842) +
                           (C78651 + C78674 * C78942) * ce) /
                         C78234;
    const double C79435 = C79433 + C78840;
    const double C79690 = C79684 + C78673;
    const double C79784 = C78828 * C79781;
    const double C79890 = -2 * C79781;
    const double C79888 = ae * C79781;
    const double C78909 = C78897 + C78907;
    const double C78921 = C78917 / C78629;
    const double C79841 = C78917 / C78234;
    const double C78922 = 2 * C78914;
    const double C78919 = C78914 * ce;
    const double C79400 = C78770 * C78914;
    const double C79635 = C78828 * C78914;
    const double C10631 =
        (2 * C78828 * C78899 + C78828 * (C78899 + C78914 * C79064)) / C78214;
    const double C79385 = C79379 + C78677;
    const double C79632 = C78897 + C79631;
    const double C79955 = C79953 * ce;
    const double C80097 = 2 * C79953;
    const double C78952 = C78951 * C78637;
    const double C79010 = C78998 + C79008;
    const double C79022 = C79018 / C78629;
    const double C80141 = C79018 / C78234;
    const double C79023 = 2 * C79015;
    const double C79020 = C79015 * ce;
    const double C79468 = C78770 * C79015;
    const double C79707 = C78828 * C79015;
    const double C5963 =
        (2 * C78770 * C79000 + C78770 * (C79000 + C79015 * C78942)) / C78214;
    const double C6655 = (C78828 * (C79000 + C79015 * C78942) +
                          (C78651 + C78674 * C78942) * ae) /
                         C78214;
    const double C79461 = C78998 + C79459;
    const double C79693 = C79687 + C78677;
    const double C79785 = C78828 * C79783;
    const double C79916 = 2 * C79783;
    const double C79914 = C79783 * ce;
    const double C79074 = C79073 * C78637;
    const double C78678 = -C78669;
    const double C10586 =
        2 * ((-(C78828 * C78839) / C78234) / C78214 - (C78643 * ce) / C78629) -
        ((C78643 + C78656 * C79064) * ce) / C78629 +
        C78828 *
            ((-(C78828 * C78656 * ce) / C78234) / C78214 - C78839 / C78629 +
             C78828 * ((-(C78828 * C78846) / C78234) / C78214 - C79332));
    const double C32147 = C81009 * C6146;
    const double C5826 =
        2 * ((-(C78770 * C78896) / C78234) / C78214 - (ae * C78642) / C78629) -
        (ae * (C78655 * C78942 + C78642)) / C78629 +
        C78770 *
            ((-(ae * C78770 * C78655) / C78234) / C78214 - C78896 / C78629 +
             C78770 * ((-(C78770 * C78903) / C78234) / C78214 - C78670));
    const double C10778 =
        2 * ((-(C78828 * C78997) / C78234) / C78214 - (ae * C78642) / C78629) -
        (ae * (C78655 * C79064 + C78642)) / C78629 +
        C78828 *
            ((-(ae * C78828 * C78655) / C78234) / C78214 - C78997 / C78629 +
             C78828 * ((-(C78828 * C79004) / C78234) / C78214 - C78670));
    const double C32148 = C26926 * C6144;
    const double C32658 = C490 * C6144;
    const double C58014 = C275 * C6144;
    const double C103 = 3 * (C78635 + C78645 * C78636) +
                        C78628 * (2 * C78651 + C78628 * C78682);
    const double C749 = C78770 * (2 * C78651 + C78628 * C78682);
    const double C752 = C78635 + C78645 * C78636 + C78682 * C78942;
    const double C1685 = C78828 * (2 * C78651 + C78628 * C78682);
    const double C1688 = C78635 + C78645 * C78636 + C78682 * C79064;
    const double C3981 = C78828 * C78770 * C78682;
    const double C6137 = C78770 * C78651 + C79399 * C79064;
    const double C5660 = 3 * (C78635 + C78645 * C78942) +
                         C78770 * (2 * C79369 + C78770 * C79384);
    const double C6141 = C78635 + C78645 * C78942 + C79384 * C79064;
    const double C8499 = C78828 * (2 * C79369 + C78770 * C79384);
    const double C10470 = 3 * (C78635 + C78645 * C79064) +
                          C78828 * (2 * C79677 + C78828 * C79692);
    const double C10824 =
        2 * ((-(C78828 * C79048) / C78234) / C78214 - (ae * C78776) / C78629) -
        (ae * (C78782 * C79064 + C78776)) / C78629 +
        C78828 *
            ((-(ae * C78828 * C78782) / C78234) / C78214 - C79048 / C78629 +
             C78828 * ((-(C78828 * C79051) / C78234) / C78214 - C78789));
    const double C2101 = C275 * C1793;
    const double C2423 = C490 * C1793;
    const double C53920 = C26926 * C1793;
    const double C5918 =
        2 * ((-(C78770 * C78972) / C78234) / C78214 - (ae * C78834) / C78629) -
        (ae * (C78840 * C78942 + C78834)) / C78629 +
        C78770 *
            ((-(ae * C78770 * C78840) / C78234) / C78214 - C78972 / C78629 +
             C78770 * ((-(C78770 * C78975) / C78234) / C78214 - C78847));
    const double C1268 = C275 * C948;
    const double C1590 = C490 * C948;
    const double C27564 = C26926 * C948;
    const double C6573 =
        C78770 *
            ((-(C78828 * C78897 * ce) / C78234) / C78214 - C78972 / C78629 +
             C78828 * ((-(C78828 * C78975) / C78234) / C78214 - C78904)) -
        (ae * (C78828 * (C78828 * C78840 + C78650) + C78834 +
               C78828 * C78645 * ce)) /
            C78629;
    const double C6575 =
        (-(C78828 * C78972) / C78234) / C78214 - (C78891 * ce) / C78629 -
        (ae * (C78828 * C79431 + C79369 * ce)) / C78629 +
        C78770 * (C78770 * ((-(C78828 * C78975) / C78234) / C78214 - C78904) -
                  (ae * (C78828 * C78840 + C78650)) / C78629);
    const double C79380 = -C79374;
    const double C1997 = C81011 * C1976;
    const double C6013 =
        2 * ((-(C78770 * C79048) / C78234) / C78214 - (C78992 * ce) / C78629) -
        ((C78992 + C78998 * C78942) * ce) / C78629 +
        C78770 *
            ((-(C78770 * C78998 * ce) / C78234) / C78214 - C79048 / C78629 +
             C78770 * ((-(C78770 * C79051) / C78234) / C78214 - C79005));
    const double C79688 = -C79682;
    const double C1383 = C81012 * C1362;
    const double C79807 = C78770 * C79805;
    const double C80006 = C79243 + C80004;
    const double C80088 = C78828 * C80086;
    const double C79830 = C78770 * C79827;
    const double C80024 = C80022 + C79244;
    const double C80111 = C78828 * C80108;
    const double C78818 = C78628 * C78815;
    const double C79544 = C78770 * C78815;
    const double C79671 = C79669 + C78799;
    const double C80130 = C78828 * C80127;
    const double C78876 = C78628 * C78873;
    const double C79741 = C78770 * C78873;
    const double C79752 = C78828 * C78873;
    const double C79447 = C79445 + C78857;
    const double C79793 = C78828 * C79790;
    const double C79898 = C78770 * C79895;
    const double C80068 = C78828 * C79895;
    const double C78932 = C78628 * C78929;
    const double C79546 = C78770 * C78929;
    const double C79637 = C78914 + C79636;
    const double C80098 = C78828 * C80016;
    const double C79033 = C78628 * C79030;
    const double C79742 = C78770 * C79030;
    const double C79754 = C78828 * C79030;
    const double C79475 = C79015 + C79473;
    const double C79794 = C78828 * C79792;
    const double C79923 = C78770 * C79920;
    const double C80070 = C78828 * C79920;
    const double C27467 = C81009 * C863;
    const double C27465 = C81009 * C865;
    const double C53914 = C81009 * C1796;
    const double C53923 = C81009 * C1800;
    const double C30173 = C81009 * C4097;
    const double C78793 = C78791 / C78234;
    const double C10532 =
        3 * ((-(C78788 * C79064) / C78234) / C78214 - C78781 / C78629) +
        C78828 * ((-2 * C78828 * C78788) / C78629 +
                  C78828 * ((-(C78805 * C79064) / C78234) / C78214 - C78800));
    const double C79334 = C79331 / C78234;
    const double C31711 = C81009 * C5726;
    const double C62046 = C81009 * C10531;
    const double C78814 = C78810 / C78234;
    const double C79804 = C79800 / C78234;
    const double C80076 = C80075 / C78234;
    const double C300 = C81011 * C285;
    const double C1055 = C81011 * C1044;
    const double C1991 = C81011 * C1980;
    const double C54116 = C81011 * C1983;
    const double C56140 = C81011 * C4309;
    const double C78908 = C78906 / C78234;
    const double C6417 =
        (-(C78903 * C79064) / C78234) / C78214 - C78896 / C78629 -
        (ae * (C79244 * C79064 + C79352)) / C78629 +
        C78770 * (C78770 * ((-(C78920 * C79064) / C78234) / C78214 - C78915) -
                  (ae * (C78680 * C79064 + C78655)) / C78629);
    const double C79355 = C79353 / C78234;
    const double C10637 =
        3 * ((-(C78903 * C79064) / C78234) / C78214 - C78896 / C78629) +
        C78828 * ((-2 * C79569) / C78629 +
                  C78828 * ((-(C78920 * C79064) / C78234) / C78214 - C78915));
    const double C58015 = C81011 * C6414;
    const double C58019 = C81011 * C6416;
    const double C62151 = C81011 * C10636;
    const double C78928 = C78925 / C78234;
    const double C79825 = C79821 / C78234;
    const double C79942 = C79941 / C78234;
    const double C79974 = C78770 * C79973;
    const double C27562 = C81009 * C953;
    const double C27558 = C81009 * C955;
    const double C54019 = C81009 * C1889;
    const double C54017 = C81009 * C1891;
    const double C30283 = C81009 * C4203;
    const double C78851 = C78849 / C78234;
    const double C5777 =
        3 * ((-(C78846 * C78942) / C78234) / C78214 - C78839 / C78629) +
        C78770 * ((-2 * C78770 * C78846) / C78629 +
                  C78770 * ((-(C78863 * C78942) / C78234) / C78214 - C78858));
    const double C79609 = C79607 / C78234;
    const double C31762 = C81009 * C5776;
    const double C32337 = C81009 * C6328;
    const double C32342 = C81009 * C6330;
    const double C78872 = C78868 / C78234;
    const double C79815 = C79814 / C78234;
    const double C80003 = C78828 * C80000;
    const double C80085 = C80082 / C78234;
    const double C437 = C81011 * C425;
    const double C1265 = C81011 * C1255;
    const double C54291 = C81011 * C2188;
    const double C2200 = C81011 * C2189;
    const double C56354 = C81011 * C4539;
    const double C79434 = C79432 / C78234;
    const double C79578 = C79577 / C78234;
    const double C439 = C81011 * C426;
    const double C1269 = C81011 * C1258;
    const double C1272 = C81011 * C1259;
    const double C2203 = C81011 * C2190;
    const double C2208 = C81011 * C2191;
    const double C78981 = C78980 / C78234;
    const double C79444 = C78770 * C79441;
    const double C79583 = C78828 * C79441;
    const double C79893 = C79889 / C78234;
    const double C79956 = C79954 / C78234;
    const double C515 = C81012 * C500;
    const double C1377 = C81012 * C1366;
    const double C27890 = C81012 * C1369;
    const double C2313 = C81012 * C2302;
    const double C30694 = C81012 * C4659;
    const double C79009 = C79007 / C78234;
    const double C5969 =
        3 * ((-(C79004 * C78942) / C78234) / C78214 - C78997 / C78629) +
        C78770 * ((-2 * C78770 * C79004) / C78629 +
                  C78770 * ((-(C79021 * C78942) / C78234) / C78214 - C79016));
    const double C79644 = C79642 / C78234;
    const double C31951 = C81012 * C5968;
    const double C32659 = C81012 * C6660;
    const double C32663 = C81012 * C6662;
    const double C79029 = C79026 / C78234;
    const double C79909 = C79908 / C78234;
    const double C80021 = C78828 * C80019;
    const double C80106 = C80102 / C78234;
    const double C584 = C81012 * C572;
    const double C27981 = C81012 * C1472;
    const double C1484 = C81012 * C1473;
    const double C2418 = C81012 * C2407;
    const double C30803 = C81012 * C4773;
    const double C79460 = C79458 / C78234;
    const double C79661 = C79659 / C78234;
    const double C586 = C81012 * C573;
    const double C1487 = C81012 * C1474;
    const double C1492 = C81012 * C1475;
    const double C2421 = C81012 * C2408;
    const double C2424 = C81012 * C2412;
    const double C79057 = C79056 / C78234;
    const double C79472 = C78770 * C79469;
    const double C79668 = C78828 * C79469;
    const double C79919 = C79915 / C78234;
    const double C80125 = C80121 / C78234;
    const double C27365 = C27342 + C27343;
    const double C27364 = C27340 + C27341;
    const double C27474 = C27462 + C27463;
    const double C27572 = C27555 + C27556;
    const double C53813 = C53790 + C53791;
    const double C53812 = C53788 + C53789;
    const double C53928 = C53911 + C53912;
    const double C54026 = C54014 + C54015;
    const double C78275 = C78270 + 0;
    const double C78274 = C78269 / C78240;
    const double C78260 = C78245 - C78256;
    const double C78259 = C78232 * C78254;
    const double C745 =
        ((-C78254 / C78234) / C78240 - (0 * de) / C78234) / C78240 -
        (0 * de) / C78234;
    const double C5657 = -C78254 / C78234;
    const double C13806 = (-C78254 / C78234) / C78240 - (0 * de) / C78234;
    const double C80592 = C80591 / C78239;
    const double C80951 = 2 * C80918;
    const double C80600 = C80599 / C78234;
    const double C80955 = C80922 / C78246;
    const double C80981 = C80916 - C80950;
    const double C13799 = -C80950;
    const double C80998 = C80980 + C80589;
    const double C78427 = C78421 + 0;
    const double C78394 = C78325 * C78373;
    const double C5065 =
        ((-C78326 / C78234) / C78240 -
         ((C80628 - (C78325 * C78373) / C78234) * de) / C78234) /
            C78240 -
        ((C78325 * ((-C78373 / C78234) / C78240 - (0 * de) / C78234) + C80686) *
         de) /
            C78234;
    const double C5066 =
        ((-C78373 / C78234) / C78240 - (0 * de) / C78234) / C78240 -
        (0 * de) / C78234;
    const double C13246 = (-C78373 / C78234) / C78240 - (0 * de) / C78234;
    const double C78407 = C78403 - C78397;
    const double C80681 = C80680 / C78239;
    const double C852 =
        (((0 - (C78325 * C78326) / C78234) * ce) / C78234 - (0 * de) / C78246) /
            C78240 +
        ((C78325 * (((C80628 - (C78325 * 2 * C78328) / C78234) * ce) / C78234 -
                    C78326 / C78246) +
          C80932) *
         ce) /
            C78234 +
        (0 * ce) / C78234 - C78328 / C78239;
    const double C80961 = 2 * C80929;
    const double C80688 = C80687 / C78234;
    const double C80971 = C80938 / C78246;
    const double C80991 = C80932 - C80968;
    const double C13173 = -C80968;
    const double C81003 = C80987 + C80677;
    const double C78518 = C78512 + 0;
    const double C78485 = C78340 * C78466;
    const double C9285 =
        ((-C78341 / C78234) / C78240 -
         ((C80639 - (C78340 * C78466) / C78234) * de) / C78234) /
            C78240 -
        ((C78340 * ((-C78466 / C78234) / C78240 - (0 * de) / C78234) + C80726) *
         de) /
            C78234;
    const double C9286 =
        ((-C78466 / C78234) / C78240 - (0 * de) / C78234) / C78240 -
        (0 * de) / C78234;
    const double C17952 = (-C78466 / C78234) / C78240 - (0 * de) / C78234;
    const double C78498 = C78494 - C78488;
    const double C80721 = C80720 / C78239;
    const double C1878 =
        (((0 - (C78340 * C78341) / C78234) * ce) / C78234 - (0 * de) / C78246) /
            C78240 +
        ((C78340 * (((C80639 - (C78340 * 2 * C78343) / C78234) * ce) / C78234 -
                    C78341 / C78246) +
          C80933) *
         ce) /
            C78234 +
        (0 * ce) / C78234 - C78343 / C78239;
    const double C80964 = 2 * C80931;
    const double C80728 = C80727 / C78234;
    const double C80977 = C80944 / C78246;
    const double C80994 = C80933 - C80974;
    const double C17817 = -C80974;
    const double C81004 = C80989 + C80717;
    const double C78430 = C78426 / C78240;
    const double C78521 = C78517 / C78240;
    const double C306 = C291 + C292;
    const double C305 = C289 + C290;
    const double C373 = C362 + C363;
    const double C441 = C430 + C431;
    const double C54123 = C54108 + C54109;
    const double C54122 = C54106 + C54107;
    const double C54210 = C54205 + C54206;
    const double C54292 = C54288 + C54289;
    const double C521 = C506 + C507;
    const double C520 = C504 + C505;
    const double C588 = C577 + C578;
    const double C656 = C645 + C646;
    const double C27897 = C27882 + C27883;
    const double C27896 = C27880 + C27881;
    const double C27982 = C27978 + C27979;
    const double C28064 = C28059 + C28060;
    const double C27366 = C27344 + C27345;
    const double C27372 = C27356 + C27357;
    const double C53814 = C53792 + C53793;
    const double C53820 = C53804 + C53805;
    const double C30064 = C30054 + C30055;
    const double C111 = (2 * (C78628 * C78643 + C78635 * ae) +
                         C78628 * (C78643 + C78628 * C78662 + C78651 * ae) +
                         (C78635 + C78645 * C78636) * ae) /
                        C78214;
    const double C755 =
        (C78770 * (C78643 + C78628 * C78662 + C78651 * ae)) / C78214;
    const double C763 =
        (C78628 * C78643 + C78635 * ae + C78662 * C78942) / C78214;
    const double C1691 =
        (C78828 * (C78643 + C78628 * C78662 + C78651 * ae)) / C78214;
    const double C1699 =
        (C78628 * C78643 + C78635 * ae + C78662 * C79064) / C78214;
    const double C3984 = (C78828 * C78770 * C78662) / C78214;
    const double C5822 = (2 * (C78770 * C78891 + C78635 * ae) +
                          C78770 * (C78891 + C78770 * C79372 + C79369 * ae) +
                          (C78635 + C78645 * C78942) * ae) /
                         C78214;
    const double C6408 =
        (C78770 * C78891 + C78635 * ae + C79372 * C79064) / C78214;
    const double C6410 =
        (C78828 * (C78891 + C78770 * C79372 + C79369 * ae)) / C78214;
    const double C10774 = (2 * (C78828 * C78992 + C78635 * ae) +
                           C78828 * (C78992 + C78828 * C79680 + C79677 * ae) +
                           (C78635 + C78645 * C79064) * ae) /
                          C78214;
    const double C4548 = C81011 * C4540;
    const double C4782 = C81012 * C4774;
    const double C1164 = C275 * C858;
    const double C1486 = C490 * C858;
    const double C27468 = C26926 * C858;
    const double C1061 = C81011 * C1040;
    const double C2202 = C275 * C1884;
    const double C2524 = C490 * C1884;
    const double C54020 = C26926 * C1884;
    const double C2319 = C81012 * C2298;
    const double C4431 = C275 * C4094;
    const double C4781 = C490 * C4094;
    const double C30174 = C26926 * C4094;
    const double C4547 = C275 * C4200;
    const double C4897 = C490 * C4200;
    const double C30287 = C26926 * C4200;
    const double C4315 = C81011 * C4306;
    const double C4665 = C81012 * C4656;
    const double C1060 = C275 * C751;
    const double C1382 = C490 * C751;
    const double C27352 = C26926 * C751;
    const double C1996 = C275 * C1687;
    const double C2318 = C490 * C1687;
    const double C53800 = C26926 * C1687;
    const double C4314 = C275 * C3980;
    const double C4664 = C490 * C3980;
    const double C30050 = C26926 * C3980;
    const double C7112 = C275 * C5658;
    const double C7336 = C490 * C5658;
    const double C32936 = C26926 * C5658;
    const double C7894 = C275 * C6139;
    const double C8214 = C490 * C6139;
    const double C33596 = C26926 * C6139;
    const double C12098 = C275 * C10468;
    const double C12322 = C490 * C10468;
    const double C63370 = C26926 * C10468;
    const double C112 =
        (-2 * (C78628 * C78642 + C78635 * ce)) / C78234 -
        (C78628 * (C78628 * C78661 + C78642 + C78651 * ce)) / C78234 -
        ((C78635 + C78645 * C78636) * ce) / C78234;
    const double C759 =
        -(C78770 * (C78628 * C78661 + C78642 + C78651 * ce)) / C78234;
    const double C765 =
        -(C78661 * C78942 + C78628 * C78642 + C78635 * ce) / C78234;
    const double C1695 =
        -(C78828 * (C78628 * C78661 + C78642 + C78651 * ce)) / C78234;
    const double C1701 =
        -(C78661 * C79064 + C78628 * C78642 + C78635 * ce) / C78234;
    const double C3986 = -(C78828 * C78770 * C78661) / C78234;
    const double C5722 =
        (-2 * (C78770 * C78776 + C78635 * ce)) / C78234 -
        (C78770 * (C78770 * C79371 + C78776 + C79369 * ce)) / C78234 -
        ((C78635 + C78645 * C78942) * ce) / C78234;
    const double C6236 =
        -(C78828 * (C78770 * C79371 + C78776 + C79369 * ce)) / C78234;
    const double C6238 =
        -(C79371 * C79064 + C78770 * C78776 + C78635 * ce) / C78234;
    const double C10582 =
        (-2 * (C78828 * C78834 + C78635 * ce)) / C78234 -
        (C78828 * (C78828 * C79679 + C78834 + C79677 * ce)) / C78234 -
        ((C78635 + C78645 * C79064) * ce) / C78234;
    const double C120 =
        2 * ((-(C78643 * ce) / C78234) / C78214 - (ae * C78642) / C78629 -
             (C78628 * C78660) / C78629) -
        (ae * (C78628 * C78661 + C78642 + C78651 * ce)) / C78629 -
        ((C78643 + C78628 * C78662 + C78651 * ae) * ce) / C78629 +
        C78628 *
            ((-(ae * C78661) / C78234) / C78214 - C78660 / C78629 -
             (C78662 * ce) / C78629 +
             C78628 *
                 ((-(C78656 * ce) / C78234) / C78214 - (ae * C78655) / C78629 -
                  (C78628 *
                   (C78646 * C78647 + C78636 * bs[5] * std::pow(C78632, 5)) *
                   C78637) /
                      C78629));
    const double C770 = (-(C78770 * C78643 * ce) / C78234) / C78214 -
                        (ae * C78770 * C78642) / C78629 -
                        (C78628 * C78770 * C78660) / C78629;
    const double C774 = (-(C78660 * C78942) / C78234) / C78214 -
                        ((C78635 + C78636 * C78633 * C78639) * C78637) / C78629;
    const double C1706 = (-(C78828 * C78643 * ce) / C78234) / C78214 -
                         (ae * C78828 * C78642) / C78629 -
                         (C78628 * C78828 * C78660) / C78629;
    const double C1710 =
        (-(C78660 * C79064) / C78234) / C78214 -
        ((C78635 + C78636 * C78633 * C78639) * C78637) / C78629;
    const double C3991 = (-(C78828 * C78770 * C78660) / C78234) / C78214;
    const double C357 =
        (-2 * C78628 * C78947) / C78629 +
        C78628 * ((-((C78666 + C78942 * C78667 * C78668) * C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C78947 / C78629);
    const double C1150 =
        (-(ae * (C78770 * C78776 + C78635 * ce)) / C78234) / C78214 -
        ((C78635 + C78942 * C78633 * C78639) * C78637) / C78629 -
        ((C78770 * C78891 + C78635 * ae) * ce) / C78629 +
        C78770 * ((-(C78891 * ce) / C78234) / C78214 - (ae * C78776) / C78629 -
                  (C78770 * C78947) / C78629);
    const double C1151 = (-(C78628 * C78891 * ce) / C78234) / C78214 -
                         (ae * C78628 * C78776) / C78629 -
                         (C78770 * C78628 * C78947) / C78629;
    const double C2085 = (-(C78828 * C78628 * C78947) / C78234) / C78214;
    const double C2089 =
        (-(C78947 * C79064) / C78234) / C78214 -
        ((C78635 + C78942 * C78633 * C78639) * C78637) / C78629;
    const double C4423 = (-(C78828 * C78891 * ce) / C78234) / C78214 -
                         (ae * C78828 * C78776) / C78629 -
                         (C78770 * C78828 * C78947) / C78629;
    const double C640 =
        (-2 * C78628 * C79069) / C78629 +
        C78628 * ((-((C78666 + C79064 * C78667 * C78668) * C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C79069 / C78629);
    const double C1577 = (-(C78770 * C78628 * C79069) / C78234) / C78214;
    const double C1579 =
        (-(C79069 * C78942) / C78234) / C78214 -
        ((C78635 + C79064 * C78633 * C78639) * C78637) / C78629;
    const double C2510 =
        (-(ae * (C78828 * C78834 + C78635 * ce)) / C78234) / C78214 -
        ((C78635 + C79064 * C78633 * C78639) * C78637) / C78629 -
        ((C78828 * C78992 + C78635 * ae) * ce) / C78629 +
        C78828 * ((-(C78992 * ce) / C78234) / C78214 - (ae * C78834) / C78629 -
                  (C78828 * C79069) / C78629);
    const double C2511 = (-(C78628 * C78992 * ce) / C78234) / C78214 -
                         (ae * C78628 * C78834) / C78629 -
                         (C78828 * C78628 * C79069) / C78629;
    const double C4889 = (-(C78770 * C78992 * ce) / C78234) / C78214 -
                         (ae * C78770 * C78834) / C78629 -
                         (C78828 * C78770 * C79069) / C78629;
    const double C32336 = C26926 * C6322;
    const double C32844 = C490 * C6322;
    const double C58205 = C275 * C6322;
    const double C32657 = C81012 * C6654;
    const double C32146 = C26926 * C6138;
    const double C32656 = C490 * C6138;
    const double C58012 = C275 * C6138;
    const double C38384 = C26926 * C12543;
    const double C38812 = C490 * C12543;
    const double C64188 = C275 * C12543;
    const double C31658 = C31650 + C31651;
    const double C32160 = C32150 + C32151;
    const double C61992 = C61984 + C61985;
    const double C374 = C364 + C365;
    const double C589 = C579 + C580;
    const double C442 = C432 + C433;
    const double C657 = C647 + C648;
    const double C308 = C295 + C296;
    const double C307 = C293 + C294;
    const double C309 = C297 + C298;
    const double C1068 = C1052 + C1053;
    const double C1070 = C1056 + C1057;
    const double C2004 = C1988 + C1989;
    const double C2006 = C1992 + C1993;
    const double C54125 = C54117 + C54118;
    const double C56147 = C56141 + C56142;
    const double C62156 = C62148 + C62149;
    const double C523 = C510 + C511;
    const double C522 = C508 + C509;
    const double C524 = C512 + C513;
    const double C1390 = C1374 + C1375;
    const double C1392 = C1378 + C1379;
    const double C27899 = C27891 + C27892;
    const double C2326 = C2310 + C2311;
    const double C2328 = C2314 + C2315;
    const double C30701 = C30695 + C30696;
    const double C31956 = C31948 + C31949;
    const double C32670 = C32660 + C32661;
    const double C78695 = C78628 * C78692;
    const double C78713 = 2 * C78692;
    const double C78705 = C78692 * ce;
    const double C79340 = C78770 * C78692;
    const double C79615 = C78828 * C78692;
    const double C5664 =
        (2 * C78770 * C78662 + C78770 * (C78662 + C78692 * C78942)) / C78214;
    const double C6149 = (C78828 * (C78662 + C78692 * C78942)) / C78214;
    const double C10474 =
        (2 * C78828 * C78662 + C78828 * (C78662 + C78692 * C79064)) / C78214;
    const double C78727 = -C78716;
    const double C79249 = C79246 / C78234;
    const double C80001 = C79246 / C78629;
    const double C12689 =
        2 * ((-(C78828 * C79762) / C78234) / C78214 - (C79330 * ce) / C78629) -
        ((C79330 + C79243 * C79064) * ce) / C78629 +
        C78828 *
            ((-(C78828 * C79243 * ce) / C78234) / C78214 - C79762 / C78629 +
             C78828 * ((-(C78828 * C78770 * C78863) / C78234) / C78214 -
                       C79246 / C78629));
    const double C38385 = C81009 * C12545;
    const double C79271 = C79268 / C78234;
    const double C6331 =
        (-(C78846 * C78942) / C78234) / C78214 - C78839 / C78629 -
        (C78828 * C79335 * ce) / C78629 +
        C78828 * (C78828 * ((-(C78863 * C78942) / C78234) / C78214 - C78858) -
                  (C79335 * ce) / C78629);
    const double C8645 =
        C78828 * ((-2 * C78770 * C78846) / C78629 +
                  C78770 * ((-(C78863 * C78942) / C78234) / C78214 - C78858)) -
        ((2 * C79330 + C78770 * C79335) * ce) / C78629;
    const double C5666 = (3 * (C78643 + C78656 * C78942) +
                          C78770 * (2 * C79330 + C78770 * C79335)) /
                         C78214;
    const double C6151 = (C78643 + C78656 * C78942 + C79335 * C79064) / C78214;
    const double C8501 = (C78828 * (2 * C79330 + C78770 * C79335)) / C78214;
    const double C38378 =
        (2 * C78828 * C79335 + C78828 * (C79335 + C79805 * C79064)) / C78214;
    const double C10476 = (3 * (C78643 + C78656 * C79064) +
                           C78828 * (2 * C79606 + C78828 * C79610)) /
                          C78214;
    const double C78694 = C78628 * C78691;
    const double C78711 = -2 * C78691;
    const double C78703 = ae * C78691;
    const double C79361 = C78770 * C78691;
    const double C79650 = C78828 * C78691;
    const double C5662 = (-2 * C78770 * C78661) / C78234 -
                         (C78770 * (C78691 * C78942 + C78661)) / C78234;
    const double C6147 = -(C78828 * (C78691 * C78942 + C78661)) / C78234;
    const double C10472 = (-2 * C78828 * C78661) / C78234 -
                          (C78828 * (C78691 * C79064 + C78661)) / C78234;
    const double C79250 = C79247 / C78629;
    const double C79820 = C79247 / C78234;
    const double C79826 = C79822 / C78234;
    const double C38382 = C26926 * C12547;
    const double C38810 = C490 * C12547;
    const double C64186 = C275 * C12547;
    const double C79272 = C79269 / C78629;
    const double C80101 = C79269 / C78234;
    const double C80107 = C80103 / C78234;
    const double C6663 =
        (-(C79004 * C78942) / C78234) / C78214 - C78997 / C78629 -
        (ae * C78828 * C79356) / C78629 +
        C78828 * (C78828 * ((-(C79021 * C78942) / C78234) / C78214 - C79016) -
                  (ae * C79356) / C78629);
    const double C8921 =
        (((-2 * C79352) / C78234 - (C78770 * C79356) / C78234) * ae) / C78214 +
        C78828 * ((-2 * C78770 * C79004) / C78629 +
                  C78770 * ((-(C79021 * C78942) / C78234) / C78214 - C79016));
    const double C5668 =
        (-3 * (C78655 * C78942 + C78642)) / C78234 +
        C78770 * ((-2 * C79352) / C78234 - (C78770 * C79356) / C78234);
    const double C6153 = -(C79356 * C79064 + C78655 * C78942 + C78642) / C78234;
    const double C8503 =
        C78828 * ((-2 * C79352) / C78234 - (C78770 * C79356) / C78234);
    const double C38379 = (-2 * C78828 * C79356) / C78234 -
                          (C78828 * (C79827 * C79064 + C79356)) / C78234;
    const double C12759 =
        (((-2 * C79641) / C78234 - (C78828 * C79645) / C78234) * ae) / C78214 +
        C78770 * ((-2 * C79569) / C78629 +
                  C78828 * ((-(C78920 * C79064) / C78234) / C78214 - C78915));
    const double C10478 =
        (-3 * (C78655 * C79064 + C78642)) / C78234 +
        C78828 * ((-2 * C79641) / C78234 - (C78828 * C79645) / C78234);
    const double C78693 = C78628 * C78690;
    const double C78704 = C78690 / C78629;
    const double C79090 = C78770 * C78690;
    const double C79168 = C78828 * C78690;
    const double C772 = (-(ae * C78770 * C78661) / C78234) / C78214 -
                        (C78770 * C78660) / C78629 -
                        (C78770 * C78662 * ce) / C78629 +
                        C78628 * ((-(C78770 * C78656 * ce) / C78234) / C78214 -
                                  (ae * C78770 * C78655) / C78629 -
                                  (C78628 * C78770 * C78690) / C78629);
    const double C775 =
        (-((C78643 + C78656 * C78942) * ce) / C78234) / C78214 -
        (ae * (C78655 * C78942 + C78642)) / C78629 +
        C78628 * ((-(C78690 * C78942) / C78234) / C78214 - C78660 / C78629);
    const double C1708 = (-(ae * C78828 * C78661) / C78234) / C78214 -
                         (C78828 * C78660) / C78629 -
                         (C78828 * C78662 * ce) / C78629 +
                         C78628 * ((-(C78828 * C78656 * ce) / C78234) / C78214 -
                                   (ae * C78828 * C78655) / C78629 -
                                   (C78628 * C78828 * C78690) / C78629);
    const double C1711 =
        (-((C78643 + C78656 * C79064) * ce) / C78234) / C78214 -
        (ae * (C78655 * C79064 + C78642)) / C78629 +
        C78628 * ((-(C78690 * C79064) / C78234) / C78214 - C78660 / C78629);
    const double C5671 =
        (-2 * C78770 * C78660) / C78629 +
        C78770 * ((-(C78690 * C78942) / C78234) / C78214 - C78660 / C78629);
    const double C6158 =
        C78828 * ((-(C78690 * C78942) / C78234) / C78214 - C78660 / C78629);
    const double C10481 =
        (-2 * C78828 * C78660) / C78629 +
        C78828 * ((-(C78690 * C79064) / C78234) / C78214 - C78660 / C78629);
    const double C78752 = C78628 * C78748;
    const double C79342 = C78748 * C78942;
    const double C79617 = C78748 * C79064;
    const double C79765 = C78770 * C78748;
    const double C79865 = C78770 * C79858;
    const double C80166 = C78828 * C80161;
    const double C78741 = C78731 * ae;
    const double C78739 = C78628 * C78731;
    const double C78738 = C78731 * ce;
    const double C79545 = C78770 * C78731;
    const double C79753 = C78828 * C78731;
    const double C6899 =
        2 * C78770 * C78682 + C78770 * (C78682 + C78731 * C78942);
    const double C7589 = C78828 * (C78682 + C78731 * C78942);
    const double C11885 =
        2 * C78828 * C78682 + C78828 * (C78682 + C78731 * C79064);
    const double C79419 = C79415 + C78733;
    const double C79721 = C79716 + C78733;
    const double C79418 = C79412 + C78730;
    const double C79718 = C79713 + C78730;
    const double C79414 = C78674 + C79408;
    const double C79416 = C79407 * ae;
    const double C79413 = C79407 * ce;
    const double C79791 = C78828 * C79407;
    const double C12544 =
        2 * C78828 * C79399 + C78828 * (C79399 + C79407 * C79064);
    const double C79720 = C78674 + C79715;
    const double C79722 = C79714 * ae;
    const double C79719 = C79714 * ce;
    const double C78751 = C78628 * C78745;
    const double C79364 = C78745 * C78942;
    const double C79652 = C78745 * C79064;
    const double C79776 = C78770 * C78745;
    const double C79862 = C78770 * C79855;
    const double C80032 = C79855 * C79064;
    const double C80165 = C78828 * C80157;
    const double C78750 = C78628 * C78744;
    const double C79095 = C78744 * C78942;
    const double C79173 = C78744 * C79064;
    const double C79245 = C78770 * C78744;
    const double C79267 = C78828 * C78744;
    const double C78959 = C78958 * C78636;
    const double C79405 = C78628 * C78958;
    const double C79842 = C78770 * C78958;
    const double C79947 = C78958 * C79064;
    const double C79981 = C78828 * C78958;
    const double C79081 = C79080 * C78636;
    const double C79484 = C78628 * C79080;
    const double C79932 = C79080 * C78942;
    const double C80037 = C78770 * C79080;
    const double C80142 = C78828 * C79080;
    const double C79866 = C79857 * ae;
    const double C79864 = C78770 * C79857;
    const double C79863 = C79857 * ce;
    const double C80069 = C78828 * C79857;
    const double C38377 =
        2 * C78828 * C79384 + C78828 * (C79384 + C79857 * C79064);
    const double C80051 = C80047 + C79859;
    const double C80050 = C80044 + C79856;
    const double C80046 = C79377 + C80040;
    const double C80048 = C80039 * ae;
    const double C80045 = C80039 * ce;
    const double C80151 = C80015 * ae;
    const double C80148 = C78828 * C80015;
    const double C80146 = C80015 * ce;
    const double C170 =
        (-3 * (C78782 * C78636 + C78776)) / C78234 +
        C78628 * ((-2 * C78784) / C78234 - (C78628 * C78794) / C78234);
    const double C860 = -(C78770 * (C78770 * C78794 + C78682 * ce) +
                          C78782 * C78636 + C78776 + C78770 * C78682 * ce) /
                        C78234;
    const double C861 =
        C78770 * ((-2 * C78784) / C78234 - (C78628 * C78794) / C78234) -
        ((2 * C78651 + C78628 * C78682) * ce) / C78234;
    const double C1791 =
        C78828 * ((-2 * C78784) / C78234 - (C78628 * C78794) / C78234);
    const double C1794 = -(C78794 * C79064 + C78782 * C78636 + C78776) / C78234;
    const double C4095 = -(C78828 * (C78770 * C78794 + C78682 * ce)) / C78234;
    const double C11955 = (-2 * C78828 * C78794) / C78234 -
                          (C78828 * (C78815 * C79064 + C78794)) / C78234;
    const double C78811 = C78807 / C78234;
    const double C78809 = C78804 / C78234;
    const double C79404 = C78804 / C78629;
    const double C79401 = C79398 + C78681;
    const double C12172 = C275 * C10526;
    const double C12396 = C490 * C10526;
    const double C63444 = C26926 * C10526;
    const double C79388 = C78770 * C79382;
    const double C79843 = -2 * C79382;
    const double C79839 = ae * C79382;
    const double C80029 = C78828 * C79382;
    const double C12617 = (-2 * C78828 * C79371) / C78234 -
                          (C78828 * (C79382 * C79064 + C79371)) / C78234;
    const double C10528 =
        (-3 * (C78782 * C79064 + C78776)) / C78234 +
        C78828 * ((-2 * C79658) / C78234 - (C78828 * C79662) / C78234);
    const double C79984 = C79982 / C78629;
    const double C80120 = C79982 / C78234;
    const double C80126 = C80122 / C78234;
    const double C225 =
        (-3 * (C78840 * C78636 + C78834)) / C78234 +
        C78628 * ((-2 * C78842) / C78234 - (C78628 * C78852) / C78234);
    const double C950 = -(C78852 * C78942 + C78840 * C78636 + C78834) / C78234;
    const double C951 =
        C78770 * ((-2 * C78842) / C78234 - (C78628 * C78852) / C78234);
    const double C1886 = -(C78828 * (C78828 * C78852 + C78682 * ce) +
                           C78840 * C78636 + C78834 + C78828 * C78682 * ce) /
                         C78234;
    const double C1887 =
        C78828 * ((-2 * C78842) / C78234 - (C78628 * C78852) / C78234) -
        ((2 * C78651 + C78628 * C78682) * ce) / C78234;
    const double C4201 =
        -(C78828 * C78770 * C78852 + C78770 * C78682 * ce) / C78234;
    const double C7041 = (-2 * C78770 * C78852) / C78234 -
                         (C78770 * (C78873 * C78942 + C78852)) / C78234;
    const double C7791 = -(C78828 * (C78873 * C78942 + C78852) +
                           (C78682 + C78731 * C78942) * ce) /
                         C78234;
    const double C78869 = C78865 / C78234;
    const double C78867 = C78862 / C78234;
    const double C79442 = C78862 / C78629;
    const double C5917 =
        2 * ((-(C78770 * C79428) / C78234) / C78214 - (ae * C78842) / C78629) -
        (ae * (C78857 * C78942 + C78842)) / C78629 +
        C78770 *
            ((-(ae * C78770 * C78857) / C78234) / C78214 - C79428 / C78629 +
             C78770 * ((-(C78770 * C78628 * C78979) / C78234) / C78214 -
                       C78862 / C78629));
    const double C6321 = -(C78828 * (C78828 * C79440 + C79399 * ce) +
                           C78770 * C78842 + C78828 * C79399 * ce) /
                         C78234;
    const double C79708 = C79705 + C78681;
    const double C7263 = C275 * C5771;
    const double C7487 = C490 * C5771;
    const double C33079 = C26926 * C5771;
    const double C8110 = C275 * C6323;
    const double C8430 = C490 * C6323;
    const double C33810 = C26926 * C6323;
    const double C5773 =
        (-3 * (C78840 * C78942 + C78834)) / C78234 +
        C78770 * ((-2 * C79431) / C78234 - (C78770 * C79435) / C78234);
    const double C6325 = -(C78828 * (C78828 * C79435 + C79384 * ce) +
                           C78840 * C78942 + C78834 + C78828 * C79384 * ce) /
                         C78234;
    const double C8643 =
        C78828 * ((-2 * C79431) / C78234 - (C78770 * C79435) / C78234) -
        ((2 * C79369 + C78770 * C79384) * ce) / C78234;
    const double C79696 = C78828 * C79690;
    const double C79990 = ae * C79690;
    const double C80143 = -2 * C79690;
    const double C79786 = C79784 + C79383;
    const double C79894 = C79890 / C78234;
    const double C79892 = C79888 / C78234;
    const double C80036 = C79888 / C78629;
    const double C280 = (3 * (C78891 + C78897 * C78636) +
                         C78628 * (2 * C78899 + C78628 * C78909)) /
                        C78214;
    const double C1038 = (C78770 * (2 * C78899 + C78628 * C78909) +
                          (2 * C78651 + C78628 * C78682) * ae) /
                         C78214;
    const double C1041 =
        (C78891 + C78897 * C78636 + C78770 * (C78770 * C78909 + C78682 * ae) +
         C78770 * C78682 * ae) /
        C78214;
    const double C1974 = (C78828 * (2 * C78899 + C78628 * C78909)) / C78214;
    const double C1977 = (C78891 + C78897 * C78636 + C78909 * C79064) / C78214;
    const double C4307 = (C78828 * (C78770 * C78909 + C78682 * ae)) / C78214;
    const double C12095 =
        (2 * C78828 * C78909 + C78828 * (C78909 + C78929 * C79064)) / C78214;
    const double C6576 =
        (-(C78828 * C78897 * ce) / C78234) / C78214 - C78972 / C78629 +
        C78828 * ((-(C78828 * C78975) / C78234) / C78214 - C78904) -
        (ae * (C78828 * (C78828 * C78770 * C78848 + C79383) + C79431 +
               C78828 * C79377 * ce)) /
            C78629 +
        C78770 *
            (C78770 *
                 ((-(C78828 * C78905 * ce) / C78234) / C78214 - C78978 +
                  C78828 * ((-(C78828 * C78979) / C78234) / C78214 - C78921)) -
             (ae * (C78828 * (C78828 * C78848 + C78673) + C78840 +
                    C78828 * C78666 * ce)) /
                 C78629);
    const double C79852 = -C79841;
    const double C78924 = C78919 / C78234;
    const double C79584 = C78919 / C78629;
    const double C6574 =
        C78770 *
            ((-(C78828 * C78914 * ce) / C78234) / C78214 - C79428 / C78629 +
             C78828 *
                 ((-(C78828 * C79441) / C78234) / C78214 - C78919 / C78629)) -
        (ae * (C78828 * (C78828 * C78857 + C78681) + C78842 +
               C78828 * C78674 * ce)) /
            C78629;
    const double C6577 =
        (-(C78828 * C79428) / C78234) / C78214 - (C78899 * ce) / C78629 -
        (ae * (C78828 * C79440 + C79399 * ce)) / C78629 +
        C78770 * (C78770 * ((-(C78828 * C79441) / C78234) / C78214 -
                            C78919 / C78629) -
                  (ae * (C78828 * C78857 + C78681)) / C78629);
    const double C79402 = C79400 + C78684;
    const double C12099 = C81011 * C10631;
    const double C79389 = C78770 * C79385;
    const double C79848 = 2 * C79385;
    const double C79840 = C79385 * ce;
    const double C12757 =
        (2 * C78828 * C79372 + C78828 * (C79372 + C79385 * C79064)) / C78214;
    const double C36591 =
        (3 * (C79372 + C79385 * C79064) +
         C78828 * (2 * C78828 * C79385 + C78828 * (C79385 + C79858 * C79064))) /
        C78214;
    const double C10633 = (3 * (C78891 + C78897 * C79064) +
                           C78828 * (2 * C79630 + C78828 * C79632)) /
                          C78214;
    const double C79957 = C79955 / C78234;
    const double C78955 = C78952 / C78629;
    const double C79375 = C78770 * C78952;
    const double C79397 = C78628 * C78952;
    const double C79573 = C78828 * C78952;
    const double C358 =
        3 * ((-(C78952 * C78636) / C78234) / C78214 - C78947 / C78629) +
        C78628 *
            ((-2 * C78628 * C78952) / C78629 +
             C78628 *
                 ((-((C78708 + C78942 * C78709 * C78710) * C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C78952 / C78629));
    const double C1152 =
        (-(ae * (C78770 * C78784 + C78651 * ce)) / C78234) / C78214 -
        (C78628 * C78947) / C78629 -
        ((C78770 * C78899 + C78651 * ae) * ce) / C78629 +
        C78770 * ((-(C78899 * ce) / C78234) / C78214 - (ae * C78784) / C78629 -
                  (C78770 * C78628 * C78952) / C78629);
    const double C1153 =
        (-((C78891 + C78897 * C78636) * ce) / C78234) / C78214 -
        (ae * (C78782 * C78636 + C78776)) / C78629 +
        C78770 * ((-(C78952 * C78636) / C78234) / C78214 - C78947 / C78629);
    const double C2086 =
        C78828 * ((-(C78952 * C78636) / C78234) / C78214 - C78947 / C78629);
    const double C2090 = (-(C78628 * C78952 * C79064) / C78234) / C78214 -
                         (C78628 * C78947) / C78629;
    const double C4424 = (-(C78828 * C78899 * ce) / C78234) / C78214 -
                         (ae * C78828 * C78784) / C78629 -
                         (C78770 * C78828 * C78628 * C78952) / C78629;
    const double C5871 =
        2 * ((-(C78891 * ce) / C78234) / C78214 - (ae * C78776) / C78629 -
             (C78770 * C78947) / C78629) -
        (ae * (C78770 * C79371 + C78776 + C79369 * ce)) / C78629 -
        ((C78891 + C78770 * C79372 + C79369 * ae) * ce) / C78629 +
        C78770 * ((-(ae * C79371) / C78234) / C78214 - C78947 / C78629 -
                  (C79372 * ce) / C78629 +
                  C78770 * ((-C78901 / C78234) / C78214 - C78789 -
                            (C78770 * C78952) / C78629));
    const double C6493 = (-(ae * C78828 * C79371) / C78234) / C78214 -
                         (C78828 * C78947) / C78629 -
                         (C78828 * C79372 * ce) / C78629 +
                         C78770 * ((-(C78828 * C78897 * ce) / C78234) / C78214 -
                                   (ae * C78828 * C78782) / C78629 -
                                   (C78770 * C78828 * C78952) / C78629);
    const double C6495 =
        (-((C78891 + C78897 * C79064) * ce) / C78234) / C78214 -
        (ae * (C78782 * C79064 + C78776)) / C78629 +
        C78770 * ((-(C78952 * C79064) / C78234) / C78214 - C78947 / C78629);
    const double C10682 =
        (-2 * C78828 * C78947) / C78629 +
        C78828 * ((-(C78952 * C79064) / C78234) / C78214 - C78947 / C78629);
    const double C495 = (3 * (C78992 + C78998 * C78636) +
                         C78628 * (2 * C79000 + C78628 * C79010)) /
                        C78214;
    const double C1360 = (C78770 * (2 * C79000 + C78628 * C79010)) / C78214;
    const double C1363 = (C78992 + C78998 * C78636 + C79010 * C78942) / C78214;
    const double C2296 = (C78828 * (2 * C79000 + C78628 * C79010) +
                          (2 * C78651 + C78628 * C78682) * ae) /
                         C78214;
    const double C2299 =
        (C78992 + C78998 * C78636 + C78828 * (C78828 * C79010 + C78682 * ae) +
         C78828 * C78682 * ae) /
        C78214;
    const double C4657 =
        (C78828 * C78770 * C79010 + C78770 * C78682 * ae) / C78214;
    const double C7333 =
        (2 * C78770 * C79010 + C78770 * (C79010 + C79030 * C78942)) / C78214;
    const double C8211 = (C78828 * (C79010 + C79030 * C78942) +
                          (C78682 + C78731 * C78942) * ae) /
                         C78214;
    const double C80154 = -C80141;
    const double C79025 = C79020 / C78234;
    const double C79470 = C79020 / C78629;
    const double C6015 =
        2 * ((-(C78770 * C79466) / C78234) / C78214 - (C79000 * ce) / C78629) -
        ((C79000 + C79015 * C78942) * ce) / C78629 +
        C78770 *
            ((-(C78770 * C79015 * ce) / C78234) / C78214 - C79466 / C78629 +
             C78770 * ((-(C78770 * C78628 * C79055) / C78234) / C78214 -
                       C79020 / C78629));
    const double C6653 =
        (C78770 * C79000 + C78828 * (C78828 * C79468 + C79399 * ae) +
         C78828 * C79399 * ae) /
        C78214;
    const double C79709 = C79707 + C78684;
    const double C7337 = C81012 * C5963;
    const double C8215 = C81012 * C6655;
    const double C5965 = (3 * (C78992 + C78998 * C78942) +
                          C78770 * (2 * C79457 + C78770 * C79461)) /
                         C78214;
    const double C6657 =
        (C78992 + C78998 * C78942 + C78828 * (C78828 * C79461 + C79384 * ae) +
         C78828 * C79384 * ae) /
        C78214;
    const double C8919 = (C78828 * (2 * C79457 + C78770 * C79461) +
                          (2 * C79369 + C78770 * C79384) * ae) /
                         C78214;
    const double C79697 = C78828 * C79693;
    const double C80149 = 2 * C79693;
    const double C80140 = C79693 * ce;
    const double C79787 = C79785 + C79386;
    const double C79918 = C79914 / C78234;
    const double C79077 = C79074 / C78629;
    const double C79480 = C78628 * C79074;
    const double C79683 = C78828 * C79074;
    const double C79780 = C78770 * C79074;
    const double C641 =
        3 * ((-(C79074 * C78636) / C78234) / C78214 - C79069 / C78629) +
        C78628 *
            ((-2 * C78628 * C79074) / C78629 +
             C78628 *
                 ((-((C78708 + C79064 * C78709 * C78710) * C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C79074 / C78629));
    const double C1580 = (-(C78628 * C79074 * C78942) / C78234) / C78214 -
                         (C78628 * C79069) / C78629;
    const double C1581 =
        C78770 * ((-(C79074 * C78636) / C78234) / C78214 - C79069 / C78629);
    const double C2512 =
        (-(ae * (C78828 * C78842 + C78651 * ce)) / C78234) / C78214 -
        (C78628 * C79069) / C78629 -
        ((C78828 * C79000 + C78651 * ae) * ce) / C78629 +
        C78828 * ((-(C79000 * ce) / C78234) / C78214 - (ae * C78842) / C78629 -
                  (C78828 * C78628 * C79074) / C78629);
    const double C2513 =
        (-((C78992 + C78998 * C78636) * ce) / C78234) / C78214 -
        (ae * (C78840 * C78636 + C78834)) / C78629 +
        C78828 * ((-(C79074 * C78636) / C78234) / C78214 - C79069 / C78629);
    const double C4890 = (-(C78770 * C79000 * ce) / C78234) / C78214 -
                         (ae * C78770 * C78842) / C78629 -
                         (C78828 * C78770 * C78628 * C79074) / C78629;
    const double C6060 =
        (-2 * C78770 * C79069) / C78629 +
        C78770 * ((-(C79074 * C78942) / C78234) / C78214 - C79069 / C78629);
    const double C6819 =
        (-(ae * (C78828 * C79431 + C79369 * ce)) / C78234) / C78214 -
        (C78770 * C79069) / C78629 -
        ((C78828 * C79457 + C79369 * ae) * ce) / C78629 +
        C78828 * ((-(C79457 * ce) / C78234) / C78214 - (ae * C79431) / C78629 -
                  (C78828 * C78770 * C79074) / C78629);
    const double C6821 =
        (-((C78992 + C78998 * C78942) * ce) / C78234) / C78214 -
        (ae * (C78840 * C78942 + C78834)) / C78629 +
        C78828 * ((-(C79074 * C78942) / C78234) / C78214 - C79069 / C78629);
    const double C10869 =
        2 * ((-(C78992 * ce) / C78234) / C78214 - (ae * C78834) / C78629 -
             (C78828 * C79069) / C78629) -
        (ae * (C78828 * C79679 + C78834 + C79677 * ce)) / C78629 -
        ((C78992 + C78828 * C79680 + C79677 * ae) * ce) / C78629 +
        C78828 * ((-(ae * C79679) / C78234) / C78214 - C79069 / C78629 -
                  (C79680 * ce) / C78629 +
                  C78828 * ((-C79002 / C78234) / C78214 - C78847 -
                            (C78828 * C79074) / C78629));
    const double C78685 = C78678 / C78214;
    const double C62099 = C81009 * C10586;
    const double C301 = C275 * C103;
    const double C516 = C490 * C103;
    const double C2828 = C275 * C749;
    const double C3056 = C490 * C749;
    const double C28806 = C26926 * C749;
    const double C1064 = C275 * C752;
    const double C1386 = C490 * C752;
    const double C27360 = C26926 * C752;
    const double C3494 = C275 * C1685;
    const double C3722 = C490 * C1685;
    const double C55182 = C26926 * C1685;
    const double C2000 = C275 * C1688;
    const double C2322 = C490 * C1688;
    const double C53808 = C26926 * C1688;
    const double C4318 = C275 * C3981;
    const double C4668 = C490 * C3981;
    const double C30058 = C26926 * C3981;
    const double C11276 = C275 * C6137;
    const double C11596 = C490 * C6137;
    const double C36910 = C26926 * C6137;
    const double C31656 = C26926 * C5660;
    const double C31954 = C490 * C5660;
    const double C32156 = C26926 * C6141;
    const double C32666 = C490 * C6141;
    const double C58022 = C275 * C6141;
    const double C34486 = C26926 * C8499;
    const double C34910 = C490 * C8499;
    const double C60206 = C275 * C8499;
    const double C61990 = C26926 * C10470;
    const double C62154 = C275 * C10470;
    const double C58206 = C81011 * C6573;
    const double C58208 = C81011 * C6575;
    const double C79387 = C79380 / C78214;
    const double C32008 = C81012 * C6013;
    const double C79695 = C79688 / C78214;
    const double C79809 = C79802 + C79807;
    const double C36458 = (3 * (C79330 + C79243 * C79064) +
                           C78828 * (2 * C79999 + C78828 * C80006)) /
                          C78214;
    const double C80090 = C80083 + C80088;
    const double C79833 = C79830 / C78234;
    const double C36459 =
        (-3 * (C79244 * C79064 + C79352)) / C78234 +
        C78828 * ((-2 * C80018) / C78234 - (C78828 * C80024) / C78234);
    const double C80114 = C80111 / C78234;
    const double C78821 = C78818 / C78234;
    const double C10529 =
        (-3 * (C78799 * C79064 + C78784)) / C78234 +
        C78828 * ((-2 * C79667) / C78234 - (C78828 * C79671) / C78234);
    const double C80133 = C80130 / C78234;
    const double C78879 = C78876 / C78234;
    const double C5774 =
        (-3 * (C78857 * C78942 + C78842)) / C78234 +
        C78770 * ((-2 * C79440) / C78234 - (C78770 * C79447) / C78234);
    const double C79901 = C79898 / C78234;
    const double C78935 = C78922 + C78932;
    const double C10634 = (3 * (C78899 + C78914 * C79064) +
                           C78828 * (2 * C79635 + C78828 * C79637)) /
                          C78214;
    const double C80099 = C80097 + C80098;
    const double C79036 = C79023 + C79033;
    const double C5966 = (3 * (C79000 + C79015 * C78942) +
                          C78770 * (2 * C79468 + C78770 * C79475)) /
                         C78214;
    const double C79926 = C79916 + C79923;
    const double C27476 = C27466 + C27467;
    const double C27475 = C27464 + C27465;
    const double C53929 = C53913 + C53914;
    const double C53932 = C53922 + C53923;
    const double C30178 = C30172 + C30173;
    const double C78795 = -C78793;
    const double C62048 = C81009 * C10532;
    const double C79336 = -C79334;
    const double C62050 = C62045 + C62046;
    const double C78817 = -C78814;
    const double C79806 = -C79804;
    const double C80077 = -C80076;
    const double C1069 = C1054 + C1055;
    const double C2005 = C1990 + C1991;
    const double C54124 = C54115 + C54116;
    const double C56146 = C56139 + C56140;
    const double C78910 = -C78908;
    const double C58021 = C81011 * C6417;
    const double C79357 = -C79355;
    const double C62153 = C81011 * C10637;
    const double C58025 = C58014 + C58015;
    const double C58027 = C58018 + C58019;
    const double C62157 = C62150 + C62151;
    const double C78931 = -C78928;
    const double C79829 = -C79825;
    const double C79943 = -C79942;
    const double C79975 = C79974 / C78234;
    const double C27574 = C27561 + C27562;
    const double C27573 = C27557 + C27558;
    const double C54028 = C54018 + C54019;
    const double C54027 = C54016 + C54017;
    const double C30294 = C30282 + C30283;
    const double C78853 = -C78851;
    const double C31764 = C81009 * C5777;
    const double C79611 = -C79609;
    const double C31766 = C31761 + C31762;
    const double C32347 = C32341 + C32342;
    const double C78875 = -C78872;
    const double C79816 = -C79815;
    const double C80005 = C80003 / C78234;
    const double C80087 = -C80085;
    const double C443 = C436 + C437;
    const double C1276 = C1264 + C1265;
    const double C54293 = C54290 + C54291;
    const double C2212 = C2199 + C2200;
    const double C56355 = C56353 + C56354;
    const double C79436 = -C79434;
    const double C79579 = -C79578;
    const double C1277 = C1268 + C1269;
    const double C1278 = C1271 + C1272;
    const double C2214 = C2207 + C2208;
    const double C78982 = -C78981;
    const double C79446 = C79444 / C78234;
    const double C79585 = C79583 / C78234;
    const double C79897 = -C79893;
    const double C79958 = -C79956;
    const double C1391 = C1376 + C1377;
    const double C27898 = C27889 + C27890;
    const double C2327 = C2312 + C2313;
    const double C30700 = C30693 + C30694;
    const double C79011 = -C79009;
    const double C31953 = C81012 * C5969;
    const double C79646 = -C79644;
    const double C31957 = C31950 + C31951;
    const double C32669 = C32658 + C32659;
    const double C32671 = C32662 + C32663;
    const double C79032 = -C79029;
    const double C79910 = -C79909;
    const double C80023 = C80021 / C78234;
    const double C80110 = -C80106;
    const double C590 = C583 + C584;
    const double C27983 = C27980 + C27981;
    const double C1496 = C1483 + C1484;
    const double C2428 = C2417 + C2418;
    const double C30804 = C30802 + C30803;
    const double C79462 = -C79460;
    const double C79663 = -C79661;
    const double C1498 = C1491 + C1492;
    const double C2429 = C2420 + C2421;
    const double C2430 = C2423 + C2424;
    const double C79058 = -C79057;
    const double C79474 = C79472 / C78234;
    const double C79670 = C79668 / C78234;
    const double C79922 = -C79919;
    const double C80129 = -C80125;
    const double C27377 = C27365 * C737;
    const double C31647 = C27365 * C80588;
    const double C32927 = C27365 * C80916;
    const double C27554 = C27364 * C220;
    const double C30279 = C27364 * C3421;
    const double C27578 = C27572 * C80639;
    const double C30280 = C27572 * C80933;
    const double C35949 = C27572 * C9133;
    const double C53825 = C53813 * C737;
    const double C57769 = C53813 * C80588;
    const double C59129 = C53813 * C80916;
    const double C53910 = C53812 * C165;
    const double C55930 = C53812 * C2687;
    const double C53934 = C53928 * C80628;
    const double C55931 = C53928 * C80932;
    const double C57847 = C53928 * C4984;
    const double C78278 = C78275 * de;
    const double C78264 = C78232 * C78260;
    const double C78292 = C78260 / C78240;
    const double C78263 = C78259 / C78234;
    const double C31646 = C27364 * C5657;
    const double C57768 = C53812 * C5657;
    const double C80593 = C80589 - C80592;
    const double C80982 = C80951 / C78234;
    const double C80601 = C80597 - C80600;
    const double C80999 = C80981 / C78240;
    const double C39643 = C27365 * C13799;
    const double C65821 = C53813 * C13799;
    const double C30985 = C27365 * C80998;
    const double C60633 = C53813 * C80998;
    const double C78431 = C78427 * de;
    const double C78402 = C78394 / C78234;
    const double C78411 = C78325 * C78407;
    const double C78440 = C78407 / C78240;
    const double C80682 = C80677 - C80681;
    const double C61396 = C53812 * C852;
    const double C80988 = C80961 / C78234;
    const double C80689 = C80685 - C80688;
    const double C81005 = C80991 / C78240;
    const double C65927 = C53928 * C13173;
    const double C5064 =
        ((-(0 * de) / C78234) / C78240 -
         ((0 - (C78325 * C78326) / C78234) * de) / C78234) /
            C78240 -
        ((C78325 * ((-C78326 / C78234) / C78240 -
                    ((C80628 - (C78325 * C78373) / C78234) * de) / C78234) +
          C13173) *
         de) /
            C78234 +
        (-C78373 / C78234) / C78240 - (0 * de) / C78234;
    const double C61397 = C53928 * C81003;
    const double C78522 = C78518 * de;
    const double C78493 = C78485 / C78234;
    const double C78502 = C78340 * C78498;
    const double C78531 = C78498 / C78240;
    const double C80722 = C80717 - C80721;
    const double C32331 = C27364 * C1878;
    const double C80990 = C80964 / C78234;
    const double C80729 = C80725 - C80728;
    const double C81007 = C80994 / C78240;
    const double C44461 = C27572 * C17817;
    const double C9284 =
        ((-(0 * de) / C78234) / C78240 -
         ((0 - (C78340 * C78341) / C78234) * de) / C78234) /
            C78240 -
        ((C78340 * ((-C78341 / C78234) / C78240 -
                    ((C80639 - (C78340 * C78466) / C78234) * de) / C78234) +
          C17817) *
         de) /
            C78234 +
        (-C78466 / C78234) / C78240 - (0 * de) / C78234;
    const double C32332 = C27572 * C81004;
    const double C361 = C305 * C165;
    const double C429 = C305 * C220;
    const double C1158 = C305 * C852;
    const double C2196 = C305 * C1878;
    const double C2901 = C305 * C2687;
    const double C3639 = C305 * C3421;
    const double C377 = C373 * C80628;
    const double C1159 = C373 * C81003;
    const double C2902 = C373 * C80932;
    const double C5291 = C373 * C4984;
    const double C13447 = C373 * C13173;
    const double C445 = C441 * C80639;
    const double C2197 = C441 * C81004;
    const double C3640 = C441 * C80933;
    const double C9511 = C441 * C9133;
    const double C18153 = C441 * C17817;
    const double C54127 = C54123 * C737;
    const double C58007 = C54123 * C80588;
    const double C59433 = C54123 * C80916;
    const double C60867 = C54123 * C80998;
    const double C66139 = C54123 * C13799;
    const double C54204 = C54122 * C165;
    const double C56248 = C54122 * C2687;
    const double C58006 = C54122 * C5657;
    const double C61630 = C54122 * C852;
    const double C54212 = C54210 * C80628;
    const double C56249 = C54210 * C80932;
    const double C58111 = C54210 * C4984;
    const double C61631 = C54210 * C81003;
    const double C66253 = C54210 * C13173;
    const double C576 = C520 * C165;
    const double C644 = C520 * C220;
    const double C1480 = C520 * C852;
    const double C2518 = C520 * C1878;
    const double C3129 = C520 * C2687;
    const double C3867 = C520 * C3421;
    const double C592 = C588 * C80628;
    const double C1481 = C588 * C81003;
    const double C3130 = C588 * C80932;
    const double C5525 = C588 * C4984;
    const double C13657 = C588 * C13173;
    const double C660 = C656 * C80639;
    const double C2519 = C656 * C81004;
    const double C3868 = C656 * C80933;
    const double C9745 = C656 * C9133;
    const double C18363 = C656 * C17817;
    const double C27901 = C27897 * C737;
    const double C31441 = C27897 * C80998;
    const double C31945 = C27897 * C80588;
    const double C33349 = C27897 * C80916;
    const double C40051 = C27897 * C13799;
    const double C28058 = C27896 * C220;
    const double C30903 = C27896 * C3421;
    const double C31944 = C27896 * C5657;
    const double C32839 = C27896 * C1878;
    const double C28066 = C28064 * C80639;
    const double C30904 = C28064 * C80933;
    const double C32840 = C28064 * C81004;
    const double C36405 = C28064 * C9133;
    const double C45065 = C28064 * C17817;
    const double C27560 = C27366 * C220;
    const double C30286 = C27366 * C3421;
    const double C32928 = C27366 * C78260;
    const double C39644 = C27366 * C13806;
    const double C40498 = C27366 * C1878;
    const double C27559 = C27372 * C220;
    const double C31649 = C27372 * C5657;
    const double C32340 = C27372 * C1878;
    const double C33805 = C27372 * C3421;
    const double C53915 = C53814 * C165;
    const double C55936 = C53814 * C2687;
    const double C59130 = C53814 * C78260;
    const double C65822 = C53814 * C13806;
    const double C69934 = C53814 * C852;
    const double C53924 = C53820 * C165;
    const double C57771 = C53820 * C5657;
    const double C61404 = C53820 * C852;
    const double C62598 = C53820 * C2687;
    const double C30281 = C30064 * C3422;
    const double C32145 = C30064 * C5657;
    const double C32333 = C30064 * C1879;
    const double C35950 = C30064 * C9285;
    const double C44462 = C30064 * C17952;
    const double C55932 = C30064 * C2688;
    const double C57848 = C30064 * C5065;
    const double C61398 = C30064 * C853;
    const double C65928 = C30064 * C13246;
    const double C27349 = C81009 * C755;
    const double C27353 = C81009 * C763;
    const double C53797 = C81009 * C1691;
    const double C53801 = C81009 * C1699;
    const double C30051 = C81009 * C3984;
    const double C58013 = C81011 * C6408;
    const double C58017 = C81011 * C6410;
    const double C1497 = C1486 + C1487;
    const double C2213 = C2202 + C2203;
    const double C4788 = C4781 + C4782;
    const double C4554 = C4547 + C4548;
    const double C1072 = C1060 + C1061;
    const double C1394 = C1382 + C1383;
    const double C2008 = C1996 + C1997;
    const double C2330 = C2318 + C2319;
    const double C4322 = C4314 + C4315;
    const double C4672 = C4664 + C4665;
    const double C299 = C275 * C112;
    const double C514 = C490 * C112;
    const double C1058 = C275 * C759;
    const double C1380 = C490 * C759;
    const double C27350 = C26926 * C759;
    const double C1062 = C275 * C765;
    const double C1384 = C490 * C765;
    const double C27358 = C26926 * C765;
    const double C1994 = C275 * C1695;
    const double C2316 = C490 * C1695;
    const double C53798 = C26926 * C1695;
    const double C1998 = C275 * C1701;
    const double C2320 = C490 * C1701;
    const double C53806 = C26926 * C1701;
    const double C4316 = C275 * C3986;
    const double C4666 = C490 * C3986;
    const double C30056 = C26926 * C3986;
    const double C31710 = C26926 * C5722;
    const double C32007 = C490 * C5722;
    const double C32246 = C26926 * C6236;
    const double C32755 = C490 * C6236;
    const double C58115 = C275 * C6236;
    const double C32248 = C26926 * C6238;
    const double C32757 = C490 * C6238;
    const double C58120 = C275 * C6238;
    const double C62098 = C26926 * C10582;
    const double C62260 = C275 * C10582;
    const double C27347 = C81009 * C770;
    const double C27355 = C81009 * C774;
    const double C53795 = C81009 * C1706;
    const double C53803 = C81009 * C1710;
    const double C30053 = C81009 * C3991;
    const double C369 = C81011 * C357;
    const double C1162 = C81011 * C1151;
    const double C2096 = C81011 * C2085;
    const double C54208 = C81011 * C2089;
    const double C56252 = C81011 * C4423;
    const double C652 = C81012 * C640;
    const double C1587 = C81012 * C1577;
    const double C28062 = C81012 * C1579;
    const double C2522 = C81012 * C2511;
    const double C30907 = C81012 * C4889;
    const double C32346 = C32336 + C32337;
    const double C32158 = C32146 + C32147;
    const double C32668 = C32656 + C32657;
    const double C31662 = C31658 * C5657;
    const double C31760 = C31658 * C220;
    const double C34631 = C31658 * C3421;
    const double C32166 = C32160 * C5657;
    const double C32338 = C32160 * C1879;
    const double C33803 = C32160 * C3422;
    const double C35954 = C32160 * C9285;
    const double C44464 = C32160 * C17952;
    const double C57850 = C32160 * C5066;
    const double C61400 = C32160 * C854;
    const double C61996 = C61992 * C5657;
    const double C62044 = C61992 * C165;
    const double C64050 = C61992 * C2687;
    const double C378 = C374 * C80628;
    const double C1167 = C374 * C81003;
    const double C2906 = C374 * C80932;
    const double C5297 = C374 * C4984;
    const double C13451 = C374 * C13173;
    const double C593 = C589 * C80628;
    const double C1489 = C589 * C81003;
    const double C3134 = C589 * C80932;
    const double C5531 = C589 * C4984;
    const double C13661 = C589 * C13173;
    const double C446 = C442 * C80639;
    const double C2205 = C442 * C81004;
    const double C3644 = C442 * C80933;
    const double C9517 = C442 * C9133;
    const double C18157 = C442 * C17817;
    const double C661 = C657 * C80639;
    const double C2527 = C657 * C81004;
    const double C3872 = C657 * C80933;
    const double C9751 = C657 * C9133;
    const double C18367 = C657 * C17817;
    const double C366 = C307 * C165;
    const double C434 = C307 * C220;
    const double C1168 = C307 * C852;
    const double C2206 = C307 * C1878;
    const double C2907 = C307 * C2687;
    const double C3645 = C307 * C3421;
    const double C367 = C309 * C165;
    const double C435 = C309 * C220;
    const double C2909 = C309 * C2687;
    const double C3647 = C309 * C3421;
    const double C1160 = C1068 * C853;
    const double C1266 = C1068 * C220;
    const double C2903 = C1068 * C2688;
    const double C4546 = C1068 * C3421;
    const double C5292 = C1068 * C5065;
    const double C13448 = C1068 * C13246;
    const double C14954 = C1068 * C1878;
    const double C1166 = C1070 * C853;
    const double C1270 = C1070 * C220;
    const double C2905 = C1070 * C2688;
    const double C4549 = C1070 * C3421;
    const double C5296 = C1070 * C5065;
    const double C13450 = C1070 * C13246;
    const double C2094 = C2004 * C165;
    const double C2198 = C2004 * C1879;
    const double C3641 = C2004 * C3422;
    const double C4430 = C2004 * C2687;
    const double C9512 = C2004 * C9285;
    const double C18154 = C2004 * C17952;
    const double C18866 = C2004 * C852;
    const double C59434 = C2004 * C78260;
    const double C66140 = C2004 * C13806;
    const double C2097 = C2006 * C165;
    const double C2204 = C2006 * C1879;
    const double C3643 = C2006 * C3422;
    const double C4433 = C2006 * C2687;
    const double C9516 = C2006 * C9285;
    const double C18156 = C2006 * C17952;
    const double C54112 = C2006 * C745;
    const double C54209 = C54125 * C165;
    const double C58009 = C54125 * C5657;
    const double C61638 = C54125 * C852;
    const double C62908 = C54125 * C2687;
    const double C56250 = C56147 * C2688;
    const double C58010 = C56147 * C5657;
    const double C58112 = C56147 * C5065;
    const double C61632 = C56147 * C853;
    const double C66254 = C56147 * C13246;
    const double C62160 = C62156 * C5657;
    const double C62207 = C62156 * C165;
    const double C64260 = C62156 * C2687;
    const double C581 = C522 * C165;
    const double C649 = C522 * C220;
    const double C1490 = C522 * C852;
    const double C2528 = C522 * C1878;
    const double C3135 = C522 * C2687;
    const double C3873 = C522 * C3421;
    const double C582 = C524 * C165;
    const double C650 = C524 * C220;
    const double C3137 = C524 * C2687;
    const double C3875 = C524 * C3421;
    const double C1482 = C1390 * C853;
    const double C1588 = C1390 * C220;
    const double C3131 = C1390 * C2688;
    const double C4896 = C1390 * C3421;
    const double C5526 = C1390 * C5065;
    const double C13658 = C1390 * C13246;
    const double C15262 = C1390 * C1878;
    const double C33350 = C1390 * C78260;
    const double C40052 = C1390 * C13806;
    const double C1488 = C1392 * C853;
    const double C1592 = C1392 * C220;
    const double C3133 = C1392 * C2688;
    const double C4899 = C1392 * C3421;
    const double C5530 = C1392 * C5065;
    const double C13660 = C1392 * C13246;
    const double C27886 = C1392 * C745;
    const double C28063 = C27899 * C220;
    const double C31947 = C27899 * C5657;
    const double C32848 = C27899 * C1878;
    const double C34412 = C27899 * C3421;
    const double C2416 = C2326 * C165;
    const double C2520 = C2326 * C1879;
    const double C3869 = C2326 * C3422;
    const double C4780 = C2326 * C2687;
    const double C9746 = C2326 * C9285;
    const double C18364 = C2326 * C17952;
    const double C19174 = C2326 * C852;
    const double C2419 = C2328 * C165;
    const double C2526 = C2328 * C1879;
    const double C3871 = C2328 * C3422;
    const double C4783 = C2328 * C2687;
    const double C9750 = C2328 * C9285;
    const double C18366 = C2328 * C17952;
    const double C30905 = C30701 * C3422;
    const double C32655 = C30701 * C5657;
    const double C32841 = C30701 * C1879;
    const double C36406 = C30701 * C9285;
    const double C45066 = C30701 * C17952;
    const double C31960 = C31956 * C5657;
    const double C32056 = C31956 * C220;
    const double C35053 = C31956 * C3421;
    const double C32676 = C32670 * C5657;
    const double C32846 = C32670 * C1879;
    const double C34410 = C32670 * C3422;
    const double C36410 = C32670 * C9285;
    const double C45068 = C32670 * C17952;
    const double C78698 = C78656 + C78695;
    const double C78715 = C78705 / C78629;
    const double C6145 = (C78770 * C78662 + C79340 * C79064) / C78214;
    const double C32937 = C81009 * C5664;
    const double C33597 = C81009 * C6149;
    const double C63371 = C81009 * C10474;
    const double C78735 = C78727 / C78214;
    const double C79252 = -C79249;
    const double C38537 = C81009 * C12689;
    const double C38387 = C38384 + C38385;
    const double C79274 = -C79271;
    const double C32345 = C81009 * C6331;
    const double C34635 = C81009 * C8645;
    const double C31657 = C81009 * C5666;
    const double C32157 = C81009 * C6151;
    const double C34487 = C81009 * C8501;
    const double C61991 = C81009 * C10476;
    const double C78697 = C78694 + C78655;
    const double C78719 = C78711 / C78234;
    const double C78714 = C78703 / C78234;
    const double C79363 = C78703 / C78629;
    const double C6143 = -(C79361 * C79064 + C78770 * C78661) / C78234;
    const double C7114 = C275 * C5662;
    const double C7338 = C490 * C5662;
    const double C32938 = C26926 * C5662;
    const double C7896 = C275 * C6147;
    const double C8216 = C490 * C6147;
    const double C33598 = C26926 * C6147;
    const double C12100 = C275 * C10472;
    const double C12324 = C490 * C10472;
    const double C63372 = C26926 * C10472;
    const double C12965 =
        2 * ((-(C78828 * C79773) / C78234) / C78214 - (ae * C79352) / C78629) -
        (ae * (C79244 * C79064 + C79352)) / C78629 +
        C78828 *
            ((-(ae * C78828 * C79244) / C78234) / C78214 - C79773 / C78629 +
             C78828 *
                 ((-(C78828 * C78770 * C79021) / C78234) / C78214 - C79250));
    const double C79824 = -C79820;
    const double C8715 =
        2 * ((-(C78770 * C79569) / C78234) / C78214 -
             (ae * C78828 * C78655) / C78629) -
        (ae * C78828 * C79356) / C78629 +
        C78770 *
            ((-(ae * C78828 * C79244) / C78234) / C78214 - C79569 / C78629 +
             C78770 *
                 ((-(C78770 * C78828 * C78920) / C78234) / C78214 - C79272));
    const double C80105 = -C80101;
    const double C32665 = C81012 * C6663;
    const double C34909 = C81012 * C8921;
    const double C31654 = C26926 * C5668;
    const double C31952 = C490 * C5668;
    const double C32154 = C26926 * C6153;
    const double C32664 = C490 * C6153;
    const double C58020 = C275 * C6153;
    const double C34484 = C26926 * C8503;
    const double C34908 = C490 * C8503;
    const double C60208 = C275 * C8503;
    const double C64187 = C81011 * C12759;
    const double C61988 = C26926 * C10478;
    const double C62152 = C275 * C10478;
    const double C78696 = C78693 / C78629;
    const double C776 =
        (-(C78690 * C78942) / C78234) / C78214 - C78660 / C78629 -
        (ae * (C78691 * C78942 + C78661)) / C78629 -
        ((C78662 + C78692 * C78942) * ce) / C78629 +
        C78628 * ((-((C78656 + C78683 * C78942) * ce) / C78234) / C78214 -
                  (ae * (C78680 * C78942 + C78655)) / C78629 +
                  C78628 * ((-(C78744 * C78942) / C78234) / C78214 - C78704));
    const double C1712 =
        (-(C78690 * C79064) / C78234) / C78214 - C78660 / C78629 -
        (ae * (C78691 * C79064 + C78661)) / C78629 -
        ((C78662 + C78692 * C79064) * ce) / C78629 +
        C78628 * ((-((C78656 + C78683 * C79064) * ce) / C78234) / C78214 -
                  (ae * (C78680 * C79064 + C78655)) / C78629 +
                  C78628 * ((-(C78744 * C79064) / C78234) / C78214 - C78704));
    const double C3992 = (-(C78828 * C78770 * C78656 * ce) / C78234) / C78214 -
                         (ae * C78828 * C78770 * C78655) / C78629 -
                         (C78628 * C78828 * C79090) / C78629;
    const double C6156 =
        (-(C79090 * C79064) / C78234) / C78214 - (C78770 * C78660) / C78629;
    const double C27351 = C81009 * C772;
    const double C27359 = C81009 * C775;
    const double C53799 = C81009 * C1708;
    const double C53807 = C81009 * C1711;
    const double C31653 = C81009 * C5671;
    const double C32153 = C81009 * C6158;
    const double C61987 = C81009 * C10481;
    const double C78755 = C78683 + C78752;
    const double C79344 = C78692 + C79342;
    const double C79619 = C78692 + C79617;
    const double C12546 =
        (2 * C78828 * C79340 + C78828 * (C79340 + C79765 * C79064)) / C78214;
    const double C79872 = C78905 + C79865;
    const double C80170 = C79006 + C80166;
    const double C79548 = C79546 + C78741;
    const double C79756 = C79754 + C78741;
    const double C78747 = C78712 + C78739;
    const double C78746 = C78738 / C78234;
    const double C79547 = C79544 + C78738;
    const double C79755 = C79752 + C78738;
    const double C11173 = -(C78828 * (C78828 * C79741 + C79545 * ce) +
                            C78770 * C78852 + C78828 * C79545 * ce) /
                          C78234;
    const double C11593 =
        (C78770 * C79010 + C78828 * (C78828 * C79742 + C79545 * ae) +
         C78828 * C79545 * ae) /
        C78214;
    const double C10971 = C78770 * C78682 + C79545 * C79064;
    const double C79422 = C78770 * C79419;
    const double C79725 = C78828 * C79721;
    const double C79421 = C78770 * C79418;
    const double C79724 = C78828 * C79718;
    const double C6326 = -(C78828 * (C78828 * C79447 + C79414 * ce) +
                           C78857 * C78942 + C78842 + C78828 * C79414 * ce) /
                         C78234;
    const double C6658 =
        (C79000 + C79015 * C78942 + C78828 * (C78828 * C79475 + C79414 * ae) +
         C78828 * C79414 * ae) /
        C78214;
    const double C8644 =
        C78828 * ((-2 * C79440) / C78234 - (C78770 * C79447) / C78234) -
        ((2 * C79399 + C78770 * C79414) * ce) / C78234;
    const double C8920 = (C78828 * (2 * C79468 + C78770 * C79475) +
                          (2 * C79399 + C78770 * C79414) * ae) /
                         C78214;
    const double C5661 = 3 * (C78651 + C78674 * C78942) +
                         C78770 * (2 * C79399 + C78770 * C79414);
    const double C6142 = C78651 + C78674 * C78942 + C79414 * C79064;
    const double C8500 = C78828 * (2 * C79399 + C78770 * C79414);
    const double C79796 = C79794 + C79416;
    const double C79795 = C79793 + C79413;
    const double C6578 =
        (-(C78828 * C78914 * ce) / C78234) / C78214 - C79428 / C78629 +
        C78828 * ((-(C78828 * C79441) / C78234) / C78214 - C78919 / C78629) -
        (ae * (C78828 * (C78828 * C78770 * C79443 + C79413) + C79440 +
               C78828 * C79407 * ce)) /
            C78629 +
        C78770 * (C78770 * ((-(C78828 * C79409 * ce) / C78234) / C78214 -
                            C79441 / C78629 +
                            C78828 * ((-(C78828 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C78969) /
                                       C78234) /
                                          C78214 -
                                      (C79409 * ce) / C78629)) -
                  (ae * (C78828 * (C78828 * C79443 + C78730) + C78857 +
                         C78828 * C78722 * ce)) /
                      C78629);
    const double C10471 = 3 * (C78651 + C78674 * C79064) +
                          C78828 * (2 * C79706 + C78828 * C79720);
    const double C78754 = C78751 + C78680;
    const double C79366 = C79364 + C78691;
    const double C79654 = C79652 + C78691;
    const double C12548 = (-2 * C78828 * C79361) / C78234 -
                          (C78828 * (C79776 * C79064 + C79361)) / C78234;
    const double C79869 = C79862 + C78790;
    const double C80034 = C80032 + C79382;
    const double C80169 = C80165 + C78848;
    const double C78753 = C78750 / C78629;
    const double C79096 = C79095 / C78234;
    const double C79174 = C79173 / C78234;
    const double C79248 = C78628 * C79245;
    const double C79290 = C78828 * C79245;
    const double C3993 = (-(ae * C78828 * C78770 * C78691) / C78234) / C78214 -
                         (C78828 * C79090) / C78629 -
                         (C78828 * C78770 * C78692 * ce) / C78629 +
                         C78628 * ((-(C78828 * C79243 * ce) / C78234) / C78214 -
                                   (ae * C78828 * C79244) / C78629 -
                                   (C78628 * C78828 * C79245) / C78629);
    const double C6155 =
        (-((C79330 + C79243 * C79064) * ce) / C78234) / C78214 -
        (ae * (C79244 * C79064 + C79352)) / C78629 +
        C78628 * ((-(C79245 * C79064) / C78234) / C78214 - C79090 / C78629);
    const double C8506 =
        (C78828 *
         ((-2 * C79244) / C78234 -
          (C78770 * (C78729 * C78942 + C78680)) / C78234) *
         ae) /
            C78214 -
        (C78828 * (2 * C79243 + C78770 * (C78683 + C78732 * C78942)) * ce) /
            C78629 +
        C78628 * C78828 *
            ((-2 * C79245) / C78629 +
             C78770 *
                 ((-((C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78942) /
                   C78234) /
                      C78214 -
                  C78744 / C78629));
    const double C10974 =
        (-(C79245 * C79064) / C78234) / C78214 - C79090 / C78629 -
        (ae * (C78770 * C78745 * C79064 + C79361)) / C78629 -
        ((C79340 + C78770 * C78748 * C79064) * ce) / C78629 +
        C78628 *
            ((-((C79243 + C78770 * C78732 * C79064) * ce) / C78234) / C78214 -
             (ae * (C78770 * C78729 * C79064 + C79244)) / C78629 +
             C78628 *
                 ((-(C78770 *
                     (C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C79064) /
                   C78234) /
                      C78214 -
                  C79245 / C78629));
    const double C12549 =
        (-2 * C78828 * C79090) / C78629 +
        C78828 * ((-(C79245 * C79064) / C78234) / C78214 - C79090 / C78629);
    const double C79270 = C78628 * C79267;
    const double C78960 = C78959 / C78234;
    const double C79411 = C78770 * C79405;
    const double C79575 = C78828 * C79405;
    const double C79853 = C79842 / C78629;
    const double C79948 = C79947 / C78234;
    const double C79983 = C78770 * C79981;
    const double C79082 = C79081 / C78234;
    const double C79712 = C78828 * C79484;
    const double C79789 = C78770 * C79484;
    const double C9058 =
        (((-2 * C79440) / C78234 - (C78770 * C79447) / C78234) * ae) / C78214 -
        ((2 * C79468 + C78770 * C79475) * ce) / C78629 +
        C78828 *
            ((-2 * C78770 * C79484) / C78629 +
             C78770 *
                 ((-(C78628 *
                     (C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78942) /
                   C78234) /
                      C78214 -
                  C79484 / C78629));
    const double C79933 = C79932 / C78234;
    const double C80043 = C78828 * C80037;
    const double C80155 = C80142 / C78629;
    const double C80072 = C80070 + C79866;
    const double C79871 = C79847 + C79864;
    const double C79870 = C79863 / C78234;
    const double C80071 = C80068 + C79863;
    const double C80054 = C78828 * C80051;
    const double C80053 = C78828 * C80050;
    const double C36457 = 3 * (C79369 + C79377 * C79064) +
                          C78828 * (2 * C79782 + C78828 * C80046);
    const double C80160 = C80147 + C80148;
    const double C80159 = C80146 / C78234;
    const double C370 = C275 * C170;
    const double C585 = C490 * C170;
    const double C1172 = C275 * C860;
    const double C1494 = C490 * C860;
    const double C27472 = C26926 * C860;
    const double C2912 = C275 * C861;
    const double C3140 = C490 * C861;
    const double C28880 = C26926 * C861;
    const double C3567 = C275 * C1791;
    const double C3795 = C490 * C1791;
    const double C55256 = C26926 * C1791;
    const double C2103 = C275 * C1794;
    const double C2425 = C490 * C1794;
    const double C53925 = C26926 * C1794;
    const double C4436 = C275 * C4095;
    const double C4786 = C490 * C4095;
    const double C30176 = C26926 * C4095;
    const double C78813 = -C78809;
    const double C10823 =
        2 * ((-(C78828 * C79466) / C78234) / C78214 - (ae * C78784) / C78629) -
        (ae * (C78799 * C79064 + C78784)) / C78629 +
        C78828 *
            ((-(ae * C78828 * C78799) / C78234) / C78214 - C79466 / C78629 +
             C78828 * ((-(C78828 * C79469) / C78234) / C78214 - C79404));
    const double C5721 =
        (-2 * (C78770 * C78784 + C78651 * ce)) / C78234 -
        (C78770 * (C78770 * C79401 + C78784 + C79399 * ce)) / C78234 -
        ((C78651 + C78674 * C78942) * ce) / C78234;
    const double C6235 =
        -(C78828 * (C78770 * C79401 + C78784 + C79399 * ce)) / C78234;
    const double C6237 =
        -(C79401 * C79064 + C78770 * C78784 + C78651 * ce) / C78234;
    const double C12618 = (-2 * C78828 * C79401) / C78234 -
                          (C78828 * (C79418 * C79064 + C79401)) / C78234;
    const double C79391 = C79388 + C78782;
    const double C79854 = C79843 / C78234;
    const double C79850 = C79839 / C78234;
    const double C80031 = C79839 / C78629;
    const double C38458 = C26926 * C12617;
    const double C38885 = C490 * C12617;
    const double C64263 = C275 * C12617;
    const double C62047 = C26926 * C10528;
    const double C62210 = C275 * C10528;
    const double C80124 = -C80120;
    const double C438 = C275 * C225;
    const double C653 = C490 * C225;
    const double C1273 = C275 * C950;
    const double C1595 = C490 * C950;
    const double C27569 = C26926 * C950;
    const double C2983 = C275 * C951;
    const double C3211 = C490 * C951;
    const double C28950 = C26926 * C951;
    const double C2210 = C275 * C1886;
    const double C2532 = C490 * C1886;
    const double C54024 = C26926 * C1886;
    const double C3650 = C275 * C1887;
    const double C3878 = C490 * C1887;
    const double C55327 = C26926 * C1887;
    const double C4552 = C275 * C4201;
    const double C4902 = C490 * C4201;
    const double C30292 = C26926 * C4201;
    const double C78871 = -C78867;
    const double C7264 = C81011 * C5917;
    const double C11492 = C275 * C6321;
    const double C11812 = C490 * C6321;
    const double C37122 = C26926 * C6321;
    const double C10581 =
        (-2 * (C78828 * C78842 + C78651 * ce)) / C78234 -
        (C78828 * (C78828 * C79708 + C78842 + C79706 * ce)) / C78234 -
        ((C78651 + C78674 * C79064) * ce) / C78234;
    const double C31763 = C26926 * C5773;
    const double C32059 = C490 * C5773;
    const double C32344 = C26926 * C6325;
    const double C32852 = C490 * C6325;
    const double C58209 = C275 * C6325;
    const double C34634 = C26926 * C8643;
    const double C35056 = C490 * C8643;
    const double C60357 = C275 * C8643;
    const double C79699 = C79696 + C78840;
    const double C79991 = C79990 / C78629;
    const double C80139 = C79990 / C78234;
    const double C80156 = C80143 / C78234;
    const double C12687 =
        (-2 * (C78828 * C79431 + C79369 * ce)) / C78234 -
        (C78828 * (C78828 * C79786 + C79431 + C79782 * ce)) / C78234 -
        ((C79369 + C79377 * C79064) * ce) / C78234;
    const double C79896 = -C79892;
    const double C302 = C81011 * C280;
    const double C2829 = C81011 * C1038;
    const double C1065 = C81011 * C1041;
    const double C3495 = C81011 * C1974;
    const double C2001 = C81011 * C1977;
    const double C4319 = C81011 * C4307;
    const double C58210 = C81011 * C6576;
    const double C79861 = C79852 / C78214;
    const double C78927 = -C78924;
    const double C11493 = C81011 * C6574;
    const double C8111 = C81011 * C6577;
    const double C5821 = (2 * (C78770 * C78899 + C78651 * ae) +
                          C78770 * (C78899 + C78770 * C79402 + C79399 * ae) +
                          (C78651 + C78674 * C78942) * ae) /
                         C78214;
    const double C6407 =
        (C78770 * C78899 + C78651 * ae + C79402 * C79064) / C78214;
    const double C6409 =
        (C78828 * (C78899 + C78770 * C79402 + C79399 * ae)) / C78214;
    const double C12758 =
        (2 * C78828 * C79402 + C78828 * (C79402 + C79419 * C79064)) / C78214;
    const double C12102 = C12098 + C12099;
    const double C79392 = C78897 + C79389;
    const double C79851 = C79840 / C78629;
    const double C64189 = C81011 * C12757;
    const double C62155 = C81011 * C10633;
    const double C79959 = -C79957;
    const double C6496 =
        (-(C78952 * C79064) / C78234) / C78214 - C78947 / C78629 -
        (ae * (C79382 * C79064 + C79371)) / C78629 -
        ((C79372 + C79385 * C79064) * ce) / C78629 +
        C78770 * ((-((C78897 + C78905 * C79064) * ce) / C78234) / C78214 -
                  (ae * (C78790 * C79064 + C78782)) / C78629 +
                  C78770 * ((-(C78958 * C79064) / C78234) / C78214 - C78955));
    const double C79381 = C79375 / C78629;
    const double C6494 = (-(ae * C78828 * C79401) / C78234) / C78214 -
                         (C78828 * C79397) / C78629 -
                         (C78828 * C79402 * ce) / C78629 +
                         C78770 * ((-(C78828 * C78914 * ce) / C78234) / C78214 -
                                   (ae * C78828 * C78799) / C78629 -
                                   (C78770 * C78828 * C79405) / C78629);
    const double C6497 =
        (-((C78899 + C78914 * C79064) * ce) / C78234) / C78214 -
        (ae * (C78799 * C79064 + C78784)) / C78629 +
        C78770 * ((-(C79405 * C79064) / C78234) / C78214 - C79397 / C78629);
    const double C6498 =
        (-(C79405 * C79064) / C78234) / C78214 - C79397 / C78629 -
        (ae * (C79418 * C79064 + C79401)) / C78629 -
        ((C79402 + C79419 * C79064) * ce) / C78629 +
        C78770 *
            ((-((C78914 + C79409 * C79064) * ce) / C78234) / C78214 -
             (ae * (C79406 * C79064 + C78799)) / C78629 +
             C78770 *
                 ((-(C78628 *
                     (C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C79064) /
                   C78234) /
                      C78214 -
                  C79405 / C78629));
    const double C10681 =
        (-2 * C78828 * C79397) / C78629 +
        C78828 * ((-(C79405 * C79064) / C78234) / C78214 - C79397 / C78629);
    const double C10683 =
        3 * ((-(C78952 * C79064) / C78234) / C78214 - C78947 / C78629) +
        C78828 * ((-2 * C79573) / C78629 +
                  C78828 * ((-(C78958 * C79064) / C78234) / C78214 - C78955));
    const double C12827 =
        (((-2 * C79658) / C78234 - (C78828 * C79662) / C78234) * ae) / C78214 -
        ((2 * C79630 + C78828 * C79632) * ce) / C78629 +
        C78770 * ((-2 * C79573) / C78629 +
                  C78828 * ((-(C78958 * C79064) / C78234) / C78214 - C78955));
    const double C371 = C81011 * C358;
    const double C1165 = C81011 * C1152;
    const double C1170 = C81011 * C1153;
    const double C2099 = C81011 * C2086;
    const double C2102 = C81011 * C2090;
    const double C4432 = C81011 * C4424;
    const double C58116 = C81011 * C6493;
    const double C58121 = C81011 * C6495;
    const double C62209 = C81011 * C10682;
    const double C517 = C81012 * C495;
    const double C3057 = C81012 * C1360;
    const double C1387 = C81012 * C1363;
    const double C3723 = C81012 * C2296;
    const double C2323 = C81012 * C2299;
    const double C4669 = C81012 * C4657;
    const double C80164 = C80154 / C78214;
    const double C79028 = -C79025;
    const double C7417 = C81012 * C6015;
    const double C11597 = C81012 * C6653;
    const double C10773 = (2 * (C78828 * C79000 + C78651 * ae) +
                           C78828 * (C79000 + C78828 * C79709 + C79706 * ae) +
                           (C78651 + C78674 * C79064) * ae) /
                          C78214;
    const double C7340 = C7336 + C7337;
    const double C8218 = C8214 + C8215;
    const double C31955 = C81012 * C5965;
    const double C32667 = C81012 * C6657;
    const double C34911 = C81012 * C8919;
    const double C79700 = C78998 + C79697;
    const double C80153 = C80140 / C78629;
    const double C12963 = (2 * (C78828 * C79457 + C79369 * ae) +
                           C78828 * (C79457 + C78828 * C79787 + C79782 * ae) +
                           (C79369 + C79377 * C79064) * ae) /
                          C78214;
    const double C79921 = -C79918;
    const double C6061 =
        3 * ((-(C79074 * C78942) / C78234) / C78214 - C79069 / C78629) +
        C78770 * ((-2 * C78770 * C79074) / C78629 +
                  C78770 * ((-(C79080 * C78942) / C78234) / C78214 - C79077));
    const double C6822 =
        (-(C79074 * C78942) / C78234) / C78214 - C79069 / C78629 -
        (ae * (C78828 * C79435 + C79384 * ce)) / C78629 -
        ((C78828 * C79461 + C79384 * ae) * ce) / C78629 +
        C78828 * ((-(C79461 * ce) / C78234) / C78214 - (ae * C79435) / C78629 +
                  C78828 * ((-(C79080 * C78942) / C78234) / C78214 - C79077));
    const double C9057 =
        (((-2 * C79431) / C78234 - (C78770 * C79435) / C78234) * ae) / C78214 -
        ((2 * C79457 + C78770 * C79461) * ce) / C78629 +
        C78828 * ((-2 * C78770 * C79074) / C78629 +
                  C78770 * ((-(C79080 * C78942) / C78234) / C78214 - C79077));
    const double C6059 =
        (-2 * C78770 * C79480) / C78629 +
        C78770 *
            ((-(C78628 * C79080 * C78942) / C78234) / C78214 - C79480 / C78629);
    const double C6062 =
        3 * ((-(C79484 * C78942) / C78234) / C78214 - C79480 / C78629) +
        C78770 *
            ((-2 * C78770 * C79484) / C78629 +
             C78770 *
                 ((-(C78628 *
                     (C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78942) /
                   C78234) /
                      C78214 -
                  C79484 / C78629));
    const double C6820 =
        (-(ae * (C78828 * C79440 + C79399 * ce)) / C78234) / C78214 -
        (C78770 * C79480) / C78629 -
        ((C78828 * C79468 + C79399 * ae) * ce) / C78629 +
        C78828 * ((-(C79468 * ce) / C78234) / C78214 - (ae * C79440) / C78629 -
                  (C78828 * C78770 * C79484) / C78629);
    const double C6823 =
        (-((C79000 + C79015 * C78942) * ce) / C78234) / C78214 -
        (ae * (C78857 * C78942 + C78842)) / C78629 +
        C78828 * ((-(C79484 * C78942) / C78234) / C78214 - C79480 / C78629);
    const double C6824 =
        (-(C79484 * C78942) / C78234) / C78214 - C79480 / C78629 -
        (ae * (C78828 * C79447 + C79414 * ce)) / C78629 -
        ((C78828 * C79475 + C79414 * ae) * ce) / C78629 +
        C78828 *
            ((-(C79475 * ce) / C78234) / C78214 - (ae * C79447) / C78629 +
             C78828 *
                 ((-(C78628 *
                     (C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78942) /
                   C78234) /
                      C78214 -
                  C79484 / C78629));
    const double C79689 = C79683 / C78629;
    const double C13101 =
        2 * ((-(C79457 * ce) / C78234) / C78214 - (ae * C79431) / C78629 -
             (C78828 * C79780) / C78629) -
        (ae * (C78828 * C79786 + C79431 + C79782 * ce)) / C78629 -
        ((C79457 + C78828 * C79787 + C79782 * ae) * ce) / C78629 +
        C78828 * ((-(ae * C79786) / C78234) / C78214 - C79780 / C78629 -
                  (C79787 * ce) / C78629 +
                  C78828 * ((-(C79783 * ce) / C78234) / C78214 -
                            (ae * C79781) / C78629 -
                            (C78828 * C78770 * C79080) / C78629));
    const double C654 = C81012 * C641;
    const double C1591 = C81012 * C1580;
    const double C1594 = C81012 * C1581;
    const double C2525 = C81012 * C2512;
    const double C2530 = C81012 * C2513;
    const double C4898 = C81012 * C4890;
    const double C32058 = C81012 * C6060;
    const double C32845 = C81012 * C6819;
    const double C32850 = C81012 * C6821;
    const double C78689 = C78685 - C78670;
    const double C58211 = C58205 + C58206;
    const double C58212 = C58207 + C58208;
    const double C79390 = C79387 - C78789;
    const double C79698 = C79695 - C78847;
    const double C31642 = (4 * (2 * C79330 + C78770 * C79335) +
                           C78770 * (3 * C79335 + C78770 * C79809)) /
                          C78214;
    const double C32140 =
        (2 * C79330 + C78770 * C79335 + C79809 * C79064) / C78214;
    const double C34480 = (C78828 * (3 * C79335 + C78770 * C79809)) / C78214;
    const double C61980 = (4 * (2 * C79606 + C78828 * C79610) +
                           C78828 * (3 * C79610 + C78828 * C80090)) /
                          C78214;
    const double C79835 = C79826 - C79833;
    const double C80116 = C80107 - C80114;
    const double C78823 = C78811 - C78821;
    const double C80135 = C80126 - C80133;
    const double C78881 = C78869 - C78879;
    const double C79904 = C79894 - C79901;
    const double C281 = (4 * (2 * C78899 + C78628 * C78909) +
                         C78628 * (3 * C78909 + C78628 * C78935)) /
                        C78214;
    const double C1978 =
        (2 * C78899 + C78628 * C78909 + C78935 * C79064) / C78214;
    const double C3491 = (C78828 * (3 * C78909 + C78628 * C78935)) / C78214;
    const double C62145 = (4 * (2 * C79630 + C78828 * C79632) +
                           C78828 * (3 * C79632 + C78828 * C80099)) /
                          C78214;
    const double C496 = (4 * (2 * C79000 + C78628 * C79010) +
                         C78628 * (3 * C79010 + C78628 * C79036)) /
                        C78214;
    const double C1364 =
        (2 * C79000 + C78628 * C79010 + C79036 * C78942) / C78214;
    const double C3053 = (C78770 * (3 * C79010 + C78628 * C79036)) / C78214;
    const double C31941 = (4 * (2 * C79457 + C78770 * C79461) +
                           C78770 * (3 * C79461 + C78770 * C79926)) /
                          C78214;
    const double C53935 = C53929 * C80628;
    const double C55935 = C53929 * C80932;
    const double C59231 = C53929 * C4984;
    const double C65931 = C53929 * C13173;
    const double C69933 = C53929 * C81003;
    const double C53938 = C53932 * C80628;
    const double C57853 = C53932 * C4984;
    const double C61403 = C53932 * C81003;
    const double C62597 = C53932 * C80932;
    const double C65935 = C53932 * C13173;
    const double C55933 = C30178 * C80686;
    const double C57849 = C30178 * C4985;
    const double C65929 = C30178 * C80686;
    const double C78796 = C78795 / C78214;
    const double C79337 = C79336 / C78214;
    const double C62052 = C62050 * C80628;
    const double C64051 = C62050 * C80932;
    const double C75299 = C62050 * C13173;
    const double C78820 = C78817 / C78214;
    const double C79808 = C79806 / C78214;
    const double C80078 = C80077 / C78214;
    const double C54111 = C2005 * C738;
    const double C59435 = C2005 * C80598;
    const double C66141 = C2005 * C80598;
    const double C54128 = C54124 * C737;
    const double C58008 = C54124 * C80588;
    const double C60873 = C54124 * C80998;
    const double C62801 = C54124 * C80916;
    const double C66143 = C54124 * C13799;
    const double C56148 = C56146 * C737;
    const double C58011 = C56146 * C80588;
    const double C59437 = C56146 * C80916;
    const double C66147 = C56146 * C13799;
    const double C74061 = C56146 * C80998;
    const double C78911 = C78910 / C78214;
    const double C79358 = C79357 / C78214;
    const double C58031 = C58025 * C80588;
    const double C62805 = C58025 * C80916;
    const double C66151 = C58025 * C13799;
    const double C58033 = C58027 * C80588;
    const double C59441 = C58027 * C80916;
    const double C68627 = C58027 * C13799;
    const double C62161 = C62157 * C80588;
    const double C63585 = C62157 * C80916;
    const double C70893 = C62157 * C13799;
    const double C78934 = C78931 / C78214;
    const double C79832 = C79829 / C78214;
    const double C79944 = C79943 / C78214;
    const double C79976 = -C79975;
    const double C27580 = C27574 * C80639;
    const double C30285 = C27574 * C80933;
    const double C37118 = C27574 * C9133;
    const double C40497 = C27574 * C81004;
    const double C44469 = C27574 * C17817;
    const double C27579 = C27573 * C80639;
    const double C32339 = C27573 * C81004;
    const double C33804 = C27573 * C80933;
    const double C35955 = C27573 * C9133;
    const double C44465 = C27573 * C17817;
    const double C30297 = C30294 * C80726;
    const double C35951 = C30294 * C9134;
    const double C44463 = C30294 * C80726;
    const double C78854 = C78853 / C78214;
    const double C79612 = C79611 / C78214;
    const double C31768 = C31766 * C80639;
    const double C34632 = C31766 * C80933;
    const double C49211 = C31766 * C17817;
    const double C33806 = C32347 * C80726;
    const double C35957 = C32347 * C9134;
    const double C44467 = C32347 * C80726;
    const double C78878 = C78875 / C78214;
    const double C79817 = C79816 / C78214;
    const double C80007 = -C80005;
    const double C80089 = C80087 / C78214;
    const double C447 = C443 * C80639;
    const double C3648 = C443 * C80933;
    const double C18161 = C443 * C17817;
    const double C1280 = C1276 * C80639;
    const double C4545 = C1276 * C80933;
    const double C11488 = C1276 * C9133;
    const double C14953 = C1276 * C81004;
    const double C18969 = C1276 * C17817;
    const double C3642 = C2212 * C80726;
    const double C9513 = C2212 * C9134;
    const double C18155 = C2212 * C80726;
    const double C79437 = C79436 / C78214;
    const double C79580 = C79579 / C78214;
    const double C1281 = C1277 * C80639;
    const double C8108 = C1277 * C80933;
    const double C18973 = C1277 * C17817;
    const double C1282 = C1278 * C80639;
    const double C4550 = C1278 * C80933;
    const double C20491 = C1278 * C17817;
    const double C3646 = C2214 * C80726;
    const double C9519 = C2214 * C9134;
    const double C18159 = C2214 * C80726;
    const double C78983 = C78982 / C78214;
    const double C79448 = -C79446;
    const double C79586 = -C79585;
    const double C79900 = C79897 / C78214;
    const double C79960 = C79958 / C78214;
    const double C27885 = C1391 * C738;
    const double C33351 = C1391 * C80598;
    const double C40053 = C1391 * C80598;
    const double C27902 = C27898 * C737;
    const double C31447 = C27898 * C80998;
    const double C31946 = C27898 * C80588;
    const double C33353 = C27898 * C80916;
    const double C40055 = C27898 * C13799;
    const double C30702 = C30700 * C737;
    const double C32654 = C30700 * C80588;
    const double C34207 = C30700 * C80916;
    const double C40895 = C30700 * C13799;
    const double C48811 = C30700 * C80998;
    const double C79012 = C79011 / C78214;
    const double C79647 = C79646 / C78214;
    const double C31961 = C31957 * C80588;
    const double C33357 = C31957 * C80916;
    const double C40059 = C31957 * C13799;
    const double C32675 = C32669 * C80588;
    const double C37519 = C32669 * C80916;
    const double C40899 = C32669 * C13799;
    const double C32677 = C32671 * C80588;
    const double C34211 = C32671 * C80916;
    const double C43373 = C32671 * C13799;
    const double C79035 = C79032 / C78214;
    const double C79911 = C79910 / C78214;
    const double C80025 = -C80023;
    const double C80113 = C80110 / C78214;
    const double C594 = C590 * C80628;
    const double C3138 = C590 * C80932;
    const double C13665 = C590 * C13173;
    const double C3132 = C1496 * C80686;
    const double C5527 = C1496 * C4985;
    const double C13659 = C1496 * C80686;
    const double C2432 = C2428 * C80628;
    const double C4779 = C2428 * C80932;
    const double C8320 = C2428 * C4984;
    const double C15155 = C2428 * C13173;
    const double C19173 = C2428 * C81003;
    const double C79463 = C79462 / C78214;
    const double C79664 = C79663 / C78214;
    const double C3136 = C1498 * C80686;
    const double C5533 = C1498 * C4985;
    const double C13663 = C1498 * C80686;
    const double C2433 = C2429 * C80628;
    const double C4784 = C2429 * C80932;
    const double C16757 = C2429 * C13173;
    const double C2434 = C2430 * C80628;
    const double C11702 = C2430 * C80932;
    const double C15159 = C2430 * C13173;
    const double C79059 = C79058 / C78214;
    const double C79476 = -C79474;
    const double C79672 = -C79670;
    const double C79925 = C79922 / C78214;
    const double C80132 = C80129 / C78214;
    const double C78280 = C78278 / C78234;
    const double C78268 = C78264 + C80598;
    const double C78295 = C78292 - C78294;
    const double C4989 = C78292 + (0 * ce) / C78234;
    const double C78267 = C80588 - C78263;
    const double C41173 = C27365 * C80593;
    const double C41635 = C27898 * C80593;
    const double C41629 = C27897 * C80593;
    const double C42481 = C30700 * C80593;
    const double C67417 = C53813 * C80593;
    const double C67727 = C56146 * C80593;
    const double C67721 = C54123 * C80593;
    const double C72411 = C54124 * C80593;
    const double C80915 = C80593 * C80583;
    const double C80953 = C80920 + C80593;
    const double C31443 = C1391 * C80982;
    const double C60869 = C2005 * C80982;
    const double C41631 = C1391 * C80601;
    const double C67723 = C2005 * C80601;
    const double C80923 = C80601 / C78240;
    const double C80919 = C80601 * C80583;
    const double C2607 = C80999 - (C80593 * C80584) / C78234;
    const double C78433 = C78431 / C78234;
    const double C78406 = C80628 - C78402;
    const double C78415 = C78411 + C80686;
    const double C78443 = C78440 - C78442;
    const double C15655 = C374 * C80682;
    const double C15649 = C373 * C80682;
    const double C15889 = C589 * C80682;
    const double C15883 = C588 * C80682;
    const double C17649 = C2428 * C80682;
    const double C68425 = C53929 * C80682;
    const double C68419 = C53928 * C80682;
    const double C68729 = C54210 * C80682;
    const double C77681 = C53932 * C80682;
    const double C80935 = C80682 * C80676;
    const double C80970 = C80937 + C80682;
    const double C1502 = C1498 * C80988;
    const double C1500 = C1496 * C80988;
    const double C61399 = C30178 * C80988;
    const double C15891 = C1498 * C80689;
    const double C15885 = C1496 * C80689;
    const double C68421 = C30178 * C80689;
    const double C80939 = C80689 / C78240;
    const double C80936 = C80689 * C80676;
    const double C6893 = C81005 - (C80682 * C80678) / C78234;
    const double C5298 = C307 * C5064;
    const double C5290 = C305 * C5064;
    const double C5532 = C522 * C5064;
    const double C5524 = C520 * C5064;
    const double C8001 = C2004 * C5064;
    const double C8321 = C2326 * C5064;
    const double C57854 = C53820 * C5064;
    const double C57846 = C53812 * C5064;
    const double C58119 = C54125 * C5064;
    const double C58110 = C54122 * C5064;
    const double C59232 = C53814 * C5064;
    const double C78524 = C78522 / C78234;
    const double C78497 = C80639 - C78493;
    const double C78506 = C78502 + C80726;
    const double C78534 = C78531 - C78533;
    const double C21249 = C442 * C80722;
    const double C21243 = C441 * C80722;
    const double C21483 = C657 * C80722;
    const double C21477 = C656 * C80722;
    const double C22077 = C1276 * C80722;
    const double C47519 = C27574 * C80722;
    const double C47513 = C27572 * C80722;
    const double C48113 = C28064 * C80722;
    const double C52211 = C27573 * C80722;
    const double C80941 = C80722 * C80716;
    const double C80976 = C80943 + C80722;
    const double C2218 = C2214 * C80990;
    const double C2216 = C2212 * C80990;
    const double C32334 = C30294 * C80990;
    const double C32350 = C32347 * C80990;
    const double C21251 = C2214 * C80729;
    const double C21245 = C2212 * C80729;
    const double C47515 = C30294 * C80729;
    const double C52213 = C32347 * C80729;
    const double C80945 = C80729 / C78240;
    const double C80942 = C80729 * C80716;
    const double C11881 = C81007 - (C80722 * C80718) / C78234;
    const double C9518 = C307 * C9284;
    const double C9510 = C305 * C9284;
    const double C9752 = C522 * C9284;
    const double C9744 = C520 * C9284;
    const double C11489 = C1068 * C9284;
    const double C11809 = C1390 * C9284;
    const double C35956 = C27372 * C9284;
    const double C35948 = C27364 * C9284;
    const double C36412 = C27899 * C9284;
    const double C36404 = C27896 * C9284;
    const double C37119 = C27366 * C9284;
    const double C27368 = C27348 + C27349;
    const double C27370 = C27352 + C27353;
    const double C53816 = C53796 + C53797;
    const double C53818 = C53800 + C53801;
    const double C30062 = C30050 + C30051;
    const double C58024 = C58012 + C58013;
    const double C58026 = C58016 + C58017;
    const double C1501 = C1497 * C80962;
    const double C5529 = C1497 * C80962;
    const double C15887 = C1497 * C15344;
    const double C2217 = C2213 * C80965;
    const double C9515 = C2213 * C80965;
    const double C21247 = C2213 * C20867;
    const double C4790 = C4788 * C80686;
    const double C8322 = C4788 * C4985;
    const double C15157 = C4788 * C80686;
    const double C17651 = C4788 * C80689;
    const double C19175 = C4788 * C80988;
    const double C4556 = C4554 * C80726;
    const double C11490 = C4554 * C9134;
    const double C14955 = C4554 * C80990;
    const double C18971 = C4554 * C80726;
    const double C22079 = C4554 * C80729;
    const double C1163 = C1072 * C854;
    const double C1267 = C1072 * C220;
    const double C5294 = C1072 * C5066;
    const double C8107 = C1072 * C3421;
    const double C1485 = C1394 * C854;
    const double C1589 = C1394 * C220;
    const double C5528 = C1394 * C5066;
    const double C8427 = C1394 * C3421;
    const double C33352 = C1394 * C78260;
    const double C40054 = C1394 * C13806;
    const double C2100 = C2008 * C165;
    const double C2201 = C2008 * C1880;
    const double C9514 = C2008 * C9286;
    const double C11381 = C2008 * C2687;
    const double C62800 = C2008 * C78260;
    const double C66142 = C2008 * C13806;
    const double C2422 = C2330 * C165;
    const double C2523 = C2330 * C1880;
    const double C9748 = C2330 * C9286;
    const double C11701 = C2330 * C2687;
    const double C4428 = C4322 * C2688;
    const double C4544 = C4322 * C3422;
    const double C7999 = C4322 * C5065;
    const double C11487 = C4322 * C9285;
    const double C14846 = C4322 * C13246;
    const double C14952 = C4322 * C1879;
    const double C18864 = C4322 * C853;
    const double C18968 = C4322 * C17952;
    const double C59436 = C4322 * C78260;
    const double C66146 = C4322 * C13806;
    const double C4778 = C4672 * C2688;
    const double C4894 = C4672 * C3422;
    const double C8319 = C4672 * C5065;
    const double C11807 = C4672 * C9285;
    const double C15154 = C4672 * C13246;
    const double C15260 = C4672 * C1879;
    const double C19172 = C4672 * C853;
    const double C19276 = C4672 * C17952;
    const double C34206 = C4672 * C78260;
    const double C40894 = C4672 * C13806;
    const double C310 = C299 + C300;
    const double C525 = C514 + C515;
    const double C31714 = C31710 + C31711;
    const double C32011 = C32007 + C32008;
    const double C62102 = C62098 + C62099;
    const double C27367 = C27346 + C27347;
    const double C27371 = C27354 + C27355;
    const double C53815 = C53794 + C53795;
    const double C53819 = C53802 + C53803;
    const double C30063 = C30052 + C30053;
    const double C375 = C368 + C369;
    const double C1174 = C1161 + C1162;
    const double C2106 = C2095 + C2096;
    const double C54211 = C54207 + C54208;
    const double C56253 = C56251 + C56252;
    const double C658 = C651 + C652;
    const double C1598 = C1586 + C1587;
    const double C28065 = C28061 + C28062;
    const double C2534 = C2521 + C2522;
    const double C30908 = C30906 + C30907;
    const double C32349 = C32346 * C80965;
    const double C35953 = C32346 * C80965;
    const double C47517 = C32346 * C20867;
    const double C32164 = C32158 * C5657;
    const double C32335 = C32158 * C1880;
    const double C35952 = C32158 * C9286;
    const double C57852 = C32158 * C5065;
    const double C61402 = C32158 * C853;
    const double C62596 = C32158 * C2688;
    const double C65934 = C32158 * C13246;
    const double C32674 = C32668 * C5657;
    const double C32843 = C32668 * C1880;
    const double C36408 = C32668 * C9286;
    const double C78701 = C78698 + C78684;
    const double C36911 = C81009 * C6145;
    const double C32940 = C32936 + C32937;
    const double C33600 = C33596 + C33597;
    const double C63374 = C63370 + C63371;
    const double C78743 = C78735 - C78717;
    const double C79253 = C79252 / C78214;
    const double C38389 = C38387 * C5657;
    const double C64052 = C38387 * C2688;
    const double C75300 = C38387 * C13246;
    const double C79275 = C79274 / C78214;
    const double C31661 = C31656 + C31657;
    const double C32163 = C32156 + C32157;
    const double C34489 = C34486 + C34487;
    const double C61995 = C61990 + C61991;
    const double C78700 = C78697 + C78681;
    const double C78726 = -C78714;
    const double C11278 = C275 * C6143;
    const double C11598 = C490 * C6143;
    const double C36912 = C26926 * C6143;
    const double C38811 = C81012 * C12965;
    const double C79828 = C79824 / C78214;
    const double C60209 = C81011 * C8715;
    const double C80109 = C80105 / C78214;
    const double C31958 = C31952 + C31953;
    const double C32672 = C32664 + C32665;
    const double C58028 = C58020 + C58021;
    const double C34912 = C34908 + C34909;
    const double C64190 = C64186 + C64187;
    const double C62158 = C62152 + C62153;
    const double C27363 = C81009 * C776;
    const double C53811 = C81009 * C1712;
    const double C30057 = C81009 * C3992;
    const double C32149 = C81009 * C6156;
    const double C27369 = C27350 + C27351;
    const double C27373 = C27358 + C27359;
    const double C53817 = C53798 + C53799;
    const double C53821 = C53806 + C53807;
    const double C31659 = C31652 + C31653;
    const double C32161 = C32152 + C32153;
    const double C61993 = C61986 + C61987;
    const double C78758 = C78755 + C78733;
    const double C5667 = (3 * (C78662 + C78692 * C78942) +
                          C78770 * (2 * C79340 + C78770 * C79344)) /
                         C78214;
    const double C6152 = (C78662 + C78692 * C78942 + C79344 * C79064) / C78214;
    const double C8502 = (C78828 * (2 * C79340 + C78770 * C79344)) / C78214;
    const double C10477 = (3 * (C78662 + C78692 * C79064) +
                           C78828 * (2 * C79615 + C78828 * C79619)) /
                          C78214;
    const double C79876 = C79872 + C79859;
    const double C80174 = C80170 + C80162;
    const double C7109 = (2 * (C78770 * C78909 + C78682 * ae) +
                          C78770 * (C78909 + C78770 * C79548 + C79545 * ae) +
                          (C78682 + C78731 * C78942) * ae) /
                         C78214;
    const double C7891 =
        (C78828 * (C78909 + C78770 * C79548 + C79545 * ae)) / C78214;
    const double C11273 =
        (C78770 * C78909 + C78682 * ae + C79548 * C79064) / C78214;
    const double C12319 = (2 * (C78828 * C79010 + C78682 * ae) +
                           C78828 * (C79010 + C78828 * C79756 + C79753 * ae) +
                           (C78682 + C78731 * C79064) * ae) /
                          C78214;
    const double C1042 =
        (2 * C78899 + C78628 * C78909 +
         C78770 * (C78770 * C78935 + C78747 * ae) + C78770 * C78747 * ae) /
        C78214;
    const double C2300 =
        (2 * C79000 + C78628 * C79010 +
         C78828 * (C78828 * C79036 + C78747 * ae) + C78828 * C78747 * ae) /
        C78214;
    const double C2825 = (C78770 * (3 * C78909 + C78628 * C78935) +
                          (3 * C78682 + C78628 * C78747) * ae) /
                         C78214;
    const double C3719 = (C78828 * (3 * C79010 + C78628 * C79036) +
                          (3 * C78682 + C78628 * C78747) * ae) /
                         C78214;
    const double C4308 = (C78828 * (C78770 * C78935 + C78747 * ae)) / C78214;
    const double C4658 =
        (C78828 * C78770 * C79036 + C78770 * C78747 * ae) / C78214;
    const double C104 = 4 * (2 * C78651 + C78628 * C78682) +
                        C78628 * (3 * C78682 + C78628 * C78747);
    const double C753 = 2 * C78651 + C78628 * C78682 + C78747 * C78942;
    const double C1689 = 2 * C78651 + C78628 * C78682 + C78747 * C79064;
    const double C2617 = C78770 * (3 * C78682 + C78628 * C78747);
    const double C3283 = C78828 * (3 * C78682 + C78628 * C78747);
    const double C3982 = C78828 * C78770 * C78747;
    const double C6973 =
        (-2 * (C78770 * C78794 + C78682 * ce)) / C78234 -
        (C78770 * (C78770 * C79547 + C78794 + C79545 * ce)) / C78234 -
        ((C78682 + C78731 * C78942) * ce) / C78234;
    const double C7691 =
        -(C78828 * (C78770 * C79547 + C78794 + C79545 * ce)) / C78234;
    const double C11073 =
        -(C79547 * C79064 + C78770 * C78794 + C78682 * ce) / C78234;
    const double C12027 =
        (-2 * (C78828 * C78852 + C78682 * ce)) / C78234 -
        (C78828 * (C78828 * C79755 + C78852 + C79753 * ce)) / C78234 -
        ((C78682 + C78731 * C79064) * ce) / C78234;
    const double C79424 = C78914 + C79422;
    const double C79727 = C79015 + C79725;
    const double C79423 = C79421 + C78799;
    const double C79726 = C79724 + C78857;
    const double C12964 = (2 * (C78828 * C79468 + C79399 * ae) +
                           C78828 * (C79468 + C78828 * C79796 + C79791 * ae) +
                           (C79399 + C79407 * C79064) * ae) /
                          C78214;
    const double C12688 =
        (-2 * (C78828 * C79440 + C79399 * ce)) / C78234 -
        (C78828 * (C78828 * C79795 + C79440 + C79791 * ce)) / C78234 -
        ((C79399 + C79407 * C79064) * ce) / C78234;
    const double C78757 = C78754 + C78730;
    const double C5669 =
        (-3 * (C78691 * C78942 + C78661)) / C78234 +
        C78770 * ((-2 * C79361) / C78234 - (C78770 * C79366) / C78234);
    const double C6154 = -(C79366 * C79064 + C78691 * C78942 + C78661) / C78234;
    const double C8504 =
        C78828 * ((-2 * C79361) / C78234 - (C78770 * C79366) / C78234);
    const double C10479 =
        (-3 * (C78691 * C79064 + C78661)) / C78234 +
        C78828 * ((-2 * C79650) / C78234 - (C78828 * C79654) / C78234);
    const double C79875 = C79869 + C79856;
    const double C36503 =
        (-3 * (C79382 * C79064 + C79371)) / C78234 +
        C78828 * ((-2 * C80029) / C78234 - (C78828 * C80034) / C78234);
    const double C80173 = C80169 + C80158;
    const double C79097 = -C79096;
    const double C79175 = -C79174;
    const double C79251 = C79248 / C78629;
    const double C12550 =
        (((-2 * C78828 * C79244) / C78234 -
          (C78828 * (C78770 * C78729 * C79064 + C79244)) / C78234) *
         ae) /
            C78214 -
        ((2 * C78828 * C79243 + C78828 * (C79243 + C78770 * C78732 * C79064)) *
         ce) /
            C78629 +
        C78628 *
            ((-2 * C79290) / C78629 +
             C78828 *
                 ((-(C78770 *
                     (C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C79064) /
                   C78234) /
                      C78214 -
                  C79245 / C78629));
    const double C36460 =
        3 * ((-(C79245 * C79064) / C78234) / C78214 - C79090 / C78629) +
        C78828 *
            ((-2 * C79290) / C78629 +
             C78828 *
                 ((-(C78770 *
                     (C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C79064) /
                   C78234) /
                      C78214 -
                  C79245 / C78629));
    const double C30061 = C81009 * C3993;
    const double C36913 = C81009 * C6155;
    const double C38383 = C81009 * C12549;
    const double C79273 = C79270 / C78629;
    const double C78961 = -C78960;
    const double C79417 = C79411 / C78629;
    const double C10684 =
        3 * ((-(C79405 * C79064) / C78234) / C78214 - C79397 / C78629) +
        C78828 *
            ((-2 * C79575) / C78629 +
             C78828 *
                 ((-(C78628 *
                     (C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C79064) /
                   C78234) /
                      C78214 -
                  C79405 / C78629));
    const double C12828 =
        (((-2 * C79667) / C78234 - (C78828 * C79671) / C78234) * ae) / C78214 -
        ((2 * C79635 + C78828 * C79637) * ce) / C78629 +
        C78770 *
            ((-2 * C79575) / C78629 +
             C78828 *
                 ((-(C78628 *
                     (C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C79064) /
                   C78234) /
                      C78214 -
                  C79405 / C78629));
    const double C79949 = -C79948;
    const double C79985 = C79983 / C78629;
    const double C79083 = -C79082;
    const double C79717 = C79712 / C78629;
    const double C13102 =
        2 * ((-(C79468 * ce) / C78234) / C78214 - (ae * C79440) / C78629 -
             (C78828 * C79789) / C78629) -
        (ae * (C78828 * C79795 + C79440 + C79791 * ce)) / C78629 -
        ((C79468 + C78828 * C79796 + C79791 * ae) * ce) / C78629 +
        C78828 *
            ((-(ae * C79795) / C78234) / C78214 - C79789 / C78629 -
             (C79796 * ce) / C78629 +
             C78828 *
                 ((-(C79792 * ce) / C78234) / C78214 - (ae * C79790) / C78629 -
                  (C78828 * C78770 * C78628 *
                   (C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                   C78637) /
                      C78629));
    const double C79934 = -C79933;
    const double C80049 = C80043 / C78629;
    const double C38807 = (2 * (C78828 * C79461 + C79384 * ae) +
                           C78828 * (C79461 + C78828 * C80072 + C80069 * ae) +
                           (C79384 + C79857 * C79064) * ae) /
                          C78214;
    const double C32651 =
        (2 * C79457 + C78770 * C79461 +
         C78828 * (C78828 * C79926 + C79871 * ae) + C78828 * C79871 * ae) /
        C78214;
    const double C34905 = (C78828 * (3 * C79461 + C78770 * C79926) +
                           (3 * C79384 + C78770 * C79871) * ae) /
                          C78214;
    const double C31641 = 4 * (2 * C79369 + C78770 * C79384) +
                          C78770 * (3 * C79384 + C78770 * C79871);
    const double C32139 = 2 * C79369 + C78770 * C79384 + C79871 * C79064;
    const double C34479 = C78828 * (3 * C79384 + C78770 * C79871);
    const double C38526 =
        (-2 * (C78828 * C79435 + C79384 * ce)) / C78234 -
        (C78828 * (C78828 * C80071 + C79435 + C80069 * ce)) / C78234 -
        ((C79384 + C79857 * C79064) * ce) / C78234;
    const double C80056 = C79783 + C80054;
    const double C80055 = C80053 + C79781;
    const double C61979 = 4 * (2 * C79677 + C78828 * C79692) +
                          C78828 * (3 * C79692 + C78828 * C80160);
    const double C591 = C585 + C586;
    const double C78816 = C78813 / C78214;
    const double C12397 = C81012 * C10823;
    const double C7192 = C275 * C5721;
    const double C7416 = C490 * C5721;
    const double C33010 = C26926 * C5721;
    const double C8004 = C275 * C6235;
    const double C8324 = C490 * C6235;
    const double C33702 = C26926 * C6235;
    const double C11384 = C275 * C6237;
    const double C11704 = C490 * C6237;
    const double C37016 = C26926 * C6237;
    const double C79394 = C79391 + C79383;
    const double C79860 = -C79850;
    const double C62051 = C62047 + C62048;
    const double C80128 = C80124 / C78214;
    const double C444 = C438 + C439;
    const double C78874 = C78871 / C78214;
    const double C7266 = C7263 + C7264;
    const double C12250 = C275 * C10581;
    const double C12474 = C490 * C10581;
    const double C63515 = C26926 * C10581;
    const double C31767 = C31763 + C31764;
    const double C32348 = C32344 + C32345;
    const double C34636 = C34634 + C34635;
    const double C79702 = C79699 + C79691;
    const double C80152 = -C80139;
    const double C38536 = C26926 * C12687;
    const double C38962 = C490 * C12687;
    const double C64333 = C275 * C12687;
    const double C79899 = C79896 / C78214;
    const double C311 = C301 + C302;
    const double C2832 = C2828 + C2829;
    const double C1074 = C1064 + C1065;
    const double C3498 = C3494 + C3495;
    const double C2010 = C2000 + C2001;
    const double C4324 = C4318 + C4319;
    const double C58213 = C58209 + C58210;
    const double C79868 = C79861 - C78806;
    const double C78930 = C78927 / C78214;
    const double C11494 = C11492 + C11493;
    const double C8112 = C8110 + C8111;
    const double C7113 = C81011 * C5821;
    const double C11277 = C81011 * C6407;
    const double C7895 = C81011 * C6409;
    const double C12171 = C12102 * C165;
    const double C63586 = C12102 * C78260;
    const double C70894 = C12102 * C13806;
    const double C79395 = C79392 + C79386;
    const double C64191 = C64188 + C64189;
    const double C62159 = C62154 + C62155;
    const double C79961 = C79959 / C78214;
    const double C58124 = C81011 * C6496;
    const double C8005 = C81011 * C6494;
    const double C11385 = C81011 * C6497;
    const double C12173 = C81011 * C10681;
    const double C62211 = C81011 * C10683;
    const double C64264 = C81011 * C12827;
    const double C376 = C370 + C371;
    const double C1175 = C1164 + C1165;
    const double C1176 = C1169 + C1170;
    const double C2107 = C2098 + C2099;
    const double C2108 = C2101 + C2102;
    const double C4438 = C4431 + C4432;
    const double C58125 = C58115 + C58116;
    const double C58126 = C58120 + C58121;
    const double C62213 = C62208 + C62209;
    const double C526 = C516 + C517;
    const double C3060 = C3056 + C3057;
    const double C1396 = C1386 + C1387;
    const double C3726 = C3722 + C3723;
    const double C2332 = C2322 + C2323;
    const double C4674 = C4668 + C4669;
    const double C80168 = C80164 - C78864;
    const double C79031 = C79028 / C78214;
    const double C11600 = C11596 + C11597;
    const double C12323 = C81012 * C10773;
    const double C7489 = C7340 * C220;
    const double C33358 = C7340 * C78260;
    const double C40060 = C7340 * C13806;
    const double C8323 = C8218 * C5066;
    const double C8429 = C8218 * C3422;
    const double C19176 = C8218 * C854;
    const double C19282 = C8218 * C17952;
    const double C34212 = C8218 * C78260;
    const double C43374 = C8218 * C13806;
    const double C31959 = C31954 + C31955;
    const double C32673 = C32666 + C32667;
    const double C34913 = C34910 + C34911;
    const double C79703 = C79700 + C79694;
    const double C38813 = C81012 * C12963;
    const double C79924 = C79921 / C78214;
    const double C32060 = C81012 * C6061;
    const double C32853 = C81012 * C6822;
    const double C35057 = C81012 * C9057;
    const double C7488 = C81012 * C6059;
    const double C11813 = C81012 * C6820;
    const double C8431 = C81012 * C6823;
    const double C38963 = C81012 * C13101;
    const double C659 = C653 + C654;
    const double C1599 = C1590 + C1591;
    const double C1600 = C1593 + C1594;
    const double C2535 = C2524 + C2525;
    const double C2536 = C2529 + C2530;
    const double C4904 = C4897 + C4898;
    const double C32062 = C32057 + C32058;
    const double C32854 = C32844 + C32845;
    const double C32855 = C32849 + C32850;
    const double C78699 = C78689 - C78696;
    const double C79393 = C79390 - C79381;
    const double C79701 = C79698 - C79689;
    const double C31643 =
        4 * ((-2 * C79352) / C78234 - (C78770 * C79356) / C78234) +
        C78770 * ((-3 * C79356) / C78234 + C78770 * C79835);
    const double C32141 =
        (-2 * C79352) / C78234 - (C78770 * C79356) / C78234 + C79835 * C79064;
    const double C34481 = C78828 * ((-3 * C79356) / C78234 + C78770 * C79835);
    const double C61981 =
        4 * ((-2 * C79641) / C78234 - (C78828 * C79645) / C78234) +
        C78828 * ((-3 * C79645) / C78234 + C78828 * C80116);
    const double C4426 =
        (C78828 * C78823 * ae) / C78214 - (C78828 * C78935 * ce) / C78629 +
        C78770 * C78828 *
            ((-2 * C78628 * C78958) / C78629 +
             C78628 *
                 ((-((C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C78958 / C78629));
    const double C4776 =
        ((C78770 * C78823 - (C78747 * ce) / C78234) * ae) / C78214 +
        C78828 *
            (C78770 *
                 ((-2 * C78628 * C79055) / C78629 +
                  C78628 * ((-(std::pow(C78632, 7) * bs[7] * C79045 * C78636) /
                             C78234) /
                                C78214 -
                            C79055 / C78629)) -
             (C79036 * ce) / C78629);
    const double C171 =
        4 * ((-2 * C78784) / C78234 - (C78628 * C78794) / C78234) +
        C78628 * ((-3 * C78794) / C78234 + C78628 * C78823);
    const double C862 = (-2 * C78784) / C78234 - (C78628 * C78794) / C78234 +
                        C78770 * (C78770 * C78823 - (C78747 * ce) / C78234) -
                        (C78770 * C78747 * ce) / C78234;
    const double C1795 =
        (-2 * C78784) / C78234 - (C78628 * C78794) / C78234 + C78823 * C79064;
    const double C2689 = C78770 * ((-3 * C78794) / C78234 + C78628 * C78823) -
                         ((3 * C78682 + C78628 * C78747) * ce) / C78234;
    const double C3353 = C78828 * ((-3 * C78794) / C78234 + C78628 * C78823);
    const double C4096 = C78828 * (C78770 * C78823 - (C78747 * ce) / C78234);
    const double C62041 =
        4 * ((-2 * C79658) / C78234 - (C78828 * C79662) / C78234) +
        C78828 * ((-3 * C79662) / C78234 + C78828 * C80135);
    const double C4542 =
        ((C78828 * C78881 - (C78747 * ce) / C78234) * ae) / C78214 +
        C78770 *
            (C78828 *
                 ((-2 * C78628 * C78979) / C78629 +
                  C78628 * ((-(std::pow(C78632, 7) * bs[7] * C78969 * C78636) /
                             C78234) /
                                C78214 -
                            C78979 / C78629)) -
             (C78935 * ce) / C78629);
    const double C4892 =
        (C78770 * C78881 * ae) / C78214 - (C78770 * C79036 * ce) / C78629 +
        C78828 * C78770 *
            ((-2 * C78628 * C79080) / C78629 +
             C78628 *
                 ((-((C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C79080 / C78629));
    const double C226 =
        4 * ((-2 * C78842) / C78234 - (C78628 * C78852) / C78234) +
        C78628 * ((-3 * C78852) / C78234 + C78628 * C78881);
    const double C952 =
        (-2 * C78842) / C78234 - (C78628 * C78852) / C78234 + C78881 * C78942;
    const double C1888 = (-2 * C78842) / C78234 - (C78628 * C78852) / C78234 +
                         C78828 * (C78828 * C78881 - (C78747 * ce) / C78234) -
                         (C78828 * C78747 * ce) / C78234;
    const double C2757 = C78770 * ((-3 * C78852) / C78234 + C78628 * C78881);
    const double C3423 = C78828 * ((-3 * C78852) / C78234 + C78628 * C78881) -
                         ((3 * C78682 + C78628 * C78747) * ce) / C78234;
    const double C4202 =
        C78828 * C78770 * C78881 - (C78770 * C78747 * ce) / C78234;
    const double C31757 =
        4 * ((-2 * C79431) / C78234 - (C78770 * C79435) / C78234) +
        C78770 * ((-3 * C79435) / C78234 + C78770 * C79904);
    const double C32328 = (-2 * C79431) / C78234 - (C78770 * C79435) / C78234 +
                          C78828 * (C78828 * C79904 - (C79871 * ce) / C78234) -
                          (C78828 * C79871 * ce) / C78234;
    const double C34628 = C78828 * ((-3 * C79435) / C78234 + C78770 * C79904) -
                          ((3 * C79384 + C78770 * C79871) * ce) / C78234;
    const double C78797 = C78796 - C78789;
    const double C79338 = C79337 - C79332;
    const double C78822 = C78820 - C78806;
    const double C79810 = C79808 - C79801;
    const double C80079 = C80078 - C78800;
    const double C78912 = C78911 - C78904;
    const double C79359 = C79358 - C78670;
    const double C78936 = C78934 - C78921;
    const double C79834 = C79832 - C78717;
    const double C79945 = C79944 - C78915;
    const double C79977 = C79976 / C78214;
    const double C78855 = C78854 - C78847;
    const double C79613 = C79612 - C79332;
    const double C78880 = C78878 - C78864;
    const double C79818 = C79817 - C78858;
    const double C80008 = C80007 / C78214;
    const double C80091 = C80089 - C79801;
    const double C79438 = C79437 - C78847;
    const double C79581 = C79580 - C78904;
    const double C78984 = C78983 - C78978;
    const double C79449 = C79448 / C78214;
    const double C79587 = C79586 / C78214;
    const double C79903 = C79900 - C78864;
    const double C79962 = C79960 - C78921;
    const double C79013 = C79012 - C79005;
    const double C79648 = C79647 - C78670;
    const double C79037 = C79035 - C79022;
    const double C79912 = C79911 - C79016;
    const double C80026 = C80025 / C78214;
    const double C80115 = C80113 - C78717;
    const double C79464 = C79463 - C79005;
    const double C79665 = C79664 - C78789;
    const double C79060 = C79059 - C79054;
    const double C79477 = C79476 / C78214;
    const double C79673 = C79672 / C78214;
    const double C79928 = C79925 - C79022;
    const double C80134 = C80132 - C78806;
    const double C78283 = C78274 - C78280;
    const double C78273 = C78268 * de;
    const double C41632 = C1392 * C78295;
    const double C67724 = C2006 * C78295;
    const double C98 =
        (C78295 / C78240 + (0 * ce) / C78234) / C78240 - (0 * de) / C78234;
    const double C2616 = C78295 / C78240 - (0 * de) / C78234;
    const double C13178 = C78295 / C78240 + (0 * ce) / C78234;
    const double C31444 = C1392 * C4989;
    const double C60870 = C2006 * C4989;
    const double C78272 = C78267 * ce;
    const double C743 =
        ((-C78235 / C78234) / C78240 - (C78253 * de) / C78234) / C78240 -
        ((C78232 * ((-C78242) / C78240 - (C78267 * de) / C78234) + C13799) *
         de) /
            C78234 +
        (-C78254 / C78234) / C78240 - (0 * de) / C78234;
    const double C744 =
        ((-C78242) / C78240 - (C78267 * de) / C78234) / C78240 -
        ((C78232 * ((-C78254 / C78234) / C78240 - (0 * de) / C78234) + C80598) *
         de) /
            C78234;
    const double C13805 = (-C78242) / C78240 - (C78267 * de) / C78234;
    const double C80949 = C80915 / C78234;
    const double C80983 = C80953 / C78240;
    const double C80984 = C80955 + C80923;
    const double C2609 = C80923 - C80599 / C78246;
    const double C80952 = C80919 / C78234;
    const double C28801 = C27365 * C2607;
    const double C29219 = C27897 * C2607;
    const double C55177 = C53813 * C2607;
    const double C55397 = C54123 * C2607;
    const double C78435 = C78430 - C78433;
    const double C78410 = C78406 * ce;
    const double C13245 = (-C78392) / C78240 - (C78406 * de) / C78234;
    const double C78419 = C78415 * de;
    const double C15652 = C1072 * C78443;
    const double C15886 = C1394 * C78443;
    const double C17652 = C8218 * C78443;
    const double C68422 = C32160 * C78443;
    const double C5720 =
        (C78443 / C78240 + (0 * ce) / C78234) / C78240 - (0 * de) / C78234;
    const double C6972 = C78443 / C78240 - (0 * de) / C78234;
    const double C13876 = C78443 / C78240 + (0 * ce) / C78234;
    const double C80967 = C80935 / C78234;
    const double C80992 = C80970 / C78240;
    const double C80993 = C80971 + C80939;
    const double C6895 = C80939 - C80687 / C78246;
    const double C80969 = C80936 / C78234;
    const double C7186 = C373 * C6893;
    const double C7410 = C588 * C6893;
    const double C60067 = C53928 * C6893;
    const double C60281 = C54210 * C6893;
    const double C78526 = C78521 - C78524;
    const double C78501 = C78497 * ce;
    const double C17951 = (-C78483) / C78240 - (C78497 * de) / C78234;
    const double C78510 = C78506 * de;
    const double C21246 = C2008 * C78534;
    const double C21480 = C2330 * C78534;
    const double C47516 = C32158 * C78534;
    const double C48116 = C32668 * C78534;
    const double C10580 =
        (C78534 / C78240 + (0 * ce) / C78234) / C78240 - (0 * de) / C78234;
    const double C12026 = C78534 / C78240 - (0 * de) / C78234;
    const double C19488 = C78534 / C78240 + (0 * ce) / C78234;
    const double C80973 = C80941 / C78234;
    const double C80995 = C80976 / C78240;
    const double C80996 = C80977 + C80945;
    const double C11883 = C80945 - C80727 / C78246;
    const double C80975 = C80942 / C78234;
    const double C12244 = C441 * C11881;
    const double C12468 = C656 * C11881;
    const double C38530 = C27572 * C11881;
    const double C38956 = C28064 * C11881;
    const double C27380 = C27368 * C745;
    const double C27566 = C27368 * C220;
    const double C30289 = C27368 * C3421;
    const double C30988 = C27368 * C4989;
    const double C41176 = C27368 * C78295;
    const double C27563 = C27370 * C220;
    const double C32930 = C27370 * C78260;
    const double C33807 = C27370 * C3421;
    const double C39646 = C27370 * C13806;
    const double C53828 = C53816 * C745;
    const double C53916 = C53816 * C165;
    const double C55938 = C53816 * C2687;
    const double C60636 = C53816 * C4989;
    const double C67420 = C53816 * C78295;
    const double C53919 = C53818 * C165;
    const double C62494 = C53818 * C78260;
    const double C62600 = C53818 * C2687;
    const double C65824 = C53818 * C13806;
    const double C30284 = C30062 * C3422;
    const double C33590 = C30062 * C78260;
    const double C37117 = C30062 * C9285;
    const double C40292 = C30062 * C13806;
    const double C40496 = C30062 * C1879;
    const double C44468 = C30062 * C17952;
    const double C55934 = C30062 * C2688;
    const double C59230 = C30062 * C5065;
    const double C65930 = C30062 * C13246;
    const double C69932 = C30062 * C853;
    const double C58030 = C58024 * C5657;
    const double C58117 = C58024 * C5065;
    const double C61636 = C58024 * C853;
    const double C62906 = C58024 * C2688;
    const double C66256 = C58024 * C13246;
    const double C58032 = C58026 * C5657;
    const double C58114 = C58026 * C5066;
    const double C61634 = C58026 * C854;
    const double C68732 = C58026 * C78443;
    const double C27379 = C27367 * C738;
    const double C30987 = C27367 * C80982;
    const double C32929 = C27367 * C80598;
    const double C39645 = C27367 * C80598;
    const double C41175 = C27367 * C80601;
    const double C27383 = C27371 * C737;
    const double C30991 = C27371 * C80998;
    const double C31648 = C27371 * C80588;
    const double C32931 = C27371 * C80916;
    const double C39647 = C27371 * C13799;
    const double C41179 = C27371 * C80593;
    const double C53827 = C53815 * C738;
    const double C59131 = C53815 * C80598;
    const double C60635 = C53815 * C80982;
    const double C65823 = C53815 * C80598;
    const double C67419 = C53815 * C80601;
    const double C53831 = C53819 * C737;
    const double C57770 = C53819 * C80588;
    const double C60639 = C53819 * C80998;
    const double C62495 = C53819 * C80916;
    const double C65825 = C53819 * C13799;
    const double C72183 = C53819 * C80593;
    const double C30069 = C30063 * C737;
    const double C32144 = C30063 * C80588;
    const double C33591 = C30063 * C80916;
    const double C40293 = C30063 * C13799;
    const double C41887 = C30063 * C80593;
    const double C48217 = C30063 * C80998;
    const double C379 = C375 * C80628;
    const double C2910 = C375 * C80932;
    const double C13455 = C375 * C13173;
    const double C1178 = C1174 * C80988;
    const double C2904 = C1174 * C80686;
    const double C5293 = C1174 * C4985;
    const double C13449 = C1174 * C80686;
    const double C15651 = C1174 * C80689;
    const double C2110 = C2106 * C80628;
    const double C4429 = C2106 * C80932;
    const double C8000 = C2106 * C4984;
    const double C14847 = C2106 * C13173;
    const double C17349 = C2106 * C80682;
    const double C18865 = C2106 * C81003;
    const double C54213 = C54211 * C80628;
    const double C58118 = C54211 * C4984;
    const double C61637 = C54211 * C81003;
    const double C62907 = C54211 * C80932;
    const double C66257 = C54211 * C13173;
    const double C77909 = C54211 * C80682;
    const double C56254 = C56253 * C80686;
    const double C58113 = C56253 * C4985;
    const double C61633 = C56253 * C80988;
    const double C66255 = C56253 * C80686;
    const double C68731 = C56253 * C80689;
    const double C662 = C658 * C80639;
    const double C3876 = C658 * C80933;
    const double C18371 = C658 * C17817;
    const double C1602 = C1598 * C80639;
    const double C4895 = C1598 * C80933;
    const double C11808 = C1598 * C9133;
    const double C15261 = C1598 * C81004;
    const double C19277 = C1598 * C17817;
    const double C22377 = C1598 * C80722;
    const double C28067 = C28065 * C80639;
    const double C32847 = C28065 * C81004;
    const double C34411 = C28065 * C80933;
    const double C36411 = C28065 * C9133;
    const double C45069 = C28065 * C17817;
    const double C52661 = C28065 * C80722;
    const double C2538 = C2534 * C80990;
    const double C3870 = C2534 * C80726;
    const double C9747 = C2534 * C9134;
    const double C18365 = C2534 * C80726;
    const double C21479 = C2534 * C80729;
    const double C30909 = C30908 * C80726;
    const double C32842 = C30908 * C80990;
    const double C36407 = C30908 * C9134;
    const double C45067 = C30908 * C80726;
    const double C48115 = C30908 * C80729;
    const double C113 = (3 * (C78643 + C78628 * C78662 + C78651 * ae) +
                         C78628 * (2 * C78662 + C78628 * C78701 + C78682 * ae) +
                         (2 * C78651 + C78628 * C78682) * ae) /
                        C78214;
    const double C760 =
        (C78770 * (2 * C78662 + C78628 * C78701 + C78682 * ae)) / C78214;
    const double C766 =
        (C78643 + C78628 * C78662 + C78651 * ae + C78701 * C78942) / C78214;
    const double C1696 =
        (C78828 * (2 * C78662 + C78628 * C78701 + C78682 * ae)) / C78214;
    const double C1702 =
        (C78643 + C78628 * C78662 + C78651 * ae + C78701 * C79064) / C78214;
    const double C3987 = (C78828 * C78770 * C78701) / C78214;
    const double C36914 = C36910 + C36911;
    const double C32942 = C32940 * C78260;
    const double C33081 = C32940 * C220;
    const double C39652 = C32940 * C13806;
    const double C33602 = C33600 * C78260;
    const double C33809 = C33600 * C3422;
    const double C42782 = C33600 * C13806;
    const double C44474 = C33600 * C17952;
    const double C59234 = C33600 * C5066;
    const double C68428 = C33600 * C78443;
    const double C69936 = C33600 * C854;
    const double C63376 = C63374 * C78260;
    const double C63446 = C63374 * C165;
    const double C70692 = C63374 * C13806;
    const double C78756 = C78743 - C78753;
    const double C79254 = C79253 - C79250;
    const double C79799 = C79253 - C78800;
    const double C79276 = C79275 - C79272;
    const double C80081 = C79275 - C78858;
    const double C31665 = C31661 * C5657;
    const double C31765 = C31661 * C220;
    const double C32169 = C32163 * C5657;
    const double C32343 = C32163 * C1880;
    const double C35958 = C32163 * C9286;
    const double C52214 = C32163 * C78534;
    const double C57856 = C32163 * C5066;
    const double C61406 = C32163 * C854;
    const double C77684 = C32163 * C78443;
    const double C34491 = C34489 * C5657;
    const double C34633 = C34489 * C3422;
    const double C49212 = C34489 * C17952;
    const double C61999 = C61995 * C5657;
    const double C62049 = C61995 * C165;
    const double C773 =
        2 * ((-(C78770 * C78656 * ce) / C78234) / C78214 -
             (ae * C78770 * C78655) / C78629 - (C78628 * C79090) / C78629) -
        (ae * C78770 * C78700) / C78629 - (C78770 * C78701 * ce) / C78629 +
        C78628 * ((-(ae * C78770 * C78691) / C78234) / C78214 -
                  C79090 / C78629 - (C78770 * C78692 * ce) / C78629 +
                  C78628 * ((-(C78770 * C78683 * ce) / C78234) / C78214 -
                            (ae * C78770 * C78680) / C78629 -
                            (C78628 * C78770 * C78744) / C78629));
    const double C1709 =
        2 * ((-(C78828 * C78656 * ce) / C78234) / C78214 -
             (ae * C78828 * C78655) / C78629 - (C78628 * C79168) / C78629) -
        (ae * C78828 * C78700) / C78629 - (C78828 * C78701 * ce) / C78629 +
        C78628 * ((-(ae * C78828 * C78691) / C78234) / C78214 -
                  C79168 / C78629 - (C78828 * C78692 * ce) / C78629 +
                  C78628 * ((-(C78828 * C78683 * ce) / C78234) / C78214 -
                            (ae * C78828 * C78680) / C78629 -
                            (C78628 * C78828 * C78744) / C78629));
    const double C114 =
        (-3 * (C78628 * C78661 + C78642 + C78651 * ce)) / C78234 +
        C78628 * ((-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
                  (C78682 * ce) / C78234) -
        ((2 * C78651 + C78628 * C78682) * ce) / C78234;
    const double C761 =
        C78770 * ((-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
                  (C78682 * ce) / C78234);
    const double C767 =
        -(C78700 * C78942 + C78628 * C78661 + C78642 + C78651 * ce) / C78234;
    const double C1697 =
        C78828 * ((-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
                  (C78682 * ce) / C78234);
    const double C1703 =
        -(C78700 * C79064 + C78628 * C78661 + C78642 + C78651 * ce) / C78234;
    const double C3988 = -(C78828 * C78770 * C78700) / C78234;
    const double C78734 = C78726 / C78214;
    const double C38814 = C38810 + C38811;
    const double C79831 = C79828 - C78915;
    const double C60211 = C60208 + C60209;
    const double C80112 = C80109 - C79016;
    const double C31962 = C31958 * C80588;
    const double C32678 = C32672 * C80588;
    const double C58034 = C58028 * C80588;
    const double C34914 = C34912 * C80588;
    const double C64192 = C64190 * C80588;
    const double C62162 = C62158 * C80588;
    const double C30065 = C30056 + C30057;
    const double C32159 = C32148 + C32149;
    const double C27381 = C27369 * C80954;
    const double C30989 = C27369 * C80954;
    const double C41177 = C27369 * C15341;
    const double C27385 = C27373 * C738;
    const double C30993 = C27373 * C80982;
    const double C32933 = C27373 * C80598;
    const double C39649 = C27373 * C80598;
    const double C41181 = C27373 * C80601;
    const double C53829 = C53817 * C80954;
    const double C60637 = C53817 * C80954;
    const double C67421 = C53817 * C15341;
    const double C53833 = C53821 * C738;
    const double C60641 = C53821 * C80982;
    const double C62497 = C53821 * C80598;
    const double C65827 = C53821 * C80598;
    const double C72185 = C53821 * C80601;
    const double C31663 = C31659 * C80588;
    const double C32935 = C31659 * C80916;
    const double C39651 = C31659 * C13799;
    const double C32167 = C32161 * C80588;
    const double C33595 = C32161 * C80916;
    const double C42781 = C32161 * C13799;
    const double C61997 = C61993 * C80588;
    const double C63369 = C61993 * C80916;
    const double C70691 = C61993 * C13799;
    const double C78761 = C78628 * C78758;
    const double C79733 = C78770 * C78758;
    const double C6900 =
        (2 * C78770 * C78701 + C78770 * (C78701 + C78758 * C78942)) / C78214;
    const double C7590 = (C78828 * (C78701 + C78758 * C78942)) / C78214;
    const double C11886 =
        (2 * C78828 * C78701 + C78828 * (C78701 + C78758 * C79064)) / C78214;
    const double C79880 = C78770 * C79876;
    const double C80177 = C78828 * C80174;
    const double C79426 = C79424 + C79416;
    const double C79729 = C79727 + C79722;
    const double C79425 = C79423 + C79413;
    const double C79728 = C79726 + C79719;
    const double C78760 = C78628 * C78757;
    const double C79738 = C78770 * C78757;
    const double C3994 =
        2 * ((-(C78828 * C79243 * ce) / C78234) / C78214 -
             (ae * C78828 * C79244) / C78629 - (C78628 * C79290) / C78629) -
        (ae * C78828 * C78770 * C78757) / C78629 -
        (C78828 * C78770 * C78758 * ce) / C78629 +
        C78628 *
            ((-(ae * C78828 * C78770 * C78745) / C78234) / C78214 -
             C79290 / C78629 - (C78828 * C78770 * C78748 * ce) / C78629 +
             C78628 *
                 ((-(C78828 * C78770 * C78732 * ce) / C78234) / C78214 -
                  (ae * C78828 * C78770 * C78729) / C78629 -
                  (C78628 * C78828 * C78770 *
                   (C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                   C78637) /
                      C78629));
    const double C6901 = (-2 * C78770 * C78700) / C78234 -
                         (C78770 * (C78757 * C78942 + C78700)) / C78234;
    const double C7591 = -(C78828 * (C78757 * C78942 + C78700)) / C78234;
    const double C11887 = (-2 * C78828 * C78700) / C78234 -
                          (C78828 * (C78757 * C79064 + C78700)) / C78234;
    const double C79879 = C78770 * C79875;
    const double C80176 = C78828 * C80173;
    const double C79098 = C79097 / C78214;
    const double C79176 = C79175 / C78214;
    const double C36915 = C36912 + C36913;
    const double C38386 = C38382 + C38383;
    const double C78962 = C78961 / C78214;
    const double C79950 = C79949 / C78214;
    const double C79084 = C79083 / C78214;
    const double C79935 = C79934 / C78214;
    const double C80058 = C80056 + C80048;
    const double C80057 = C80055 + C80045;
    const double C595 = C591 * C80628;
    const double C78819 = C78816 - C78800;
    const double C12398 = C12396 + C12397;
    const double C7418 = C7416 + C7417;
    const double C5723 =
        (-3 * (C78770 * C79371 + C78776 + C79369 * ce)) / C78234 +
        C78770 * ((-2 * C79371) / C78234 - (C78770 * C79394) / C78234 -
                  (C79384 * ce) / C78234) -
        ((2 * C79369 + C78770 * C79384) * ce) / C78234;
    const double C6239 =
        -(C79394 * C79064 + C78770 * C79371 + C78776 + C79369 * ce) / C78234;
    const double C8573 =
        C78828 * ((-2 * C79371) / C78234 - (C78770 * C79394) / C78234 -
                  (C79384 * ce) / C78234);
    const double C38455 = (-2 * C78828 * C79394) / C78234 -
                          (C78828 * (C79875 * C79064 + C79394)) / C78234;
    const double C79867 = C79860 / C78214;
    const double C62053 = C62051 * C80628;
    const double C80131 = C80128 - C79054;
    const double C448 = C444 * C80639;
    const double C78877 = C78874 - C78858;
    const double C7267 = C7266 * C80639;
    const double C31769 = C31767 * C80639;
    const double C32351 = C32348 * C80965;
    const double C35959 = C32348 * C80965;
    const double C52215 = C32348 * C20867;
    const double C34637 = C34636 * C80726;
    const double C49213 = C34636 * C80726;
    const double C10583 =
        (-3 * (C78828 * C79679 + C78834 + C79677 * ce)) / C78234 +
        C78828 * ((-2 * C79679) / C78234 - (C78828 * C79702) / C78234 -
                  (C79692 * ce) / C78234) -
        ((2 * C79677 + C78828 * C79692) * ce) / C78234;
    const double C80163 = C80152 / C78214;
    const double C38538 = C38536 + C38537;
    const double C79902 = C79899 - C78978;
    const double C372 = C311 * C165;
    const double C440 = C311 * C220;
    const double C2911 = C2832 * C2688;
    const double C2985 = C2832 * C220;
    const double C13456 = C2832 * C13246;
    const double C1171 = C1074 * C854;
    const double C1275 = C1074 * C220;
    const double C5300 = C1074 * C5066;
    const double C15658 = C1074 * C78443;
    const double C3569 = C3498 * C165;
    const double C3649 = C3498 * C3422;
    const double C18162 = C3498 * C17952;
    const double C2105 = C2010 * C165;
    const double C2209 = C2010 * C1880;
    const double C9520 = C2010 * C9286;
    const double C21252 = C2010 * C78534;
    const double C54120 = C2010 * C745;
    const double C60876 = C2010 * C4989;
    const double C72414 = C2010 * C78295;
    const double C4435 = C4324 * C2688;
    const double C4551 = C4324 * C3422;
    const double C16460 = C4324 * C13246;
    const double C20492 = C4324 * C17952;
    const double C56144 = C4324 * C745;
    const double C67730 = C4324 * C78295;
    const double C74064 = C4324 * C4989;
    const double C79874 = C79868 - C79853;
    const double C78933 = C78930 - C78915;
    const double C79410 = C78930 - C79404;
    const double C5873 =
        2 * ((-(C78899 * ce) / C78234) / C78214 - (ae * C78784) / C78629 -
             (C78770 * C79397) / C78629) -
        (ae * (C78770 * C79401 + C78784 + C79399 * ce)) / C78629 -
        ((C78899 + C78770 * C79402 + C79399 * ae) * ce) / C78629 +
        C78770 * ((-(ae * C79401) / C78234) / C78214 - C79397 / C78629 -
                  (C79402 * ce) / C78629 +
                  C78770 * (C78930 - C78804 / C78629 -
                            (C78770 * C78628 * C78958) / C78629));
    const double C11495 = C11494 * C80965;
    const double C14957 = C11494 * C80965;
    const double C22081 = C11494 * C20867;
    const double C8113 = C8112 * C80726;
    const double C18975 = C8112 * C80726;
    const double C7116 = C7112 + C7113;
    const double C11280 = C11276 + C11277;
    const double C7898 = C7894 + C7895;
    const double C8783 =
        2 * ((-(C78828 * C78897 * ce) / C78234) / C78214 -
             (ae * C78828 * C78782) / C78629 - (C78770 * C79573) / C78629) -
        (ae * C78828 * C79394) / C78629 - (C78828 * C79395 * ce) / C78629 +
        C78770 * ((-(ae * C78828 * C79382) / C78234) / C78214 -
                  C79573 / C78629 - (C78828 * C79385 * ce) / C78629 +
                  C78770 * ((-(C78828 * C78905 * ce) / C78234) / C78214 -
                            (ae * C78828 * C78790) / C78629 -
                            (C78770 * C78828 * C78958) / C78629));
    const double C5823 =
        (3 * (C78891 + C78770 * C79372 + C79369 * ae) +
         C78770 * (2 * C79372 + C78770 * C79395 + C79384 * ae) +
         (2 * C79369 + C78770 * C79384) * ae) /
        C78214;
    const double C6411 =
        (C78891 + C78770 * C79372 + C79369 * ae + C79395 * C79064) / C78214;
    const double C8713 =
        (C78828 * (2 * C79372 + C78770 * C79395 + C79384 * ae)) / C78214;
    const double C38605 =
        (2 * C78828 * C79395 + C78828 * (C79395 + C79876 * C79064)) / C78214;
    const double C64193 = C64191 * C5657;
    const double C64262 = C64191 * C2688;
    const double C75502 = C64191 * C13246;
    const double C62163 = C62159 * C5657;
    const double C62212 = C62159 * C165;
    const double C79963 = C79961 - C78978;
    const double C79986 = C79961 - C79984;
    const double C8006 = C8004 + C8005;
    const double C11386 = C11384 + C11385;
    const double C12174 = C12172 + C12173;
    const double C62214 = C62210 + C62211;
    const double C64265 = C64263 + C64264;
    const double C380 = C376 * C80628;
    const double C1179 = C1175 * C80962;
    const double C5295 = C1175 * C80962;
    const double C15653 = C1175 * C15344;
    const double C1180 = C1176 * C80988;
    const double C2908 = C1176 * C80686;
    const double C5299 = C1176 * C4985;
    const double C13453 = C1176 * C80686;
    const double C15657 = C1176 * C80689;
    const double C2111 = C2107 * C80628;
    const double C4434 = C2107 * C80932;
    const double C16459 = C2107 * C13173;
    const double C2112 = C2108 * C80628;
    const double C11382 = C2108 * C80932;
    const double C14851 = C2108 * C13173;
    const double C4440 = C4438 * C80686;
    const double C8002 = C4438 * C4985;
    const double C14849 = C4438 * C80686;
    const double C17351 = C4438 * C80689;
    const double C18867 = C4438 * C80988;
    const double C58128 = C58125 * C80962;
    const double C61635 = C58125 * C80962;
    const double C68733 = C58125 * C15344;
    const double C58129 = C58126 * C4985;
    const double C61639 = C58126 * C80988;
    const double C62909 = C58126 * C80686;
    const double C66259 = C58126 * C80686;
    const double C77911 = C58126 * C80689;
    const double C62215 = C62213 * C80628;
    const double C64261 = C62213 * C80932;
    const double C75501 = C62213 * C13173;
    const double C587 = C526 * C165;
    const double C655 = C526 * C220;
    const double C3139 = C3060 * C2688;
    const double C3213 = C3060 * C220;
    const double C13666 = C3060 * C13246;
    const double C1493 = C1396 * C854;
    const double C1597 = C1396 * C220;
    const double C5534 = C1396 * C5066;
    const double C15892 = C1396 * C78443;
    const double C27894 = C1396 * C745;
    const double C31450 = C1396 * C4989;
    const double C41638 = C1396 * C78295;
    const double C3797 = C3726 * C165;
    const double C3877 = C3726 * C3422;
    const double C18372 = C3726 * C17952;
    const double C2427 = C2332 * C165;
    const double C2531 = C2332 * C1880;
    const double C9754 = C2332 * C9286;
    const double C21486 = C2332 * C78534;
    const double C4785 = C4674 * C2688;
    const double C4901 = C4674 * C3422;
    const double C16758 = C4674 * C13246;
    const double C20790 = C4674 * C17952;
    const double C30698 = C4674 * C745;
    const double C42484 = C4674 * C78295;
    const double C48814 = C4674 * C4989;
    const double C80172 = C80168 - C80155;
    const double C79034 = C79031 - C79016;
    const double C79711 = C79031 - C79442;
    const double C10871 =
        2 * ((-(C79000 * ce) / C78234) / C78214 - (ae * C78842) / C78629 -
             (C78828 * C79480) / C78629) -
        (ae * (C78828 * C79708 + C78842 + C79706 * ce)) / C78629 -
        ((C79000 + C78828 * C79709 + C79706 * ae) * ce) / C78629 +
        C78828 * ((-(ae * C79708) / C78234) / C78214 - C79480 / C78629 -
                  (C79709 * ce) / C78629 +
                  C78828 * (C79031 - C79442 - (C78828 * C79484) / C78629));
    const double C11703 = C11600 * C2688;
    const double C11811 = C11600 * C9286;
    const double C15160 = C11600 * C13246;
    const double C15264 = C11600 * C1880;
    const double C22380 = C11600 * C78534;
    const double C37520 = C11600 * C78260;
    const double C40900 = C11600 * C13806;
    const double C12326 = C12322 + C12323;
    const double C31963 = C31959 * C5657;
    const double C32061 = C31959 * C220;
    const double C32679 = C32673 * C5657;
    const double C32851 = C32673 * C1880;
    const double C36414 = C32673 * C9286;
    const double C52664 = C32673 * C78534;
    const double C34915 = C34913 * C5657;
    const double C35055 = C34913 * C3422;
    const double C49612 = C34913 * C17952;
    const double C10775 =
        (3 * (C78992 + C78828 * C79680 + C79677 * ae) +
         C78828 * (2 * C79680 + C78828 * C79703 + C79692 * ae) +
         (2 * C79677 + C78828 * C79692) * ae) /
        C78214;
    const double C38815 = C38812 + C38813;
    const double C79927 = C79924 - C79054;
    const double C80042 = C79924 - C80036;
    const double C32063 = C32059 + C32060;
    const double C32856 = C32852 + C32853;
    const double C35058 = C35056 + C35057;
    const double C7490 = C7487 + C7488;
    const double C11814 = C11812 + C11813;
    const double C8432 = C8430 + C8431;
    const double C38964 = C38962 + C38963;
    const double C663 = C659 * C80639;
    const double C1603 = C1599 * C80639;
    const double C8428 = C1599 * C80933;
    const double C19281 = C1599 * C17817;
    const double C1604 = C1600 * C80639;
    const double C4900 = C1600 * C80933;
    const double C20789 = C1600 * C17817;
    const double C2539 = C2535 * C80965;
    const double C9749 = C2535 * C80965;
    const double C21481 = C2535 * C20867;
    const double C2540 = C2536 * C80990;
    const double C3874 = C2536 * C80726;
    const double C9753 = C2536 * C9134;
    const double C18369 = C2536 * C80726;
    const double C21485 = C2536 * C80729;
    const double C4906 = C4904 * C80726;
    const double C11810 = C4904 * C9134;
    const double C15263 = C4904 * C80990;
    const double C19279 = C4904 * C80726;
    const double C22379 = C4904 * C80729;
    const double C32064 = C32062 * C80639;
    const double C35054 = C32062 * C80933;
    const double C49611 = C32062 * C17817;
    const double C32857 = C32854 * C80965;
    const double C36409 = C32854 * C80965;
    const double C48117 = C32854 * C20867;
    const double C32858 = C32855 * C80990;
    const double C34413 = C32855 * C80726;
    const double C36413 = C32855 * C9134;
    const double C45071 = C32855 * C80726;
    const double C52663 = C32855 * C80729;
    const double C121 =
        3 * ((-(ae * C78661) / C78234) / C78214 - C78660 / C78629 -
             (C78662 * ce) / C78629 + C78628 * C78699) +
        (((-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
          (C78682 * ce) / C78234) *
         ae) /
            C78214 -
        ((2 * C78662 + C78628 * C78701 + C78682 * ae) * ce) / C78629 +
        C78628 * (2 * C78699 - (ae * C78700) / C78629 - (C78701 * ce) / C78629 +
                  C78628 * ((-(ae * C78691) / C78234) / C78214 -
                            C78690 / C78629 - (C78692 * ce) / C78629 +
                            C78628 * ((-(C78683 * ce) / C78234) / C78214 -
                                      (ae * C78680) / C78629 -
                                      (C78628 *
                                       (C78667 * C78668 +
                                        C78636 * bs[6] * std::pow(C78626, 6)) *
                                       C78637) /
                                          C78629)));
    const double C5872 =
        3 * ((-(ae * C79371) / C78234) / C78214 - C78947 / C78629 -
             (C79372 * ce) / C78629 + C78770 * C79393) +
        (((-2 * C79371) / C78234 - (C78770 * C79394) / C78234 -
          (C79384 * ce) / C78234) *
         ae) /
            C78214 -
        ((2 * C79372 + C78770 * C79395 + C79384 * ae) * ce) / C78629 +
        C78770 * (2 * C79393 - (ae * C79394) / C78629 - (C79395 * ce) / C78629 +
                  C78770 * ((-(ae * C79382) / C78234) / C78214 - C78955 -
                            (C79385 * ce) / C78629 +
                            C78770 * ((-C78917 / C78234) / C78214 - C78806 -
                                      (C78770 * C78958) / C78629)));
    const double C10870 =
        3 * ((-(ae * C79679) / C78234) / C78214 - C79069 / C78629 -
             (C79680 * ce) / C78629 + C78828 * C79701) +
        (((-2 * C79679) / C78234 - (C78828 * C79702) / C78234 -
          (C79692 * ce) / C78234) *
         ae) /
            C78214 -
        ((2 * C79680 + C78828 * C79703 + C79692 * ae) * ce) / C78629 +
        C78828 * (2 * C79701 - (ae * C79702) / C78629 - (C79703 * ce) / C78629 +
                  C78828 * ((-(ae * C79690) / C78234) / C78214 - C79077 -
                            (C79693 * ce) / C78629 +
                            C78828 * ((-C79018 / C78234) / C78214 - C78864 -
                                      (C78828 * C79080) / C78629)));
    const double C176 =
        3 * ((-(ae * C78784) / C78234) / C78214 - C78781 / C78629 +
             C78628 * C78797) +
        (((-2 * C78784) / C78234 - (C78628 * C78794) / C78234) * ae) / C78214 +
        C78628 *
            (2 * C78797 - (ae * C78794) / C78629 +
             C78628 *
                 ((-(ae * C78628 * C78790) / C78234) / C78214 -
                  C78788 / C78629 +
                  C78628 * ((-(C78628 * C78710 * C78709 * C78777) / C78234) /
                                C78214 -
                            (ae * C78790) / C78629)));
    const double C866 = (-(C78628 * C78781) / C78234) / C78214 -
                        (ae * C78776) / C78629 -
                        (C78770 * C78662 * ce) / C78629 +
                        C78770 * (C78770 * C78797 - (C78662 * ce) / C78629);
    const double C867 =
        C78770 * ((-(ae * C78784) / C78234) / C78214 - C78781 / C78629 +
                  C78628 * C78797) -
        ((C78643 + C78628 * C78662 + C78651 * ae) * ce) / C78629;
    const double C1797 = C78828 * ((-(ae * C78784) / C78234) / C78214 -
                                   C78781 / C78629 + C78628 * C78797);
    const double C1801 = (-(C78628 * C78781) / C78234) / C78214 -
                         (ae * C78776) / C78629 + C78797 * C79064;
    const double C4098 = C78828 * (C78770 * C78797 - (C78662 * ce) / C78629);
    const double C5727 =
        3 * ((-(C79330 * ce) / C78234) / C78214 - C78781 / C78629 +
             C78770 * C79338) -
        ((2 * C79330 + C78770 * C79335) * ce) / C78629 +
        C78770 * (2 * C79338 - (C79335 * ce) / C78629 +
                  C78770 * (C79253 - C78800 +
                            C78770 * ((-(C78770 * C78805) / C78234) / C78214 -
                                      C78706 / C78629)));
    const double C6242 = C78828 * ((-(C79330 * ce) / C78234) / C78214 -
                                   C78781 / C78629 + C78770 * C79338);
    const double C6244 = (-(C78770 * C78781) / C78234) / C78214 -
                         (C78643 * ce) / C78629 + C79338 * C79064;
    const double C6245 =
        (-(C79330 * ce) / C78234) / C78214 - C78781 / C78629 + C78770 * C79338 +
        (C79253 - C78800 +
         C78770 * ((-(C78770 * C78805) / C78234) / C78214 - C78706 / C78629)) *
            C79064;
    const double C8575 =
        C78828 * (2 * C79338 - (C79335 * ce) / C78629 +
                  C78770 * (C79253 - C78800 +
                            C78770 * ((-(C78770 * C78805) / C78234) / C78214 -
                                      C78706 / C78629)));
    const double C12619 =
        2 * C78828 * C79338 +
        C78828 * (C79338 +
                  ((-(C78770 * C78805) / C78234) / C78214 - C78706 / C78629) *
                      C79064);
    const double C78824 = C78628 * C78822;
    const double C79341 = C78770 * C78822;
    const double C5725 = 2 * (C78770 * C78797 - (C78662 * ce) / C78629) -
                         ((C78662 + C78692 * C78942) * ce) / C78629 +
                         C78770 * (C78797 - (C78770 * C78692 * ce) / C78629 +
                                   C78770 * (C78770 * C78822 - C78715));
    const double C10530 =
        2 * C78828 * C78797 + C78828 * (C78797 + C78822 * C79064);
    const double C10533 =
        3 * (C78797 + C78822 * C79064) +
        C78828 *
            (2 * C78828 * C78822 +
             C78828 *
                 (C78822 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) / C78234) /
                       C78214 -
                   (ae * C78808) / C78629) *
                      C79064));
    const double C79811 = C78770 * C79810;
    const double C36504 =
        3 * (C79338 + C79810 * C79064) +
        C78828 *
            (2 * C78828 * C79810 +
             C78828 *
                 (C79810 +
                  ((-(C78770 * std::pow(C78632, 7) * bs[7] * C78777) / C78234) /
                       C78214 -
                   (C78732 * ce) / C78629) *
                      C79064));
    const double C62042 =
        4 * ((-2 * C78828 * C78788) / C78629 + C78828 * C80079) +
        C78828 * (3 * C80079 + C78828 * ((-2 * C78828 * C78805) / C78629 +
                                         C78828 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78777 * C79064) /
                                                    C78234) /
                                                       C78214 -
                                                   C78805 / C78629)));
    const double C286 =
        3 * ((-(C78899 * ce) / C78234) / C78214 - C78896 / C78629 +
             C78628 * C78912) -
        ((2 * C78899 + C78628 * C78909) * ce) / C78629 +
        C78628 *
            (2 * C78912 - (C78909 * ce) / C78629 +
             C78628 *
                 ((-(C78628 * C78905 * ce) / C78234) / C78214 -
                  C78903 / C78629 +
                  C78628 * ((-(C78628 * C78710 * C78709 * C78892) / C78234) /
                                C78214 -
                            (C78905 * ce) / C78629)));
    const double C1045 =
        C78770 * ((-(C78899 * ce) / C78234) / C78214 - C78896 / C78629 +
                  C78628 * C78912) -
        (ae * (C78628 * C78661 + C78642 + C78651 * ce)) / C78629;
    const double C1048 = (-(C78628 * C78896) / C78234) / C78214 -
                         (C78891 * ce) / C78629 -
                         (ae * C78770 * C78661) / C78629 +
                         C78770 * (C78770 * C78912 - (ae * C78661) / C78629);
    const double C1981 = C78828 * ((-(C78899 * ce) / C78234) / C78214 -
                                   C78896 / C78629 + C78628 * C78912);
    const double C1984 = (-(C78628 * C78896) / C78234) / C78214 -
                         (C78891 * ce) / C78629 + C78912 * C79064;
    const double C4310 =
        C78770 * C78828 * C78912 - (ae * C78828 * C78661) / C78629;
    const double C5827 =
        3 * ((-(ae * C79352) / C78234) / C78214 - C78896 / C78629 +
             C78770 * C79359) +
        (((-2 * C79352) / C78234 - (C78770 * C79356) / C78234) * ae) / C78214 +
        C78770 * (2 * C79359 - (ae * C79356) / C78629 +
                  C78770 * ((-C79247 / C78234) / C78214 - C78915 +
                            C78770 * ((-(C78770 * C78920) / C78234) / C78214 -
                                      C78717)));
    const double C78937 = C78628 * C78936;
    const double C79362 = C78770 * C78936;
    const double C79571 = C78828 * C78936;
    const double C5825 =
        2 * (C78770 * C78912 - (ae * C78661) / C78629) -
        (ae * (C78691 * C78942 + C78661)) / C78629 +
        C78770 * (C78912 - (ae * C78770 * C78691) / C78629 +
                  C78770 * (C78770 * C78936 - C78703 / C78629));
    const double C6413 = C78770 * (C78912 + C78936 * C79064) -
                         (ae * (C78691 * C79064 + C78661)) / C78629;
    const double C6415 =
        C78828 * C78912 - (ae * C78828 * C79361) / C78629 +
        C78770 * (C78770 * C78828 * C78936 - (ae * C78828 * C78691) / C78629);
    const double C6418 =
        C78912 + C78936 * C79064 -
        (ae * (C78770 * C78745 * C79064 + C79361)) / C78629 +
        C78770 *
            (C78770 *
                 (C78936 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) / C78234) /
                       C78214 -
                   (C78923 * ce) / C78629) *
                      C79064) -
             (ae * (C78745 * C79064 + C78691)) / C78629);
    const double C10635 =
        2 * C78828 * C78912 + C78828 * (C78912 + C78936 * C79064);
    const double C79836 = C78770 * C79834;
    const double C32426 =
        2 * (C78770 * C79945 - (ae * C79645) / C78629) -
        (ae * (C79827 * C79064 + C79356)) / C78629 +
        C78770 *
            (C79945 - (ae * (C78770 * C78729 * C79064 + C79244)) / C78629 +
             C78770 *
                 (C78770 * ((-(std::pow(C78632, 7) * bs[7] * C78892 * C79064) /
                             C78234) /
                                C78214 -
                            C78920 / C78629) -
                  (ae * (C78729 * C79064 + C78680)) / C78629));
    const double C36592 =
        (((-3 * C79645) / C78234 +
          C78828 * ((-2 * C79266) / C78234 -
                    (C78828 * (C78729 * C79064 + C78680)) / C78234)) *
         ae) /
            C78214 +
        C78770 * (3 * C79945 + C78828 * ((-2 * C79973) / C78629 +
                                         C78828 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78892 * C79064) /
                                                    C78234) /
                                                       C78214 -
                                                   C78920 / C78629)));
    const double C38606 =
        (-2 * C79569) / C78629 + C78828 * C79945 +
        (((-2 * C80018) / C78234 - (C78828 * C80024) / C78234) * ae) / C78214 +
        C78770 *
            ((((-2 * C79266) / C78234 -
               (C78828 * (C78729 * C79064 + C78680)) / C78234) *
              ae) /
                 C78214 +
             C78770 *
                 ((-2 * C79973) / C78629 +
                  C78828 * ((-(std::pow(C78632, 7) * bs[7] * C78892 * C79064) /
                             C78234) /
                                C78214 -
                            C78920 / C78629)));
    const double C62146 =
        4 * ((-2 * C79569) / C78629 + C78828 * C79945) +
        C78828 * (3 * C79945 + C78828 * ((-2 * C79973) / C78629 +
                                         C78828 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78892 * C79064) /
                                                    C78234) /
                                                       C78214 -
                                                   C78920 / C78629)));
    const double C79978 = C79977 - C79272;
    const double C231 =
        3 * ((-(ae * C78842) / C78234) / C78214 - C78839 / C78629 +
             C78628 * C78855) +
        (((-2 * C78842) / C78234 - (C78628 * C78852) / C78234) * ae) / C78214 +
        C78628 *
            (2 * C78855 - (ae * C78852) / C78629 +
             C78628 *
                 ((-(ae * C78628 * C78848) / C78234) / C78214 -
                  C78846 / C78629 +
                  C78628 * ((-(C78628 * C78710 * C78709 * C78835) / C78234) /
                                C78214 -
                            (ae * C78848) / C78629)));
    const double C956 = (-(C78628 * C78839) / C78234) / C78214 -
                        (ae * C78834) / C78629 + C78855 * C78942;
    const double C957 = C78770 * ((-(ae * C78842) / C78234) / C78214 -
                                  C78839 / C78629 + C78628 * C78855);
    const double C1892 = (-(C78628 * C78839) / C78234) / C78214 -
                         (ae * C78834) / C78629 -
                         (C78828 * C78662 * ce) / C78629 +
                         C78828 * (C78828 * C78855 - (C78662 * ce) / C78629);
    const double C1893 =
        C78828 * ((-(ae * C78842) / C78234) / C78214 - C78839 / C78629 +
                  C78628 * C78855) -
        ((C78643 + C78628 * C78662 + C78651 * ae) * ce) / C78629;
    const double C4204 =
        C78828 * C78770 * C78855 - (C78770 * C78662 * ce) / C78629;
    const double C10587 =
        3 * ((-(C79606 * ce) / C78234) / C78214 - C78839 / C78629 +
             C78828 * C79613) -
        ((2 * C79606 + C78828 * C79610) * ce) / C78629 +
        C78828 * (2 * C79613 - (C79610 * ce) / C78629 +
                  C78828 * (C79275 - C78858 +
                            C78828 * ((-(C78828 * C78863) / C78234) / C78214 -
                                      C78706 / C78629)));
    const double C78882 = C78628 * C78880;
    const double C79616 = C78828 * C78880;
    const double C79764 = C78770 * C78880;
    const double C5775 =
        2 * C78770 * C78855 + C78770 * (C78855 + C78880 * C78942);
    const double C5778 =
        3 * (C78855 + C78880 * C78942) +
        C78770 *
            (2 * C78770 * C78880 +
             C78770 *
                 (C78880 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) / C78234) /
                       C78214 -
                   (ae * C78866) / C78629) *
                      C78942));
    const double C6327 =
        C78770 * C78855 - (C78828 * C79340 * ce) / C78629 +
        C78828 * (C78828 * C78770 * C78880 - (C79340 * ce) / C78629);
    const double C6329 = C78828 * (C78855 + C78880 * C78942) -
                         ((C78662 + C78692 * C78942) * ce) / C78629;
    const double C6332 =
        C78855 + C78880 * C78942 - (C78828 * C79344 * ce) / C78629 +
        C78828 *
            (C78828 *
                 (C78880 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) / C78234) /
                       C78214 -
                   (ae * C78866) / C78629) *
                      C78942) -
             (C79344 * ce) / C78629);
    const double C8646 =
        C78828 *
            (2 * C78770 * C78880 +
             C78770 *
                 (C78880 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) / C78234) /
                       C78214 -
                   (ae * C78866) / C78629) *
                      C78942)) -
        ((2 * C79340 + C78770 * C79344) * ce) / C78629;
    const double C10585 = 2 * (C78828 * C78855 - (C78662 * ce) / C78629) -
                          ((C78662 + C78692 * C79064) * ce) / C78629 +
                          C78828 * (C78855 - (C78828 * C78692 * ce) / C78629 +
                                    C78828 * (C78828 * C78880 - C78715));
    const double C31758 =
        4 * ((-2 * C79762) / C78629 + C78770 * C79818) +
        C78770 * (3 * C79818 + C78770 * ((-2 * C78770 * C78863) / C78629 +
                                         C78770 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78835 * C78942) /
                                                    C78234) /
                                                       C78214 -
                                                   C78863 / C78629)));
    const double C32329 =
        (-2 * C79762) / C78629 + C78770 * C79818 -
        (C78828 * C79809 * ce) / C78629 +
        C78828 *
            (C78828 *
                 ((-2 * C78770 * C78863) / C78629 +
                  C78770 * ((-(std::pow(C78632, 7) * bs[7] * C78835 * C78942) /
                             C78234) /
                                C78214 -
                            C78863 / C78629)) -
             (C79809 * ce) / C78629);
    const double C34629 =
        C78828 * (3 * C79818 + C78770 * ((-2 * C78770 * C78863) / C78629 +
                                         C78770 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78835 * C78942) /
                                                    C78234) /
                                                       C78214 -
                                                   C78863 / C78629))) -
        ((3 * C79335 + C78770 * C79809) * ce) / C78629;
    const double C38527 =
        2 * (C78828 * C79818 - (C79335 * ce) / C78629) -
        ((C79335 + C79805 * C79064) * ce) / C78629 +
        C78828 *
            (C79818 - (C78828 * C79805 * ce) / C78629 +
             C78828 *
                 (C78828 * ((-(std::pow(C78632, 7) * bs[7] * C78835 * C78942) /
                             C78234) /
                                C78214 -
                            C78863 / C78629) -
                  (C79805 * ce) / C78629));
    const double C80009 = C80008 - C80001;
    const double C80092 = C78828 * C80091;
    const double C5919 =
        3 * ((-(ae * C79431) / C78234) / C78214 - C78972 / C78629 +
             C78770 * C79438) +
        (((-2 * C79431) / C78234 - (C78770 * C79435) / C78234) * ae) / C78214 +
        C78770 *
            (2 * C79438 - (ae * C79435) / C78629 +
             C78770 *
                 ((-(ae * C78770 * C78848) / C78234) / C78214 - C78978 +
                  C78770 * ((-(C78770 * C78979) / C78234) / C78214 - C78864)));
    const double C8851 =
        2 * (C78770 * C79581 - (ae * (C78828 * C78840 + C78650)) / C78629) -
        (ae * (C78828 * C79435 + C79384 * ce)) / C78629 +
        C78770 * (C79581 - (ae * (C78828 * C78770 * C78848 + C79383)) / C78629 +
                  C78770 * (C78770 * ((-(C78828 * C78979) / C78234) / C78214 -
                                      C78921) -
                            (ae * (C78828 * C78848 + C78673)) / C78629));
    const double C10727 =
        2 * ((-(C78828 * C78972) / C78234) / C78214 - (C78891 * ce) / C78629) -
        ((C78891 + C78897 * C79064) * ce) / C78629 +
        C78828 * ((-(C78828 * C78897 * ce) / C78234) / C78214 -
                  C78972 / C78629 + C78828 * C79581);
    const double C10728 =
        3 * ((-(C79630 * ce) / C78234) / C78214 - C78972 / C78629 +
             C78828 * C79581) -
        ((2 * C79630 + C78828 * C79632) * ce) / C78629 +
        C78828 *
            (2 * C79581 - (C79632 * ce) / C78629 +
             C78828 *
                 ((-(C78828 * C78905 * ce) / C78234) / C78214 - C78978 +
                  C78828 * ((-(C78828 * C78979) / C78234) / C78214 - C78921)));
    const double C12895 =
        (((-2 * C79679) / C78234 - (C78828 * C79702) / C78234 -
          (C79692 * ce) / C78234) *
         ae) /
            C78214 +
        C78770 *
            (2 * C79581 - (C79632 * ce) / C78629 +
             C78828 *
                 ((-(C78828 * C78905 * ce) / C78234) / C78214 - C78978 +
                  C78828 * ((-(C78828 * C78979) / C78234) / C78214 - C78921)));
    const double C427 =
        4 * ((-2 * C78628 * C78975) / C78629 + C78628 * C78984) +
        C78628 * (3 * C78984 + C78628 * ((-2 * C78628 * C78979) / C78629 +
                                         C78628 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78969 * C78636) /
                                                    C78234) /
                                                       C78214 -
                                                   C78979 / C78629)));
    const double C1260 = (-(C78975 * C78636) / C78234) / C78214 -
                         C78972 / C78629 - (ae * C78770 * C78852) / C78629 +
                         C78770 * (C78770 * C78984 - (ae * C78852) / C78629);
    const double C1261 =
        (((-2 * C78842) / C78234 - (C78628 * C78852) / C78234) * ae) / C78214 +
        C78770 * ((-2 * C78628 * C78975) / C78629 + C78628 * C78984);
    const double C1262 =
        (-2 * C78628 * C78975) / C78629 + C78628 * C78984 +
        (C78770 * C78881 * ae) / C78214 +
        C78770 *
            ((C78881 * ae) / C78214 +
             C78770 *
                 ((-2 * C78628 * C78979) / C78629 +
                  C78628 * ((-(std::pow(C78632, 7) * bs[7] * C78969 * C78636) /
                             C78234) /
                                C78214 -
                            C78979 / C78629)));
    const double C2192 = (-(C78975 * C78636) / C78234) / C78214 -
                         C78972 / C78629 - (C78828 * C78909 * ce) / C78629 +
                         C78828 * (C78828 * C78984 - (C78909 * ce) / C78629);
    const double C2193 =
        C78828 * ((-2 * C78628 * C78975) / C78629 + C78628 * C78984) -
        ((2 * C78899 + C78628 * C78909) * ce) / C78629;
    const double C2194 =
        (-2 * C78628 * C78975) / C78629 + C78628 * C78984 -
        (C78828 * C78935 * ce) / C78629 +
        C78828 *
            (C78828 *
                 ((-2 * C78628 * C78979) / C78629 +
                  C78628 * ((-(std::pow(C78632, 7) * bs[7] * C78969 * C78636) /
                             C78234) /
                                C78214 -
                            C78979 / C78629)) -
             (C78935 * ce) / C78629);
    const double C2981 =
        (((-3 * C78852) / C78234 + C78628 * C78881) * ae) / C78214 +
        C78770 * (3 * C78984 + C78628 * ((-2 * C78628 * C78979) / C78629 +
                                         C78628 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78969 * C78636) /
                                                    C78234) /
                                                       C78214 -
                                                   C78979 / C78629)));
    const double C3637 =
        C78828 * (3 * C78984 + C78628 * ((-2 * C78628 * C78979) / C78629 +
                                         C78628 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78969 * C78636) /
                                                    C78234) /
                                                       C78214 -
                                                   C78979 / C78629))) -
        ((3 * C78909 + C78628 * C78935) * ce) / C78629;
    const double C4541 = C78770 * (C78828 * C78984 - (C78909 * ce) / C78629) -
                         (ae * (C78828 * C78852 + C78682 * ce)) / C78629;
    const double C7261 =
        2 * (C78770 * C78984 - (ae * C78852) / C78629) -
        (ae * (C78873 * C78942 + C78852)) / C78629 +
        C78770 *
            (C78984 - (ae * C78770 * C78873) / C78629 +
             C78770 *
                 (C78770 * ((-(std::pow(C78632, 7) * bs[7] * C78969 * C78636) /
                             C78234) /
                                C78214 -
                            C78979 / C78629) -
                  (ae * C78873) / C78629));
    const double C8105 =
        C78828 * C78984 - (C78909 * ce) / C78629 -
        (ae * (C78828 * C78770 * C78873 + C79545 * ce)) / C78629 +
        C78770 *
            (C78770 *
                 (C78828 * ((-(std::pow(C78632, 7) * bs[7] * C78969 * C78636) /
                             C78234) /
                                C78214 -
                            C78979 / C78629) -
                  (C78929 * ce) / C78629) -
             (ae * (C78828 * C78873 + C78738)) / C78629);
    const double C11485 =
        C78770 *
            (C78984 - (C78828 * C78929 * ce) / C78629 +
             C78828 *
                 (C78828 * ((-(std::pow(C78632, 7) * bs[7] * C78969 * C78636) /
                             C78234) /
                                C78214 -
                            C78979 / C78629) -
                  (C78929 * ce) / C78629)) -
        (ae * (C78828 * (C78828 * C78873 + C78738) + C78852 +
               C78828 * C78731 * ce)) /
            C78629;
    const double C12241 =
        2 * (C78828 * C78984 - (C78909 * ce) / C78629) -
        ((C78909 + C78929 * C79064) * ce) / C78629 +
        C78828 *
            (C78984 - (C78828 * C78929 * ce) / C78629 +
             C78828 *
                 (C78828 * ((-(std::pow(C78632, 7) * bs[7] * C78969 * C78636) /
                             C78234) /
                                C78214 -
                            C78979 / C78629) -
                  (C78929 * ce) / C78629));
    const double C79450 = C79449 - C79442;
    const double C79588 = C79587 - C79584;
    const double C79905 = C78770 * C79903;
    const double C79964 = C78828 * C79962;
    const double C79989 = C78770 * C79962;
    const double C501 =
        3 * ((-(C79000 * ce) / C78234) / C78214 - C78997 / C78629 +
             C78628 * C79013) -
        ((2 * C79000 + C78628 * C79010) * ce) / C78629 +
        C78628 *
            (2 * C79013 - (C79010 * ce) / C78629 +
             C78628 *
                 ((-(C78628 * C79006 * ce) / C78234) / C78214 -
                  C79004 / C78629 +
                  C78628 * ((-(C78628 * C78710 * C78709 * C78993) / C78234) /
                                C78214 -
                            (C79006 * ce) / C78629)));
    const double C1367 = C78770 * ((-(C79000 * ce) / C78234) / C78214 -
                                   C78997 / C78629 + C78628 * C79013);
    const double C1370 = (-(C78628 * C78997) / C78234) / C78214 -
                         (C78992 * ce) / C78629 + C79013 * C78942;
    const double C2303 =
        C78828 * ((-(C79000 * ce) / C78234) / C78214 - C78997 / C78629 +
                  C78628 * C79013) -
        (ae * (C78628 * C78661 + C78642 + C78651 * ce)) / C78629;
    const double C2306 = (-(C78628 * C78997) / C78234) / C78214 -
                         (C78992 * ce) / C78629 -
                         (ae * C78828 * C78661) / C78629 +
                         C78828 * (C78828 * C79013 - (ae * C78661) / C78629);
    const double C4660 =
        C78828 * C78770 * C79013 - (ae * C78770 * C78661) / C78629;
    const double C10779 =
        3 * ((-(ae * C79641) / C78234) / C78214 - C78997 / C78629 +
             C78828 * C79648) +
        (((-2 * C79641) / C78234 - (C78828 * C79645) / C78234) * ae) / C78214 +
        C78828 * (2 * C79648 - (ae * C79645) / C78629 +
                  C78828 * ((-C79269 / C78234) / C78214 - C79016 +
                            C78828 * ((-(C78828 * C79021) / C78234) / C78214 -
                                      C78717)));
    const double C79038 = C78628 * C79037;
    const double C79651 = C78828 * C79037;
    const double C79775 = C78770 * C79037;
    const double C5967 =
        2 * C78770 * C79013 + C78770 * (C79013 + C79037 * C78942);
    const double C5970 =
        3 * (C79013 + C79037 * C78942) +
        C78770 *
            (2 * C78770 * C79037 +
             C78770 *
                 (C79037 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) / C78234) /
                       C78214 -
                   (C79024 * ce) / C78629) *
                      C78942));
    const double C6659 =
        C78770 * C79013 - (ae * C78828 * C79361) / C78629 +
        C78828 * (C78828 * C78770 * C79037 - (ae * C79361) / C78629);
    const double C6661 = C78828 * (C79013 + C79037 * C78942) -
                         (ae * (C78691 * C78942 + C78661)) / C78629;
    const double C6664 =
        C79013 + C79037 * C78942 - (ae * C78828 * C79366) / C78629 +
        C78828 *
            (C78828 *
                 (C79037 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) / C78234) /
                       C78214 -
                   (C79024 * ce) / C78629) *
                      C78942) -
             (ae * C79366) / C78629);
    const double C8922 =
        (((-2 * C79361) / C78234 - (C78770 * C79366) / C78234) * ae) / C78214 +
        C78828 *
            (2 * C78770 * C79037 +
             C78770 *
                 (C79037 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) / C78234) /
                       C78214 -
                   (C79024 * ce) / C78629) *
                      C78942));
    const double C10777 = 2 * (C78828 * C79013 - (ae * C78661) / C78629) -
                          (ae * (C78691 * C79064 + C78661)) / C78629 +
                          C78828 * (C79013 - (ae * C78828 * C78691) / C78629 +
                                    C78828 * (C78828 * C79037 - C79363));
    const double C31942 =
        4 * ((-2 * C79773) / C78629 + C78770 * C79912) +
        C78770 * (3 * C79912 + C78770 * ((-2 * C78770 * C79021) / C78629 +
                                         C78770 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78993 * C78942) /
                                                    C78234) /
                                                       C78214 -
                                                   C79021 / C78629)));
    const double C32652 =
        (-2 * C79773) / C78629 + C78770 * C79912 +
        (C78828 * C79835 * ae) / C78214 +
        C78828 *
            ((C79835 * ae) / C78214 +
             C78828 *
                 ((-2 * C78770 * C79021) / C78629 +
                  C78770 * ((-(std::pow(C78632, 7) * bs[7] * C78993 * C78942) /
                             C78234) /
                                C78214 -
                            C79021 / C78629)));
    const double C34906 =
        (((-3 * C79356) / C78234 + C78770 * C79835) * ae) / C78214 +
        C78828 * (3 * C79912 + C78770 * ((-2 * C78770 * C79021) / C78629 +
                                         C78770 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C78993 * C78942) /
                                                    C78234) /
                                                       C78214 -
                                                   C79021 / C78629)));
    const double C38808 =
        2 * (C78828 * C79912 - (ae * C79356) / C78629) -
        (ae * (C79827 * C79064 + C79356)) / C78629 +
        C78828 *
            (C79912 - (ae * C78828 * C79827) / C78629 +
             C78828 *
                 (C78828 * ((-(std::pow(C78632, 7) * bs[7] * C78993 * C78942) /
                             C78234) /
                                C78214 -
                            C79021 / C78629) -
                  (ae * C79827) / C78629));
    const double C80027 = C80026 - C79250;
    const double C80117 = C78828 * C80115;
    const double C6014 =
        3 * ((-(C79457 * ce) / C78234) / C78214 - C79048 / C78629 +
             C78770 * C79464) -
        ((2 * C79457 + C78770 * C79461) * ce) / C78629 +
        C78770 *
            (2 * C79464 - (C79461 * ce) / C78629 +
             C78770 *
                 ((-(C78770 * C79006 * ce) / C78234) / C78214 - C79054 +
                  C78770 * ((-(C78770 * C79055) / C78234) / C78214 - C79022)));
    const double C6739 =
        C78828 * ((-(C79457 * ce) / C78234) / C78214 - C79048 / C78629 +
                  C78770 * C79464) -
        (ae * (C78770 * C79371 + C78776 + C79369 * ce)) / C78629;
    const double C6741 = (-(C78770 * C79048) / C78234) / C78214 -
                         (C78992 * ce) / C78629 -
                         (ae * C78828 * C79371) / C78629 +
                         C78828 * (C78828 * C79464 - (ae * C79371) / C78629);
    const double C6742 =
        (-(C79457 * ce) / C78234) / C78214 - C79048 / C78629 + C78770 * C79464 -
        (ae * C78828 * C79394) / C78629 +
        C78828 *
            (C78828 *
                 ((-(C78770 * C79006 * ce) / C78234) / C78214 - C79054 +
                  C78770 * ((-(C78770 * C79055) / C78234) / C78214 - C79022)) -
             (ae * C79394) / C78629);
    const double C8989 =
        (((-2 * C79371) / C78234 - (C78770 * C79394) / C78234 -
          (C79384 * ce) / C78234) *
         ae) /
            C78214 +
        C78828 *
            (2 * C79464 - (C79461 * ce) / C78629 +
             C78770 *
                 ((-(C78770 * C79006 * ce) / C78234) / C78214 - C79054 +
                  C78770 * ((-(C78770 * C79055) / C78234) / C78214 - C79022)));
    const double C13033 =
        2 * (C78828 * C79464 - (ae * C79371) / C78629) -
        (ae * (C79382 * C79064 + C79371)) / C78629 +
        C78828 * (C79464 - (ae * C78828 * C79382) / C78629 +
                  C78828 * (C78828 * ((-(C78770 * C79055) / C78234) / C78214 -
                                      C79022) -
                            (ae * C79382) / C78629));
    const double C10825 =
        3 * ((-(ae * C79658) / C78234) / C78214 - C79048 / C78629 +
             C78828 * C79665) +
        (((-2 * C79658) / C78234 - (C78828 * C79662) / C78234) * ae) / C78214 +
        C78828 *
            (2 * C79665 - (ae * C79662) / C78629 +
             C78828 *
                 ((-(ae * C78828 * C78790) / C78234) / C78214 - C79054 +
                  C78828 * ((-(C78828 * C79055) / C78234) / C78214 - C78806)));
    const double C574 =
        4 * ((-2 * C78628 * C79051) / C78629 + C78628 * C79060) +
        C78628 * (3 * C79060 + C78628 * ((-2 * C78628 * C79055) / C78629 +
                                         C78628 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C79045 * C78636) /
                                                    C78234) /
                                                       C78214 -
                                                   C79055 / C78629)));
    const double C1476 = (-(C79051 * C78636) / C78234) / C78214 -
                         C79048 / C78629 - (C78770 * C79010 * ce) / C78629 +
                         C78770 * (C78770 * C79060 - (C79010 * ce) / C78629);
    const double C1477 =
        C78770 * ((-2 * C78628 * C79051) / C78629 + C78628 * C79060) -
        ((2 * C79000 + C78628 * C79010) * ce) / C78629;
    const double C1478 =
        (-2 * C78628 * C79051) / C78629 + C78628 * C79060 -
        (C78770 * C79036 * ce) / C78629 +
        C78770 *
            (C78770 *
                 ((-2 * C78628 * C79055) / C78629 +
                  C78628 * ((-(std::pow(C78632, 7) * bs[7] * C79045 * C78636) /
                             C78234) /
                                C78214 -
                            C79055 / C78629)) -
             (C79036 * ce) / C78629);
    const double C2410 =
        (((-2 * C78784) / C78234 - (C78628 * C78794) / C78234) * ae) / C78214 +
        C78828 * ((-2 * C78628 * C79051) / C78629 + C78628 * C79060);
    const double C2413 = (-(C79051 * C78636) / C78234) / C78214 -
                         C79048 / C78629 - (ae * C78828 * C78794) / C78629 +
                         C78828 * (C78828 * C79060 - (ae * C78794) / C78629);
    const double C2414 =
        (-2 * C78628 * C79051) / C78629 + C78628 * C79060 +
        (C78828 * C78823 * ae) / C78214 +
        C78828 *
            ((C78823 * ae) / C78214 +
             C78828 *
                 ((-2 * C78628 * C79055) / C78629 +
                  C78628 * ((-(std::pow(C78632, 7) * bs[7] * C79045 * C78636) /
                             C78234) /
                                C78214 -
                            C79055 / C78629)));
    const double C3127 =
        C78770 * (3 * C79060 + C78628 * ((-2 * C78628 * C79055) / C78629 +
                                         C78628 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C79045 * C78636) /
                                                    C78234) /
                                                       C78214 -
                                                   C79055 / C78629))) -
        ((3 * C79010 + C78628 * C79036) * ce) / C78629;
    const double C3793 =
        (((-3 * C78794) / C78234 + C78628 * C78823) * ae) / C78214 +
        C78828 * (3 * C79060 + C78628 * ((-2 * C78628 * C79055) / C78629 +
                                         C78628 * ((-(std::pow(C78632, 7) *
                                                      bs[7] * C79045 * C78636) /
                                                    C78234) /
                                                       C78214 -
                                                   C79055 / C78629)));
    const double C4775 = C78828 * (C78770 * C79060 - (C79010 * ce) / C78629) -
                         (ae * (C78770 * C78794 + C78682 * ce)) / C78629;
    const double C7407 =
        2 * (C78770 * C79060 - (C79010 * ce) / C78629) -
        ((C79010 + C79030 * C78942) * ce) / C78629 +
        C78770 *
            (C79060 - (C78770 * C79030 * ce) / C78629 +
             C78770 *
                 (C78770 * ((-(std::pow(C78632, 7) * bs[7] * C79045 * C78636) /
                             C78234) /
                                C78214 -
                            C79055 / C78629) -
                  (C79030 * ce) / C78629));
    const double C8317 =
        C78828 *
            (C79060 - (C78770 * C79030 * ce) / C78629 +
             C78770 *
                 (C78770 * ((-(std::pow(C78632, 7) * bs[7] * C79045 * C78636) /
                             C78234) /
                                C78214 -
                            C79055 / C78629) -
                  (C79030 * ce) / C78629)) -
        (ae * (C78770 * C79547 + C78794 + C79545 * ce)) / C78629;
    const double C11699 =
        C78770 * C79060 - (C79010 * ce) / C78629 -
        (ae * C78828 * C79547) / C78629 +
        C78828 *
            (C78828 *
                 (C78770 * ((-(std::pow(C78632, 7) * bs[7] * C79045 * C78636) /
                             C78234) /
                                C78214 -
                            C79055 / C78629) -
                  (C79030 * ce) / C78629) -
             (ae * C79547) / C78629);
    const double C12393 =
        2 * (C78828 * C79060 - (ae * C78794) / C78629) -
        (ae * (C78815 * C79064 + C78794)) / C78629 +
        C78828 *
            (C79060 - (ae * C78828 * C78815) / C78629 +
             C78828 *
                 (C78828 * ((-(std::pow(C78632, 7) * bs[7] * C79045 * C78636) /
                             C78234) /
                                C78214 -
                            C79055 / C78629) -
                  (ae * C78815) / C78629));
    const double C79478 = C79477 - C79470;
    const double C79674 = C79673 - C79404;
    const double C79929 = C78770 * C79928;
    const double C80030 = C78828 * C79928;
    const double C80136 = C78828 * C80134;
    const double C78277 = C78273 / C78234;
    const double C29224 = C3060 * C2616;
    const double C55402 = C3498 * C2616;
    const double C39442 = C3060 * C13178;
    const double C69404 = C3498 * C13178;
    const double C78276 = C78272 / C78234;
    const double C27384 = C27372 * C743;
    const double C27376 = C27364 * C743;
    const double C27903 = C27899 * C743;
    const double C27900 = C27896 * C743;
    const double C30070 = C30064 * C743;
    const double C30703 = C30701 * C743;
    const double C53832 = C53820 * C743;
    const double C53824 = C53812 * C743;
    const double C54129 = C54125 * C743;
    const double C54126 = C54122 * C743;
    const double C56149 = C56147 * C743;
    const double C27382 = C27370 * C744;
    const double C27378 = C27366 * C744;
    const double C27888 = C1394 * C744;
    const double C27884 = C1390 * C744;
    const double C30068 = C30062 * C744;
    const double C30692 = C4672 * C744;
    const double C53830 = C53818 * C744;
    const double C53826 = C53814 * C744;
    const double C54114 = C2008 * C744;
    const double C54110 = C2004 * C744;
    const double C56138 = C4322 * C744;
    const double C39650 = C31658 * C13805;
    const double C39648 = C27372 * C13805;
    const double C39642 = C27364 * C13805;
    const double C40058 = C31956 * C13805;
    const double C40056 = C27899 * C13805;
    const double C40050 = C27896 * C13805;
    const double C40296 = C32158 * C13805;
    const double C40294 = C30064 * C13805;
    const double C40898 = C32668 * C13805;
    const double C40896 = C30701 * C13805;
    const double C42780 = C32160 * C13805;
    const double C43372 = C32670 * C13805;
    const double C65826 = C53820 * C13805;
    const double C65820 = C53812 * C13805;
    const double C66150 = C58024 * C13805;
    const double C66148 = C56147 * C13805;
    const double C66144 = C54125 * C13805;
    const double C66138 = C54122 * C13805;
    const double C68626 = C58026 * C13805;
    const double C70690 = C61992 * C13805;
    const double C70892 = C62156 * C13805;
    const double C81010 = C80949 + C80999;
    const double C2608 = C80983 - (C80601 * C80584) / C78234;
    const double C39037 = C27369 * C80984;
    const double C69197 = C53817 * C80984;
    const double C86 = C80984 / C78240 - C80599 / C80956;
    const double C28805 = C27369 * C2609;
    const double C55181 = C53817 * C2609;
    const double C81000 = C80952 + C80983;
    const double C78414 = C78410 / C78234;
    const double C13454 = C309 * C13245;
    const double C13452 = C307 * C13245;
    const double C13446 = C305 * C13245;
    const double C13664 = C524 * C13245;
    const double C13662 = C522 * C13245;
    const double C13656 = C520 * C13245;
    const double C14850 = C2008 * C13245;
    const double C14848 = C2004 * C13245;
    const double C15158 = C2330 * C13245;
    const double C15156 = C2326 * C13245;
    const double C16458 = C2006 * C13245;
    const double C16756 = C2328 * C13245;
    const double C65938 = C53818 * C13245;
    const double C65936 = C53820 * C13245;
    const double C65932 = C53814 * C13245;
    const double C65926 = C53812 * C13245;
    const double C66258 = C54125 * C13245;
    const double C66252 = C54122 * C13245;
    const double C67520 = C53816 * C13245;
    const double C75298 = C61992 * C13245;
    const double C75500 = C62156 * C13245;
    const double C78425 = C78419 / C78234;
    const double C7415 = C7340 * C6972;
    const double C60072 = C34489 * C6972;
    const double C14288 = C7340 * C13876;
    const double C74694 = C34489 * C13876;
    const double C81013 = C80967 + C81005;
    const double C6894 = C80992 - (C80689 * C80678) / C78234;
    const double C14081 = C1175 * C80993;
    const double C14287 = C1497 * C80993;
    const double C74899 = C58125 * C80993;
    const double C5655 = C80993 / C78240 - C80687 / C80956;
    const double C7190 = C1175 * C6895;
    const double C7414 = C1497 * C6895;
    const double C60285 = C58125 * C6895;
    const double C81006 = C80969 + C80992;
    const double C78505 = C78501 / C78234;
    const double C18160 = C309 * C17951;
    const double C18158 = C307 * C17951;
    const double C18152 = C305 * C17951;
    const double C18370 = C524 * C17951;
    const double C18368 = C522 * C17951;
    const double C18362 = C520 * C17951;
    const double C18972 = C1072 * C17951;
    const double C18970 = C1068 * C17951;
    const double C19280 = C1394 * C17951;
    const double C19278 = C1390 * C17951;
    const double C20490 = C1070 * C17951;
    const double C20788 = C1392 * C17951;
    const double C44472 = C27370 * C17951;
    const double C44470 = C27366 * C17951;
    const double C44466 = C27372 * C17951;
    const double C44460 = C27364 * C17951;
    const double C45070 = C27899 * C17951;
    const double C45064 = C27896 * C17951;
    const double C45960 = C27368 * C17951;
    const double C49210 = C31658 * C17951;
    const double C49610 = C31956 * C17951;
    const double C78516 = C78510 / C78234;
    const double C12249 = C12102 * C12026;
    const double C38535 = C38387 * C12026;
    const double C19694 = C12102 * C19488;
    const double C49818 = C38387 * C19488;
    const double C81014 = C80973 + C81007;
    const double C11882 = C80995 - (C80729 * C80718) / C78234;
    const double C19693 = C2213 * C80996;
    const double C19899 = C2535 * C80996;
    const double C49817 = C32346 * C80996;
    const double C50221 = C32854 * C80996;
    const double C10466 = C80996 / C78240 - C80727 / C80956;
    const double C12248 = C2213 * C11883;
    const double C12472 = C2535 * C11883;
    const double C38534 = C32346 * C11883;
    const double C38960 = C32854 * C11883;
    const double C81008 = C80975 + C80995;
    const double C28807 = C81009 * C760;
    const double C27361 = C81009 * C766;
    const double C55183 = C81009 * C1696;
    const double C53809 = C81009 * C1702;
    const double C30059 = C81009 * C3987;
    const double C36916 = C36914 * C78260;
    const double C37121 = C36914 * C9286;
    const double C40298 = C36914 * C13806;
    const double C40500 = C36914 * C1880;
    const double C47522 = C36914 * C78534;
    const double C62602 = C36914 * C2688;
    const double C65940 = C36914 * C13246;
    const double C78759 = C78628 * C78756;
    const double C79255 = C79254 - C79251;
    const double C79277 = C79276 - C79273;
    const double C28809 = C81009 * C773;
    const double C55185 = C81009 * C1709;
    const double C303 = C275 * C114;
    const double C518 = C490 * C114;
    const double C2830 = C275 * C761;
    const double C3058 = C490 * C761;
    const double C28808 = C26926 * C761;
    const double C1066 = C275 * C767;
    const double C1388 = C490 * C767;
    const double C27362 = C26926 * C767;
    const double C3496 = C275 * C1697;
    const double C3724 = C490 * C1697;
    const double C55184 = C26926 * C1697;
    const double C2002 = C275 * C1703;
    const double C2324 = C490 * C1703;
    const double C53810 = C26926 * C1703;
    const double C4320 = C275 * C3988;
    const double C4670 = C490 * C3988;
    const double C30060 = C26926 * C3988;
    const double C78742 = C78734 - C78704;
    const double C38816 = C38814 * C80588;
    const double C60213 = C60211 * C80588;
    const double C30071 = C30065 * C738;
    const double C33593 = C30065 * C80598;
    const double C40295 = C30065 * C80598;
    const double C41889 = C30065 * C80601;
    const double C48219 = C30065 * C80982;
    const double C32165 = C32159 * C80588;
    const double C36909 = C32159 * C80916;
    const double C40297 = C32159 * C13799;
    const double C78764 = C78713 + C78761;
    const double C10972 = (C78770 * C78701 + C79733 * C79064) / C78214;
    const double C79883 = C79848 + C79880;
    const double C80180 = C80149 + C80177;
    const double C5824 =
        (3 * (C78899 + C78770 * C79402 + C79399 * ae) +
         C78770 * (2 * C79402 + C78770 * C79426 + C79414 * ae) +
         (2 * C79399 + C78770 * C79414) * ae) /
        C78214;
    const double C6412 =
        (C78899 + C78770 * C79402 + C79399 * ae + C79426 * C79064) / C78214;
    const double C8714 =
        (C78828 * (2 * C79402 + C78770 * C79426 + C79414 * ae)) / C78214;
    const double C10776 =
        (3 * (C79000 + C78828 * C79709 + C79706 * ae) +
         C78828 * (2 * C79709 + C78828 * C79729 + C79720 * ae) +
         (2 * C79706 + C78828 * C79720) * ae) /
        C78214;
    const double C8784 =
        2 * ((-(C78828 * C78914 * ce) / C78234) / C78214 -
             (ae * C78828 * C78799) / C78629 - (C78770 * C79575) / C78629) -
        (ae * C78828 * C79425) / C78629 - (C78828 * C79426 * ce) / C78629 +
        C78770 *
            ((-(ae * C78828 * C79418) / C78234) / C78214 - C79575 / C78629 -
             (C78828 * C79419 * ce) / C78629 +
             C78770 *
                 ((-(C78828 * C79409 * ce) / C78234) / C78214 -
                  (ae * C78828 * C79406) / C78629 -
                  (C78770 * C78828 * C78628 *
                   (C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                   C78637) /
                      C78629));
    const double C5724 =
        (-3 * (C78770 * C79401 + C78784 + C79399 * ce)) / C78234 +
        C78770 * ((-2 * C79401) / C78234 - (C78770 * C79425) / C78234 -
                  (C79414 * ce) / C78234) -
        ((2 * C79399 + C78770 * C79414) * ce) / C78234;
    const double C6240 =
        -(C79425 * C79064 + C78770 * C79401 + C78784 + C79399 * ce) / C78234;
    const double C8574 =
        C78828 * ((-2 * C79401) / C78234 - (C78770 * C79425) / C78234 -
                  (C79414 * ce) / C78234);
    const double C10584 =
        (-3 * (C78828 * C79708 + C78842 + C79706 * ce)) / C78234 +
        C78828 * ((-2 * C79708) / C78234 - (C78828 * C79728) / C78234 -
                  (C79720 * ce) / C78234) -
        ((2 * C79706 + C78828 * C79720) * ce) / C78234;
    const double C78763 = C78760 / C78234;
    const double C10973 = -(C79738 * C79064 + C78770 * C78700) / C78234;
    const double C79882 = C79879 / C78234;
    const double C80179 = C80176 / C78234;
    const double C79099 = C79098 - C78704;
    const double C79177 = C79176 - C78704;
    const double C36917 = C36915 * C80598;
    const double C40299 = C36915 * C80598;
    const double C38388 = C38386 * C80588;
    const double C78963 = C78962 - C78955;
    const double C79951 = C79950 - C78955;
    const double C79085 = C79084 - C79077;
    const double C79936 = C79935 - C79077;
    const double C36721 =
        (3 * (C79457 + C78828 * C79787 + C79782 * ae) +
         C78828 * (2 * C79787 + C78828 * C80058 + C80046 * ae) +
         (2 * C79782 + C78828 * C80046) * ae) /
        C78214;
    const double C36547 =
        (-3 * (C78828 * C79786 + C79431 + C79782 * ce)) / C78234 +
        C78828 * ((-2 * C79786) / C78234 - (C78828 * C80057) / C78234 -
                  (C80046 * ce) / C78234) -
        ((2 * C79782 + C78828 * C80046) * ce) / C78234;
    const double C12399 = C12398 * C80628;
    const double C7419 = C7418 * C80972;
    const double C14289 = C7418 * C80972;
    const double C31712 = C26926 * C5723;
    const double C32009 = C490 * C5723;
    const double C32250 = C26926 * C6239;
    const double C32759 = C490 * C6239;
    const double C58123 = C275 * C6239;
    const double C34560 = C26926 * C8573;
    const double C34983 = C490 * C8573;
    const double C60287 = C275 * C8573;
    const double C79873 = C79867 - C78955;
    const double C62100 = C26926 * C10583;
    const double C62262 = C275 * C10583;
    const double C80167 = C80163 - C79077;
    const double C38539 = C38538 * C80978;
    const double C49819 = C38538 * C80978;
    const double C79878 = C78770 * C79874;
    const double C79420 = C79410 - C79417;
    const double C7193 = C81011 * C5873;
    const double C7191 = C7116 * C6972;
    const double C7265 = C7116 * C220;
    const double C14082 = C7116 * C13876;
    const double C11383 = C11280 * C2688;
    const double C11491 = C11280 * C9286;
    const double C14852 = C11280 * C13246;
    const double C14956 = C11280 * C1880;
    const double C22080 = C11280 * C78534;
    const double C62806 = C11280 * C78260;
    const double C66152 = C11280 * C13806;
    const double C8003 = C7898 * C5066;
    const double C8109 = C7898 * C3422;
    const double C17352 = C7898 * C78443;
    const double C18868 = C7898 * C854;
    const double C18974 = C7898 * C17952;
    const double C59442 = C7898 * C78260;
    const double C68628 = C7898 * C13806;
    const double C60288 = C81011 * C8783;
    const double C58023 = C81011 * C6411;
    const double C60207 = C81011 * C8713;
    const double C79987 = C79986 - C79985;
    const double C8007 = C8006 * C80962;
    const double C17353 = C8006 * C15344;
    const double C18869 = C8006 * C80962;
    const double C11387 = C11386 * C80686;
    const double C14853 = C11386 * C80686;
    const double C12175 = C12174 * C80628;
    const double C62216 = C62214 * C80628;
    const double C64266 = C64265 * C80686;
    const double C75503 = C64265 * C80686;
    const double C80175 = C78828 * C80172;
    const double C79723 = C79711 - C79717;
    const double C12475 = C81012 * C10871;
    const double C12395 = C12326 * C165;
    const double C12473 = C12326 * C12026;
    const double C19900 = C12326 * C19488;
    const double C38817 = C38815 * C5657;
    const double C38961 = C38815 * C12026;
    const double C50222 = C38815 * C19488;
    const double C80052 = C80042 - C80049;
    const double C32065 = C32063 * C80639;
    const double C32859 = C32856 * C80965;
    const double C36415 = C32856 * C80965;
    const double C52665 = C32856 * C20867;
    const double C35059 = C35058 * C80726;
    const double C49613 = C35058 * C80726;
    const double C7491 = C7490 * C80639;
    const double C11815 = C11814 * C80965;
    const double C15265 = C11814 * C80965;
    const double C22381 = C11814 * C20867;
    const double C8433 = C8432 * C80726;
    const double C19283 = C8432 * C80726;
    const double C38965 = C38964 * C80978;
    const double C50223 = C38964 * C80978;
    const double C27469 = C81009 * C866;
    const double C27471 = C81009 * C867;
    const double C53918 = C81009 * C1797;
    const double C53921 = C81009 * C1801;
    const double C30175 = C81009 * C4098;
    const double C31713 = C81009 * C5727;
    const double C32247 = C81009 * C6242;
    const double C32249 = C81009 * C6244;
    const double C32251 = C81009 * C6245;
    const double C34561 = C81009 * C8575;
    const double C38459 = C81009 * C12619;
    const double C78825 = C78819 + C78824;
    const double C79343 = C79341 - C78715;
    const double C33011 = C81009 * C5725;
    const double C63445 = C81009 * C10530;
    const double C79812 = C79799 + C79811;
    const double C304 = C81011 * C286;
    const double C1059 = C81011 * C1045;
    const double C1063 = C81011 * C1048;
    const double C1995 = C81011 * C1981;
    const double C1999 = C81011 * C1984;
    const double C4317 = C81011 * C4310;
    const double C78938 = C78933 + C78937;
    const double C79365 = C79362 - C79363;
    const double C8716 =
        2 * (C78770 * C79571 - (ae * C78828 * C78691) / C78629) -
        (ae * C78828 * C79366) / C78629 +
        C78770 *
            (C79571 - (ae * C78828 * C78770 * C78745) / C78629 +
             C78770 * (C78770 * C78828 *
                           ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) /
                             C78234) /
                                C78214 -
                            (C78923 * ce) / C78629) -
                       (ae * C78828 * C78745) / C78629));
    const double C10638 =
        3 * (C78912 + C78936 * C79064) +
        C78828 *
            (2 * C79571 +
             C78828 *
                 (C78936 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) / C78234) /
                       C78214 -
                   (C78923 * ce) / C78629) *
                      C79064));
    const double C12760 =
        (((-2 * C79650) / C78234 - (C78828 * C79654) / C78234) * ae) / C78214 +
        C78770 *
            (2 * C79571 +
             C78828 *
                 (C78936 +
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) / C78234) /
                       C78214 -
                   (C78923 * ce) / C78629) *
                      C79064));
    const double C7115 = C81011 * C5825;
    const double C11279 = C81011 * C6413;
    const double C7897 = C81011 * C6415;
    const double C12101 = C81011 * C10635;
    const double C79837 = C79831 + C79836;
    const double C34704 =
        3 * ((-(ae * C78828 * C79244) / C78234) / C78214 - C79569 / C78629 +
             C78770 * C79978) +
        (C78828 * C79835 * ae) / C78214 +
        C78770 *
            (2 * C79978 - (ae * C78828 * C79827) / C78629 +
             C78770 * ((-(ae * C78828 * C78770 * C78729) / C78234) / C78214 -
                       C79973 / C78629 +
                       C78770 * ((-(C78770 * C78828 * std::pow(C78632, 7) *
                                    bs[7] * C78892) /
                                  C78234) /
                                     C78214 -
                                 (ae * C78828 * C78729) / C78629)));
    const double C27565 = C81009 * C956;
    const double C27568 = C81009 * C957;
    const double C54021 = C81009 * C1892;
    const double C54023 = C81009 * C1893;
    const double C30288 = C81009 * C4204;
    const double C62101 = C81009 * C10587;
    const double C78883 = C78877 + C78882;
    const double C79618 = C79616 - C78715;
    const double C12690 =
        2 * (C78828 * C79764 - (C79340 * ce) / C78629) -
        ((C79340 + C79765 * C79064) * ce) / C78629 +
        C78828 *
            (C79764 - (C78828 * C79765 * ce) / C78629 +
             C78828 * (C78828 * C78770 *
                           ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) /
                             C78234) /
                                C78214 -
                            (ae * C78866) / C78629) -
                       (C79765 * ce) / C78629));
    const double C33080 = C81009 * C5775;
    const double C37123 = C81009 * C6327;
    const double C33811 = C81009 * C6329;
    const double C63516 = C81009 * C10585;
    const double C36548 =
        3 * ((-(C79999 * ce) / C78234) / C78214 - C79762 / C78629 +
             C78828 * C80009) -
        ((2 * C79999 + C78828 * C80006) * ce) / C78629 +
        C78828 * (2 * C80009 - (C80006 * ce) / C78629 +
                  C78828 * ((-(C78828 * C80002 * ce) / C78234) / C78214 -
                            C80000 / C78629 +
                            C78828 * ((-(C78828 * C78770 * std::pow(C78632, 7) *
                                         bs[7] * C78835) /
                                       C78234) /
                                          C78214 -
                                      (C80002 * ce) / C78629)));
    const double C80093 = C80081 + C80092;
    const double C60358 = C81011 * C8851;
    const double C62261 = C81011 * C10727;
    const double C62263 = C81011 * C10728;
    const double C64334 = C81011 * C12895;
    const double C1274 = C81011 * C1260;
    const double C2984 = C81011 * C1261;
    const double C2211 = C81011 * C2192;
    const double C3651 = C81011 * C2193;
    const double C4553 = C81011 * C4541;
    const double C5920 =
        3 * ((-(ae * C79440) / C78234) / C78214 - C79428 / C78629 +
             C78770 * C79450) +
        (((-2 * C79440) / C78234 - (C78770 * C79447) / C78234) * ae) / C78214 +
        C78770 * (2 * C79450 - (ae * C79447) / C78629 +
                  C78770 * ((-(ae * C78770 * C79443) / C78234) / C78214 -
                            C79441 / C78629 +
                            C78770 * ((-(C78770 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C78969) /
                                       C78234) /
                                          C78214 -
                                      (ae * C79443) / C78629)));
    const double C8852 =
        2 * (C78770 * C79588 - (ae * (C78828 * C78857 + C78681)) / C78629) -
        (ae * (C78828 * C79447 + C79414 * ce)) / C78629 +
        C78770 * (C79588 - (ae * (C78828 * C78770 * C79443 + C79413)) / C78629 +
                  C78770 * (C78770 * ((-(C78828 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C78969) /
                                       C78234) /
                                          C78214 -
                                      (C79409 * ce) / C78629) -
                            (ae * (C78828 * C79443 + C78730)) / C78629));
    const double C10729 =
        2 * ((-(C78828 * C79428) / C78234) / C78214 - (C78899 * ce) / C78629) -
        ((C78899 + C78914 * C79064) * ce) / C78629 +
        C78828 * ((-(C78828 * C78914 * ce) / C78234) / C78214 -
                  C79428 / C78629 + C78828 * C79588);
    const double C10730 =
        3 * ((-(C79635 * ce) / C78234) / C78214 - C79428 / C78629 +
             C78828 * C79588) -
        ((2 * C79635 + C78828 * C79637) * ce) / C78629 +
        C78828 * (2 * C79588 - (C79637 * ce) / C78629 +
                  C78828 * ((-(C78828 * C79409 * ce) / C78234) / C78214 -
                            C79441 / C78629 +
                            C78828 * ((-(C78828 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C78969) /
                                       C78234) /
                                          C78214 -
                                      (C79409 * ce) / C78629)));
    const double C12896 =
        (((-2 * C79708) / C78234 - (C78828 * C79728) / C78234 -
          (C79720 * ce) / C78234) *
         ae) /
            C78214 +
        C78770 * (2 * C79588 - (C79637 * ce) / C78629 +
                  C78828 * ((-(C78828 * C79409 * ce) / C78234) / C78214 -
                            C79441 / C78629 +
                            C78828 * ((-(C78828 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C78969) /
                                       C78234) /
                                          C78214 -
                                      (C79409 * ce) / C78629)));
    const double C79906 = C79902 + C79905;
    const double C79965 = C79963 + C79964;
    const double C79992 = C79989 - C79991;
    const double C519 = C81012 * C501;
    const double C1381 = C81012 * C1367;
    const double C1385 = C81012 * C1370;
    const double C2317 = C81012 * C2303;
    const double C2321 = C81012 * C2306;
    const double C4667 = C81012 * C4660;
    const double C79039 = C79034 + C79038;
    const double C79653 = C79651 - C79363;
    const double C12966 =
        2 * (C78828 * C79775 - (ae * C79361) / C78629) -
        (ae * (C79776 * C79064 + C79361)) / C78629 +
        C78828 *
            (C79775 - (ae * C78828 * C79776) / C78629 +
             C78828 * (C78828 * C78770 *
                           ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) /
                             C78234) /
                                C78214 -
                            (C79024 * ce) / C78629) -
                       (ae * C79776) / C78629));
    const double C7339 = C81012 * C5967;
    const double C11599 = C81012 * C6659;
    const double C8217 = C81012 * C6661;
    const double C12325 = C81012 * C10777;
    const double C36722 =
        3 * ((-(ae * C80018) / C78234) / C78214 - C79773 / C78629 +
             C78828 * C80027) +
        (((-2 * C80018) / C78234 - (C78828 * C80024) / C78234) * ae) / C78214 +
        C78828 * (2 * C80027 - (ae * C80024) / C78629 +
                  C78828 * ((-(ae * C78828 * C80020) / C78234) / C78214 -
                            C80019 / C78629 +
                            C78828 * ((-(C78828 * C78770 * std::pow(C78632, 7) *
                                         bs[7] * C78993) /
                                       C78234) /
                                          C78214 -
                                      (ae * C80020) / C78629)));
    const double C80118 = C80112 + C80117;
    const double C32010 = C81012 * C6014;
    const double C32756 = C81012 * C6739;
    const double C32758 = C81012 * C6741;
    const double C32760 = C81012 * C6742;
    const double C34984 = C81012 * C8989;
    const double C38886 = C81012 * C13033;
    const double C1495 = C81012 * C1476;
    const double C3141 = C81012 * C1477;
    const double C3796 = C81012 * C2410;
    const double C2426 = C81012 * C2413;
    const double C4787 = C81012 * C4775;
    const double C6016 =
        3 * ((-(C79468 * ce) / C78234) / C78214 - C79466 / C78629 +
             C78770 * C79478) -
        ((2 * C79468 + C78770 * C79475) * ce) / C78629 +
        C78770 * (2 * C79478 - (C79475 * ce) / C78629 +
                  C78770 * ((-(C78770 * C79471 * ce) / C78234) / C78214 -
                            C79469 / C78629 +
                            C78770 * ((-(C78770 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C79045) /
                                       C78234) /
                                          C78214 -
                                      (C79471 * ce) / C78629)));
    const double C6740 =
        C78828 * ((-(C79468 * ce) / C78234) / C78214 - C79466 / C78629 +
                  C78770 * C79478) -
        (ae * (C78770 * C79401 + C78784 + C79399 * ce)) / C78629;
    const double C6743 = (-(C78770 * C79466) / C78234) / C78214 -
                         (C79000 * ce) / C78629 -
                         (ae * C78828 * C79401) / C78629 +
                         C78828 * (C78828 * C79478 - (ae * C79401) / C78629);
    const double C6744 =
        (-(C79468 * ce) / C78234) / C78214 - C79466 / C78629 + C78770 * C79478 -
        (ae * C78828 * C79425) / C78629 +
        C78828 * (C78828 * ((-(C78770 * C79471 * ce) / C78234) / C78214 -
                            C79469 / C78629 +
                            C78770 * ((-(C78770 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C79045) /
                                       C78234) /
                                          C78214 -
                                      (C79471 * ce) / C78629)) -
                  (ae * C79425) / C78629);
    const double C8990 =
        (((-2 * C79401) / C78234 - (C78770 * C79425) / C78234 -
          (C79414 * ce) / C78234) *
         ae) /
            C78214 +
        C78828 * (2 * C79478 - (C79475 * ce) / C78629 +
                  C78770 * ((-(C78770 * C79471 * ce) / C78234) / C78214 -
                            C79469 / C78629 +
                            C78770 * ((-(C78770 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C79045) /
                                       C78234) /
                                          C78214 -
                                      (C79471 * ce) / C78629)));
    const double C13034 =
        2 * (C78828 * C79478 - (ae * C79401) / C78629) -
        (ae * (C79418 * C79064 + C79401)) / C78629 +
        C78828 * (C79478 - (ae * C78828 * C79418) / C78629 +
                  C78828 * (C78828 * ((-(C78770 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C79045) /
                                       C78234) /
                                          C78214 -
                                      (C79471 * ce) / C78629) -
                            (ae * C79418) / C78629));
    const double C10826 =
        3 * ((-(ae * C79667) / C78234) / C78214 - C79466 / C78629 +
             C78828 * C79674) +
        (((-2 * C79667) / C78234 - (C78828 * C79671) / C78234) * ae) / C78214 +
        C78828 * (2 * C79674 - (ae * C79671) / C78629 +
                  C78828 * ((-(ae * C78828 * C79406) / C78234) / C78214 -
                            C79469 / C78629 +
                            C78828 * ((-(C78828 * C78628 * std::pow(C78632, 7) *
                                         bs[7] * C79045) /
                                       C78234) /
                                          C78214 -
                                      (ae * C79406) / C78629)));
    const double C79930 = C79927 + C79929;
    const double C80033 = C80030 - C80031;
    const double C80137 = C80131 + C80136;
    const double C78279 = C78276 - C78255;
    const double C39033 = C27365 * C81010;
    const double C39437 = C27897 * C81010;
    const double C69193 = C53813 * C81010;
    const double C69399 = C54123 * C81010;
    const double C83 =
        (C80998 + 2 * C80593) / C78240 - (C81010 * C80584) / C78234;
    const double C28803 = C27367 * C2608;
    const double C29221 = C1391 * C2608;
    const double C55179 = C53815 * C2608;
    const double C55399 = C2005 * C2608;
    const double C39035 = C27367 * C81000;
    const double C39439 = C1391 * C81000;
    const double C69195 = C53815 * C81000;
    const double C69401 = C2005 * C81000;
    const double C84 =
        (C80982 + 2 * C80601 + C81010) / C78240 - (C81000 * C80584) / C78234;
    const double C85 = (C80954 + C80598 / C78234 + C81000) / C78240 -
                       (C80984 * C80584) / C78234;
    const double C78418 = C78414 - C78395;
    const double C14077 = C373 * C81013;
    const double C14283 = C588 * C81013;
    const double C74689 = C53928 * C81013;
    const double C74895 = C54210 * C81013;
    const double C5652 =
        (C81003 + 2 * C80682) / C78240 - (C81013 * C80678) / C78234;
    const double C7188 = C1174 * C6894;
    const double C7412 = C1496 * C6894;
    const double C60069 = C30178 * C6894;
    const double C60283 = C56253 * C6894;
    const double C14079 = C1174 * C81006;
    const double C14285 = C1496 * C81006;
    const double C74691 = C30178 * C81006;
    const double C74897 = C56253 * C81006;
    const double C5653 =
        (C80988 + 2 * C80689 + C81013) / C78240 - (C81006 * C80678) / C78234;
    const double C5654 = (C80962 + C80686 / C78234 + C81006) / C78240 -
                         (C80993 * C80678) / C78234;
    const double C78509 = C78505 - C78486;
    const double C19689 = C441 * C81014;
    const double C19895 = C656 * C81014;
    const double C49813 = C27572 * C81014;
    const double C50217 = C28064 * C81014;
    const double C10463 =
        (C81004 + 2 * C80722) / C78240 - (C81014 * C80718) / C78234;
    const double C12246 = C2212 * C11882;
    const double C12470 = C2534 * C11882;
    const double C38532 = C30294 * C11882;
    const double C38958 = C30908 * C11882;
    const double C19691 = C2212 * C81008;
    const double C19897 = C2534 * C81008;
    const double C49815 = C30294 * C81008;
    const double C50219 = C30908 * C81008;
    const double C10464 =
        (C80990 + 2 * C80729 + C81014) / C78240 - (C81008 * C80718) / C78234;
    const double C10465 = (C80965 + C80726 / C78234 + C81008) / C78240 -
                          (C80996 * C80718) / C78234;
    const double C28810 = C28806 + C28807;
    const double C27374 = C27360 + C27361;
    const double C55186 = C55182 + C55183;
    const double C53822 = C53808 + C53809;
    const double C30066 = C30058 + C30059;
    const double C28811 = C28808 + C28809;
    const double C27375 = C27362 + C27363;
    const double C55187 = C55184 + C55185;
    const double C53823 = C53810 + C53811;
    const double C30067 = C30060 + C30061;
    const double C78749 = C78742 - C78715;
    const double C78766 = C78764 + C78741;
    const double C79885 = C79883 + C79866;
    const double C80182 = C80180 + C80151;
    const double C78765 = C78719 - C78763;
    const double C79884 = C79854 - C79882;
    const double C80181 = C80156 - C80179;
    const double C777 =
        2 * ((-((C78656 + C78683 * C78942) * ce) / C78234) / C78214 -
             (ae * (C78680 * C78942 + C78655)) / C78629 + C78628 * C79099) -
        (ae * (C78757 * C78942 + C78700)) / C78629 -
        ((C78701 + C78758 * C78942) * ce) / C78629 +
        C78628 *
            (C79099 - (ae * (C78745 * C78942 + C78691)) / C78629 -
             ((C78692 + C78748 * C78942) * ce) / C78629 +
             C78628 * ((-((C78683 + C78732 * C78942) * ce) / C78234) / C78214 -
                       (ae * (C78729 * C78942 + C78680)) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78942) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C5670 =
        (((-2 * C78770 * C78655) / C78234 -
          (C78770 * (C78680 * C78942 + C78655)) / C78234) *
         ae) /
            C78214 -
        ((2 * C78770 * C78656 + C78770 * (C78656 + C78683 * C78942)) * ce) /
            C78629 +
        C78628 * ((-2 * C79090) / C78629 + C78770 * C79099);
    const double C5672 =
        3 * ((-(C78690 * C78942) / C78234) / C78214 - C78660 / C78629) +
        C78770 * ((-2 * C79090) / C78629 + C78770 * C79099);
    const double C5673 =
        (((-3 * (C78680 * C78942 + C78655)) / C78234 +
          C78770 * ((-2 * C79244) / C78234 -
                    (C78770 * (C78729 * C78942 + C78680)) / C78234)) *
         ae) /
            C78214 -
        ((3 * (C78656 + C78683 * C78942) +
          C78770 * (2 * C79243 + C78770 * (C78683 + C78732 * C78942))) *
         ce) /
            C78629 +
        C78628 *
            (3 * C79099 +
             C78770 * ((-2 * C79245) / C78629 +
                       C78770 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78942) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C6157 = (-(C78828 * C79335 * ce) / C78234) / C78214 -
                         (ae * C78828 * C79356) / C78629 +
                         C78628 * C78828 * C79099;
    const double C6159 = (-(C78690 * C78942) / C78234) / C78214 -
                         C78660 / C78629 + C79099 * C79064;
    const double C6160 =
        (-((C79335 + (C78683 + C78732 * C78942) * C79064) * ce) / C78234) /
            C78214 -
        (ae * ((C78729 * C78942 + C78680) * C79064 + C79356)) / C78629 +
        C78628 * (C79099 +
                  ((-((C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78942) /
                    C78234) /
                       C78214 -
                   C78744 / C78629) *
                      C79064);
    const double C6902 =
        (-2 * C79090) / C78629 + C78770 * C79099 +
        (((-2 * C79361) / C78234 - (C78770 * C79366) / C78234) * ae) / C78214 -
        ((2 * C79340 + C78770 * C79344) * ce) / C78629 +
        C78628 *
            ((((-2 * C79244) / C78234 -
               (C78770 * (C78729 * C78942 + C78680)) / C78234) *
              ae) /
                 C78214 -
             ((2 * C79243 + C78770 * (C78683 + C78732 * C78942)) * ce) /
                 C78629 +
             C78628 * ((-2 * C79245) / C78629 +
                       C78770 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78942) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C7592 =
        C78828 * C79099 - (ae * C78828 * C79366) / C78629 -
        (C78828 * C79344 * ce) / C78629 +
        C78628 *
            ((-(C78828 * (C78683 + C78732 * C78942) * ce) / C78234) / C78214 -
             (ae * C78828 * (C78729 * C78942 + C78680)) / C78629 +
             C78628 * C78828 *
                 ((-((C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78942) /
                   C78234) /
                      C78214 -
                  C78744 / C78629));
    const double C8505 = C78828 * ((-2 * C79090) / C78629 + C78770 * C79099);
    const double C31644 =
        4 * ((-2 * C79090) / C78629 + C78770 * C79099) +
        C78770 *
            (3 * C79099 +
             C78770 * ((-2 * C79245) / C78629 +
                       C78770 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78942) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C32142 =
        (-2 * C79090) / C78629 + C78770 * C79099 +
        ((-2 * C79245) / C78629 +
         C78770 * ((-((C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78942) /
                    C78234) /
                       C78214 -
                   C78744 / C78629)) *
            C79064;
    const double C34482 =
        C78828 *
        (3 * C79099 +
         C78770 *
             ((-2 * C79245) / C78629 +
              C78770 *
                  ((-((C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78942) /
                    C78234) /
                       C78214 -
                   C78744 / C78629)));
    const double C38380 =
        2 * C78828 * C79099 +
        C78828 * (C79099 +
                  ((-((C78709 * C78710 + C78636 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78942) /
                    C78234) /
                       C78214 -
                   C78744 / C78629) *
                      C79064);
    const double C1713 =
        2 * ((-((C78656 + C78683 * C79064) * ce) / C78234) / C78214 -
             (ae * (C78680 * C79064 + C78655)) / C78629 + C78628 * C79177) -
        (ae * (C78757 * C79064 + C78700)) / C78629 -
        ((C78701 + C78758 * C79064) * ce) / C78629 +
        C78628 *
            (C79177 - (ae * (C78745 * C79064 + C78691)) / C78629 -
             ((C78692 + C78748 * C79064) * ce) / C78629 +
             C78628 * ((-((C78683 + C78732 * C79064) * ce) / C78234) / C78214 -
                       (ae * (C78729 * C79064 + C78680)) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C10480 =
        (((-2 * C78828 * C78655) / C78234 -
          (C78828 * (C78680 * C79064 + C78655)) / C78234) *
         ae) /
            C78214 -
        ((2 * C78828 * C78656 + C78828 * (C78656 + C78683 * C79064)) * ce) /
            C78629 +
        C78628 * ((-2 * C79168) / C78629 + C78828 * C79177);
    const double C10482 =
        3 * ((-(C78690 * C79064) / C78234) / C78214 - C78660 / C78629) +
        C78828 * ((-2 * C79168) / C78629 + C78828 * C79177);
    const double C10483 =
        (((-3 * (C78680 * C79064 + C78655)) / C78234 +
          C78828 * ((-2 * C79266) / C78234 -
                    (C78828 * (C78729 * C79064 + C78680)) / C78234)) *
         ae) /
            C78214 -
        ((3 * (C78656 + C78683 * C79064) +
          C78828 * (2 * C79265 + C78828 * (C78683 + C78732 * C79064))) *
         ce) /
            C78629 +
        C78628 *
            (3 * C79177 +
             C78828 * ((-2 * C79267) / C78629 +
                       C78828 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C11888 =
        (-2 * C79168) / C78629 + C78828 * C79177 +
        (((-2 * C79650) / C78234 - (C78828 * C79654) / C78234) * ae) / C78214 -
        ((2 * C79615 + C78828 * C79619) * ce) / C78629 +
        C78628 *
            ((((-2 * C79266) / C78234 -
               (C78828 * (C78729 * C79064 + C78680)) / C78234) *
              ae) /
                 C78214 -
             ((2 * C79265 + C78828 * (C78683 + C78732 * C79064)) * ce) /
                 C78629 +
             C78628 * ((-2 * C79267) / C78629 +
                       C78828 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C61982 =
        4 * ((-2 * C79168) / C78629 + C78828 * C79177) +
        C78828 *
            (3 * C79177 +
             C78828 * ((-2 * C79267) / C78629 +
                       C78828 * ((-((C78709 * C78710 +
                                     C78636 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78744 / C78629)));
    const double C359 =
        4 * ((-2 * C78628 * C78952) / C78629 + C78628 * C78963) +
        C78628 *
            (3 * C78963 +
             C78628 * ((-2 * C78628 * C78958) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C78942 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78636) /
                                  C78234) /
                                     C78214 -
                                 C78958 / C78629)));
    const double C1154 = (-(C78952 * C78636) / C78234) / C78214 -
                         C78947 / C78629 -
                         (ae * (C78770 * C78794 + C78682 * ce)) / C78629 -
                         ((C78770 * C78909 + C78682 * ae) * ce) / C78629 +
                         C78770 * ((-(C78909 * ce) / C78234) / C78214 -
                                   (ae * C78794) / C78629 + C78770 * C78963);
    const double C1155 =
        (((-2 * C78784) / C78234 - (C78628 * C78794) / C78234) * ae) / C78214 -
        ((2 * C78899 + C78628 * C78909) * ce) / C78629 +
        C78770 * ((-2 * C78628 * C78952) / C78629 + C78628 * C78963);
    const double C1156 =
        (-2 * C78628 * C78952) / C78629 + C78628 * C78963 +
        ((C78770 * C78823 - (C78747 * ce) / C78234) * ae) / C78214 -
        ((C78770 * C78935 + C78747 * ae) * ce) / C78629 +
        C78770 *
            ((C78823 * ae) / C78214 - (C78935 * ce) / C78629 +
             C78770 * ((-2 * C78628 * C78958) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C78942 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78636) /
                                  C78234) /
                                     C78214 -
                                 C78958 / C78629)));
    const double C2088 =
        C78828 * ((-2 * C78628 * C78952) / C78629 + C78628 * C78963);
    const double C2091 = (-(C78952 * C78636) / C78234) / C78214 -
                         C78947 / C78629 + C78963 * C79064;
    const double C2092 =
        (-2 * C78628 * C78952) / C78629 + C78628 * C78963 +
        ((-2 * C78628 * C78958) / C78629 +
         C78628 * ((-((C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C78958 / C78629)) *
            C79064;
    const double C2899 =
        (((-3 * C78794) / C78234 + C78628 * C78823) * ae) / C78214 -
        ((3 * C78909 + C78628 * C78935) * ce) / C78629 +
        C78770 *
            (3 * C78963 +
             C78628 * ((-2 * C78628 * C78958) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C78942 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78636) /
                                  C78234) /
                                     C78214 -
                                 C78958 / C78629)));
    const double C3565 =
        C78828 *
        (3 * C78963 +
         C78628 *
             ((-2 * C78628 * C78958) / C78629 +
              C78628 *
                  ((-((C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C78958 / C78629)));
    const double C4425 = (-(C78828 * C78909 * ce) / C78234) / C78214 -
                         (ae * C78828 * C78794) / C78629 +
                         C78770 * C78828 * C78963;
    const double C7183 =
        2 * ((-(C78909 * ce) / C78234) / C78214 - (ae * C78794) / C78629 +
             C78770 * C78963) -
        (ae * (C78770 * C79547 + C78794 + C79545 * ce)) / C78629 -
        ((C78909 + C78770 * C79548 + C79545 * ae) * ce) / C78629 +
        C78770 *
            (C78963 - (ae * C79547) / C78629 - (C79548 * ce) / C78629 +
             C78770 *
                 ((-(C78929 * ce) / C78234) / C78214 - (ae * C78815) / C78629 +
                  C78770 * ((-((C78709 * C78710 +
                                C78942 * bs[7] * std::pow(C78632, 7)) *
                               C78637 * C78636) /
                             C78234) /
                                C78214 -
                            C78958 / C78629)));
    const double C7997 =
        C78828 * C78963 - (ae * C78828 * C79547) / C78629 -
        (C78828 * C79548 * ce) / C78629 +
        C78770 *
            ((-(C78828 * C78929 * ce) / C78234) / C78214 -
             (ae * C78828 * C78815) / C78629 +
             C78770 * C78828 *
                 ((-((C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C78958 / C78629));
    const double C11379 =
        (-((C78909 + C78929 * C79064) * ce) / C78234) / C78214 -
        (ae * (C78815 * C79064 + C78794)) / C78629 +
        C78770 * (C78963 +
                  ((-((C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C78958 / C78629) *
                      C79064);
    const double C12169 =
        2 * C78828 * C78963 +
        C78828 * (C78963 +
                  ((-((C78709 * C78710 + C78942 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C78958 / C78629) *
                      C79064);
    const double C32501 =
        2 * ((-(C79632 * ce) / C78234) / C78214 - (ae * C79662) / C78629 +
             C78770 * C79951) -
        (ae * (C79875 * C79064 + C79394)) / C78629 -
        ((C79395 + C79876 * C79064) * ce) / C78629 +
        C78770 *
            (C79951 - (ae * (C79855 * C79064 + C79382)) / C78629 -
             ((C79385 + C79858 * C79064) * ce) / C78629 +
             C78770 * ((-((C78905 + C78923 * C79064) * ce) / C78234) / C78214 -
                       (ae * (C78808 * C79064 + C78790)) / C78629 +
                       C78770 * ((-((C78709 * C78710 +
                                     C78942 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78958 / C78629)));
    const double C36635 =
        (((-3 * C79662) / C78234 +
          C78828 * ((-2 * C79980) / C78234 -
                    (C78828 * (C78808 * C79064 + C78790)) / C78234)) *
         ae) /
            C78214 -
        ((3 * C79632 +
          C78828 * (2 * C79953 + C78828 * (C78905 + C78923 * C79064))) *
         ce) /
            C78629 +
        C78770 *
            (3 * C79951 +
             C78828 * ((-2 * C79981) / C78629 +
                       C78828 * ((-((C78709 * C78710 +
                                     C78942 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78958 / C78629)));
    const double C38673 =
        (-2 * C79573) / C78629 + C78828 * C79951 +
        (((-2 * C80029) / C78234 - (C78828 * C80034) / C78234) * ae) / C78214 -
        ((2 * C78828 * C79385 + C78828 * (C79385 + C79858 * C79064)) * ce) /
            C78629 +
        C78770 *
            ((((-2 * C79980) / C78234 -
               (C78828 * (C78808 * C79064 + C78790)) / C78234) *
              ae) /
                 C78214 -
             ((2 * C79953 + C78828 * C80016) * ce) / C78629 +
             C78770 * ((-2 * C79981) / C78629 +
                       C78828 * ((-((C78709 * C78710 +
                                     C78942 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78958 / C78629)));
    const double C62205 =
        4 * ((-2 * C79573) / C78629 + C78828 * C79951) +
        C78828 *
            (3 * C79951 +
             C78828 * ((-2 * C79981) / C78629 +
                       C78828 * ((-((C78709 * C78710 +
                                     C78942 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C79064) /
                                  C78234) /
                                     C78214 -
                                 C78958 / C78629)));
    const double C642 =
        4 * ((-2 * C78628 * C79074) / C78629 + C78628 * C79085) +
        C78628 *
            (3 * C79085 +
             C78628 * ((-2 * C78628 * C79080) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C79064 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78636) /
                                  C78234) /
                                     C78214 -
                                 C79080 / C78629)));
    const double C1582 = (-(C79074 * C78636) / C78234) / C78214 -
                         C79069 / C78629 + C79085 * C78942;
    const double C1583 =
        C78770 * ((-2 * C78628 * C79074) / C78629 + C78628 * C79085);
    const double C1584 =
        (-2 * C78628 * C79074) / C78629 + C78628 * C79085 +
        ((-2 * C78628 * C79080) / C78629 +
         C78628 * ((-((C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C79080 / C78629)) *
            C78942;
    const double C2514 = (-(C79074 * C78636) / C78234) / C78214 -
                         C79069 / C78629 -
                         (ae * (C78828 * C78852 + C78682 * ce)) / C78629 -
                         ((C78828 * C79010 + C78682 * ae) * ce) / C78629 +
                         C78828 * ((-(C79010 * ce) / C78234) / C78214 -
                                   (ae * C78852) / C78629 + C78828 * C79085);
    const double C2515 =
        (((-2 * C78842) / C78234 - (C78628 * C78852) / C78234) * ae) / C78214 -
        ((2 * C79000 + C78628 * C79010) * ce) / C78629 +
        C78828 * ((-2 * C78628 * C79074) / C78629 + C78628 * C79085);
    const double C2516 =
        (-2 * C78628 * C79074) / C78629 + C78628 * C79085 +
        ((C78828 * C78881 - (C78747 * ce) / C78234) * ae) / C78214 -
        ((C78828 * C79036 + C78747 * ae) * ce) / C78629 +
        C78828 *
            ((C78881 * ae) / C78214 - (C79036 * ce) / C78629 +
             C78828 * ((-2 * C78628 * C79080) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C79064 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78636) /
                                  C78234) /
                                     C78214 -
                                 C79080 / C78629)));
    const double C3209 =
        C78770 *
        (3 * C79085 +
         C78628 *
             ((-2 * C78628 * C79080) / C78629 +
              C78628 *
                  ((-((C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C79080 / C78629)));
    const double C3865 =
        (((-3 * C78852) / C78234 + C78628 * C78881) * ae) / C78214 -
        ((3 * C79010 + C78628 * C79036) * ce) / C78629 +
        C78828 *
            (3 * C79085 +
             C78628 * ((-2 * C78628 * C79080) / C78629 +
                       C78628 * ((-((C78709 * C78710 +
                                     C79064 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78636) /
                                  C78234) /
                                     C78214 -
                                 C79080 / C78629)));
    const double C4891 = (-(C78770 * C79010 * ce) / C78234) / C78214 -
                         (ae * C78770 * C78852) / C78629 +
                         C78828 * C78770 * C79085;
    const double C7485 =
        2 * C78770 * C79085 +
        C78770 * (C79085 +
                  ((-((C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C79080 / C78629) *
                      C78942);
    const double C8425 =
        (-((C79010 + C79030 * C78942) * ce) / C78234) / C78214 -
        (ae * (C78873 * C78942 + C78852)) / C78629 +
        C78828 * (C79085 +
                  ((-((C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                      C78637 * C78636) /
                    C78234) /
                       C78214 -
                   C79080 / C78629) *
                      C78942);
    const double C11805 =
        C78770 * C79085 - (ae * (C78828 * C79741 + C79545 * ce)) / C78629 -
        ((C78828 * C79742 + C79545 * ae) * ce) / C78629 +
        C78828 *
            ((-(C79742 * ce) / C78234) / C78214 - (ae * C79741) / C78629 +
             C78828 * C78770 *
                 ((-((C78709 * C78710 + C79064 * bs[7] * std::pow(C78632, 7)) *
                     C78637 * C78636) /
                   C78234) /
                      C78214 -
                  C79080 / C78629));
    const double C12465 =
        2 * ((-(C79010 * ce) / C78234) / C78214 - (ae * C78852) / C78629 +
             C78828 * C79085) -
        (ae * (C78828 * C79755 + C78852 + C79753 * ce)) / C78629 -
        ((C79010 + C78828 * C79756 + C79753 * ae) * ce) / C78629 +
        C78828 *
            (C79085 - (ae * C79755) / C78629 - (C79756 * ce) / C78629 +
             C78828 *
                 ((-(C79030 * ce) / C78234) / C78214 - (ae * C78873) / C78629 +
                  C78828 * ((-((C78709 * C78710 +
                                C79064 * bs[7] * std::pow(C78632, 7)) *
                               C78637 * C78636) /
                             C78234) /
                                C78214 -
                            C79080 / C78629)));
    const double C32054 =
        4 * ((-2 * C79780) / C78629 + C78770 * C79936) +
        C78770 *
            (3 * C79936 +
             C78770 * ((-2 * C78770 * C79080) / C78629 +
                       C78770 * ((-((C78709 * C78710 +
                                     C79064 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78942) /
                                  C78234) /
                                     C78214 -
                                 C79080 / C78629)));
    const double C32837 =
        (-2 * C79780) / C78629 + C78770 * C79936 +
        ((C78828 * C79904 - (C79871 * ce) / C78234) * ae) / C78214 -
        ((C78828 * C79926 + C79871 * ae) * ce) / C78629 +
        C78828 *
            ((C79904 * ae) / C78214 - (C79926 * ce) / C78629 +
             C78828 * ((-2 * C78770 * C79080) / C78629 +
                       C78770 * ((-((C78709 * C78710 +
                                     C79064 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78942) /
                                  C78234) /
                                     C78214 -
                                 C79080 / C78629)));
    const double C35051 =
        (((-3 * C79435) / C78234 + C78770 * C79904) * ae) / C78214 -
        ((3 * C79461 + C78770 * C79926) * ce) / C78629 +
        C78828 *
            (3 * C79936 +
             C78770 * ((-2 * C78770 * C79080) / C78629 +
                       C78770 * ((-((C78709 * C78710 +
                                     C79064 * bs[7] * std::pow(C78632, 7)) *
                                    C78637 * C78942) /
                                  C78234) /
                                     C78214 -
                                 C79080 / C78629)));
    const double C38953 =
        2 * ((-(C79461 * ce) / C78234) / C78214 - (ae * C79435) / C78629 +
             C78828 * C79936) -
        (ae * (C78828 * C80071 + C79435 + C80069 * ce)) / C78629 -
        ((C79461 + C78828 * C80072 + C80069 * ae) * ce) / C78629 +
        C78828 *
            (C79936 - (ae * C80071) / C78629 - (C80072 * ce) / C78629 +
             C78828 *
                 ((-(C79920 * ce) / C78234) / C78214 - (ae * C79895) / C78629 +
                  C78828 * ((-((C78709 * C78710 +
                                C79064 * bs[7] * std::pow(C78632, 7)) *
                               C78637 * C78942) /
                             C78234) /
                                C78214 -
                            C79080 / C78629)));
    const double C58127 = C58123 + C58124;
    const double C79877 = C79873 - C79851;
    const double C80171 = C80167 - C80153;
    const double C5874 =
        3 * ((-(ae * C79401) / C78234) / C78214 - C79397 / C78629 -
             (C79402 * ce) / C78629 + C78770 * C79420) +
        (((-2 * C79401) / C78234 - (C78770 * C79425) / C78234 -
          (C79414 * ce) / C78234) *
         ae) /
            C78214 -
        ((2 * C79402 + C78770 * C79426 + C79414 * ae) * ce) / C78629 +
        C78770 * (2 * C79420 - (ae * C79425) / C78629 - (C79426 * ce) / C78629 +
                  C78770 * ((-(ae * C79418) / C78234) / C78214 -
                            C79405 / C78629 - (C79419 * ce) / C78629 +
                            C78770 * ((-(C79409 * ce) / C78234) / C78214 -
                                      (ae * C79406) / C78629 -
                                      (C78770 * C78628 *
                                       (C78709 * C78710 +
                                        C78942 * bs[7] * std::pow(C78632, 7)) *
                                       C78637) /
                                          C78629)));
    const double C7194 = C7192 + C7193;
    const double C60289 = C60287 + C60288;
    const double C58029 = C58022 + C58023;
    const double C60210 = C60206 + C60207;
    const double C10872 =
        3 * ((-(ae * C79708) / C78234) / C78214 - C79480 / C78629 -
             (C79709 * ce) / C78629 + C78828 * C79723) +
        (((-2 * C79708) / C78234 - (C78828 * C79728) / C78234 -
          (C79720 * ce) / C78234) *
         ae) /
            C78214 -
        ((2 * C79709 + C78828 * C79729 + C79720 * ae) * ce) / C78629 +
        C78828 * (2 * C79723 - (ae * C79728) / C78629 - (C79729 * ce) / C78629 +
                  C78828 * ((-(ae * C79718) / C78234) / C78214 -
                            C79484 / C78629 - (C79721 * ce) / C78629 +
                            C78828 * ((-(C79471 * ce) / C78234) / C78214 -
                                      (ae * C79443) / C78629 -
                                      (C78828 * C78628 *
                                       (C78709 * C78710 +
                                        C79064 * bs[7] * std::pow(C78632, 7)) *
                                       C78637) /
                                          C78629)));
    const double C12476 = C12474 + C12475;
    const double C36808 =
        3 * ((-(ae * C79786) / C78234) / C78214 - C79780 / C78629 -
             (C79787 * ce) / C78629 + C78828 * C80052) +
        (((-2 * C79786) / C78234 - (C78828 * C80057) / C78234 -
          (C80046 * ce) / C78234) *
         ae) /
            C78214 -
        ((2 * C79787 + C78828 * C80058 + C80046 * ae) * ce) / C78629 +
        C78828 * (2 * C80052 - (ae * C80057) / C78629 - (C80058 * ce) / C78629 +
                  C78828 * ((-(ae * C80050) / C78234) / C78214 -
                            C80037 / C78629 - (C80051 * ce) / C78629 +
                            C78828 * ((-(C80041 * ce) / C78234) / C78214 -
                                      (ae * C80038) / C78629 -
                                      (C78828 * C78770 *
                                       (C78709 * C78710 +
                                        C79064 * bs[7] * std::pow(C78632, 7)) *
                                       C78637) /
                                          C78629)));
    const double C27477 = C27468 + C27469;
    const double C27478 = C27470 + C27471;
    const double C53930 = C53917 + C53918;
    const double C53931 = C53920 + C53921;
    const double C30179 = C30174 + C30175;
    const double C31715 = C31712 + C31713;
    const double C32252 = C32246 + C32247;
    const double C32253 = C32248 + C32249;
    const double C32254 = C32250 + C32251;
    const double C34562 = C34560 + C34561;
    const double C38460 = C38458 + C38459;
    const double C177 =
        4 * (2 * C78797 - (ae * C78794) / C78629 + C78628 * C78825) +
        (((-3 * C78794) / C78234 + C78628 * C78823) * ae) / C78214 +
        C78628 *
            (3 * C78825 + (C78823 * ae) / C78214 +
             C78628 * (2 * C78822 - (ae * C78815) / C78629 +
                       C78628 * ((-(ae * C78628 * C78808) / C78234) / C78214 -
                                 C78805 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78777) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78808) / C78629))));
    const double C868 = (-(ae * C78784) / C78234) / C78214 - C78781 / C78629 +
                        C78628 * C78797 - (C78770 * C78701 * ce) / C78629 +
                        C78770 * (C78770 * C78825 - (C78701 * ce) / C78629);
    const double C869 =
        C78770 * (2 * C78797 - (ae * C78794) / C78629 + C78628 * C78825) -
        ((2 * C78662 + C78628 * C78701 + C78682 * ae) * ce) / C78629;
    const double C1799 =
        C78828 * (2 * C78797 - (ae * C78794) / C78629 + C78628 * C78825);
    const double C1802 = (-(ae * C78784) / C78234) / C78214 - C78781 / C78629 +
                         C78628 * C78797 + C78825 * C79064;
    const double C1803 =
        2 * C78797 - (ae * C78794) / C78629 + C78628 * C78825 +
        (2 * C78822 - (ae * C78815) / C78629 +
         C78628 *
             ((-(ae * C78628 * C78808) / C78234) / C78214 - C78805 / C78629 +
              C78628 *
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) / C78234) /
                       C78214 -
                   (ae * C78808) / C78629))) *
            C79064;
    const double C3354 =
        C78828 *
        (3 * C78825 + (C78823 * ae) / C78214 +
         C78628 *
             (2 * C78822 - (ae * C78815) / C78629 +
              C78628 *
                  ((-(ae * C78628 * C78808) / C78234) / C78214 -
                   C78805 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629))));
    const double C4099 = C78828 * (C78770 * C78825 - (C78701 * ce) / C78629);
    const double C6974 =
        2 * (C78770 * C78825 - (C78701 * ce) / C78629) -
        ((C78701 + C78758 * C78942) * ce) / C78629 +
        C78770 *
            (C78825 - (C78770 * C78758 * ce) / C78629 +
             C78770 * (C78770 * ((-(ae * C79406) / C78234) / C78214 -
                                 C78805 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78777) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78808) / C78629)) -
                       (C78758 * ce) / C78629));
    const double C7692 =
        C78828 *
        (C78825 - (C78770 * C78758 * ce) / C78629 +
         C78770 *
             (C78770 *
                  ((-(ae * C79406) / C78234) / C78214 - C78805 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629)) -
              (C78758 * ce) / C78629));
    const double C11074 =
        C78770 * C78825 - (C78701 * ce) / C78629 +
        (C78770 * ((-(ae * C79406) / C78234) / C78214 - C78805 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629)) -
         (C78758 * ce) / C78629) *
            C79064;
    const double C11956 =
        2 * C78828 * C78825 +
        C78828 * (C78825 +
                  ((-(ae * C79406) / C78234) / C78214 - C78805 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629)) *
                      C79064);
    const double C5728 =
        3 * (C78797 - (C79340 * ce) / C78629 + C78770 * C79343) -
        ((2 * C79340 + C78770 * C79344) * ce) / C78629 +
        C78770 *
            (2 * C79343 - (C79344 * ce) / C78629 +
             C78770 * (C78822 - (C78770 * C78748 * ce) / C78629 +
                       C78770 * (C78770 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78777) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78808) / C78629) -
                                 (C78748 * ce) / C78629)));
    const double C6241 =
        C78828 * (C78797 - (C79340 * ce) / C78629 + C78770 * C79343);
    const double C6243 =
        C78770 * C78797 - (C78662 * ce) / C78629 + C79343 * C79064;
    const double C6246 =
        C78797 - (C79340 * ce) / C78629 + C78770 * C79343 +
        (C78822 - (C78770 * C78748 * ce) / C78629 +
         C78770 * (C78770 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629) -
                   (C78748 * ce) / C78629)) *
            C79064;
    const double C8576 =
        C78828 *
        (2 * C79343 - (C79344 * ce) / C78629 +
         C78770 *
             (C78822 - (C78770 * C78748 * ce) / C78629 +
              C78770 *
                  (C78770 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629) -
                   (C78748 * ce) / C78629)));
    const double C12620 =
        2 * C78828 * C79343 +
        C78828 * (C79343 +
                  (C78770 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629) -
                   (C78748 * ce) / C78629) *
                      C79064);
    const double C33012 = C33010 + C33011;
    const double C63447 = C63444 + C63445;
    const double C31708 =
        4 * (2 * C79338 - (C79335 * ce) / C78629 + C78770 * C79812) -
        ((3 * C79335 + C78770 * C79809) * ce) / C78629 +
        C78770 *
            (3 * C79812 - (C79809 * ce) / C78629 +
             C78770 * (2 * C79810 - (C79805 * ce) / C78629 +
                       C78770 * ((-(C78770 * C78732 * ce) / C78234) / C78214 -
                                 C78805 / C78629 +
                                 C78770 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C78777) /
                                            C78234) /
                                               C78214 -
                                           (C78732 * ce) / C78629))));
    const double C32244 =
        2 * C79338 - (C79335 * ce) / C78629 + C78770 * C79812 +
        (2 * C79810 - (C79805 * ce) / C78629 +
         C78770 *
             ((-(C78770 * C78732 * ce) / C78234) / C78214 - C78805 / C78629 +
              C78770 *
                  ((-(C78770 * std::pow(C78632, 7) * bs[7] * C78777) / C78234) /
                       C78214 -
                   (C78732 * ce) / C78629))) *
            C79064;
    const double C34558 =
        C78828 *
        (3 * C79812 - (C79809 * ce) / C78629 +
         C78770 *
             (2 * C79810 - (C79805 * ce) / C78629 +
              C78770 *
                  ((-(C78770 * C78732 * ce) / C78234) / C78214 -
                   C78805 / C78629 +
                   C78770 * ((-(C78770 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (C78732 * ce) / C78629))));
    const double C38456 =
        2 * C78828 * C79812 +
        C78828 * (C79812 +
                  ((-(C80002 * ce) / C78234) / C78214 - C78805 / C78629 +
                   C78770 * ((-(C78770 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (C78732 * ce) / C78629)) *
                      C79064);
    const double C312 = C303 + C304;
    const double C1071 = C1058 + C1059;
    const double C1073 = C1062 + C1063;
    const double C2007 = C1994 + C1995;
    const double C2009 = C1998 + C1999;
    const double C4323 = C4316 + C4317;
    const double C287 =
        4 * (2 * C78912 - (C78909 * ce) / C78629 + C78628 * C78938) -
        ((3 * C78909 + C78628 * C78935) * ce) / C78629 +
        C78628 *
            (3 * C78938 - (C78935 * ce) / C78629 +
             C78628 * (2 * C78936 - (C78929 * ce) / C78629 +
                       C78628 * ((-(C78628 * C78923 * ce) / C78234) / C78214 -
                                 C78920 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78892) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629))));
    const double C1046 =
        (((-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
          (C78682 * ce) / C78234) *
         ae) /
            C78214 +
        C78770 * (2 * C78912 - (C78909 * ce) / C78629 + C78628 * C78938);
    const double C1049 = (-(C78899 * ce) / C78234) / C78214 - C78896 / C78629 +
                         C78628 * C78912 - (ae * C78770 * C78700) / C78629 +
                         C78770 * (C78770 * C78938 - (ae * C78700) / C78629);
    const double C1982 =
        C78828 * (2 * C78912 - (C78909 * ce) / C78629 + C78628 * C78938);
    const double C1985 = (-(C78899 * ce) / C78234) / C78214 - C78896 / C78629 +
                         C78628 * C78912 + C78938 * C79064;
    const double C1986 =
        2 * C78912 - (C78909 * ce) / C78629 + C78628 * C78938 +
        (2 * C78936 - (C78929 * ce) / C78629 +
         C78628 *
             ((-(C78628 * C78923 * ce) / C78234) / C78214 - C78920 / C78629 +
              C78628 *
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) / C78234) /
                       C78214 -
                   (C78923 * ce) / C78629))) *
            C79064;
    const double C3492 =
        C78828 *
        (3 * C78938 - (C78935 * ce) / C78629 +
         C78628 *
             (2 * C78936 - (C78929 * ce) / C78629 +
              C78628 *
                  ((-(C78628 * C78923 * ce) / C78234) / C78214 -
                   C78920 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) /
                              C78234) /
                                 C78214 -
                             (C78923 * ce) / C78629))));
    const double C4311 =
        C78770 * C78828 * C78938 - (ae * C78828 * C78700) / C78629;
    const double C7110 =
        2 * (C78770 * C78938 - (ae * C78700) / C78629) -
        (ae * (C78757 * C78942 + C78700)) / C78629 +
        C78770 *
            (C78938 - (ae * C78770 * C78757) / C78629 +
             C78770 * (C78770 * ((-(C79409 * ce) / C78234) / C78214 -
                                 C78920 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78892) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629)) -
                       (ae * C78757) / C78629));
    const double C7892 =
        C78828 * C78938 - (ae * C78828 * C78770 * C78757) / C78629 +
        C78770 *
            (C78770 * C78828 *
                 ((-(C79409 * ce) / C78234) / C78214 - C78920 / C78629 +
                  C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) /
                             C78234) /
                                C78214 -
                            (C78923 * ce) / C78629)) -
             (ae * C78828 * C78757) / C78629);
    const double C11274 =
        C78770 * (C78938 +
                  ((-(C79409 * ce) / C78234) / C78214 - C78920 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) /
                              C78234) /
                                 C78214 -
                             (C78923 * ce) / C78629)) *
                      C79064) -
        (ae * (C78757 * C79064 + C78700)) / C78629;
    const double C12096 =
        2 * C78828 * C78938 +
        C78828 * (C78938 +
                  ((-(C79409 * ce) / C78234) / C78214 - C78920 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) /
                              C78234) /
                                 C78214 -
                             (C78923 * ce) / C78629)) *
                      C79064);
    const double C5828 =
        3 * (C78912 - (ae * C79361) / C78629 + C78770 * C79365) +
        (((-2 * C79361) / C78234 - (C78770 * C79366) / C78234) * ae) / C78214 +
        C78770 *
            (2 * C79365 - (ae * C79366) / C78629 +
             C78770 * (C78936 - (ae * C78770 * C78745) / C78629 +
                       C78770 * (C78770 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78892) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629) -
                                 (ae * C78745) / C78629)));
    const double C7117 = C7114 + C7115;
    const double C11281 = C11278 + C11279;
    const double C7899 = C7896 + C7897;
    const double C12103 = C12100 + C12101;
    const double C31812 =
        4 * (2 * C79359 - (ae * C79356) / C78629 + C78770 * C79837) +
        (((-3 * C79356) / C78234 + C78770 * C79835) * ae) / C78214 +
        C78770 *
            (3 * C79837 + (C79835 * ae) / C78214 +
             C78770 * (2 * C79834 - (ae * C79827) / C78629 +
                       C78770 * ((-(ae * C78770 * C78729) / C78234) / C78214 -
                                 C78920 / C78629 +
                                 C78770 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C78892) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78729) / C78629))));
    const double C27575 = C27564 + C27565;
    const double C27576 = C27567 + C27568;
    const double C54029 = C54020 + C54021;
    const double C54030 = C54022 + C54023;
    const double C30295 = C30287 + C30288;
    const double C62103 = C62100 + C62101;
    const double C232 =
        4 * (2 * C78855 - (ae * C78852) / C78629 + C78628 * C78883) +
        (((-3 * C78852) / C78234 + C78628 * C78881) * ae) / C78214 +
        C78628 *
            (3 * C78883 + (C78881 * ae) / C78214 +
             C78628 * (2 * C78880 - (ae * C78873) / C78629 +
                       C78628 * ((-(ae * C78628 * C78866) / C78234) / C78214 -
                                 C78863 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78835) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78866) / C78629))));
    const double C958 = (-(ae * C78842) / C78234) / C78214 - C78839 / C78629 +
                        C78628 * C78855 + C78883 * C78942;
    const double C959 =
        C78770 * (2 * C78855 - (ae * C78852) / C78629 + C78628 * C78883);
    const double C960 =
        2 * C78855 - (ae * C78852) / C78629 + C78628 * C78883 +
        (2 * C78880 - (ae * C78873) / C78629 +
         C78628 *
             ((-(ae * C78628 * C78866) / C78234) / C78214 - C78863 / C78629 +
              C78628 *
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) / C78234) /
                       C78214 -
                   (ae * C78866) / C78629))) *
            C78942;
    const double C1894 = (-(ae * C78842) / C78234) / C78214 - C78839 / C78629 +
                         C78628 * C78855 - (C78828 * C78701 * ce) / C78629 +
                         C78828 * (C78828 * C78883 - (C78701 * ce) / C78629);
    const double C1895 =
        C78828 * (2 * C78855 - (ae * C78852) / C78629 + C78628 * C78883) -
        ((2 * C78662 + C78628 * C78701 + C78682 * ae) * ce) / C78629;
    const double C2758 =
        C78770 *
        (3 * C78883 + (C78881 * ae) / C78214 +
         C78628 *
             (2 * C78880 - (ae * C78873) / C78629 +
              C78628 *
                  ((-(ae * C78628 * C78866) / C78234) / C78214 -
                   C78863 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) /
                              C78234) /
                                 C78214 -
                             (ae * C78866) / C78629))));
    const double C4205 =
        C78828 * C78770 * C78883 - (C78770 * C78701 * ce) / C78629;
    const double C7042 =
        2 * C78770 * C78883 +
        C78770 * (C78883 +
                  ((-(ae * C79443) / C78234) / C78214 - C78863 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) /
                              C78234) /
                                 C78214 -
                             (ae * C78866) / C78629)) *
                      C78942);
    const double C7792 =
        C78828 * (C78883 +
                  ((-(ae * C79443) / C78234) / C78214 - C78863 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) /
                              C78234) /
                                 C78214 -
                             (ae * C78866) / C78629)) *
                      C78942) -
        ((C78701 + C78758 * C78942) * ce) / C78629;
    const double C11174 =
        C78770 * C78883 - (C78828 * C79733 * ce) / C78629 +
        C78828 *
            (C78828 * C78770 *
                 ((-(ae * C79443) / C78234) / C78214 - C78863 / C78629 +
                  C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) /
                             C78234) /
                                C78214 -
                            (ae * C78866) / C78629)) -
             (C79733 * ce) / C78629);
    const double C12028 =
        2 * (C78828 * C78883 - (C78701 * ce) / C78629) -
        ((C78701 + C78758 * C79064) * ce) / C78629 +
        C78828 *
            (C78883 - (C78828 * C78758 * ce) / C78629 +
             C78828 * (C78828 * ((-(ae * C79443) / C78234) / C78214 -
                                 C78863 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78835) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78866) / C78629)) -
                       (C78758 * ce) / C78629));
    const double C10588 =
        3 * (C78855 - (C79615 * ce) / C78629 + C78828 * C79618) -
        ((2 * C79615 + C78828 * C79619) * ce) / C78629 +
        C78828 *
            (2 * C79618 - (C79619 * ce) / C78629 +
             C78828 * (C78880 - (C78828 * C78748 * ce) / C78629 +
                       C78828 * (C78828 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78835) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78866) / C78629) -
                                 (C78748 * ce) / C78629)));
    const double C33082 = C33079 + C33080;
    const double C37124 = C37122 + C37123;
    const double C33812 = C33810 + C33811;
    const double C63517 = C63515 + C63516;
    const double C62096 =
        4 * (2 * C79613 - (C79610 * ce) / C78629 + C78828 * C80093) -
        ((3 * C79610 + C78828 * C80090) * ce) / C78629 +
        C78828 *
            (3 * C80093 - (C80090 * ce) / C78629 +
             C78828 * (2 * C80091 - (C80086 * ce) / C78629 +
                       C78828 * ((-(C78828 * C78732 * ce) / C78234) / C78214 -
                                 C78863 / C78629 +
                                 C78828 * ((-(C78828 * std::pow(C78632, 7) *
                                              bs[7] * C78835) /
                                            C78234) /
                                               C78214 -
                                           (C78732 * ce) / C78629))));
    const double C60359 = C60357 + C60358;
    const double C62264 = C62260 + C62261;
    const double C62265 = C62262 + C62263;
    const double C64335 = C64333 + C64334;
    const double C1279 = C1273 + C1274;
    const double C2986 = C2983 + C2984;
    const double C2215 = C2210 + C2211;
    const double C3652 = C3650 + C3651;
    const double C4555 = C4552 + C4553;
    const double C12251 = C81011 * C10729;
    const double C31898 =
        4 * (2 * C79438 - (ae * C79435) / C78629 + C78770 * C79906) +
        (((-3 * C79435) / C78234 + C78770 * C79904) * ae) / C78214 +
        C78770 *
            (3 * C79906 + (C79904 * ae) / C78214 +
             C78770 * (2 * C79903 - (ae * C79895) / C78629 +
                       C78770 * ((-(ae * C78770 * C78866) / C78234) / C78214 -
                                 C78979 / C78629 +
                                 C78770 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C78969) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78866) / C78629))));
    const double C32576 =
        2 * (C78770 * C79965 - (ae * C79702) / C78629) -
        (ae * (C78828 * (C78828 * C79895 + C79863) + C79435 +
               C78828 * C79857 * ce)) /
            C78629 +
        C78770 *
            (C79965 -
             (ae * (C78828 * (C78828 * C78770 * C78866 + C79856) + C79781 +
                    C78828 * C79845 * ce)) /
                 C78629 +
             C78770 * (C78770 * ((-(C78828 * C78923 * ce) / C78234) / C78214 -
                                 C78979 / C78629 +
                                 C78828 * ((-(C78828 * std::pow(C78632, 7) *
                                              bs[7] * C78969) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629)) -
                       (ae * (C78828 * (C78828 * C78866 + C78721) + C78848 +
                              C78828 * C78708 * ce)) /
                           C78629));
    const double C36678 =
        (((-3 * C79702) / C78234 +
          C78828 * ((-2 * C79690) / C78234 -
                    (C78828 * (C78828 * (C78828 * C78866 + C78721) + C78848 +
                               C78828 * C78708 * ce)) /
                        C78234 -
                    (C80015 * ce) / C78234) -
          ((2 * C79685 + C78828 * C80015) * ce) / C78234) *
         ae) /
            C78214 +
        C78770 *
            (3 * C79965 - ((2 * C79953 + C78828 * C80016) * ce) / C78629 +
             C78828 * (2 * C79962 - (C80016 * ce) / C78629 +
                       C78828 * ((-(C78828 * C78923 * ce) / C78234) / C78214 -
                                 C78979 / C78629 +
                                 C78828 * ((-(C78828 * std::pow(C78632, 7) *
                                              bs[7] * C78969) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629))));
    const double C38740 =
        2 * C79581 - (C79632 * ce) / C78629 + C78828 * C79965 +
        (((-2 * C79786) / C78234 - (C78828 * C80057) / C78234 -
          (C80046 * ce) / C78234) *
         ae) /
            C78214 +
        C78770 *
            ((((-2 * C79690) / C78234 -
               (C78828 * (C78828 * (C78828 * C78866 + C78721) + C78848 +
                          C78828 * C78708 * ce)) /
                   C78234 -
               (C80015 * ce) / C78234) *
              ae) /
                 C78214 +
             C78770 * (2 * C79962 - (C80016 * ce) / C78629 +
                       C78828 * ((-(C78828 * C78923 * ce) / C78234) / C78214 -
                                 C78979 / C78629 +
                                 C78828 * ((-(C78828 * std::pow(C78632, 7) *
                                              bs[7] * C78969) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629))));
    const double C62258 =
        4 * (2 * C79581 - (C79632 * ce) / C78629 + C78828 * C79965) -
        ((3 * C79632 + C78828 * C80099) * ce) / C78629 +
        C78828 *
            (3 * C79965 - (C80099 * ce) / C78629 +
             C78828 * (2 * C79962 - (C80016 * ce) / C78629 +
                       C78828 * ((-(C78828 * C78923 * ce) / C78234) / C78214 -
                                 C78979 / C78629 +
                                 C78828 * ((-(C78828 * std::pow(C78632, 7) *
                                              bs[7] * C78969) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629))));
    const double C34838 =
        3 * (C79581 - (ae * C79786) / C78629 + C78770 * C79992) +
        ((C78828 * C79904 - (C79871 * ce) / C78234) * ae) / C78214 +
        C78770 *
            (2 * C79992 - (ae * (C78828 * C79895 + C79863)) / C78629 +
             C78770 *
                 (C79962 - (ae * (C78828 * C78770 * C78866 + C79856)) / C78629 +
                  C78770 * (C78770 * ((-(C78828 * std::pow(C78632, 7) * bs[7] *
                                         C78969) /
                                       C78234) /
                                          C78214 -
                                      (C78923 * ce) / C78629) -
                            (ae * (C78828 * C78866 + C78721)) / C78629)));
    const double C527 = C518 + C519;
    const double C1393 = C1380 + C1381;
    const double C1395 = C1384 + C1385;
    const double C2329 = C2316 + C2317;
    const double C2331 = C2320 + C2321;
    const double C4673 = C4666 + C4667;
    const double C502 =
        4 * (2 * C79013 - (C79010 * ce) / C78629 + C78628 * C79039) -
        ((3 * C79010 + C78628 * C79036) * ce) / C78629 +
        C78628 *
            (3 * C79039 - (C79036 * ce) / C78629 +
             C78628 * (2 * C79037 - (C79030 * ce) / C78629 +
                       C78628 * ((-(C78628 * C79024 * ce) / C78234) / C78214 -
                                 C79021 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78993) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629))));
    const double C1368 =
        C78770 * (2 * C79013 - (C79010 * ce) / C78629 + C78628 * C79039);
    const double C1371 = (-(C79000 * ce) / C78234) / C78214 - C78997 / C78629 +
                         C78628 * C79013 + C79039 * C78942;
    const double C1372 =
        2 * C79013 - (C79010 * ce) / C78629 + C78628 * C79039 +
        (2 * C79037 - (C79030 * ce) / C78629 +
         C78628 *
             ((-(C78628 * C79024 * ce) / C78234) / C78214 - C79021 / C78629 +
              C78628 *
                  ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) / C78234) /
                       C78214 -
                   (C79024 * ce) / C78629))) *
            C78942;
    const double C2304 =
        (((-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
          (C78682 * ce) / C78234) *
         ae) /
            C78214 +
        C78828 * (2 * C79013 - (C79010 * ce) / C78629 + C78628 * C79039);
    const double C2307 = (-(C79000 * ce) / C78234) / C78214 - C78997 / C78629 +
                         C78628 * C79013 - (ae * C78828 * C78700) / C78629 +
                         C78828 * (C78828 * C79039 - (ae * C78700) / C78629);
    const double C3054 =
        C78770 *
        (3 * C79039 - (C79036 * ce) / C78629 +
         C78628 *
             (2 * C79037 - (C79030 * ce) / C78629 +
              C78628 *
                  ((-(C78628 * C79024 * ce) / C78234) / C78214 -
                   C79021 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) /
                              C78234) /
                                 C78214 -
                             (C79024 * ce) / C78629))));
    const double C4661 =
        C78828 * C78770 * C79039 - (ae * C78770 * C78700) / C78629;
    const double C7334 =
        2 * C78770 * C79039 +
        C78770 * (C79039 +
                  ((-(C79471 * ce) / C78234) / C78214 - C79021 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) /
                              C78234) /
                                 C78214 -
                             (C79024 * ce) / C78629)) *
                      C78942);
    const double C8212 =
        C78828 * (C79039 +
                  ((-(C79471 * ce) / C78234) / C78214 - C79021 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) /
                              C78234) /
                                 C78214 -
                             (C79024 * ce) / C78629)) *
                      C78942) -
        (ae * (C78757 * C78942 + C78700)) / C78629;
    const double C11594 =
        C78770 * C79039 - (ae * C78828 * C79738) / C78629 +
        C78828 *
            (C78828 * C78770 *
                 ((-(C79471 * ce) / C78234) / C78214 - C79021 / C78629 +
                  C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) /
                             C78234) /
                                C78214 -
                            (C79024 * ce) / C78629)) -
             (ae * C79738) / C78629);
    const double C12320 =
        2 * (C78828 * C79039 - (ae * C78700) / C78629) -
        (ae * (C78757 * C79064 + C78700)) / C78629 +
        C78828 *
            (C79039 - (ae * C78828 * C78757) / C78629 +
             C78828 * (C78828 * ((-(C79471 * ce) / C78234) / C78214 -
                                 C79021 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78993) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629)) -
                       (ae * C78757) / C78629));
    const double C10780 =
        3 * (C79013 - (ae * C79650) / C78629 + C78828 * C79653) +
        (((-2 * C79650) / C78234 - (C78828 * C79654) / C78234) * ae) / C78214 +
        C78828 *
            (2 * C79653 - (ae * C79654) / C78629 +
             C78828 * (C79037 - (ae * C78828 * C78745) / C78629 +
                       C78828 * (C78828 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78993) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629) -
                                 (ae * C78745) / C78629)));
    const double C7341 = C7338 + C7339;
    const double C11601 = C11598 + C11599;
    const double C8219 = C8216 + C8217;
    const double C12327 = C12324 + C12325;
    const double C62308 =
        4 * (2 * C79648 - (ae * C79645) / C78629 + C78828 * C80118) +
        (((-3 * C79645) / C78234 + C78828 * C80116) * ae) / C78214 +
        C78828 *
            (3 * C80118 + (C80116 * ae) / C78214 +
             C78828 * (2 * C80115 - (ae * C80108) / C78629 +
                       C78828 * ((-(ae * C78828 * C78729) / C78234) / C78214 -
                                 C79021 / C78629 +
                                 C78828 * ((-(C78828 * std::pow(C78632, 7) *
                                              bs[7] * C78993) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78729) / C78629))));
    const double C32012 = C32009 + C32010;
    const double C32761 = C32755 + C32756;
    const double C32762 = C32757 + C32758;
    const double C32763 = C32759 + C32760;
    const double C34985 = C34983 + C34984;
    const double C38887 = C38885 + C38886;
    const double C1499 = C1494 + C1495;
    const double C3142 = C3140 + C3141;
    const double C3798 = C3795 + C3796;
    const double C2431 = C2425 + C2426;
    const double C4789 = C4786 + C4787;
    const double C8325 = C81012 * C6740;
    const double C11705 = C81012 * C6743;
    const double C32005 =
        4 * (2 * C79464 - (C79461 * ce) / C78629 + C78770 * C79930) -
        ((3 * C79461 + C78770 * C79926) * ce) / C78629 +
        C78770 *
            (3 * C79930 - (C79926 * ce) / C78629 +
             C78770 * (2 * C79928 - (C79920 * ce) / C78629 +
                       C78770 * ((-(C78770 * C79024 * ce) / C78234) / C78214 -
                                 C79055 / C78629 +
                                 C78770 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C79045) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629))));
    const double C38883 =
        2 * (C78828 * C79930 - (ae * C79394) / C78629) -
        (ae * (C79875 * C79064 + C79394)) / C78629 +
        C78828 *
            (C79930 - (ae * C78828 * C79875) / C78629 +
             C78828 * (C78828 * ((-(C80041 * ce) / C78234) / C78214 -
                                 C79055 / C78629 +
                                 C78770 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C79045) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629)) -
                       (ae * C79875) / C78629));
    const double C36765 =
        3 * (C79464 - (ae * C80029) / C78629 + C78828 * C80033) +
        (((-2 * C80029) / C78234 - (C78828 * C80034) / C78234) * ae) / C78214 +
        C78828 *
            (2 * C80033 - (ae * C80034) / C78629 +
             C78828 * (C79928 - (ae * C78828 * C79855) / C78629 +
                       C78828 * (C78828 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C79045) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629) -
                                 (ae * C79855) / C78629)));
    const double C62351 =
        4 * (2 * C79665 - (ae * C79662) / C78629 + C78828 * C80137) +
        (((-3 * C79662) / C78234 + C78828 * C80135) * ae) / C78214 +
        C78828 *
            (3 * C80137 + (C80135 * ae) / C78214 +
             C78828 * (2 * C80134 - (ae * C80127) / C78629 +
                       C78828 * ((-(ae * C78828 * C78808) / C78234) / C78214 -
                                 C79055 / C78629 +
                                 C78828 * ((-(C78828 * std::pow(C78632, 7) *
                                              bs[7] * C79045) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78808) / C78629))));
    const double C32934 = C31658 * C78279;
    const double C32932 = C27372 * C78279;
    const double C32926 = C27364 * C78279;
    const double C33356 = C31956 * C78279;
    const double C33354 = C27899 * C78279;
    const double C33348 = C27896 * C78279;
    const double C33594 = C32160 * C78279;
    const double C33592 = C30064 * C78279;
    const double C34210 = C32670 * C78279;
    const double C34208 = C30701 * C78279;
    const double C36908 = C32158 * C78279;
    const double C37518 = C32668 * C78279;
    const double C59128 = C53812 * C78279;
    const double C59440 = C58026 * C78279;
    const double C59438 = C56147 * C78279;
    const double C59432 = C54122 * C78279;
    const double C62496 = C53820 * C78279;
    const double C62804 = C58024 * C78279;
    const double C62802 = C54125 * C78279;
    const double C63368 = C61992 * C78279;
    const double C63584 = C62156 * C78279;
    const double C78282 = C78279 / C78240;
    const double C78281 = C78232 * C78279;
    const double C78424 = C78418 / C78240;
    const double C78423 = C78325 * C78418;
    const double C78515 = C78509 / C78240;
    const double C78514 = C78340 * C78509;
    const double C28812 = C28810 * C2616;
    const double C28949 = C28810 * C220;
    const double C39038 = C28810 * C13178;
    const double C27386 = C27374 * C745;
    const double C27571 = C27374 * C220;
    const double C30994 = C27374 * C4989;
    const double C41182 = C27374 * C78295;
    const double C55188 = C55186 * C2616;
    const double C55258 = C55186 * C165;
    const double C69198 = C55186 * C13178;
    const double C53834 = C53822 * C745;
    const double C53927 = C53822 * C165;
    const double C60642 = C53822 * C4989;
    const double C72186 = C53822 * C78295;
    const double C30072 = C30066 * C745;
    const double C30291 = C30066 * C3422;
    const double C41890 = C30066 * C78295;
    const double C45962 = C30066 * C17952;
    const double C48220 = C30066 * C4989;
    const double C55940 = C30066 * C2688;
    const double C67522 = C30066 * C13246;
    const double C28813 = C28811 * C80966;
    const double C39039 = C28811 * C80966;
    const double C27387 = C27375 * C80954;
    const double C30995 = C27375 * C80954;
    const double C41183 = C27375 * C15341;
    const double C55189 = C55187 * C80966;
    const double C69199 = C55187 * C80966;
    const double C53835 = C53823 * C80954;
    const double C60643 = C53823 * C80954;
    const double C72187 = C53823 * C15341;
    const double C30073 = C30067 * C80954;
    const double C41891 = C30067 * C15341;
    const double C48221 = C30067 * C80954;
    const double C78762 = C78749 + C78759;
    const double C870 =
        2 * C78797 - (ae * C78794) / C78629 + C78628 * C78825 -
        (C78770 * C78766 * ce) / C78629 +
        C78770 *
            (C78770 * (2 * C78822 - (ae * C78815) / C78629 +
                       C78628 * ((-(ae * C78628 * C78808) / C78234) / C78214 -
                                 C78805 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78777) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78808) / C78629))) -
             (C78766 * ce) / C78629);
    const double C1896 =
        2 * C78855 - (ae * C78852) / C78629 + C78628 * C78883 -
        (C78828 * C78766 * ce) / C78629 +
        C78828 *
            (C78828 * (2 * C78880 - (ae * C78873) / C78629 +
                       C78628 * ((-(ae * C78628 * C78866) / C78234) / C78214 -
                                 C78863 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78835) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78866) / C78629))) -
             (C78766 * ce) / C78629);
    const double C2690 =
        C78770 *
            (3 * C78825 + (C78823 * ae) / C78214 +
             C78628 * (2 * C78822 - (ae * C78815) / C78629 +
                       C78628 * ((-(ae * C78628 * C78808) / C78234) / C78214 -
                                 C78805 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78777) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78808) / C78629)))) -
        ((3 * C78701 + C78628 * C78766 + C78747 * ae) * ce) / C78629;
    const double C3424 =
        C78828 *
            (3 * C78883 + (C78881 * ae) / C78214 +
             C78628 * (2 * C78880 - (ae * C78873) / C78629 +
                       C78628 * ((-(ae * C78628 * C78866) / C78234) / C78214 -
                                 C78863 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78835) /
                                            C78234) /
                                               C78214 -
                                           (ae * C78866) / C78629)))) -
        ((3 * C78701 + C78628 * C78766 + C78747 * ae) * ce) / C78629;
    const double C4100 =
        C78828 *
        (C78770 *
             (2 * C78822 - (ae * C78815) / C78629 +
              C78628 *
                  ((-(ae * C78628 * C78808) / C78234) / C78214 -
                   C78805 / C78629 +
                   C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78777) /
                              C78234) /
                                 C78214 -
                             (ae * C78808) / C78629))) -
         (C78766 * ce) / C78629);
    const double C4206 =
        C78828 * C78770 *
            (2 * C78880 - (ae * C78873) / C78629 +
             C78628 *
                 ((-(ae * C78628 * C78866) / C78234) / C78214 -
                  C78863 / C78629 +
                  C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78835) /
                             C78234) /
                                C78214 -
                            (ae * C78866) / C78629))) -
        (C78770 * C78766 * ce) / C78629;
    const double C115 = (4 * (2 * C78662 + C78628 * C78701 + C78682 * ae) +
                         C78628 * (3 * C78701 + C78628 * C78766 + C78747 * ae) +
                         (3 * C78682 + C78628 * C78747) * ae) /
                        C78214;
    const double C768 =
        (2 * C78662 + C78628 * C78701 + C78682 * ae + C78766 * C78942) / C78214;
    const double C1704 =
        (2 * C78662 + C78628 * C78701 + C78682 * ae + C78766 * C79064) / C78214;
    const double C2618 =
        (C78770 * (3 * C78701 + C78628 * C78766 + C78747 * ae)) / C78214;
    const double C3284 =
        (C78828 * (3 * C78701 + C78628 * C78766 + C78747 * ae)) / C78214;
    const double C3989 = (C78828 * C78770 * C78766) / C78214;
    const double C31811 =
        (4 * (2 * C79372 + C78770 * C79395 + C79384 * ae) +
         C78770 * (3 * C79395 + C78770 * C79885 + C79871 * ae) +
         (3 * C79384 + C78770 * C79871) * ae) /
        C78214;
    const double C32425 =
        (2 * C79372 + C78770 * C79395 + C79384 * ae + C79885 * C79064) / C78214;
    const double C34703 =
        (C78828 * (3 * C79395 + C78770 * C79885 + C79871 * ae)) / C78214;
    const double C62307 =
        (4 * (2 * C79680 + C78828 * C79703 + C79692 * ae) +
         C78828 * (3 * C79703 + C78828 * C80182 + C80160 * ae) +
         (3 * C79692 + C78828 * C80160) * ae) /
        C78214;
    const double C78767 = C78765 - C78746;
    const double C79886 = C79884 - C79870;
    const double C80183 = C80181 - C80159;
    const double C32939 = C81009 * C5670;
    const double C31655 = C81009 * C5672;
    const double C33599 = C81009 * C6157;
    const double C32155 = C81009 * C6159;
    const double C34485 = C81009 * C8505;
    const double C63373 = C81009 * C10480;
    const double C61989 = C81009 * C10482;
    const double C1173 = C81011 * C1154;
    const double C2913 = C81011 * C1155;
    const double C3568 = C81011 * C2088;
    const double C2104 = C81011 * C2091;
    const double C4437 = C81011 * C4425;
    const double C1596 = C81012 * C1582;
    const double C3212 = C81012 * C1583;
    const double C2533 = C81012 * C2514;
    const double C3879 = C81012 * C2515;
    const double C4903 = C81012 * C4891;
    const double C58130 = C58127 * C80962;
    const double C61641 = C58127 * C80962;
    const double C77913 = C58127 * C15344;
    const double C79881 = C79877 + C79878;
    const double C80178 = C80171 + C80175;
    const double C7195 = C7194 * C80972;
    const double C14083 = C7194 * C80972;
    const double C60290 = C60289 * C80972;
    const double C74901 = C60289 * C80972;
    const double C58035 = C58029 * C5657;
    const double C58122 = C58029 * C5066;
    const double C61640 = C58029 * C854;
    const double C77912 = C58029 * C78443;
    const double C60212 = C60210 * C5657;
    const double C60286 = C60210 * C6972;
    const double C74900 = C60210 * C13876;
    const double C12477 = C12476 * C80978;
    const double C19901 = C12476 * C80978;
    const double C53936 = C53930 * C80628;
    const double C55939 = C53930 * C80932;
    const double C67521 = C53930 * C13173;
    const double C53937 = C53931 * C80628;
    const double C62601 = C53931 * C80932;
    const double C65939 = C53931 * C13173;
    const double C55937 = C30179 * C80686;
    const double C59233 = C30179 * C4985;
    const double C65933 = C30179 * C80686;
    const double C68427 = C30179 * C80689;
    const double C69935 = C30179 * C80988;
    const double C57851 = C32252 * C80962;
    const double C60071 = C32252 * C6895;
    const double C61401 = C32252 * C80962;
    const double C68423 = C32252 * C15344;
    const double C74693 = C32252 * C80993;
    const double C57855 = C32253 * C4985;
    const double C61405 = C32253 * C80988;
    const double C62599 = C32253 * C80686;
    const double C65937 = C32253 * C80686;
    const double C77683 = C32253 * C80689;
    const double C57857 = C32254 * C80962;
    const double C61407 = C32254 * C80962;
    const double C77685 = C32254 * C15344;
    const double C60073 = C34562 * C80972;
    const double C74695 = C34562 * C80972;
    const double C64053 = C38460 * C80686;
    const double C75301 = C38460 * C80686;
    const double C27473 = C81009 * C868;
    const double C28881 = C81009 * C869;
    const double C55257 = C81009 * C1799;
    const double C53926 = C81009 * C1802;
    const double C30177 = C81009 * C4099;
    const double C33703 = C81009 * C6241;
    const double C37017 = C81009 * C6243;
    const double C63448 = C63447 * C80628;
    const double C54113 = C2007 * C80954;
    const double C55401 = C2007 * C2609;
    const double C60871 = C2007 * C80954;
    const double C67725 = C2007 * C15341;
    const double C69403 = C2007 * C80984;
    const double C54119 = C2009 * C738;
    const double C60875 = C2009 * C80982;
    const double C62803 = C2009 * C80598;
    const double C66145 = C2009 * C80598;
    const double C72413 = C2009 * C80601;
    const double C56143 = C4323 * C738;
    const double C59439 = C4323 * C80598;
    const double C66149 = C4323 * C80598;
    const double C67729 = C4323 * C80601;
    const double C74063 = C4323 * C80982;
    const double C2831 = C81011 * C1046;
    const double C1067 = C81011 * C1049;
    const double C3497 = C81011 * C1982;
    const double C2003 = C81011 * C1985;
    const double C4321 = C81011 * C4311;
    const double C62807 = C11281 * C80598;
    const double C66153 = C11281 * C80598;
    const double C59443 = C7899 * C80598;
    const double C68629 = C7899 * C80598;
    const double C63587 = C12103 * C80598;
    const double C70895 = C12103 * C80598;
    const double C27581 = C27575 * C80639;
    const double C33808 = C27575 * C80933;
    const double C44473 = C27575 * C17817;
    const double C27582 = C27576 * C80639;
    const double C30290 = C27576 * C80933;
    const double C45961 = C27576 * C17817;
    const double C30298 = C30295 * C80726;
    const double C37120 = C30295 * C9134;
    const double C40499 = C30295 * C80990;
    const double C44471 = C30295 * C80726;
    const double C47521 = C30295 * C80729;
    const double C27570 = C81009 * C958;
    const double C28951 = C81009 * C959;
    const double C54025 = C81009 * C1894;
    const double C55328 = C81009 * C1895;
    const double C30293 = C81009 * C4205;
    const double C33083 = C33082 * C80639;
    const double C37125 = C37124 * C80965;
    const double C40501 = C37124 * C80965;
    const double C47523 = C37124 * C20867;
    const double C33813 = C33812 * C80726;
    const double C44475 = C33812 * C80726;
    const double C1283 = C1279 * C80639;
    const double C2987 = C2986 * C80639;
    const double C2219 = C2215 * C80965;
    const double C9521 = C2215 * C80965;
    const double C21253 = C2215 * C20867;
    const double C3653 = C3652 * C80726;
    const double C18163 = C3652 * C80726;
    const double C4557 = C4555 * C80726;
    const double C20493 = C4555 * C80726;
    const double C12252 = C12250 + C12251;
    const double C27887 = C1393 * C80954;
    const double C29223 = C1393 * C2609;
    const double C31445 = C1393 * C80954;
    const double C39441 = C1393 * C80984;
    const double C41633 = C1393 * C15341;
    const double C27893 = C1395 * C738;
    const double C31449 = C1395 * C80982;
    const double C33355 = C1395 * C80598;
    const double C40057 = C1395 * C80598;
    const double C41637 = C1395 * C80601;
    const double C30697 = C4673 * C738;
    const double C34209 = C4673 * C80598;
    const double C40897 = C4673 * C80598;
    const double C42483 = C4673 * C80601;
    const double C48813 = C4673 * C80982;
    const double C3059 = C81012 * C1368;
    const double C1389 = C81012 * C1371;
    const double C3725 = C81012 * C2304;
    const double C2325 = C81012 * C2307;
    const double C4671 = C81012 * C4661;
    const double C33359 = C7341 * C80598;
    const double C40061 = C7341 * C80598;
    const double C37521 = C11601 * C80598;
    const double C40901 = C11601 * C80598;
    const double C34213 = C8219 * C80598;
    const double C43375 = C8219 * C80598;
    const double C1503 = C1499 * C80962;
    const double C5535 = C1499 * C80962;
    const double C15893 = C1499 * C15344;
    const double C3143 = C3142 * C80686;
    const double C13667 = C3142 * C80686;
    const double C3799 = C3798 * C80628;
    const double C2435 = C2431 * C80628;
    const double C4791 = C4789 * C80686;
    const double C16759 = C4789 * C80686;
    const double C8326 = C8324 + C8325;
    const double C11706 = C11704 + C11705;
    const double C78285 = C78282 - C78277;
    const double C4988 = C78282 + (C78268 * ce) / C78234;
    const double C78284 = C78281 + C80916;
    const double C78429 = C78424 - C78425;
    const double C78428 = C78423 + C80932;
    const double C78520 = C78515 - C78516;
    const double C78519 = C78514 + C80933;
    const double C122 =
        4 * (2 * C78699 - (ae * C78700) / C78629 - (C78701 * ce) / C78629 +
             C78628 * C78762) +
        (((-3 * C78700) / C78234 + C78628 * C78767 - (C78747 * ce) / C78234) *
         ae) /
            C78214 -
        ((3 * C78701 + C78628 * C78766 + C78747 * ae) * ce) / C78629 +
        C78628 *
            (3 * C78762 + (C78767 * ae) / C78214 - (C78766 * ce) / C78629 +
             C78628 *
                 (2 * C78756 - (ae * C78757) / C78629 - (C78758 * ce) / C78629 +
                  C78628 * ((-(ae * C78745) / C78234) / C78214 -
                            C78744 / C78629 - (C78748 * ce) / C78629 +
                            C78628 * ((-(C78732 * ce) / C78234) / C78214 -
                                      (ae * C78729) / C78629 -
                                      (C78628 *
                                       (C78709 * C78710 +
                                        C78636 * bs[7] * std::pow(C78632, 7)) *
                                       C78637) /
                                          C78629))));
    const double C1050 =
        2 * C78912 - (C78909 * ce) / C78629 + C78628 * C78938 +
        (C78770 * C78767 * ae) / C78214 +
        C78770 *
            ((C78767 * ae) / C78214 +
             C78770 * (2 * C78936 - (C78929 * ce) / C78629 +
                       C78628 * ((-(C78628 * C78923 * ce) / C78234) / C78214 -
                                 C78920 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78892) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629))));
    const double C2308 =
        2 * C79013 - (C79010 * ce) / C78629 + C78628 * C79039 +
        (C78828 * C78767 * ae) / C78214 +
        C78828 *
            ((C78767 * ae) / C78214 +
             C78828 * (2 * C79037 - (C79030 * ce) / C78629 +
                       C78628 * ((-(C78628 * C79024 * ce) / C78234) / C78214 -
                                 C79021 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78993) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629))));
    const double C2620 =
        3 * ((-(ae * C78770 * C78691) / C78234) / C78214 - C79090 / C78629 -
             (C78770 * C78692 * ce) / C78629 + C78628 * C79255) +
        (C78770 * C78767 * ae) / C78214 - (C78770 * C78766 * ce) / C78629 +
        C78628 *
            (2 * C79255 - (ae * C78770 * C78757) / C78629 -
             (C78770 * C78758 * ce) / C78629 +
             C78628 * ((-(ae * C78770 * C78745) / C78234) / C78214 -
                       C79245 / C78629 - (C78770 * C78748 * ce) / C78629 +
                       C78628 * ((-(C78770 * C78732 * ce) / C78234) / C78214 -
                                 (ae * C78770 * C78729) / C78629 -
                                 (C78628 * C78770 *
                                  (C78709 * C78710 +
                                   C78636 * bs[7] * std::pow(C78632, 7)) *
                                  C78637) /
                                     C78629)));
    const double C2826 =
        (((-3 * C78700) / C78234 + C78628 * C78767 - (C78747 * ce) / C78234) *
         ae) /
            C78214 +
        C78770 *
            (3 * C78938 - (C78935 * ce) / C78629 +
             C78628 * (2 * C78936 - (C78929 * ce) / C78629 +
                       C78628 * ((-(C78628 * C78923 * ce) / C78234) / C78214 -
                                 C78920 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78892) /
                                            C78234) /
                                               C78214 -
                                           (C78923 * ce) / C78629))));
    const double C3286 =
        3 * ((-(ae * C78828 * C78691) / C78234) / C78214 - C79168 / C78629 -
             (C78828 * C78692 * ce) / C78629 + C78628 * C79277) +
        (C78828 * C78767 * ae) / C78214 - (C78828 * C78766 * ce) / C78629 +
        C78628 *
            (2 * C79277 - (ae * C78828 * C78757) / C78629 -
             (C78828 * C78758 * ce) / C78629 +
             C78628 * ((-(ae * C78828 * C78745) / C78234) / C78214 -
                       C79267 / C78629 - (C78828 * C78748 * ce) / C78629 +
                       C78628 * ((-(C78828 * C78732 * ce) / C78234) / C78214 -
                                 (ae * C78828 * C78729) / C78629 -
                                 (C78628 * C78828 *
                                  (C78709 * C78710 +
                                   C78636 * bs[7] * std::pow(C78632, 7)) *
                                  C78637) /
                                     C78629)));
    const double C3720 =
        (((-3 * C78700) / C78234 + C78628 * C78767 - (C78747 * ce) / C78234) *
         ae) /
            C78214 +
        C78828 *
            (3 * C79039 - (C79036 * ce) / C78629 +
             C78628 * (2 * C79037 - (C79030 * ce) / C78629 +
                       C78628 * ((-(C78628 * C79024 * ce) / C78234) / C78214 -
                                 C79021 / C78629 +
                                 C78628 * ((-(C78628 * std::pow(C78632, 7) *
                                              bs[7] * C78993) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629))));
    const double C4312 =
        (C78828 * C78767 * ae) / C78214 +
        C78770 * C78828 *
            (2 * C78936 - (C78929 * ce) / C78629 +
             C78628 *
                 ((-(C78628 * C78923 * ce) / C78234) / C78214 -
                  C78920 / C78629 +
                  C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78892) /
                             C78234) /
                                C78214 -
                            (C78923 * ce) / C78629)));
    const double C4662 =
        (C78770 * C78767 * ae) / C78214 +
        C78828 * C78770 *
            (2 * C79037 - (C79030 * ce) / C78629 +
             C78628 *
                 ((-(C78628 * C79024 * ce) / C78234) / C78214 -
                  C79021 / C78629 +
                  C78628 * ((-(C78628 * std::pow(C78632, 7) * bs[7] * C78993) /
                             C78234) /
                                C78214 -
                            (C79024 * ce) / C78629)));
    const double C116 =
        4 * ((-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
             (C78682 * ce) / C78234) +
        C78628 * ((-3 * C78700) / C78234 + C78628 * C78767 -
                  (C78747 * ce) / C78234) -
        ((3 * C78682 + C78628 * C78747) * ce) / C78234;
    const double C769 = (-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
                        (C78682 * ce) / C78234 + C78767 * C78942;
    const double C1705 = (-2 * C78661) / C78234 - (C78628 * C78700) / C78234 -
                         (C78682 * ce) / C78234 + C78767 * C79064;
    const double C2619 = C78770 * ((-3 * C78700) / C78234 + C78628 * C78767 -
                                   (C78747 * ce) / C78234);
    const double C3285 = C78828 * ((-3 * C78700) / C78234 + C78628 * C78767 -
                                   (C78747 * ce) / C78234);
    const double C3990 = C78828 * C78770 * C78767;
    const double C32753 =
        2 * C79464 - (C79461 * ce) / C78629 + C78770 * C79930 +
        (C78828 * C79886 * ae) / C78214 +
        C78828 *
            ((C79886 * ae) / C78214 +
             C78828 * (2 * C79928 - (C79920 * ce) / C78629 +
                       C78770 * ((-(C78770 * C79024 * ce) / C78234) / C78214 -
                                 C79055 / C78629 +
                                 C78770 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C79045) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629))));
    const double C34771 =
        3 * ((-(ae * C78828 * C79382) / C78234) / C78214 - C79573 / C78629 -
             (C78828 * C79385 * ce) / C78629 + C78770 * C79987) +
        (C78828 * C79886 * ae) / C78214 - (C78828 * C79885 * ce) / C78629 +
        C78770 *
            (2 * C79987 - (ae * C78828 * C79875) / C78629 -
             (C78828 * C79876 * ce) / C78629 +
             C78770 * ((-(ae * C78828 * C79855) / C78234) / C78214 -
                       C79981 / C78629 - (C78828 * C79858 * ce) / C78629 +
                       C78770 * ((-(C78828 * C78923 * ce) / C78234) / C78214 -
                                 (ae * C78828 * C78808) / C78629 -
                                 (C78770 * C78828 *
                                  (C78709 * C78710 +
                                   C78942 * bs[7] * std::pow(C78632, 7)) *
                                  C78637) /
                                     C78629)));
    const double C34981 =
        (((-3 * C79394) / C78234 + C78770 * C79886 - (C79871 * ce) / C78234) *
         ae) /
            C78214 +
        C78828 *
            (3 * C79930 - (C79926 * ce) / C78629 +
             C78770 * (2 * C79928 - (C79920 * ce) / C78629 +
                       C78770 * ((-(C78770 * C79024 * ce) / C78234) / C78214 -
                                 C79055 / C78629 +
                                 C78770 * ((-(C78770 * std::pow(C78632, 7) *
                                              bs[7] * C79045) /
                                            C78234) /
                                               C78214 -
                                           (C79024 * ce) / C78629))));
    const double C31707 =
        4 * ((-2 * C79371) / C78234 - (C78770 * C79394) / C78234 -
             (C79384 * ce) / C78234) +
        C78770 * ((-3 * C79394) / C78234 + C78770 * C79886 -
                  (C79871 * ce) / C78234) -
        ((3 * C79384 + C78770 * C79871) * ce) / C78234;
    const double C32243 = (-2 * C79371) / C78234 - (C78770 * C79394) / C78234 -
                          (C79384 * ce) / C78234 + C79886 * C79064;
    const double C34557 = C78828 * ((-3 * C79394) / C78234 + C78770 * C79886 -
                                    (C79871 * ce) / C78234);
    const double C62095 =
        4 * ((-2 * C79679) / C78234 - (C78828 * C79702) / C78234 -
             (C79692 * ce) / C78234) +
        C78828 * ((-3 * C79702) / C78234 + C78828 * C80183 -
                  (C80160 * ce) / C78234) -
        ((3 * C79692 + C78828 * C80160) * ce) / C78234;
    const double C32941 = C32938 + C32939;
    const double C31660 = C31654 + C31655;
    const double C33601 = C33598 + C33599;
    const double C32162 = C32154 + C32155;
    const double C34488 = C34484 + C34485;
    const double C63375 = C63372 + C63373;
    const double C61994 = C61988 + C61989;
    const double C1177 = C1172 + C1173;
    const double C2914 = C2912 + C2913;
    const double C3570 = C3567 + C3568;
    const double C2109 = C2103 + C2104;
    const double C4439 = C4436 + C4437;
    const double C1601 = C1595 + C1596;
    const double C3214 = C3211 + C3212;
    const double C2537 = C2532 + C2533;
    const double C3880 = C3878 + C3879;
    const double C4905 = C4902 + C4903;
    const double C31855 =
        4 * (2 * C79393 - (ae * C79394) / C78629 - (C79395 * ce) / C78629 +
             C78770 * C79881) +
        (((-3 * C79394) / C78234 + C78770 * C79886 - (C79871 * ce) / C78234) *
         ae) /
            C78214 -
        ((3 * C79395 + C78770 * C79885 + C79871 * ae) * ce) / C78629 +
        C78770 *
            (3 * C79881 + (C79886 * ae) / C78214 - (C79885 * ce) / C78629 +
             C78770 *
                 (2 * C79874 - (ae * C79875) / C78629 - (C79876 * ce) / C78629 +
                  C78770 * ((-(ae * C79855) / C78234) / C78214 -
                            C78958 / C78629 - (C79858 * ce) / C78629 +
                            C78770 * ((-(C78923 * ce) / C78234) / C78214 -
                                      (ae * C78808) / C78629 -
                                      (C78770 *
                                       (C78709 * C78710 +
                                        C78942 * bs[7] * std::pow(C78632, 7)) *
                                       C78637) /
                                          C78629))));
    const double C62394 =
        4 * (2 * C79701 - (ae * C79702) / C78629 - (C79703 * ce) / C78629 +
             C78828 * C80178) +
        (((-3 * C79702) / C78234 + C78828 * C80183 - (C80160 * ce) / C78234) *
         ae) /
            C78214 -
        ((3 * C79703 + C78828 * C80182 + C80160 * ae) * ce) / C78629 +
        C78828 *
            (3 * C80178 + (C80183 * ae) / C78214 - (C80182 * ce) / C78629 +
             C78828 *
                 (2 * C80172 - (ae * C80173) / C78629 - (C80174 * ce) / C78629 +
                  C78828 * ((-(ae * C80157) / C78234) / C78214 -
                            C79080 / C78629 - (C80161 * ce) / C78629 +
                            C78828 * ((-(C79024 * ce) / C78234) / C78214 -
                                      (ae * C78866) / C78629 -
                                      (C78828 *
                                       (C78709 * C78710 +
                                        C79064 * bs[7] * std::pow(C78632, 7)) *
                                       C78637) /
                                          C78629))));
    const double C27479 = C27472 + C27473;
    const double C28882 = C28880 + C28881;
    const double C55259 = C55256 + C55257;
    const double C53933 = C53925 + C53926;
    const double C30180 = C30176 + C30177;
    const double C33704 = C33702 + C33703;
    const double C37018 = C37016 + C37017;
    const double C2833 = C2830 + C2831;
    const double C1075 = C1066 + C1067;
    const double C3499 = C3496 + C3497;
    const double C2011 = C2002 + C2003;
    const double C4325 = C4320 + C4321;
    const double C27577 = C27569 + C27570;
    const double C28952 = C28950 + C28951;
    const double C54031 = C54024 + C54025;
    const double C55329 = C55327 + C55328;
    const double C30296 = C30292 + C30293;
    const double C12253 = C12252 * C80978;
    const double C19695 = C12252 * C80978;
    const double C3061 = C3058 + C3059;
    const double C1397 = C1388 + C1389;
    const double C3727 = C3724 + C3725;
    const double C2333 = C2324 + C2325;
    const double C4675 = C4670 + C4671;
    const double C8327 = C8326 * C80962;
    const double C17653 = C8326 * C15344;
    const double C19177 = C8326 * C80962;
    const double C11707 = C11706 * C80686;
    const double C15161 = C11706 * C80686;
    const double C41178 = C27370 * C78285;
    const double C41174 = C27366 * C78285;
    const double C41634 = C1394 * C78285;
    const double C41630 = C1390 * C78285;
    const double C41886 = C30062 * C78285;
    const double C42480 = C4672 * C78285;
    const double C67418 = C53814 * C78285;
    const double C67726 = C4322 * C78285;
    const double C67722 = C2004 * C78285;
    const double C72182 = C53818 * C78285;
    const double C72410 = C2008 * C78285;
    const double C97 =
        (C78285 / C78240 + ((C78232 * C78295 + C15341) * ce) / C78234) /
            C78240 -
        ((C78232 * (C78295 / C78240 + (0 * ce) / C78234) + C80966) * de) /
            C78234;
    const double C2615 =
        C78285 / C78240 - ((C78232 * C78295 + C15341) * de) / C78234;
    const double C13177 =
        C78285 / C78240 + ((C78232 * C78295 + C15341) * ce) / C78234;
    const double C30990 = C27370 * C4988;
    const double C30986 = C27366 * C4988;
    const double C31446 = C1394 * C4988;
    const double C31442 = C1390 * C4988;
    const double C48216 = C30062 * C4988;
    const double C48810 = C4672 * C4988;
    const double C60638 = C53818 * C4988;
    const double C60634 = C53814 * C4988;
    const double C60872 = C2008 * C4988;
    const double C60868 = C2004 * C4988;
    const double C74060 = C4322 * C4988;
    const double C78286 = C78284 * de;
    const double C4987 = C78271 + (C78284 * ce) / C78234 + C78260;
    const double C15654 = C1070 * C78429;
    const double C15650 = C1068 * C78429;
    const double C15888 = C1392 * C78429;
    const double C15884 = C1390 * C78429;
    const double C17348 = C4322 * C78429;
    const double C17648 = C4672 * C78429;
    const double C68424 = C30062 * C78429;
    const double C68420 = C30064 * C78429;
    const double C68730 = C56147 * C78429;
    const double C77680 = C32158 * C78429;
    const double C77908 = C58024 * C78429;
    const double C5719 =
        (C78429 / C78240 + ((C78325 * C78443 + C15344) * ce) / C78234) /
            C78240 -
        ((C78325 * (C78443 / C78240 + (0 * ce) / C78234) + C80972) * de) /
            C78234;
    const double C6971 =
        C78429 / C78240 - ((C78325 * C78443 + C15344) * de) / C78234;
    const double C13875 =
        C78429 / C78240 + ((C78325 * C78443 + C15344) * ce) / C78234;
    const double C78432 = C78428 * de;
    const double C21248 = C2006 * C78520;
    const double C21244 = C2004 * C78520;
    const double C21482 = C2328 * C78520;
    const double C21478 = C2326 * C78520;
    const double C22076 = C4322 * C78520;
    const double C22376 = C4672 * C78520;
    const double C47518 = C30062 * C78520;
    const double C47514 = C30064 * C78520;
    const double C48114 = C30701 * C78520;
    const double C52210 = C32160 * C78520;
    const double C52660 = C32670 * C78520;
    const double C10579 =
        (C78520 / C78240 + ((C78340 * C78534 + C20867) * ce) / C78234) /
            C78240 -
        ((C78340 * (C78534 / C78240 + (0 * ce) / C78234) + C80978) * de) /
            C78234;
    const double C12025 =
        C78520 / C78240 - ((C78340 * C78534 + C20867) * de) / C78234;
    const double C19487 =
        C78520 / C78240 + ((C78340 * C78534 + C20867) * ce) / C78234;
    const double C78523 = C78519 * de;
    const double C32943 = C32941 * C80598;
    const double C39653 = C32941 * C80598;
    const double C31664 = C31660 * C80588;
    const double C33603 = C33601 * C80598;
    const double C42783 = C33601 * C80598;
    const double C32168 = C32162 * C80588;
    const double C34490 = C34488 * C80588;
    const double C63377 = C63375 * C80598;
    const double C70693 = C63375 * C80598;
    const double C61998 = C61994 * C80588;
    const double C1181 = C1177 * C80962;
    const double C5301 = C1177 * C80962;
    const double C15659 = C1177 * C15344;
    const double C2915 = C2914 * C80686;
    const double C13457 = C2914 * C80686;
    const double C3571 = C3570 * C80628;
    const double C2113 = C2109 * C80628;
    const double C4441 = C4439 * C80686;
    const double C16461 = C4439 * C80686;
    const double C1605 = C1601 * C80639;
    const double C3215 = C3214 * C80639;
    const double C2541 = C2537 * C80965;
    const double C9755 = C2537 * C80965;
    const double C21487 = C2537 * C20867;
    const double C3881 = C3880 * C80726;
    const double C18373 = C3880 * C80726;
    const double C4907 = C4905 * C80726;
    const double C20791 = C4905 * C80726;
    const double C55260 = C55259 * C80628;
    const double C53939 = C53933 * C80628;
    const double C55941 = C30180 * C80686;
    const double C67523 = C30180 * C80686;
    const double C59235 = C33704 * C80962;
    const double C68429 = C33704 * C15344;
    const double C69937 = C33704 * C80962;
    const double C62603 = C37018 * C80686;
    const double C65941 = C37018 * C80686;
    const double C55403 = C3499 * C80966;
    const double C69405 = C3499 * C80966;
    const double C54121 = C2011 * C80954;
    const double C60877 = C2011 * C80954;
    const double C72415 = C2011 * C15341;
    const double C56145 = C4325 * C80954;
    const double C67731 = C4325 * C15341;
    const double C74065 = C4325 * C80954;
    const double C27583 = C27577 * C80639;
    const double C28953 = C28952 * C80639;
    const double C30299 = C30296 * C80726;
    const double C45963 = C30296 * C80726;
    const double C29225 = C3061 * C80966;
    const double C39443 = C3061 * C80966;
    const double C27895 = C1397 * C80954;
    const double C31451 = C1397 * C80954;
    const double C41639 = C1397 * C15341;
    const double C30699 = C4675 * C80954;
    const double C42485 = C4675 * C15341;
    const double C48815 = C4675 * C80954;
    const double C28804 = C27368 * C2615;
    const double C29222 = C1392 * C2615;
    const double C55180 = C53816 * C2615;
    const double C55400 = C2006 * C2615;
    const double C39036 = C27368 * C13177;
    const double C39440 = C1392 * C13177;
    const double C69196 = C53816 * C13177;
    const double C69402 = C2006 * C13177;
    const double C78287 = C78286 / C78234;
    const double C30992 = C27372 * C4987;
    const double C30984 = C27364 * C4987;
    const double C31448 = C27899 * C4987;
    const double C31440 = C27896 * C4987;
    const double C48218 = C30064 * C4987;
    const double C48812 = C30701 * C4987;
    const double C60640 = C53820 * C4987;
    const double C60632 = C53812 * C4987;
    const double C60874 = C54125 * C4987;
    const double C60866 = C54122 * C4987;
    const double C74062 = C56147 * C4987;
    const double C7189 = C1072 * C6971;
    const double C7413 = C1394 * C6971;
    const double C60070 = C32160 * C6971;
    const double C60284 = C58026 * C6971;
    const double C14080 = C1072 * C13875;
    const double C14286 = C1394 * C13875;
    const double C74692 = C32160 * C13875;
    const double C74898 = C58026 * C13875;
    const double C78434 = C78432 / C78234;
    const double C12247 = C2008 * C12025;
    const double C12471 = C2330 * C12025;
    const double C38533 = C32158 * C12025;
    const double C38959 = C32668 * C12025;
    const double C19692 = C2008 * C19487;
    const double C19898 = C2330 * C19487;
    const double C49816 = C32158 * C19487;
    const double C50220 = C32668 * C19487;
    const double C78525 = C78523 / C78234;
    const double C78288 = C78271 - C78287;
    const double C78436 = C78422 - C78434;
    const double C78527 = C78513 - C78525;
    const double C78289 = C78288 + C78260;
    const double C78437 = C78436 + C78407;
    const double C78528 = C78527 + C78498;
    const double C41180 = C27372 * C78289;
    const double C41172 = C27364 * C78289;
    const double C41636 = C27899 * C78289;
    const double C41628 = C27896 * C78289;
    const double C41888 = C30064 * C78289;
    const double C42482 = C30701 * C78289;
    const double C67416 = C53812 * C78289;
    const double C67728 = C56147 * C78289;
    const double C67720 = C54122 * C78289;
    const double C72184 = C53820 * C78289;
    const double C72412 = C54125 * C78289;
    const double C94 =
        (((((0 - (C78232 * C78233) / C78234) * ce) / C78234 -
           (0 * de) / C78246 + (2 * C78235) / C78234) /
              C78240 -
          ((C78232 * C78269 + 0) * de) / C78234 + C78252 - C78262) /
             C78240 +
         ((C78232 * C78283 + 0) * ce) / C78234) /
            C78240 -
        ((C78232 * (C78283 / C78240 +
                    ((C78232 * C78289 + C80593) * ce) / C78234 + C78285) +
          C81010) *
         de) /
            C78234 +
        C78289 / C78240 + ((C78232 * C78285 + C80601) * ce) / C78234 +
        2 * (C78260 / C78240 - (0 * de) / C78234);
    const double C95 =
        (C78283 / C78240 + ((C78232 * C78289 + C80593) * ce) / C78234 +
         C78285) /
            C78240 -
        ((C78232 * (C78289 / C78240 +
                    ((C78232 * C78285 + C80601) * ce) / C78234 + 2 * C78295) +
          C81000) *
         de) /
            C78234 +
        2 * (C78285 / C78240 + ((C78232 * C78295 + C15341) * ce) / C78234);
    const double C96 =
        (C78289 / C78240 + ((C78232 * C78285 + C80601) * ce) / C78234 +
         2 * C78295) /
            C78240 -
        ((C78232 *
              (C78285 / C78240 + ((C78232 * C78295 + C15341) * ce) / C78234) +
          C80984) *
         de) /
            C78234 +
        3 * (C78295 / C78240 + (0 * ce) / C78234);
    const double C2613 =
        C78283 / C78240 - ((C78232 * C78289 + C80593) * de) / C78234 + C78285;
    const double C2614 = C78289 / C78240 -
                         ((C78232 * C78285 + C80601) * de) / C78234 +
                         2 * C78295;
    const double C13175 =
        C78283 / C78240 + ((C78232 * C78289 + C80593) * ce) / C78234 + C78285;
    const double C13176 = C78289 / C78240 +
                          ((C78232 * C78285 + C80601) * ce) / C78234 +
                          2 * C78295;
    const double C15656 = C307 * C78437;
    const double C15648 = C305 * C78437;
    const double C15890 = C522 * C78437;
    const double C15882 = C520 * C78437;
    const double C17350 = C2004 * C78437;
    const double C17650 = C2326 * C78437;
    const double C68426 = C53814 * C78437;
    const double C68418 = C53812 * C78437;
    const double C68728 = C54122 * C78437;
    const double C77682 = C53820 * C78437;
    const double C77910 = C54125 * C78437;
    const double C5716 =
        (((((0 - (C78325 * C78390) / C78234) * ce) / C78234 -
           (0 * de) / C78246 + (2 * C78391) / C78234) /
              C78240 -
          ((C78325 * C78426 + 0) * de) / C78234 + C78400 - C78413) /
             C78240 +
         ((C78325 * C78435 + 0) * ce) / C78234) /
            C78240 -
        ((C78325 * (C78435 / C78240 +
                    ((C78325 * C78437 + C80682) * ce) / C78234 + C78429) +
          C81013) *
         de) /
            C78234 +
        C78437 / C78240 + ((C78325 * C78429 + C80689) * ce) / C78234 +
        2 * (C78407 / C78240 - (0 * de) / C78234);
    const double C5717 =
        (C78435 / C78240 + ((C78325 * C78437 + C80682) * ce) / C78234 +
         C78429) /
            C78240 -
        ((C78325 * (C78437 / C78240 +
                    ((C78325 * C78429 + C80689) * ce) / C78234 + 2 * C78443) +
          C81006) *
         de) /
            C78234 +
        2 * (C78429 / C78240 + ((C78325 * C78443 + C15344) * ce) / C78234);
    const double C5718 =
        (C78437 / C78240 + ((C78325 * C78429 + C80689) * ce) / C78234 +
         2 * C78443) /
            C78240 -
        ((C78325 *
              (C78429 / C78240 + ((C78325 * C78443 + C15344) * ce) / C78234) +
          C80993) *
         de) /
            C78234 +
        3 * (C78443 / C78240 + (0 * ce) / C78234);
    const double C6969 =
        C78435 / C78240 - ((C78325 * C78437 + C80682) * de) / C78234 + C78429;
    const double C6970 = C78437 / C78240 -
                         ((C78325 * C78429 + C80689) * de) / C78234 +
                         2 * C78443;
    const double C13873 =
        C78435 / C78240 + ((C78325 * C78437 + C80682) * ce) / C78234 + C78429;
    const double C13874 = C78437 / C78240 +
                          ((C78325 * C78429 + C80689) * ce) / C78234 +
                          2 * C78443;
    const double C21250 = C307 * C78528;
    const double C21242 = C305 * C78528;
    const double C21484 = C522 * C78528;
    const double C21476 = C520 * C78528;
    const double C22078 = C1068 * C78528;
    const double C22378 = C1390 * C78528;
    const double C47520 = C27366 * C78528;
    const double C47512 = C27364 * C78528;
    const double C48112 = C27896 * C78528;
    const double C52212 = C27372 * C78528;
    const double C52662 = C27899 * C78528;
    const double C10576 =
        (((((0 - (C78340 * C78481) / C78234) * ce) / C78234 -
           (0 * de) / C78246 + (2 * C78482) / C78234) /
              C78240 -
          ((C78340 * C78517 + 0) * de) / C78234 + C78491 - C78504) /
             C78240 +
         ((C78340 * C78526 + 0) * ce) / C78234) /
            C78240 -
        ((C78340 * (C78526 / C78240 +
                    ((C78340 * C78528 + C80722) * ce) / C78234 + C78520) +
          C81014) *
         de) /
            C78234 +
        C78528 / C78240 + ((C78340 * C78520 + C80729) * ce) / C78234 +
        2 * (C78498 / C78240 - (0 * de) / C78234);
    const double C10577 =
        (C78526 / C78240 + ((C78340 * C78528 + C80722) * ce) / C78234 +
         C78520) /
            C78240 -
        ((C78340 * (C78528 / C78240 +
                    ((C78340 * C78520 + C80729) * ce) / C78234 + 2 * C78534) +
          C81008) *
         de) /
            C78234 +
        2 * (C78520 / C78240 + ((C78340 * C78534 + C20867) * ce) / C78234);
    const double C10578 =
        (C78528 / C78240 + ((C78340 * C78520 + C80729) * ce) / C78234 +
         2 * C78534) /
            C78240 -
        ((C78340 *
              (C78520 / C78240 + ((C78340 * C78534 + C20867) * ce) / C78234) +
          C80996) *
         de) /
            C78234 +
        3 * (C78534 / C78240 + (0 * ce) / C78234);
    const double C12023 =
        C78526 / C78240 - ((C78340 * C78528 + C80722) * de) / C78234 + C78520;
    const double C12024 = C78528 / C78240 -
                          ((C78340 * C78520 + C80729) * de) / C78234 +
                          2 * C78534;
    const double C19485 =
        C78526 / C78240 + ((C78340 * C78528 + C80722) * ce) / C78234 + C78520;
    const double C19486 = C78528 / C78240 +
                          ((C78340 * C78520 + C80729) * ce) / C78234 +
                          2 * C78534;
    const double C28800 = C27364 * C2613;
    const double C29218 = C27896 * C2613;
    const double C55176 = C53812 * C2613;
    const double C55396 = C54122 * C2613;
    const double C28802 = C27366 * C2614;
    const double C29220 = C1390 * C2614;
    const double C55178 = C53814 * C2614;
    const double C55398 = C2004 * C2614;
    const double C39032 = C27364 * C13175;
    const double C39436 = C27896 * C13175;
    const double C69192 = C53812 * C13175;
    const double C69398 = C54122 * C13175;
    const double C39034 = C27366 * C13176;
    const double C39438 = C1390 * C13176;
    const double C69194 = C53814 * C13176;
    const double C69400 = C2004 * C13176;
    const double C7185 = C305 * C6969;
    const double C7409 = C520 * C6969;
    const double C60066 = C53812 * C6969;
    const double C60280 = C54122 * C6969;
    const double C7187 = C1068 * C6970;
    const double C7411 = C1390 * C6970;
    const double C60068 = C30064 * C6970;
    const double C60282 = C56147 * C6970;
    const double C14076 = C305 * C13873;
    const double C14282 = C520 * C13873;
    const double C74688 = C53812 * C13873;
    const double C74894 = C54122 * C13873;
    const double C14078 = C1068 * C13874;
    const double C14284 = C1390 * C13874;
    const double C74690 = C30064 * C13874;
    const double C74896 = C56147 * C13874;
    const double C12243 = C305 * C12023;
    const double C12467 = C520 * C12023;
    const double C38529 = C27364 * C12023;
    const double C38955 = C27896 * C12023;
    const double C12245 = C2004 * C12024;
    const double C12469 = C2326 * C12024;
    const double C38531 = C30064 * C12024;
    const double C38957 = C30701 * C12024;
    const double C19688 = C305 * C19485;
    const double C19894 = C520 * C19485;
    const double C49812 = C27364 * C19485;
    const double C50216 = C27896 * C19485;
    const double C19690 = C2004 * C19486;
    const double C19896 = C2326 * C19486;
    const double C49814 = C30064 * C19486;
    const double C50218 = C30701 * C19486;
    d2eexx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78289 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80593 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78285 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80601 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C78295 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C15341) *
              C81011 * C81012 * C80639 * C80682 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78285 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80593 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78289) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80601 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C78295 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C15341) *
              C81011 * C81012 * C80639 * C80689 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78289 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80593 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78285 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80601 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C78295 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C15341) *
              C81011 * C81012 * C80639 * C15344)) /
        (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78437 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80682 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78429 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80689 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78443 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C15344) *
              C81011 * C81012 * C80593 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78429 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80682 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78437) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80689 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78443 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C15344) *
              C81011 * C81012 * C80601 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C78437 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80682 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C78429 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80689 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C78443 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C15344) *
              C81011 * C81012 * C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C80682 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80689 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C15344) *
              C80593 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80689 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C80682 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C15344) *
              C80601 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C80682 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80689 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C15344) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C78289 +
                     (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
                     C306 * C80601 + C307 * C78295 + C308 * C15341) *
                        C81012 * C81 +
                    (C305 * C78289 + C306 * C80593 - C307 * C78285 -
                     C308 * C80601 + C309 * C78295 + C310 * C15341) *
                        C81012 * C82) *
                       C80639 * C80682 +
                   ((C1068 * C78285 -
                     ((C275 * C757 + C81011 * C1043) * C80593 +
                      (C275 * C748 + C81011 * C1036) * C78289) +
                     C1069 * C80601 - C1070 * C78295 - C1071 * C15341) *
                        C81012 * C81 +
                    (C1070 * C78285 - (C1069 * C80593 + C1068 * C78289) +
                     C1071 * C80601 - C2832 * C78295 - C2833 * C15341) *
                        C81012 * C82) *
                       C80639 * C80689 +
                   (((C275 * C750 + C81011 * C1039) * C78289 +
                     (C275 * C764 + C81011 * C1047) * C80593 - C1072 * C78285 -
                     C1073 * C80601 + C1074 * C78295 + C1075 * C15341) *
                        C81012 * C81 +
                    (C1072 * C78289 + C1073 * C80593 - C1074 * C78285 -
                     C1075 * C80601 + (C275 * C753 + C81011 * C1042) * C78295 +
                     (C275 * C769 + C81011 * C1050) * C15341) *
                        C81012 * C82) *
                       C80639 * C15344)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C78437 +
                     (C275 * C166 + C81011 * C354) * C80682 -
                     (C275 * C748 + C81011 * C1036) * C78429 -
                     (C275 * C856 + C81011 * C1149) * C80689 +
                     (C275 * C750 + C81011 * C1039) * C78443 +
                     (C275 * C857 + C81011 * C1150) * C15344) *
                        C81012 * C81 +
                    (C15648 + C15649 - C15650 - C15651 + C15652 + C15653) *
                        C81012 * C82) *
                       C80593 +
                   ((C15650 - (C15649 + C15648) + C15651 - C15652 - C15653) *
                        C81012 * C81 +
                    (C15654 - (C15655 + C15656) + C15657 - C15658 - C15659) *
                        C81012 * C82) *
                       C80601 +
                   ((C15656 + C15655 - C15654 - C15657 + C15658 + C15659) *
                        C81012 * C81 +
                    (C309 * C78437 + C375 * C80682 - C2832 * C78429 -
                     C2914 * C80689 + (C275 * C753 + C81011 * C1042) * C78443 +
                     (C275 * C862 + C81011 * C1156) * C15344) *
                        C81012 * C82) *
                       C15341) *
                  C80639) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C80682 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80689 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C15344) *
              C80593 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80689 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C80682 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C15344) *
              C80601 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C80682 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C80689 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C15344) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C78289 +
                     (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
                     C521 * C80601 + C522 * C78295 + C523 * C15341) *
                        C81 +
                    (C520 * C78289 + C521 * C80593 - C522 * C78285 -
                     C523 * C80601 + C524 * C78295 + C525 * C15341) *
                        C82) *
                       C81011 * C80639 * C80682 +
                   ((C1390 * C78285 -
                     ((C490 * C757 + C81012 * C1365) * C80593 +
                      (C490 * C748 + C81012 * C1358) * C78289) +
                     C1391 * C80601 - C1392 * C78295 - C1393 * C15341) *
                        C81 +
                    (C1392 * C78285 - (C1391 * C80593 + C1390 * C78289) +
                     C1393 * C80601 - C3060 * C78295 - C3061 * C15341) *
                        C82) *
                       C81011 * C80639 * C80689 +
                   (((C490 * C750 + C81012 * C1361) * C78289 +
                     (C490 * C764 + C81012 * C1369) * C80593 - C1394 * C78285 -
                     C1395 * C80601 + C1396 * C78295 + C1397 * C15341) *
                        C81 +
                    (C1394 * C78289 + C1395 * C80593 - C1396 * C78285 -
                     C1397 * C80601 + (C490 * C753 + C81012 * C1364) * C78295 +
                     (C490 * C769 + C81012 * C1372) * C15341) *
                        C82) *
                       C81011 * C80639 * C15344)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78437 +
            (C490 * C166 + C81012 * C569) * C80682 -
            (C490 * C748 + C81012 * C1358) * C78429 -
            (C490 * C856 + C81012 * C1471) * C80689 +
            (C490 * C750 + C81012 * C1361) * C78443 +
            (C490 * C857 + C81012 * C1472) * C15344) *
               C81 +
           (C15882 + C15883 - C15884 - C15885 + C15886 + C15887) * C82) *
              C81011 * C80593 +
          ((C15884 - (C15883 + C15882) + C15885 - C15886 - C15887) * C81 +
           (C15888 - (C15889 + C15890) + C15891 - C15892 - C15893) * C82) *
              C81011 * C80601 +
          ((C15890 + C15889 - C15888 - C15891 + C15892 + C15893) * C81 +
           (C524 * C78437 + C590 * C80682 - C3060 * C78429 - C3142 * C80689 +
            (C490 * C753 + C81012 * C1364) * C78443 +
            (C490 * C862 + C81012 * C1478) * C15344) *
               C82) *
              C81011 * C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C80682 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80689 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C15344) *
              C80593 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80689 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C80682 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C15344) *
              C80601 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C80682 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C80689 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C15344) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13806 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C13799 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13805) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80726) *
              C80682 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13806 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C13799 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13805) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13805 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C13799 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13806 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80726) *
              C80689 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13805 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C13799 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C13806 -
            (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C13806 -
            ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C13799 +
             (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C13805) +
            (C92 * C6147 + C81 * C6157 + C93 * C7591 + C82 * C7592) * C80598) *
               C81011 * C81012 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78437 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80682 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78429 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80689 +
            (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78443 +
            (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C15344) *
               C81011 * C81012 * C13799 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78429 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80682 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78437) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80689 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78443 -
            (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C15344) *
               C81011 * C81012 * C80598) *
              C80933 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78429 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80682 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78437) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80689 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C78443 -
            (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C15344) *
               C81011 * C81012 * C13799 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78437 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80682 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78429 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80689 +
            (C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C78443 +
            (C92 * C6235 + C81 * C6241 + C93 * C7691 + C82 * C7692) * C15344) *
               C81011 * C81012 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C80682 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80689 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C3421 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80933 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C3422 -
            (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
               C81011 * C81012 * C15344) *
              C13799 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C80682 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C3421 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80933 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C3422 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80689 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C3422 -
            ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80933 +
             (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C3421) +
            (C92 * C6323 + C81 * C6329 + C93 * C7791 + C82 * C7792) * C80726) *
               C81011 * C81012 * C15344) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C13805 +
             (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
                C81012 * C82) *
               C80933 +
           ((C2004 * C13806 -
             ((C275 * C1693 + C81011 * C1979) * C13799 +
              (C275 * C1684 + C81011 * C1972) * C13805) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C13806 - (C2005 * C13799 + C2004 * C13805) +
             C2007 * C80598) *
                C81012 * C82) *
               C80726) *
              C80682 +
          (((C1068 * C13806 -
             ((C275 * C757 + C81011 * C1043) * C13799 +
              (C275 * C748 + C81011 * C1036) * C13805) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C13806 - (C1069 * C13799 + C1068 * C13805) +
             C1071 * C80598) *
                C81012 * C82) *
               C80933 +
           (((C275 * C3979 + C81011 * C4305) * C13805 +
             (C275 * C3985 + C81011 * C4309) * C13799 - C4322 * C13806 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C13805 + C4323 * C13799 - C4324 * C13806 -
             C4325 * C80598) *
                C81012 * C82) *
               C80726) *
              C80689 +
          ((((C275 * C750 + C81011 * C1039) * C13805 +
             (C275 * C764 + C81011 * C1047) * C13799 - C1072 * C13806 -
             C1073 * C80598) *
                C81012 * C81 +
            (C1072 * C13805 + C1073 * C13799 - C1074 * C13806 -
             C1075 * C80598) *
                C81012 * C82) *
               C80933 +
           ((C7898 * C13806 -
             ((C275 * C6148 + C81011 * C6416) * C13799 +
              (C275 * C6140 + C81011 * C6410) * C13805) +
             C7899 * C80598) *
                C81012 * C81 +
            ((C275 * C7589 + C81011 * C7891) * C13806 -
             (C7899 * C13799 + C7898 * C13805) +
             (C275 * C7591 + C81011 * C7892) * C80598) *
                C81012 * C82) *
               C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78437 +
             (C275 * C166 + C81011 * C354) * C80682 -
             (C275 * C748 + C81011 * C1036) * C78429 -
             (C275 * C856 + C81011 * C1149) * C80689 +
             (C275 * C750 + C81011 * C1039) * C78443 +
             (C275 * C857 + C81011 * C1150) * C15344) *
                C81012 * C81 +
            (C15648 + C15649 - C15650 - C15651 + C15652 + C15653) * C81012 *
                C82) *
               C13799 +
           ((C15650 - (C15649 + C15648) + C15651 - C15652 - C15653) * C81012 *
                C81 +
            (C15654 - (C15655 + C15656) + C15657 - C15658 - C15659) * C81012 *
                C82) *
               C80598) *
              C80933 +
          ((((C275 * C3979 + C81011 * C4305) * C78429 -
             ((C275 * C1790 + C81011 * C2087) * C80682 +
              (C275 * C1684 + C81011 * C1972) * C78437) +
             (C275 * C4093 + C81011 * C4423) * C80689 -
             (C275 * C6140 + C81011 * C6410) * C78443 -
             (C275 * C6236 + C81011 * C6493) * C15344) *
                C81012 * C81 +
            (C17348 - (C17349 + C17350) + C17351 - C17352 - C17353) * C81012 *
                C82) *
               C13799 +
           ((C17350 + C17349 - C17348 - C17351 + C17352 + C17353) * C81012 *
                C81 +
            (C2006 * C78437 + C2107 * C80682 - C4324 * C78429 - C4439 * C80689 +
             (C275 * C7589 + C81011 * C7891) * C78443 +
             (C275 * C7691 + C81011 * C7997) * C15344) *
                C81012 * C82) *
               C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C3421 +
                      (C275 * C221 + C81011 * C422) * C80933 -
                      (C275 * C1684 + C81011 * C1972) * C3422 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                        C80682 +
                    (((C275 * C3979 + C81011 * C4305) * C3422 -
                      ((C275 * C946 + C81011 * C1256) * C80933 +
                       (C275 * C748 + C81011 * C1036) * C3421) +
                      (C275 * C4199 + C81011 * C4539) * C80726) *
                         C81012 * C81 +
                     (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                        C80689 +
                    (((C275 * C750 + C81011 * C1039) * C3421 +
                      (C275 * C947 + C81011 * C1257) * C80933 -
                      (C275 * C6140 + C81011 * C6410) * C3422 -
                      (C275 * C6324 + C81011 * C6575) * C80726) *
                         C81012 * C81 +
                     (C8107 + C8108 - C8109 - C8113) * C81012 * C82) *
                        C15344) *
                       C13799 +
                   (((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                     (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                        C80682 +
                    ((C4546 + C4545 - C4544 - C4556) * C81012 * C81 +
                     (C4549 + C4550 - C4551 - C4557) * C81012 * C82) *
                        C80689 +
                    ((C8109 - (C8108 + C8107) + C8113) * C81012 * C81 +
                     ((C275 * C7589 + C81011 * C7891) * C3422 -
                      (C1279 * C80933 + C1074 * C3421) +
                      (C275 * C7791 + C81011 * C8105) * C80726) *
                         C81012 * C82) *
                        C15344) *
                       C80598)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C13805 +
             (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
             C521 * C80598) *
                C81 +
            (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
                C82) *
               C81011 * C80933 +
           ((C2326 * C13806 -
             ((C490 * C1693 + C81012 * C2301) * C13799 +
              (C490 * C1684 + C81012 * C2294) * C13805) +
             C2327 * C80598) *
                C81 +
            (C2328 * C13806 - (C2327 * C13799 + C2326 * C13805) +
             C2329 * C80598) *
                C82) *
               C81011 * C80726) *
              C80682 +
          (((C1390 * C13806 -
             ((C490 * C757 + C81012 * C1365) * C13799 +
              (C490 * C748 + C81012 * C1358) * C13805) +
             C1391 * C80598) *
                C81 +
            (C1392 * C13806 - (C1391 * C13799 + C1390 * C13805) +
             C1393 * C80598) *
                C82) *
               C81011 * C80933 +
           (((C490 * C3979 + C81012 * C4655) * C13805 +
             (C490 * C3985 + C81012 * C4659) * C13799 - C4672 * C13806 -
             C4673 * C80598) *
                C81 +
            (C4672 * C13805 + C4673 * C13799 - C4674 * C13806 -
             C4675 * C80598) *
                C82) *
               C81011 * C80726) *
              C80689 +
          ((((C490 * C750 + C81012 * C1361) * C13805 +
             (C490 * C764 + C81012 * C1369) * C13799 - C1394 * C13806 -
             C1395 * C80598) *
                C81 +
            (C1394 * C13805 + C1395 * C13799 - C1396 * C13806 -
             C1397 * C80598) *
                C82) *
               C81011 * C80933 +
           ((C8218 * C13806 -
             ((C490 * C6148 + C81012 * C6662) * C13799 +
              (C490 * C6140 + C81012 * C6656) * C13805) +
             C8219 * C80598) *
                C81 +
            ((C490 * C7589 + C81012 * C8211) * C13806 -
             (C8219 * C13799 + C8218 * C13805) +
             (C490 * C7591 + C81012 * C8212) * C80598) *
                C82) *
               C81011 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78437 +
             (C490 * C166 + C81012 * C569) * C80682 -
             (C490 * C748 + C81012 * C1358) * C78429 -
             (C490 * C856 + C81012 * C1471) * C80689 +
             (C490 * C750 + C81012 * C1361) * C78443 +
             (C490 * C857 + C81012 * C1472) * C15344) *
                C81 +
            (C15882 + C15883 - C15884 - C15885 + C15886 + C15887) * C82) *
               C81011 * C13799 +
           ((C15884 - (C15883 + C15882) + C15885 - C15886 - C15887) * C81 +
            (C15888 - (C15889 + C15890) + C15891 - C15892 - C15893) * C82) *
               C81011 * C80598) *
              C80933 +
          ((((C490 * C3979 + C81012 * C4655) * C78429 -
             ((C490 * C1790 + C81012 * C2409) * C80682 +
              (C490 * C1684 + C81012 * C2294) * C78437) +
             (C490 * C4093 + C81012 * C4773) * C80689 -
             (C490 * C6140 + C81012 * C6656) * C78443 -
             (C490 * C6236 + C81012 * C6739) * C15344) *
                C81 +
            (C17648 - (C17649 + C17650) + C17651 - C17652 - C17653) * C82) *
               C81011 * C13799 +
           ((C17650 + C17649 - C17648 - C17651 + C17652 + C17653) * C81 +
            (C2328 * C78437 + C2429 * C80682 - C4674 * C78429 - C4789 * C80689 +
             (C490 * C7589 + C81012 * C8211) * C78443 +
             (C490 * C7691 + C81012 * C8317) * C15344) *
                C82) *
               C81011 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C3867 + C3868 - C3869 - C3870) * C82) *
                        C81011 * C80682 +
                    (((C490 * C3979 + C81012 * C4655) * C3422 -
                      ((C490 * C946 + C81012 * C1578) * C80933 +
                       (C490 * C748 + C81012 * C1358) * C3421) +
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81 +
                     (C4894 - (C4895 + C4896) + C4906) * C82) *
                        C81011 * C80689 +
                    (((C490 * C750 + C81012 * C1361) * C3421 +
                      (C490 * C947 + C81012 * C1579) * C80933 -
                      (C490 * C6140 + C81012 * C6656) * C3422 -
                      (C490 * C6324 + C81012 * C6821) * C80726) *
                         C81 +
                     (C8427 + C8428 - C8429 - C8433) * C82) *
                        C81011 * C15344) *
                       C13799 +
                   (((C3869 - (C3868 + C3867) + C3870) * C81 +
                     (C3871 - (C3872 + C3873) + C3874) * C82) *
                        C81011 * C80682 +
                    ((C4896 + C4895 - C4894 - C4906) * C81 +
                     (C4899 + C4900 - C4901 - C4907) * C82) *
                        C81011 * C80689 +
                    ((C8429 - (C8428 + C8427) + C8433) * C81 +
                     ((C490 * C7589 + C81012 * C8211) * C3422 -
                      (C1601 * C80933 + C1396 * C3421) +
                      (C490 * C7791 + C81012 * C8425) * C80726) *
                         C82) *
                        C81011 * C15344) *
                       C80598)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
              C81011 * C81012 * C80639 * C81013 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13806 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C13799 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13805) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
              C81011 * C81012 * C80639 * C81006 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13805 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C13799 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C13806 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
              C81011 * C81012 * C80639 * C80993 +
          ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C13806 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C13799 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C13805) +
           (C92 * C5662 + C81 * C5670 + C93 * C6901 + C82 * C6902) * C80598) *
              C81011 * C81012 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13175 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C81010 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13176 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C81000 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13177 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80984 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C13178 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C80639 * C13173 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13176 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C81010 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13175) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C81000 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C13177 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80984 +
           (C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C13178 +
           (C92 * C761 + C81 * C773 + C93 * C2619 + C82 * C2620) * C80966) *
              C81011 * C81012 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C81004 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13806 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C13799 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13805) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80990 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C13805 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C13799 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C13806 -
            (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80598) *
               C81011 * C81012 * C80965) *
              C13173 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13806 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C13799 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13805) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C81004 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13805 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C13799 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13806 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80990 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C13806 -
            ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C13799 +
             (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C13805) +
            (C92 * C6143 + C81 * C6155 + C93 * C10973 + C82 * C10974) *
                C80598) *
               C81011 * C81012 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13873 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81013 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13874 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C81006 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13875 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80993 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C13876 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C13799 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13874 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81013 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13873) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C81006 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C13875 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80993 +
           (C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C13876 +
           (C92 * C5721 + C81 * C5725 + C93 * C6973 + C82 * C6974) * C80972) *
              C81011 * C81012 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
              C81011 * C81012 * C81010 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13246 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C13173 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13245) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
              C81011 * C81012 * C81000 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13245 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C13173 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C13246 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
              C81011 * C81012 * C80984 +
          ((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C13246 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C13173 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C13245) +
           (C92 * C861 + C81 * C869 + C93 * C2689 + C82 * C2690) * C80686) *
              C81011 * C81012 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C13799 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13246 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C13173 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13245) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80598) *
              C81004 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13246 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C13173 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13245) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C13799 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13245 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C13173 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13246 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80598) *
              C80990 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C13245 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C13173 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C13246 -
            (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80686) *
               C81011 * C81012 * C13799 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C13246 -
            ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C13173 +
             (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C13245) +
            (C92 * C6237 + C81 * C6243 + C93 * C11073 + C82 * C11074) *
                C80686) *
               C81011 * C81012 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C81013 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C81006 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80993 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
               C81011 * C81012 * C80972) *
              C13799 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C81006 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C81013 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80993 +
           ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C220 +
            (C92 * C5771 + C81 * C5775 + C93 * C7041 + C82 * C7042) * C80639) *
               C81011 * C81012 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C13173 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80686) *
              C81010 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C13173) *
              C81000 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C13173 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80686) *
              C80984 +
          (((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C220 +
            (C92 * C951 + C81 * C959 + C93 * C2757 + C82 * C2758) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
               C81011 * C81012 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C1878 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C81004 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C1879 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80990 +
            (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C1880 +
            (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
               C81011 * C81012 * C13173 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C1879 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C81004 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C1878) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80990 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C1880 -
            (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C80965) *
               C81011 * C81012 * C80686) *
              C13799 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C1879 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C81004 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C1878) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80990 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C1880 -
            (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C80965) *
               C81011 * C81012 * C13173 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C1878 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C81004 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C1879 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80990 +
            (C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C1880 +
            (C92 * C6321 + C81 * C6327 + C93 * C11173 + C82 * C11174) *
                C80965) *
               C81011 * C81012 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C13805 +
            (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
            C306 * C80598) *
               C81012 * C81 +
           (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
               C81012 * C82) *
              C80639 * C81013 +
          ((C1068 * C13806 -
            ((C275 * C757 + C81011 * C1043) * C13799 +
             (C275 * C748 + C81011 * C1036) * C13805) +
            C1069 * C80598) *
               C81012 * C81 +
           (C1070 * C13806 - (C1069 * C13799 + C1068 * C13805) +
            C1071 * C80598) *
               C81012 * C82) *
              C80639 * C81006 +
          (((C275 * C750 + C81011 * C1039) * C13805 +
            (C275 * C764 + C81011 * C1047) * C13799 - C1072 * C13806 -
            C1073 * C80598) *
               C81012 * C81 +
           (C1072 * C13805 + C1073 * C13799 - C1074 * C13806 - C1075 * C80598) *
               C81012 * C82) *
              C80639 * C80993 +
          ((C7116 * C13806 -
            ((C275 * C5663 + C81011 * C5826) * C13799 +
             (C275 * C5659 + C81011 * C5822) * C13805) +
            C7117 * C80598) *
               C81012 * C81 +
           ((C275 * C6899 + C81011 * C7109) * C13806 -
            (C7117 * C13799 + C7116 * C13805) +
            (C275 * C6901 + C81011 * C7110) * C80598) *
               C81012 * C82) *
              C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C13175 +
            (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
            C306 * C81000 + C307 * C13177 + C308 * C80984 - C309 * C13178 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C13175 + C306 * C81010 - C307 * C13176 - C308 * C81000 +
            C309 * C13177 + C310 * C80984 - C311 * C13178 - C312 * C80966) *
               C81012 * C82) *
              C80639 * C13173 +
          ((C1068 * C13176 -
            ((C275 * C757 + C81011 * C1043) * C81010 +
             (C275 * C748 + C81011 * C1036) * C13175) +
            C1069 * C81000 - C1070 * C13177 - C1071 * C80984 + C2832 * C13178 +
            C2833 * C80966) *
               C81012 * C81 +
           (C1070 * C13176 - (C1069 * C81010 + C1068 * C13175) +
            C1071 * C81000 - C2832 * C13177 - C2833 * C80984 +
            (C275 * C2617 + C81011 * C2825) * C13178 +
            (C275 * C2619 + C81011 * C2826) * C80966) *
               C81012 * C82) *
              C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C13805 +
             (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
                C81012 * C82) *
               C81004 +
           ((C2004 * C13806 -
             ((C275 * C1693 + C81011 * C1979) * C13799 +
              (C275 * C1684 + C81011 * C1972) * C13805) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C13806 - (C2005 * C13799 + C2004 * C13805) +
             C2007 * C80598) *
                C81012 * C82) *
               C80990 +
           (((C275 * C1686 + C81011 * C1975) * C13805 +
             (C275 * C1700 + C81011 * C1983) * C13799 - C2008 * C13806 -
             C2009 * C80598) *
                C81012 * C81 +
            (C2008 * C13805 + C2009 * C13799 - C2010 * C13806 -
             C2011 * C80598) *
                C81012 * C82) *
               C80965) *
              C13173 +
          (((C1068 * C13806 -
             ((C275 * C757 + C81011 * C1043) * C13799 +
              (C275 * C748 + C81011 * C1036) * C13805) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C13806 - (C1069 * C13799 + C1068 * C13805) +
             C1071 * C80598) *
                C81012 * C82) *
               C81004 +
           (((C275 * C3979 + C81011 * C4305) * C13805 +
             (C275 * C3985 + C81011 * C4309) * C13799 - C4322 * C13806 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C13805 + C4323 * C13799 - C4324 * C13806 -
             C4325 * C80598) *
                C81012 * C82) *
               C80990 +
           ((C11280 * C13806 -
             ((C275 * C6144 + C81011 * C6414) * C13799 +
              (C275 * C6138 + C81011 * C6408) * C13805) +
             C11281 * C80598) *
                C81012 * C81 +
            ((C275 * C10971 + C81011 * C11273) * C13806 -
             (C11281 * C13799 + C11280 * C13805) +
             (C275 * C10973 + C81011 * C11274) * C80598) *
                C81012 * C82) *
               C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C13873 +
                     (C275 * C166 + C81011 * C354) * C81013 -
                     (C275 * C748 + C81011 * C1036) * C13874 -
                     (C275 * C856 + C81011 * C1149) * C81006 +
                     (C275 * C750 + C81011 * C1039) * C13875 +
                     (C275 * C857 + C81011 * C1150) * C80993 -
                     (C275 * C5659 + C81011 * C5822) * C13876 -
                     (C275 * C5722 + C81011 * C5871) * C80972) *
                        C81012 * C81 +
                    (C14076 + C14077 - C14078 - C14079 + C14080 + C14081 -
                     C14082 - C14083) *
                        C81012 * C82) *
                       C13799 +
                   ((C14078 - (C14077 + C14076) + C14079 - C14080 - C14081 +
                     C14082 + C14083) *
                        C81012 * C81 +
                    (C1070 * C13874 - (C374 * C81013 + C307 * C13873) +
                     C1176 * C81006 - C1074 * C13875 - C1177 * C80993 +
                     (C275 * C6899 + C81011 * C7109) * C13876 +
                     (C275 * C6973 + C81011 * C7183) * C80972) *
                        C81012 * C82) *
                       C80598) *
                  C80639) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C13245 +
                     (C275 * C166 + C81011 * C354) * C13173 -
                     (C275 * C748 + C81011 * C1036) * C13246 -
                     (C275 * C856 + C81011 * C1149) * C80686) *
                        C81012 * C81 +
                    (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                       C81010 +
                   ((C13448 - (C13447 + C13446) + C13449) * C81012 * C81 +
                    (C13450 - (C13451 + C13452) + C13453) * C81012 * C82) *
                       C81000 +
                   ((C13452 + C13451 - C13450 - C13453) * C81012 * C81 +
                    (C13454 + C13455 - C13456 - C13457) * C81012 * C82) *
                       C80984 +
                   ((C13456 - (C13455 + C13454) + C13457) * C81012 * C81 +
                    ((C275 * C2617 + C81011 * C2825) * C13246 -
                     (C376 * C13173 + C311 * C13245) +
                     (C275 * C2689 + C81011 * C2899) * C80686) *
                        C81012 * C82) *
                       C80966) *
                  C80639) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C81012 * C81 +
                     (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                        C13799 +
                    ((C13448 - (C13447 + C13446) + C13449) * C81012 * C81 +
                     (C13450 - (C13451 + C13452) + C13453) * C81012 * C82) *
                        C80598) *
                       C81004 +
                   ((((C275 * C3979 + C81011 * C4305) * C13246 -
                      ((C275 * C1790 + C81011 * C2087) * C13173 +
                       (C275 * C1684 + C81011 * C1972) * C13245) +
                      (C275 * C4093 + C81011 * C4423) * C80686) *
                         C81012 * C81 +
                     (C14846 - (C14847 + C14848) + C14849) * C81012 * C82) *
                        C13799 +
                    ((C14848 + C14847 - C14846 - C14849) * C81012 * C81 +
                     (C2006 * C13245 + C2107 * C13173 - C4324 * C13246 -
                      C4439 * C80686) *
                         C81012 * C82) *
                        C80598) *
                       C80990 +
                   ((((C275 * C1686 + C81011 * C1975) * C13245 +
                      (C275 * C1792 + C81011 * C2089) * C13173 -
                      (C275 * C6138 + C81011 * C6408) * C13246 -
                      (C275 * C6238 + C81011 * C6495) * C80686) *
                         C81012 * C81 +
                     (C14850 + C14851 - C14852 - C14853) * C81012 * C82) *
                        C13799 +
                    ((C14852 - (C14851 + C14850) + C14853) * C81012 * C81 +
                     ((C275 * C10971 + C81011 * C11273) * C13246 -
                      (C2109 * C13173 + C2010 * C13245) +
                      (C275 * C11073 + C81011 * C11379) * C80686) *
                         C81012 * C82) *
                        C80598) *
                       C80965)) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C81013 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C81006 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80993 -
           ((C7267 + C7265) * C81012 * C82 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C81012 * C81) *
               C80972) *
              C13799 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C81006 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C81013 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80993 +
           ((C7265 + C7267) * C81012 * C81 +
            ((C275 * C6899 + C81011 * C7109) * C220 +
             (C275 * C7041 + C81011 * C7261) * C80639) *
                C81012 * C82) *
               C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C13173 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80686) *
              C81010 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80686 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C13173) *
              C81000 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C13173 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C80686) *
              C80984 +
          (((C2985 + C2987) * C81012 * C81 +
            ((C275 * C2617 + C81011 * C2825) * C220 +
             (C275 * C2757 + C81011 * C2981) * C80639) *
                C81012 * C82) *
               C80686 -
           ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
               C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C1878 +
             (C275 * C221 + C81011 * C422) * C81004 -
             (C275 * C1684 + C81011 * C1972) * C1879 -
             (C275 * C1882 + C81011 * C2187) * C80990 +
             (C275 * C1686 + C81011 * C1975) * C1880 +
             (C275 * C1883 + C81011 * C2188) * C80965) *
                C81012 * C81 +
            (C2196 + C2197 - C2198 - C2216 + C2201 + C2217) * C81012 * C82) *
               C13173 +
           (((C275 * C3979 + C81011 * C4305) * C1879 -
             ((C275 * C946 + C81011 * C1256) * C81004 +
              (C275 * C748 + C81011 * C1036) * C1878) +
             (C275 * C4199 + C81011 * C4539) * C80990 -
             (C275 * C6138 + C81011 * C6408) * C1880 -
             (C275 * C6322 + C81011 * C6573) * C80965) *
                C81012 * C81 +
            (C14952 - (C14953 + C14954) + C14955 - C14956 - C14957) * C81012 *
                C82) *
               C80686) *
              C13799 +
          (((C2198 - (C2197 + C2196) + C2216 - C2201 - C2217) * C81012 * C81 +
            (C2204 - (C2205 + C2206) + C2218 - C2209 - C2219) * C81012 * C82) *
               C13173 +
           ((C14954 + C14953 - C14952 - C14955 + C14956 + C14957) * C81012 *
                C81 +
            (C1070 * C1878 + C1278 * C81004 - C4324 * C1879 - C4555 * C80990 +
             (C275 * C10971 + C81011 * C11273) * C1880 +
             (C275 * C11173 + C81011 * C11485) * C80965) *
                C81012 * C82) *
               C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13805 +
            (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
            C521 * C80598) *
               C81 +
           (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
               C82) *
              C81011 * C80639 * C81013 +
          ((C1390 * C13806 -
            ((C490 * C757 + C81012 * C1365) * C13799 +
             (C490 * C748 + C81012 * C1358) * C13805) +
            C1391 * C80598) *
               C81 +
           (C1392 * C13806 - (C1391 * C13799 + C1390 * C13805) +
            C1393 * C80598) *
               C82) *
              C81011 * C80639 * C81006 +
          (((C490 * C750 + C81012 * C1361) * C13805 +
            (C490 * C764 + C81012 * C1369) * C13799 - C1394 * C13806 -
            C1395 * C80598) *
               C81 +
           (C1394 * C13805 + C1395 * C13799 - C1396 * C13806 - C1397 * C80598) *
               C82) *
              C81011 * C80639 * C80993 +
          ((C7340 * C13806 -
            ((C490 * C5663 + C81012 * C5968) * C13799 +
             (C490 * C5659 + C81012 * C5964) * C13805) +
            C7341 * C80598) *
               C81 +
           ((C490 * C6899 + C81012 * C7333) * C13806 -
            (C7341 * C13799 + C7340 * C13805) +
            (C490 * C6901 + C81012 * C7334) * C80598) *
               C82) *
              C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13175 +
            (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
            C521 * C81000 + C522 * C13177 + C523 * C80984 - C524 * C13178 -
            C525 * C80966) *
               C81 +
           (C520 * C13175 + C521 * C81010 - C522 * C13176 - C523 * C81000 +
            C524 * C13177 + C525 * C80984 - C526 * C13178 - C527 * C80966) *
               C82) *
              C81011 * C80639 * C13173 +
          ((C1390 * C13176 -
            ((C490 * C757 + C81012 * C1365) * C81010 +
             (C490 * C748 + C81012 * C1358) * C13175) +
            C1391 * C81000 - C1392 * C13177 - C1393 * C80984 + C3060 * C13178 +
            C3061 * C80966) *
               C81 +
           (C1392 * C13176 - (C1391 * C81010 + C1390 * C13175) +
            C1393 * C81000 - C3060 * C13177 - C3061 * C80984 +
            (C490 * C2617 + C81012 * C3053) * C13178 +
            (C490 * C2619 + C81012 * C3054) * C80966) *
               C82) *
              C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C13805 +
             (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
             C521 * C80598) *
                C81 +
            (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
                C82) *
               C81011 * C81004 +
           ((C2326 * C13806 -
             ((C490 * C1693 + C81012 * C2301) * C13799 +
              (C490 * C1684 + C81012 * C2294) * C13805) +
             C2327 * C80598) *
                C81 +
            (C2328 * C13806 - (C2327 * C13799 + C2326 * C13805) +
             C2329 * C80598) *
                C82) *
               C81011 * C80990 +
           (((C490 * C1686 + C81012 * C2297) * C13805 +
             (C490 * C1700 + C81012 * C2305) * C13799 - C2330 * C13806 -
             C2331 * C80598) *
                C81 +
            (C2330 * C13805 + C2331 * C13799 - C2332 * C13806 -
             C2333 * C80598) *
                C82) *
               C81011 * C80965) *
              C13173 +
          (((C1390 * C13806 -
             ((C490 * C757 + C81012 * C1365) * C13799 +
              (C490 * C748 + C81012 * C1358) * C13805) +
             C1391 * C80598) *
                C81 +
            (C1392 * C13806 - (C1391 * C13799 + C1390 * C13805) +
             C1393 * C80598) *
                C82) *
               C81011 * C81004 +
           (((C490 * C3979 + C81012 * C4655) * C13805 +
             (C490 * C3985 + C81012 * C4659) * C13799 - C4672 * C13806 -
             C4673 * C80598) *
                C81 +
            (C4672 * C13805 + C4673 * C13799 - C4674 * C13806 -
             C4675 * C80598) *
                C82) *
               C81011 * C80990 +
           ((C11600 * C13806 -
             ((C490 * C6144 + C81012 * C6660) * C13799 +
              (C490 * C6138 + C81012 * C6654) * C13805) +
             C11601 * C80598) *
                C81 +
            ((C490 * C10971 + C81012 * C11593) * C13806 -
             (C11601 * C13799 + C11600 * C13805) +
             (C490 * C10973 + C81012 * C11594) * C80598) *
                C82) *
               C81011 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eezy[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C13873 +
                     (C490 * C166 + C81012 * C569) * C81013 -
                     (C490 * C748 + C81012 * C1358) * C13874 -
                     (C490 * C856 + C81012 * C1471) * C81006 +
                     (C490 * C750 + C81012 * C1361) * C13875 +
                     (C490 * C857 + C81012 * C1472) * C80993 -
                     (C490 * C5659 + C81012 * C5964) * C13876 -
                     (C490 * C5722 + C81012 * C6013) * C80972) *
                        C81 +
                    (C14282 + C14283 - C14284 - C14285 + C14286 + C14287 -
                     C14288 - C14289) *
                        C82) *
                       C81011 * C13799 +
                   ((C14284 - (C14283 + C14282) + C14285 - C14286 - C14287 +
                     C14288 + C14289) *
                        C81 +
                    (C1392 * C13874 - (C589 * C81013 + C522 * C13873) +
                     C1498 * C81006 - C1396 * C13875 - C1499 * C80993 +
                     (C490 * C6899 + C81012 * C7333) * C13876 +
                     (C490 * C6973 + C81012 * C7407) * C80972) *
                        C82) *
                       C81011 * C80598) *
                  C80639) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C13245 +
                     (C490 * C166 + C81012 * C569) * C13173 -
                     (C490 * C748 + C81012 * C1358) * C13246 -
                     (C490 * C856 + C81012 * C1471) * C80686) *
                        C81 +
                    (C13656 + C13657 - C13658 - C13659) * C82) *
                       C81011 * C81010 +
                   ((C13658 - (C13657 + C13656) + C13659) * C81 +
                    (C13660 - (C13661 + C13662) + C13663) * C82) *
                       C81011 * C81000 +
                   ((C13662 + C13661 - C13660 - C13663) * C81 +
                    (C13664 + C13665 - C13666 - C13667) * C82) *
                       C81011 * C80984 +
                   ((C13666 - (C13665 + C13664) + C13667) * C81 +
                    ((C490 * C2617 + C81012 * C3053) * C13246 -
                     (C591 * C13173 + C526 * C13245) +
                     (C490 * C2689 + C81012 * C3127) * C80686) *
                        C82) *
                       C81011 * C80966) *
                  C80639) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C13245 +
                      (C490 * C166 + C81012 * C569) * C13173 -
                      (C490 * C748 + C81012 * C1358) * C13246 -
                      (C490 * C856 + C81012 * C1471) * C80686) *
                         C81 +
                     (C13656 + C13657 - C13658 - C13659) * C82) *
                        C81011 * C13799 +
                    ((C13658 - (C13657 + C13656) + C13659) * C81 +
                     (C13660 - (C13661 + C13662) + C13663) * C82) *
                        C81011 * C80598) *
                       C81004 +
                   ((((C490 * C3979 + C81012 * C4655) * C13246 -
                      ((C490 * C1790 + C81012 * C2409) * C13173 +
                       (C490 * C1684 + C81012 * C2294) * C13245) +
                      (C490 * C4093 + C81012 * C4773) * C80686) *
                         C81 +
                     (C15154 - (C15155 + C15156) + C15157) * C82) *
                        C81011 * C13799 +
                    ((C15156 + C15155 - C15154 - C15157) * C81 +
                     (C2328 * C13245 + C2429 * C13173 - C4674 * C13246 -
                      C4789 * C80686) *
                         C82) *
                        C81011 * C80598) *
                       C80990 +
                   ((((C490 * C1686 + C81012 * C2297) * C13245 +
                      (C490 * C1792 + C81012 * C2411) * C13173 -
                      (C490 * C6138 + C81012 * C6654) * C13246 -
                      (C490 * C6238 + C81012 * C6741) * C80686) *
                         C81 +
                     (C15158 + C15159 - C15160 - C15161) * C82) *
                        C81011 * C13799 +
                    ((C15160 - (C15159 + C15158) + C15161) * C81 +
                     ((C490 * C10971 + C81012 * C11593) * C13246 -
                      (C2431 * C13173 + C2332 * C13245) +
                      (C490 * C11073 + C81012 * C11699) * C80686) *
                         C82) *
                        C81011 * C80598) *
                       C80965)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C81013 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C81006 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80993 -
           ((C7491 + C7489) * C82 + ((C490 * C5772 + C81012 * C6060) * C80639 +
                                     (C490 * C5659 + C81012 * C5964) * C220) *
                                        C81) *
               C81011 * C80972) *
              C13799 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C81006 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C81013 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80993 +
           ((C7489 + C7491) * C81 + ((C490 * C6899 + C81012 * C7333) * C220 +
                                     (C490 * C7041 + C81012 * C7485) * C80639) *
                                        C82) *
               C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C13173 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80686) *
              C81010 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80686 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C13173) *
              C81000 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C13173 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C80686) *
              C80984 +
          (((C3213 + C3215) * C81 + ((C490 * C2617 + C81012 * C3053) * C220 +
                                     (C490 * C2757 + C81012 * C3209) * C80639) *
                                        C82) *
               C81011 * C80686 -
           ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C1878 +
             (C490 * C221 + C81012 * C637) * C81004 -
             (C490 * C1684 + C81012 * C2294) * C1879 -
             (C490 * C1882 + C81012 * C2509) * C80990 +
             (C490 * C1686 + C81012 * C2297) * C1880 +
             (C490 * C1883 + C81012 * C2510) * C80965) *
                C81 +
            (C2518 + C2519 - C2520 - C2538 + C2523 + C2539) * C82) *
               C81011 * C13173 +
           (((C490 * C3979 + C81012 * C4655) * C1879 -
             ((C490 * C946 + C81012 * C1578) * C81004 +
              (C490 * C748 + C81012 * C1358) * C1878) +
             (C490 * C4199 + C81012 * C4889) * C80990 -
             (C490 * C6138 + C81012 * C6654) * C1880 -
             (C490 * C6322 + C81012 * C6819) * C80965) *
                C81 +
            (C15260 - (C15261 + C15262) + C15263 - C15264 - C15265) * C82) *
               C81011 * C80686) *
              C13799 +
          (((C2520 - (C2519 + C2518) + C2538 - C2523 - C2539) * C81 +
            (C2526 - (C2527 + C2528) + C2540 - C2531 - C2541) * C82) *
               C81011 * C13173 +
           ((C15262 + C15261 - C15260 - C15263 + C15264 + C15265) * C81 +
            (C1392 * C1878 + C1600 * C81004 - C4674 * C1879 - C4905 * C80990 +
             (C490 * C10971 + C81012 * C11593) * C1880 +
             (C490 * C11173 + C81012 * C11805) * C80965) *
                C82) *
               C81011 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78289 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80593 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78285 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80601 +
            (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C78295 +
            (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C15341) *
               C81011 * C81012 * C80933 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78285 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80593 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78289) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80601 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C78295 -
            (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C15341) *
               C81011 * C81012 * C80726) *
              C13173 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78285 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80593 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78289) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80601 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C78295 -
            (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C15341) *
               C81011 * C81012 * C80933 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78289 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80593 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78285 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80601 +
            (C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C78295 +
            (C92 * C3988 + C81 * C3993 + C93 * C3990 + C82 * C3994) * C15341) *
               C81011 * C81012 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C80593 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13246 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C13173 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13245) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80601 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13245 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C13173 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C13246 -
            (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
               C81011 * C81012 * C15341) *
              C80933 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13246 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C13173 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13245) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C80593 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13245 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C13173 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13246 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80601 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C13246 -
            ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C13173 +
             (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C13245) +
            (C92 * C4095 + C81 * C4099 + C93 * C4096 + C82 * C4100) * C80686) *
               C81011 * C81012 * C15341) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80593 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C3421 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80933 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C3422 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80601 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C3421 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80933 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C3422 -
            (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C3422 -
            ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80933 +
             (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C3421) +
            (C92 * C4201 + C81 * C4205 + C93 * C4202 + C82 * C4206) * C80726) *
               C81011 * C81012 * C80686) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78289 +
             (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
             C306 * C80601 + C307 * C78295 + C308 * C15341) *
                C81012 * C81 +
            (C305 * C78289 + C306 * C80593 - C307 * C78285 - C308 * C80601 +
             C309 * C78295 + C310 * C15341) *
                C81012 * C82) *
               C80933 +
           ((C2004 * C78285 -
             ((C275 * C1693 + C81011 * C1979) * C80593 +
              (C275 * C1684 + C81011 * C1972) * C78289) +
             C2005 * C80601 - C2006 * C78295 - C2007 * C15341) *
                C81012 * C81 +
            (C2006 * C78285 - (C2005 * C80593 + C2004 * C78289) +
             C2007 * C80601 - C3498 * C78295 - C3499 * C15341) *
                C81012 * C82) *
               C80726) *
              C13173 +
          (((C1068 * C78285 -
             ((C275 * C757 + C81011 * C1043) * C80593 +
              (C275 * C748 + C81011 * C1036) * C78289) +
             C1069 * C80601 - C1070 * C78295 - C1071 * C15341) *
                C81012 * C81 +
            (C1070 * C78285 - (C1069 * C80593 + C1068 * C78289) +
             C1071 * C80601 - C2832 * C78295 - C2833 * C15341) *
                C81012 * C82) *
               C80933 +
           (((C275 * C3979 + C81011 * C4305) * C78289 +
             (C275 * C3985 + C81011 * C4309) * C80593 - C4322 * C78285 -
             C4323 * C80601 + C4324 * C78295 + C4325 * C15341) *
                C81012 * C81 +
            (C4322 * C78289 + C4323 * C80593 - C4324 * C78285 - C4325 * C80601 +
             (C275 * C3982 + C81011 * C4308) * C78295 +
             (C275 * C3990 + C81011 * C4312) * C15341) *
                C81012 * C82) *
               C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C81012 * C81 +
                     (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                        C80593 +
                    ((C13448 - (C13447 + C13446) + C13449) * C81012 * C81 +
                     (C13450 - (C13451 + C13452) + C13453) * C81012 * C82) *
                        C80601 +
                    ((C13452 + C13451 - C13450 - C13453) * C81012 * C81 +
                     (C13454 + C13455 - C13456 - C13457) * C81012 * C82) *
                        C15341) *
                       C80933 +
                   ((((C275 * C3979 + C81011 * C4305) * C13246 -
                      ((C275 * C1790 + C81011 * C2087) * C13173 +
                       (C275 * C1684 + C81011 * C1972) * C13245) +
                      (C275 * C4093 + C81011 * C4423) * C80686) *
                         C81012 * C81 +
                     (C14846 - (C14847 + C14848) + C14849) * C81012 * C82) *
                        C80593 +
                    ((C14848 + C14847 - C14846 - C14849) * C81012 * C81 +
                     (C16458 + C16459 - C16460 - C16461) * C81012 * C82) *
                        C80601 +
                    ((C16460 - (C16459 + C16458) + C16461) * C81012 * C81 +
                     ((C275 * C3982 + C81011 * C4308) * C13246 -
                      (C3570 * C13173 + C3498 * C13245) +
                      (C275 * C4096 + C81011 * C4426) * C80686) *
                         C81012 * C82) *
                        C15341) *
                       C80726)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C3421 +
                      (C275 * C221 + C81011 * C422) * C80933 -
                      (C275 * C1684 + C81011 * C1972) * C3422 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                        C13173 +
                    (((C275 * C3979 + C81011 * C4305) * C3422 -
                      ((C275 * C946 + C81011 * C1256) * C80933 +
                       (C275 * C748 + C81011 * C1036) * C3421) +
                      (C275 * C4199 + C81011 * C4539) * C80726) *
                         C81012 * C81 +
                     (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                        C80686) *
                       C80593 +
                   (((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                     (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                        C13173 +
                    ((C4546 + C4545 - C4544 - C4556) * C81012 * C81 +
                     (C4549 + C4550 - C4551 - C4557) * C81012 * C82) *
                        C80686) *
                       C80601 +
                   (((C3645 + C3644 - C3643 - C3646) * C81012 * C81 +
                     (C3647 + C3648 - C3649 - C3653) * C81012 * C82) *
                        C13173 +
                    ((C4551 - (C4550 + C4549) + C4557) * C81012 * C81 +
                     ((C275 * C3982 + C81011 * C4308) * C3422 -
                      (C2986 * C80933 + C2832 * C3421) +
                      (C275 * C4202 + C81011 * C4542) * C80726) *
                         C81012 * C82) *
                        C80686) *
                       C15341)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78289 +
             (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
             C521 * C80601 + C522 * C78295 + C523 * C15341) *
                C81 +
            (C520 * C78289 + C521 * C80593 - C522 * C78285 - C523 * C80601 +
             C524 * C78295 + C525 * C15341) *
                C82) *
               C81011 * C80933 +
           ((C2326 * C78285 -
             ((C490 * C1693 + C81012 * C2301) * C80593 +
              (C490 * C1684 + C81012 * C2294) * C78289) +
             C2327 * C80601 - C2328 * C78295 - C2329 * C15341) *
                C81 +
            (C2328 * C78285 - (C2327 * C80593 + C2326 * C78289) +
             C2329 * C80601 - C3726 * C78295 - C3727 * C15341) *
                C82) *
               C81011 * C80726) *
              C13173 +
          (((C1390 * C78285 -
             ((C490 * C757 + C81012 * C1365) * C80593 +
              (C490 * C748 + C81012 * C1358) * C78289) +
             C1391 * C80601 - C1392 * C78295 - C1393 * C15341) *
                C81 +
            (C1392 * C78285 - (C1391 * C80593 + C1390 * C78289) +
             C1393 * C80601 - C3060 * C78295 - C3061 * C15341) *
                C82) *
               C81011 * C80933 +
           (((C490 * C3979 + C81012 * C4655) * C78289 +
             (C490 * C3985 + C81012 * C4659) * C80593 - C4672 * C78285 -
             C4673 * C80601 + C4674 * C78295 + C4675 * C15341) *
                C81 +
            (C4672 * C78289 + C4673 * C80593 - C4674 * C78285 - C4675 * C80601 +
             (C490 * C3982 + C81012 * C4658) * C78295 +
             (C490 * C3990 + C81012 * C4662) * C15341) *
                C82) *
               C81011 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C13245 +
                      (C490 * C166 + C81012 * C569) * C13173 -
                      (C490 * C748 + C81012 * C1358) * C13246 -
                      (C490 * C856 + C81012 * C1471) * C80686) *
                         C81 +
                     (C13656 + C13657 - C13658 - C13659) * C82) *
                        C81011 * C80593 +
                    ((C13658 - (C13657 + C13656) + C13659) * C81 +
                     (C13660 - (C13661 + C13662) + C13663) * C82) *
                        C81011 * C80601 +
                    ((C13662 + C13661 - C13660 - C13663) * C81 +
                     (C13664 + C13665 - C13666 - C13667) * C82) *
                        C81011 * C15341) *
                       C80933 +
                   ((((C490 * C3979 + C81012 * C4655) * C13246 -
                      ((C490 * C1790 + C81012 * C2409) * C13173 +
                       (C490 * C1684 + C81012 * C2294) * C13245) +
                      (C490 * C4093 + C81012 * C4773) * C80686) *
                         C81 +
                     (C15154 - (C15155 + C15156) + C15157) * C82) *
                        C81011 * C80593 +
                    ((C15156 + C15155 - C15154 - C15157) * C81 +
                     (C16756 + C16757 - C16758 - C16759) * C82) *
                        C81011 * C80601 +
                    ((C16758 - (C16757 + C16756) + C16759) * C81 +
                     ((C490 * C3982 + C81012 * C4658) * C13246 -
                      (C3798 * C13173 + C3726 * C13245) +
                      (C490 * C4096 + C81012 * C4776) * C80686) *
                         C82) *
                        C81011 * C15341) *
                       C80726)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C3867 + C3868 - C3869 - C3870) * C82) *
                        C81011 * C13173 +
                    (((C490 * C3979 + C81012 * C4655) * C3422 -
                      ((C490 * C946 + C81012 * C1578) * C80933 +
                       (C490 * C748 + C81012 * C1358) * C3421) +
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81 +
                     (C4894 - (C4895 + C4896) + C4906) * C82) *
                        C81011 * C80686) *
                       C80593 +
                   (((C3869 - (C3868 + C3867) + C3870) * C81 +
                     (C3871 - (C3872 + C3873) + C3874) * C82) *
                        C81011 * C13173 +
                    ((C4896 + C4895 - C4894 - C4906) * C81 +
                     (C4899 + C4900 - C4901 - C4907) * C82) *
                        C81011 * C80686) *
                       C80601 +
                   (((C3873 + C3872 - C3871 - C3874) * C81 +
                     (C3875 + C3876 - C3877 - C3881) * C82) *
                        C81011 * C13173 +
                    ((C4901 - (C4900 + C4899) + C4907) * C81 +
                     ((C490 * C3982 + C81012 * C4658) * C3422 -
                      (C3214 * C80933 + C3060 * C3421) +
                      (C490 * C4202 + C81012 * C4892) * C80726) *
                         C82) *
                        C81011 * C80686) *
                       C15341)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13175 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C81010 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13176 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C81000 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13177 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80984 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C13178 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C80639 * C13173 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13176 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C81010 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13175) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C81000 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C13177 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80984 +
           (C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C13178 +
           (C92 * C761 + C81 * C773 + C93 * C2619 + C82 * C2620) * C80966) *
              C81011 * C81012 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
              C81011 * C81012 * C80639 * C81013 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13806 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C13799 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13805) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
              C81011 * C81012 * C80639 * C81006 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13805 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C13799 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C13806 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
              C81011 * C81012 * C80639 * C80993 +
          ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C13806 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C13799 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C13805) +
           (C92 * C5662 + C81 * C5670 + C93 * C6901 + C82 * C6902) * C80598) *
              C81011 * C81012 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
              C81011 * C81012 * C81010 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13246 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C13173 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13245) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
              C81011 * C81012 * C81000 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13245 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C13173 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C13246 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
              C81011 * C81012 * C80984 +
          ((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C13246 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C13173 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C13245) +
           (C92 * C861 + C81 * C869 + C93 * C2689 + C82 * C2690) * C80686) *
              C81011 * C81012 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13873 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81013 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13874 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C81006 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13875 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80993 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C13876 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C13799 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13874 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81013 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13873) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C81006 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C13875 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80993 +
           (C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C13876 +
           (C92 * C5721 + C81 * C5725 + C93 * C6973 + C82 * C6974) * C80972) *
              C81011 * C81012 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C13173 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80686) *
              C81010 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C13173) *
              C81000 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C13173 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80686) *
              C80984 +
          (((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C220 +
            (C92 * C951 + C81 * C959 + C93 * C2757 + C82 * C2758) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
               C81011 * C81012 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C81013 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C81006 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80993 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
               C81011 * C81012 * C80972) *
              C13799 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C81006 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C81013 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80993 +
           ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C220 +
            (C92 * C5771 + C81 * C5775 + C93 * C7041 + C82 * C7042) * C80639) *
               C81011 * C81012 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C13175 +
            (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
            C306 * C81000 + C307 * C13177 + C308 * C80984 - C309 * C13178 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C13175 + C306 * C81010 - C307 * C13176 - C308 * C81000 +
            C309 * C13177 + C310 * C80984 - C311 * C13178 - C312 * C80966) *
               C81012 * C82) *
              C80639 * C13173 +
          ((C1068 * C13176 -
            ((C275 * C757 + C81011 * C1043) * C81010 +
             (C275 * C748 + C81011 * C1036) * C13175) +
            C1069 * C81000 - C1070 * C13177 - C1071 * C80984 + C2832 * C13178 +
            C2833 * C80966) *
               C81012 * C81 +
           (C1070 * C13176 - (C1069 * C81010 + C1068 * C13175) +
            C1071 * C81000 - C2832 * C13177 - C2833 * C80984 +
            (C275 * C2617 + C81011 * C2825) * C13178 +
            (C275 * C2619 + C81011 * C2826) * C80966) *
               C81012 * C82) *
              C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C13805 +
            (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
            C306 * C80598) *
               C81012 * C81 +
           (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
               C81012 * C82) *
              C80639 * C81013 +
          ((C1068 * C13806 -
            ((C275 * C757 + C81011 * C1043) * C13799 +
             (C275 * C748 + C81011 * C1036) * C13805) +
            C1069 * C80598) *
               C81012 * C81 +
           (C1070 * C13806 - (C1069 * C13799 + C1068 * C13805) +
            C1071 * C80598) *
               C81012 * C82) *
              C80639 * C81006 +
          (((C275 * C750 + C81011 * C1039) * C13805 +
            (C275 * C764 + C81011 * C1047) * C13799 - C1072 * C13806 -
            C1073 * C80598) *
               C81012 * C81 +
           (C1072 * C13805 + C1073 * C13799 - C1074 * C13806 - C1075 * C80598) *
               C81012 * C82) *
              C80639 * C80993 +
          ((C7116 * C13806 -
            ((C275 * C5663 + C81011 * C5826) * C13799 +
             (C275 * C5659 + C81011 * C5822) * C13805) +
            C7117 * C80598) *
               C81012 * C81 +
           ((C275 * C6899 + C81011 * C7109) * C13806 -
            (C7117 * C13799 + C7116 * C13805) +
            (C275 * C6901 + C81011 * C7110) * C80598) *
               C81012 * C82) *
              C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C13245 +
                     (C275 * C166 + C81011 * C354) * C13173 -
                     (C275 * C748 + C81011 * C1036) * C13246 -
                     (C275 * C856 + C81011 * C1149) * C80686) *
                        C81012 * C81 +
                    (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                       C81010 +
                   ((C13448 - (C13447 + C13446) + C13449) * C81012 * C81 +
                    (C13450 - (C13451 + C13452) + C13453) * C81012 * C82) *
                       C81000 +
                   ((C13452 + C13451 - C13450 - C13453) * C81012 * C81 +
                    (C13454 + C13455 - C13456 - C13457) * C81012 * C82) *
                       C80984 +
                   ((C13456 - (C13455 + C13454) + C13457) * C81012 * C81 +
                    ((C275 * C2617 + C81011 * C2825) * C13246 -
                     (C376 * C13173 + C311 * C13245) +
                     (C275 * C2689 + C81011 * C2899) * C80686) *
                        C81012 * C82) *
                       C80966) *
                  C80639) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C13873 +
                     (C275 * C166 + C81011 * C354) * C81013 -
                     (C275 * C748 + C81011 * C1036) * C13874 -
                     (C275 * C856 + C81011 * C1149) * C81006 +
                     (C275 * C750 + C81011 * C1039) * C13875 +
                     (C275 * C857 + C81011 * C1150) * C80993 -
                     (C275 * C5659 + C81011 * C5822) * C13876 -
                     (C275 * C5722 + C81011 * C5871) * C80972) *
                        C81012 * C81 +
                    (C14076 + C14077 - C14078 - C14079 + C14080 + C14081 -
                     C14082 - C14083) *
                        C81012 * C82) *
                       C13799 +
                   ((C14078 - (C14077 + C14076) + C14079 - C14080 - C14081 +
                     C14082 + C14083) *
                        C81012 * C81 +
                    (C1070 * C13874 - (C374 * C81013 + C307 * C13873) +
                     C1176 * C81006 - C1074 * C13875 - C1177 * C80993 +
                     (C275 * C6899 + C81011 * C7109) * C13876 +
                     (C275 * C6973 + C81011 * C7183) * C80972) *
                        C81012 * C82) *
                       C80598) *
                  C80639) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C13173 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80686) *
              C81010 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80686 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C13173) *
              C81000 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C13173 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C80686) *
              C80984 +
          (((C2985 + C2987) * C81012 * C81 +
            ((C275 * C2617 + C81011 * C2825) * C220 +
             (C275 * C2757 + C81011 * C2981) * C80639) *
                C81012 * C82) *
               C80686 -
           ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
               C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C81013 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C81006 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80993 -
           ((C7267 + C7265) * C81012 * C82 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C81012 * C81) *
               C80972) *
              C13799 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C81006 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C81013 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80993 +
           ((C7265 + C7267) * C81012 * C81 +
            ((C275 * C6899 + C81011 * C7109) * C220 +
             (C275 * C7041 + C81011 * C7261) * C80639) *
                C81012 * C82) *
               C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13175 +
            (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
            C521 * C81000 + C522 * C13177 + C523 * C80984 - C524 * C13178 -
            C525 * C80966) *
               C81 +
           (C520 * C13175 + C521 * C81010 - C522 * C13176 - C523 * C81000 +
            C524 * C13177 + C525 * C80984 - C526 * C13178 - C527 * C80966) *
               C82) *
              C81011 * C80639 * C13173 +
          ((C1390 * C13176 -
            ((C490 * C757 + C81012 * C1365) * C81010 +
             (C490 * C748 + C81012 * C1358) * C13175) +
            C1391 * C81000 - C1392 * C13177 - C1393 * C80984 + C3060 * C13178 +
            C3061 * C80966) *
               C81 +
           (C1392 * C13176 - (C1391 * C81010 + C1390 * C13175) +
            C1393 * C81000 - C3060 * C13177 - C3061 * C80984 +
            (C490 * C2617 + C81012 * C3053) * C13178 +
            (C490 * C2619 + C81012 * C3054) * C80966) *
               C82) *
              C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13805 +
            (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
            C521 * C80598) *
               C81 +
           (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
               C82) *
              C81011 * C80639 * C81013 +
          ((C1390 * C13806 -
            ((C490 * C757 + C81012 * C1365) * C13799 +
             (C490 * C748 + C81012 * C1358) * C13805) +
            C1391 * C80598) *
               C81 +
           (C1392 * C13806 - (C1391 * C13799 + C1390 * C13805) +
            C1393 * C80598) *
               C82) *
              C81011 * C80639 * C81006 +
          (((C490 * C750 + C81012 * C1361) * C13805 +
            (C490 * C764 + C81012 * C1369) * C13799 - C1394 * C13806 -
            C1395 * C80598) *
               C81 +
           (C1394 * C13805 + C1395 * C13799 - C1396 * C13806 - C1397 * C80598) *
               C82) *
              C81011 * C80639 * C80993 +
          ((C7340 * C13806 -
            ((C490 * C5663 + C81012 * C5968) * C13799 +
             (C490 * C5659 + C81012 * C5964) * C13805) +
            C7341 * C80598) *
               C81 +
           ((C490 * C6899 + C81012 * C7333) * C13806 -
            (C7341 * C13799 + C7340 * C13805) +
            (C490 * C6901 + C81012 * C7334) * C80598) *
               C82) *
              C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C13245 +
                     (C490 * C166 + C81012 * C569) * C13173 -
                     (C490 * C748 + C81012 * C1358) * C13246 -
                     (C490 * C856 + C81012 * C1471) * C80686) *
                        C81 +
                    (C13656 + C13657 - C13658 - C13659) * C82) *
                       C81011 * C81010 +
                   ((C13658 - (C13657 + C13656) + C13659) * C81 +
                    (C13660 - (C13661 + C13662) + C13663) * C82) *
                       C81011 * C81000 +
                   ((C13662 + C13661 - C13660 - C13663) * C81 +
                    (C13664 + C13665 - C13666 - C13667) * C82) *
                       C81011 * C80984 +
                   ((C13666 - (C13665 + C13664) + C13667) * C81 +
                    ((C490 * C2617 + C81012 * C3053) * C13246 -
                     (C591 * C13173 + C526 * C13245) +
                     (C490 * C2689 + C81012 * C3127) * C80686) *
                        C82) *
                       C81011 * C80966) *
                  C80639) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C13873 +
                     (C490 * C166 + C81012 * C569) * C81013 -
                     (C490 * C748 + C81012 * C1358) * C13874 -
                     (C490 * C856 + C81012 * C1471) * C81006 +
                     (C490 * C750 + C81012 * C1361) * C13875 +
                     (C490 * C857 + C81012 * C1472) * C80993 -
                     (C490 * C5659 + C81012 * C5964) * C13876 -
                     (C490 * C5722 + C81012 * C6013) * C80972) *
                        C81 +
                    (C14282 + C14283 - C14284 - C14285 + C14286 + C14287 -
                     C14288 - C14289) *
                        C82) *
                       C81011 * C13799 +
                   ((C14284 - (C14283 + C14282) + C14285 - C14286 - C14287 +
                     C14288 + C14289) *
                        C81 +
                    (C1392 * C13874 - (C589 * C81013 + C522 * C13873) +
                     C1498 * C81006 - C1396 * C13875 - C1499 * C80993 +
                     (C490 * C6899 + C81012 * C7333) * C13876 +
                     (C490 * C6973 + C81012 * C7407) * C80972) *
                        C82) *
                       C81011 * C80598) *
                  C80639) /
                     (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C13173 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80686) *
              C81010 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80686 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C13173) *
              C81000 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C13173 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C80686) *
              C80984 +
          (((C3213 + C3215) * C81 + ((C490 * C2617 + C81012 * C3053) * C220 +
                                     (C490 * C2757 + C81012 * C3209) * C80639) *
                                        C82) *
               C81011 * C80686 -
           ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C81013 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C81006 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80993 -
           ((C7491 + C7489) * C82 + ((C490 * C5772 + C81012 * C6060) * C80639 +
                                     (C490 * C5659 + C81012 * C5964) * C220) *
                                        C81) *
               C81011 * C80972) *
              C13799 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C81006 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C81013 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80993 +
           ((C7489 + C7491) * C81 + ((C490 * C6899 + C81012 * C7333) * C220 +
                                     (C490 * C7041 + C81012 * C7485) * C80639) *
                                        C82) *
               C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78260 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80916 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78279) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80726) *
              C80682 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78260 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80916 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78279) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78279 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80916 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78260 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80726) *
              C80689 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78279 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80916 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78260 -
            (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C78260 -
            ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80916 +
             (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C78279) +
            (C92 * C6147 + C81 * C6157 + C93 * C7591 + C82 * C7592) * C80598) *
               C81011 * C81012 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78437 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80682 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78429 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80689 +
            (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78443 +
            (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C15344) *
               C81011 * C81012 * C80916 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78429 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80682 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78437) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80689 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78443 -
            (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C15344) *
               C81011 * C81012 * C80598) *
              C17817 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78429 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80682 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78437) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80689 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C78443 -
            (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C15344) *
               C81011 * C81012 * C80916 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78437 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80682 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78429 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80689 +
            (C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C78443 +
            (C92 * C6235 + C81 * C6241 + C93 * C7691 + C82 * C7692) * C15344) *
               C81011 * C81012 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C80682 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80689 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C17951 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C17817 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C17952 -
            (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
               C81011 * C81012 * C15344) *
              C80916 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C80682 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C17951 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C17817 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C17952 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80689 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C17952 -
            ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C17817 +
             (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C17951) +
            (C92 * C6323 + C81 * C6329 + C93 * C7791 + C82 * C7792) * C80726) *
               C81011 * C81012 * C15344) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78279 +
             (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
                C81012 * C82) *
               C17817 +
           ((C2004 * C78260 -
             ((C275 * C1693 + C81011 * C1979) * C80916 +
              (C275 * C1684 + C81011 * C1972) * C78279) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C78260 - (C2005 * C80916 + C2004 * C78279) +
             C2007 * C80598) *
                C81012 * C82) *
               C80726) *
              C80682 +
          (((C1068 * C78260 -
             ((C275 * C757 + C81011 * C1043) * C80916 +
              (C275 * C748 + C81011 * C1036) * C78279) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C78260 - (C1069 * C80916 + C1068 * C78279) +
             C1071 * C80598) *
                C81012 * C82) *
               C17817 +
           (((C275 * C3979 + C81011 * C4305) * C78279 +
             (C275 * C3985 + C81011 * C4309) * C80916 - C4322 * C78260 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C78279 + C4323 * C80916 - C4324 * C78260 -
             C4325 * C80598) *
                C81012 * C82) *
               C80726) *
              C80689 +
          ((((C275 * C750 + C81011 * C1039) * C78279 +
             (C275 * C764 + C81011 * C1047) * C80916 - C1072 * C78260 -
             C1073 * C80598) *
                C81012 * C81 +
            (C1072 * C78279 + C1073 * C80916 - C1074 * C78260 -
             C1075 * C80598) *
                C81012 * C82) *
               C17817 +
           ((C7898 * C78260 -
             ((C275 * C6148 + C81011 * C6416) * C80916 +
              (C275 * C6140 + C81011 * C6410) * C78279) +
             C7899 * C80598) *
                C81012 * C81 +
            ((C275 * C7589 + C81011 * C7891) * C78260 -
             (C7899 * C80916 + C7898 * C78279) +
             (C275 * C7591 + C81011 * C7892) * C80598) *
                C81012 * C82) *
               C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78437 +
             (C275 * C166 + C81011 * C354) * C80682 -
             (C275 * C748 + C81011 * C1036) * C78429 -
             (C275 * C856 + C81011 * C1149) * C80689 +
             (C275 * C750 + C81011 * C1039) * C78443 +
             (C275 * C857 + C81011 * C1150) * C15344) *
                C81012 * C81 +
            (C15648 + C15649 - C15650 - C15651 + C15652 + C15653) * C81012 *
                C82) *
               C80916 +
           ((C15650 - (C15649 + C15648) + C15651 - C15652 - C15653) * C81012 *
                C81 +
            (C15654 - (C15655 + C15656) + C15657 - C15658 - C15659) * C81012 *
                C82) *
               C80598) *
              C17817 +
          ((((C275 * C3979 + C81011 * C4305) * C78429 -
             ((C275 * C1790 + C81011 * C2087) * C80682 +
              (C275 * C1684 + C81011 * C1972) * C78437) +
             (C275 * C4093 + C81011 * C4423) * C80689 -
             (C275 * C6140 + C81011 * C6410) * C78443 -
             (C275 * C6236 + C81011 * C6493) * C15344) *
                C81012 * C81 +
            (C17348 - (C17349 + C17350) + C17351 - C17352 - C17353) * C81012 *
                C82) *
               C80916 +
           ((C17350 + C17349 - C17348 - C17351 + C17352 + C17353) * C81012 *
                C81 +
            (C2006 * C78437 + C2107 * C80682 - C4324 * C78429 - C4439 * C80689 +
             (C275 * C7589 + C81011 * C7891) * C78443 +
             (C275 * C7691 + C81011 * C7997) * C15344) *
                C81012 * C82) *
               C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C17951 +
                      (C275 * C221 + C81011 * C422) * C17817 -
                      (C275 * C1684 + C81011 * C1972) * C17952 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                        C80682 +
                    (((C275 * C3979 + C81011 * C4305) * C17952 -
                      ((C275 * C946 + C81011 * C1256) * C17817 +
                       (C275 * C748 + C81011 * C1036) * C17951) +
                      (C275 * C4199 + C81011 * C4539) * C80726) *
                         C81012 * C81 +
                     (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                        C80689 +
                    (((C275 * C750 + C81011 * C1039) * C17951 +
                      (C275 * C947 + C81011 * C1257) * C17817 -
                      (C275 * C6140 + C81011 * C6410) * C17952 -
                      (C275 * C6324 + C81011 * C6575) * C80726) *
                         C81012 * C81 +
                     (C18972 + C18973 - C18974 - C18975) * C81012 * C82) *
                        C15344) *
                       C80916 +
                   (((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                     (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                        C80682 +
                    ((C18970 + C18969 - C18968 - C18971) * C81012 * C81 +
                     (C20490 + C20491 - C20492 - C20493) * C81012 * C82) *
                        C80689 +
                    ((C18974 - (C18973 + C18972) + C18975) * C81012 * C81 +
                     ((C275 * C7589 + C81011 * C7891) * C17952 -
                      (C1279 * C17817 + C1074 * C17951) +
                      (C275 * C7791 + C81011 * C8105) * C80726) *
                         C81012 * C82) *
                        C15344) *
                       C80598)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78279 +
             (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
             C521 * C80598) *
                C81 +
            (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
                C82) *
               C81011 * C17817 +
           ((C2326 * C78260 -
             ((C490 * C1693 + C81012 * C2301) * C80916 +
              (C490 * C1684 + C81012 * C2294) * C78279) +
             C2327 * C80598) *
                C81 +
            (C2328 * C78260 - (C2327 * C80916 + C2326 * C78279) +
             C2329 * C80598) *
                C82) *
               C81011 * C80726) *
              C80682 +
          (((C1390 * C78260 -
             ((C490 * C757 + C81012 * C1365) * C80916 +
              (C490 * C748 + C81012 * C1358) * C78279) +
             C1391 * C80598) *
                C81 +
            (C1392 * C78260 - (C1391 * C80916 + C1390 * C78279) +
             C1393 * C80598) *
                C82) *
               C81011 * C17817 +
           (((C490 * C3979 + C81012 * C4655) * C78279 +
             (C490 * C3985 + C81012 * C4659) * C80916 - C4672 * C78260 -
             C4673 * C80598) *
                C81 +
            (C4672 * C78279 + C4673 * C80916 - C4674 * C78260 -
             C4675 * C80598) *
                C82) *
               C81011 * C80726) *
              C80689 +
          ((((C490 * C750 + C81012 * C1361) * C78279 +
             (C490 * C764 + C81012 * C1369) * C80916 - C1394 * C78260 -
             C1395 * C80598) *
                C81 +
            (C1394 * C78279 + C1395 * C80916 - C1396 * C78260 -
             C1397 * C80598) *
                C82) *
               C81011 * C17817 +
           ((C8218 * C78260 -
             ((C490 * C6148 + C81012 * C6662) * C80916 +
              (C490 * C6140 + C81012 * C6656) * C78279) +
             C8219 * C80598) *
                C81 +
            ((C490 * C7589 + C81012 * C8211) * C78260 -
             (C8219 * C80916 + C8218 * C78279) +
             (C490 * C7591 + C81012 * C8212) * C80598) *
                C82) *
               C81011 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78437 +
             (C490 * C166 + C81012 * C569) * C80682 -
             (C490 * C748 + C81012 * C1358) * C78429 -
             (C490 * C856 + C81012 * C1471) * C80689 +
             (C490 * C750 + C81012 * C1361) * C78443 +
             (C490 * C857 + C81012 * C1472) * C15344) *
                C81 +
            (C15882 + C15883 - C15884 - C15885 + C15886 + C15887) * C82) *
               C81011 * C80916 +
           ((C15884 - (C15883 + C15882) + C15885 - C15886 - C15887) * C81 +
            (C15888 - (C15889 + C15890) + C15891 - C15892 - C15893) * C82) *
               C81011 * C80598) *
              C17817 +
          ((((C490 * C3979 + C81012 * C4655) * C78429 -
             ((C490 * C1790 + C81012 * C2409) * C80682 +
              (C490 * C1684 + C81012 * C2294) * C78437) +
             (C490 * C4093 + C81012 * C4773) * C80689 -
             (C490 * C6140 + C81012 * C6656) * C78443 -
             (C490 * C6236 + C81012 * C6739) * C15344) *
                C81 +
            (C17648 - (C17649 + C17650) + C17651 - C17652 - C17653) * C82) *
               C81011 * C80916 +
           ((C17650 + C17649 - C17648 - C17651 + C17652 + C17653) * C81 +
            (C2328 * C78437 + C2429 * C80682 - C4674 * C78429 - C4789 * C80689 +
             (C490 * C7589 + C81012 * C8211) * C78443 +
             (C490 * C7691 + C81012 * C8317) * C15344) *
                C82) *
               C81011 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C18362 + C18363 - C18364 - C18365) * C82) *
                        C81011 * C80682 +
                    (((C490 * C3979 + C81012 * C4655) * C17952 -
                      ((C490 * C946 + C81012 * C1578) * C17817 +
                       (C490 * C748 + C81012 * C1358) * C17951) +
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81 +
                     (C19276 - (C19277 + C19278) + C19279) * C82) *
                        C81011 * C80689 +
                    (((C490 * C750 + C81012 * C1361) * C17951 +
                      (C490 * C947 + C81012 * C1579) * C17817 -
                      (C490 * C6140 + C81012 * C6656) * C17952 -
                      (C490 * C6324 + C81012 * C6821) * C80726) *
                         C81 +
                     (C19280 + C19281 - C19282 - C19283) * C82) *
                        C81011 * C15344) *
                       C80916 +
                   (((C18364 - (C18363 + C18362) + C18365) * C81 +
                     (C18366 - (C18367 + C18368) + C18369) * C82) *
                        C81011 * C80682 +
                    ((C19278 + C19277 - C19276 - C19279) * C81 +
                     (C20788 + C20789 - C20790 - C20791) * C82) *
                        C81011 * C80689 +
                    ((C19282 - (C19281 + C19280) + C19283) * C81 +
                     ((C490 * C7589 + C81012 * C8211) * C17952 -
                      (C1601 * C17817 + C1396 * C17951) +
                      (C490 * C7791 + C81012 * C8425) * C80726) *
                         C82) *
                        C81011 * C15344) *
                       C80598)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C80722 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C80729 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
               C81011 * C81012 * C20867) *
              C80682 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C80729 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C80722 -
           ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80588 +
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5657) *
               C81011 * C81012 * C20867) *
              C80689 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C80722 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C80729 +
           ((C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C5657 +
            (C92 * C6153 + C81 * C6159 + C93 * C6154 + C82 * C6160) * C80588) *
               C81011 * C81012 * C20867) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78437 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80682 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78429 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80689 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78443 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C15344) *
              C81011 * C81012 * C80588 * C80722 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78429 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80682 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78437) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80689 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C78443 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C15344) *
              C81011 * C81012 * C80588 * C80729 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78437 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80682 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C78429 -
           (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80689 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C78443 +
           (C92 * C6239 + C81 * C6245 + C93 * C6240 + C82 * C6246) * C15344) *
              C81011 * C81012 * C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78528 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80722 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78520 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80729 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78534 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C20867) *
              C81011 * C81012 * C80682 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78520 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80722 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78528) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80729 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C78534 -
           (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C20867) *
              C81011 * C81012 * C80689 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78528 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80722 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C78520 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80729 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C78534 +
           (C92 * C6325 + C81 * C6331 + C93 * C6326 + C82 * C6332) * C20867) *
              C81011 * C81012 * C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eeyx[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C80722 -
                    ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                     ((C275 * C1693 + C81011 * C1979) * C80588 +
                      (C275 * C1684 + C81011 * C1972) * C5657) *
                         C81012 * C81) *
                        C80729 +
                    (((C275 * C1686 + C81011 * C1975) * C5657 +
                      (C275 * C1700 + C81011 * C1983) * C80588) *
                         C81012 * C81 +
                     (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                        C20867) *
                       C80682 +
                   ((((C275 * C3979 + C81011 * C4305) * C5657 +
                      (C275 * C3985 + C81011 * C4309) * C80588) *
                         C81012 * C81 +
                     (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                        C80729 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C80722 -
                    ((C11281 * C80588 + C11280 * C5657) * C81012 * C82 +
                     ((C275 * C6144 + C81011 * C6414) * C80588 +
                      (C275 * C6138 + C81011 * C6408) * C5657) *
                         C81012 * C81) *
                        C20867) *
                       C80689 +
                   ((((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C81012 * C81 +
                     (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                        C80722 -
                    ((C7899 * C80588 + C7898 * C5657) * C81012 * C82 +
                     ((C275 * C6148 + C81011 * C6416) * C80588 +
                      (C275 * C6140 + C81011 * C6410) * C5657) *
                         C81012 * C81) *
                        C80729 +
                    (((C275 * C6141 + C81011 * C6411) * C5657 +
                      (C275 * C6153 + C81011 * C6417) * C80588) *
                         C81012 * C81 +
                     ((C275 * C6142 + C81011 * C6412) * C5657 +
                      (C275 * C6154 + C81011 * C6418) * C80588) *
                         C81012 * C82) *
                        C20867) *
                       C15344)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78437 +
            (C275 * C166 + C81011 * C354) * C80682 -
            (C275 * C748 + C81011 * C1036) * C78429 -
            (C275 * C856 + C81011 * C1149) * C80689 +
            (C275 * C750 + C81011 * C1039) * C78443 +
            (C275 * C857 + C81011 * C1150) * C15344) *
               C81012 * C81 +
           (C15648 + C15649 - C15650 - C15651 + C15652 + C15653) * C81012 *
               C82) *
              C80588 * C80722 +
          (((C275 * C3979 + C81011 * C4305) * C78429 -
            ((C275 * C1790 + C81011 * C2087) * C80682 +
             (C275 * C1684 + C81011 * C1972) * C78437) +
            (C275 * C4093 + C81011 * C4423) * C80689 -
            (C275 * C6140 + C81011 * C6410) * C78443 -
            (C275 * C6236 + C81011 * C6493) * C15344) *
               C81012 * C81 +
           (C17348 - (C17349 + C17350) + C17351 - C17352 - C17353) * C81012 *
               C82) *
              C80588 * C80729 +
          (((C275 * C1686 + C81011 * C1975) * C78437 +
            (C275 * C1792 + C81011 * C2089) * C80682 -
            (C275 * C6138 + C81011 * C6408) * C78429 -
            (C275 * C6238 + C81011 * C6495) * C80689 +
            (C275 * C6141 + C81011 * C6411) * C78443 +
            (C275 * C6239 + C81011 * C6496) * C15344) *
               C81012 * C81 +
           (C2008 * C78437 + C2108 * C80682 - C11280 * C78429 -
            C11386 * C80689 + (C275 * C6142 + C81011 * C6412) * C78443 +
            (C275 * C6240 + C81011 * C6498) * C15344) *
               C81012 * C82) *
              C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C78528 +
                     (C275 * C221 + C81011 * C422) * C80722 -
                     (C275 * C1684 + C81011 * C1972) * C78520 -
                     (C275 * C1882 + C81011 * C2187) * C80729 +
                     (C275 * C1686 + C81011 * C1975) * C78534 +
                     (C275 * C1883 + C81011 * C2188) * C20867) *
                        C81012 * C81 +
                    (C21242 + C21243 - C21244 - C21245 + C21246 + C21247) *
                        C81012 * C82) *
                       C80682 +
                   (((C275 * C3979 + C81011 * C4305) * C78520 -
                     ((C275 * C946 + C81011 * C1256) * C80722 +
                      (C275 * C748 + C81011 * C1036) * C78528) +
                     (C275 * C4199 + C81011 * C4539) * C80729 -
                     (C275 * C6138 + C81011 * C6408) * C78534 -
                     (C275 * C6322 + C81011 * C6573) * C20867) *
                        C81012 * C81 +
                    (C22076 - (C22077 + C22078) + C22079 - C22080 - C22081) *
                        C81012 * C82) *
                       C80689 +
                   (((C275 * C750 + C81011 * C1039) * C78528 +
                     (C275 * C947 + C81011 * C1257) * C80722 -
                     (C275 * C6140 + C81011 * C6410) * C78520 -
                     (C275 * C6324 + C81011 * C6575) * C80729 +
                     (C275 * C6141 + C81011 * C6411) * C78534 +
                     (C275 * C6325 + C81011 * C6576) * C20867) *
                        C81012 * C81 +
                    (C1072 * C78528 + C1277 * C80722 - C7898 * C78520 -
                     C8112 * C80729 + (C275 * C6142 + C81011 * C6412) * C78534 +
                     (C275 * C6326 + C81011 * C6578) * C20867) *
                        C81012 * C82) *
                       C15344) *
                  C80588) /
                 (p * q * std::sqrt(p + q));
    d2eezx[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81 +
                     (C520 * C5657 + C521 * C80588) * C82) *
                        C81011 * C80722 -
                    ((C2327 * C80588 + C2326 * C5657) * C82 +
                     ((C490 * C1693 + C81012 * C2301) * C80588 +
                      (C490 * C1684 + C81012 * C2294) * C5657) *
                         C81) *
                        C81011 * C80729 +
                    (((C490 * C1686 + C81012 * C2297) * C5657 +
                      (C490 * C1700 + C81012 * C2305) * C80588) *
                         C81 +
                     (C2330 * C5657 + C2331 * C80588) * C82) *
                        C81011 * C20867) *
                       C80682 +
                   ((((C490 * C3979 + C81012 * C4655) * C5657 +
                      (C490 * C3985 + C81012 * C4659) * C80588) *
                         C81 +
                     (C4672 * C5657 + C4673 * C80588) * C82) *
                        C81011 * C80729 -
                    ((C1391 * C80588 + C1390 * C5657) * C82 +
                     ((C490 * C757 + C81012 * C1365) * C80588 +
                      (C490 * C748 + C81012 * C1358) * C5657) *
                         C81) *
                        C81011 * C80722 -
                    ((C11601 * C80588 + C11600 * C5657) * C82 +
                     ((C490 * C6144 + C81012 * C6660) * C80588 +
                      (C490 * C6138 + C81012 * C6654) * C5657) *
                         C81) *
                        C81011 * C20867) *
                       C80689 +
                   ((((C490 * C750 + C81012 * C1361) * C5657 +
                      (C490 * C764 + C81012 * C1369) * C80588) *
                         C81 +
                     (C1394 * C5657 + C1395 * C80588) * C82) *
                        C81011 * C80722 -
                    ((C8219 * C80588 + C8218 * C5657) * C82 +
                     ((C490 * C6148 + C81012 * C6662) * C80588 +
                      (C490 * C6140 + C81012 * C6656) * C5657) *
                         C81) *
                        C81011 * C80729 +
                    (((C490 * C6141 + C81012 * C6657) * C5657 +
                      (C490 * C6153 + C81012 * C6663) * C80588) *
                         C81 +
                     ((C490 * C6142 + C81012 * C6658) * C5657 +
                      (C490 * C6154 + C81012 * C6664) * C80588) *
                         C82) *
                        C81011 * C20867) *
                       C15344)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78437 +
            (C490 * C166 + C81012 * C569) * C80682 -
            (C490 * C748 + C81012 * C1358) * C78429 -
            (C490 * C856 + C81012 * C1471) * C80689 +
            (C490 * C750 + C81012 * C1361) * C78443 +
            (C490 * C857 + C81012 * C1472) * C15344) *
               C81 +
           (C15882 + C15883 - C15884 - C15885 + C15886 + C15887) * C82) *
              C81011 * C80588 * C80722 +
          (((C490 * C3979 + C81012 * C4655) * C78429 -
            ((C490 * C1790 + C81012 * C2409) * C80682 +
             (C490 * C1684 + C81012 * C2294) * C78437) +
            (C490 * C4093 + C81012 * C4773) * C80689 -
            (C490 * C6140 + C81012 * C6656) * C78443 -
            (C490 * C6236 + C81012 * C6739) * C15344) *
               C81 +
           (C17648 - (C17649 + C17650) + C17651 - C17652 - C17653) * C82) *
              C81011 * C80588 * C80729 +
          (((C490 * C1686 + C81012 * C2297) * C78437 +
            (C490 * C1792 + C81012 * C2411) * C80682 -
            (C490 * C6138 + C81012 * C6654) * C78429 -
            (C490 * C6238 + C81012 * C6741) * C80689 +
            (C490 * C6141 + C81012 * C6657) * C78443 +
            (C490 * C6239 + C81012 * C6742) * C15344) *
               C81 +
           (C2330 * C78437 + C2430 * C80682 - C11600 * C78429 -
            C11706 * C80689 + (C490 * C6142 + C81012 * C6658) * C78443 +
            (C490 * C6240 + C81012 * C6744) * C15344) *
               C82) *
              C81011 * C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78528 +
            (C490 * C221 + C81012 * C637) * C80722 -
            (C490 * C1684 + C81012 * C2294) * C78520 -
            (C490 * C1882 + C81012 * C2509) * C80729 +
            (C490 * C1686 + C81012 * C2297) * C78534 +
            (C490 * C1883 + C81012 * C2510) * C20867) *
               C81 +
           (C21476 + C21477 - C21478 - C21479 + C21480 + C21481) * C82) *
              C81011 * C80682 +
          (((C490 * C3979 + C81012 * C4655) * C78520 -
            ((C490 * C946 + C81012 * C1578) * C80722 +
             (C490 * C748 + C81012 * C1358) * C78528) +
            (C490 * C4199 + C81012 * C4889) * C80729 -
            (C490 * C6138 + C81012 * C6654) * C78534 -
            (C490 * C6322 + C81012 * C6819) * C20867) *
               C81 +
           (C22376 - (C22377 + C22378) + C22379 - C22380 - C22381) * C82) *
              C81011 * C80689 +
          (((C490 * C750 + C81012 * C1361) * C78528 +
            (C490 * C947 + C81012 * C1579) * C80722 -
            (C490 * C6140 + C81012 * C6656) * C78520 -
            (C490 * C6324 + C81012 * C6821) * C80729 +
            (C490 * C6141 + C81012 * C6657) * C78534 +
            (C490 * C6325 + C81012 * C6822) * C20867) *
               C81 +
           (C1394 * C78528 + C1599 * C80722 - C8218 * C78520 - C8432 * C80729 +
            (C490 * C6142 + C81012 * C6658) * C78534 +
            (C490 * C6326 + C81012 * C6824) * C20867) *
               C82) *
              C81011 * C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C17817 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C80726) *
              C81013 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C17817) *
              C81006 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C17817 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C80726) *
              C80993 +
          (((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C5657 +
            (C92 * C8503 + C81 * C8505 + C93 * C8504 + C82 * C8506) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
               C81011 * C81012 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
            (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
            (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
               C81011 * C81012 * C17817 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C4988 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80998 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C4987) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80982 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C4989 -
            (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
               C81011 * C81012 * C80726) *
              C13173 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C4988 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80998 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C4987) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80982 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C4989 -
            (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
               C81011 * C81012 * C17817 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C4987 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80998 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C4988 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80982 +
            (C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C4989 +
            (C92 * C3988 + C81 * C3993 + C93 * C3990 + C82 * C3994) * C80954) *
               C81011 * C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C81014 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C81008 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
               C81011 * C81012 * C80996 -
           ((C93 * C10472 + C82 * C10480 + C92 * C10473 + C81 * C10481) *
                C80588 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C5657) *
               C81011 * C81012 * C80978) *
              C13173 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C81008 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C81014 -
           ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80588 +
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5657) *
               C81011 * C81012 * C80996 +
           ((C92 * C12543 + C81 * C12545 + C93 * C12544 + C82 * C12546) *
                C5657 +
            (C92 * C12547 + C81 * C12549 + C93 * C12548 + C82 * C12550) *
                C80588) *
               C81011 * C81012 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13873 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81013 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13874 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C81006 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13875 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80993 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C13876 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C80588 * C17817 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13874 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C81013 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13873) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C81006 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C13875 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80993 +
           (C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C13876 +
           (C92 * C8573 + C81 * C8575 + C93 * C8574 + C82 * C8576) * C80972) *
              C81011 * C81012 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C80998 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13246 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C13173 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13245) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80982 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13245 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C13173 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C13246 -
            (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
               C81011 * C81012 * C80954) *
              C17817 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13246 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C13173 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13245) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C80998 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13245 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C13173 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13246 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80982 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C13246 -
            ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C13173 +
             (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C13245) +
            (C92 * C4095 + C81 * C4099 + C93 * C4096 + C82 * C4100) * C80686) *
               C81011 * C81012 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
              C81011 * C81012 * C80588 * C81014 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13246 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C13173 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13245) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
              C81011 * C81012 * C80588 * C81008 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C13245 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C13173 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C13246 -
           (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80686) *
              C81011 * C81012 * C80588 * C80996 +
          ((C92 * C12543 + C81 * C12545 + C93 * C12544 + C82 * C12546) *
               C13246 -
           ((C93 * C10526 + C82 * C10530 + C92 * C10527 + C81 * C10531) *
                C13173 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C13245) +
           (C92 * C12617 + C81 * C12619 + C93 * C12618 + C82 * C12620) *
               C80686) *
              C81011 * C81012 * C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C81013 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
              C81011 * C81012 * C81006 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C17951 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C17817 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C17952 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
              C81011 * C81012 * C80993 +
          ((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C17952 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C17817 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C17951) +
           (C92 * C8643 + C81 * C8645 + C93 * C8644 + C82 * C8646) * C80726) *
              C81011 * C81012 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80998 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C17951 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C17817 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C17952 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80982 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C17951 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C17817 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C17952 -
            (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C17952 -
            ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C17817 +
             (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C17951) +
            (C92 * C4201 + C81 * C4205 + C93 * C4202 + C82 * C4206) * C80726) *
               C81011 * C81012 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C19485 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C81014 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C19486 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C81008 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C19487 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80996 -
           (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
               C19488 -
           (C93 * C10581 + C82 * C10585 + C92 * C10582 + C81 * C10586) *
               C80978) *
              C81011 * C81012 * C13173 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C19486 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C81014 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C19485) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C81008 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C19487 -
           (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C80996 +
           (C92 * C12543 + C81 * C12545 + C93 * C12544 + C82 * C12546) *
               C19488 +
           (C92 * C12687 + C81 * C12689 + C93 * C12688 + C82 * C12690) *
               C80978) *
              C81011 * C81012 * C80686) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C17817 -
                    ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                     ((C275 * C1693 + C81011 * C1979) * C80588 +
                      (C275 * C1684 + C81011 * C1972) * C5657) *
                         C81012 * C81) *
                        C80726) *
                       C81013 +
                   ((((C275 * C3979 + C81011 * C4305) * C5657 +
                      (C275 * C3985 + C81011 * C4309) * C80588) *
                         C81012 * C81 +
                     (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                        C80726 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C17817) *
                       C81006 +
                   ((((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C81012 * C81 +
                     (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                        C17817 -
                    ((C7899 * C80588 + C7898 * C5657) * C81012 * C82 +
                     ((C275 * C6148 + C81011 * C6416) * C80588 +
                      (C275 * C6140 + C81011 * C6410) * C5657) *
                         C81012 * C81) *
                        C80726) *
                       C80993 +
                   ((((C275 * C8499 + C81011 * C8713) * C5657 +
                      (C275 * C8503 + C81011 * C8715) * C80588) *
                         C81012 * C81 +
                     ((C275 * C8500 + C81011 * C8714) * C5657 +
                      (C275 * C8504 + C81011 * C8716) * C80588) *
                         C81012 * C82) *
                        C80726 -
                    ((C7117 * C80588 + C7116 * C5657) * C81012 * C82 +
                     ((C275 * C5663 + C81011 * C5826) * C80588 +
                      (C275 * C5659 + C81011 * C5822) * C5657) *
                         C81012 * C81) *
                        C17817) *
                       C80972)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C17817 +
                    ((C2004 * C4988 -
                      ((C275 * C1693 + C81011 * C1979) * C80998 +
                       (C275 * C1684 + C81011 * C1972) * C4987) +
                      C2005 * C80982 - C2006 * C4989 - C2007 * C80954) *
                         C81012 * C81 +
                     (C2006 * C4988 - (C2005 * C80998 + C2004 * C4987) +
                      C2007 * C80982 - C3498 * C4989 - C3499 * C80954) *
                         C81012 * C82) *
                        C80726) *
                       C13173 +
                   (((C1068 * C4988 -
                      ((C275 * C757 + C81011 * C1043) * C80998 +
                       (C275 * C748 + C81011 * C1036) * C4987) +
                      C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C4988 - (C1069 * C80998 + C1068 * C4987) +
                      C1071 * C80982 - C2832 * C4989 - C2833 * C80954) *
                         C81012 * C82) *
                        C17817 +
                    (((C275 * C3979 + C81011 * C4305) * C4987 +
                      (C275 * C3985 + C81011 * C4309) * C80998 - C4322 * C4988 -
                      C4323 * C80982 + C4324 * C4989 + C4325 * C80954) *
                         C81012 * C81 +
                     (C4322 * C4987 + C4323 * C80998 - C4324 * C4988 -
                      C4325 * C80982 + (C275 * C3982 + C81011 * C4308) * C4989 +
                      (C275 * C3990 + C81011 * C4312) * C80954) *
                         C81012 * C82) *
                        C80726) *
                       C80686)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C81014 -
                    ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                     ((C275 * C1693 + C81011 * C1979) * C80588 +
                      (C275 * C1684 + C81011 * C1972) * C5657) *
                         C81012 * C81) *
                        C81008 +
                    (((C275 * C1686 + C81011 * C1975) * C5657 +
                      (C275 * C1700 + C81011 * C1983) * C80588) *
                         C81012 * C81 +
                     (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                        C80996 -
                    ((C12103 * C80588 + C12102 * C5657) * C81012 * C82 +
                     ((C275 * C10473 + C81011 * C10636) * C80588 +
                      (C275 * C10469 + C81011 * C10632) * C5657) *
                         C81012 * C81) *
                        C80978) *
                       C13173 +
                   ((((C275 * C3979 + C81011 * C4305) * C5657 +
                      (C275 * C3985 + C81011 * C4309) * C80588) *
                         C81012 * C81 +
                     (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                        C81008 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C81014 -
                    ((C11281 * C80588 + C11280 * C5657) * C81012 * C82 +
                     ((C275 * C6144 + C81011 * C6414) * C80588 +
                      (C275 * C6138 + C81011 * C6408) * C5657) *
                         C81012 * C81) *
                        C80996 +
                    (((C275 * C12543 + C81011 * C12757) * C5657 +
                      (C275 * C12547 + C81011 * C12759) * C80588) *
                         C81012 * C81 +
                     ((C275 * C12544 + C81011 * C12758) * C5657 +
                      (C275 * C12548 + C81011 * C12760) * C80588) *
                         C81012 * C82) *
                        C80978) *
                       C80686)) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C13873 +
                     (C275 * C166 + C81011 * C354) * C81013 -
                     (C275 * C748 + C81011 * C1036) * C13874 -
                     (C275 * C856 + C81011 * C1149) * C81006 +
                     (C275 * C750 + C81011 * C1039) * C13875 +
                     (C275 * C857 + C81011 * C1150) * C80993 -
                     (C275 * C5659 + C81011 * C5822) * C13876 -
                     (C275 * C5722 + C81011 * C5871) * C80972) *
                        C81012 * C81 +
                    (C14076 + C14077 - C14078 - C14079 + C14080 + C14081 -
                     C14082 - C14083) *
                        C81012 * C82) *
                       C80588 * C17817 +
                   (((C275 * C3979 + C81011 * C4305) * C13874 -
                     ((C275 * C1790 + C81011 * C2087) * C81013 +
                      (C275 * C1684 + C81011 * C1972) * C13873) +
                     (C275 * C4093 + C81011 * C4423) * C81006 -
                     (C275 * C6140 + C81011 * C6410) * C13875 -
                     (C275 * C6236 + C81011 * C6493) * C80993 +
                     (C275 * C8499 + C81011 * C8713) * C13876 +
                     (C275 * C8573 + C81011 * C8783) * C80972) *
                        C81012 * C81 +
                    (C4322 * C13874 - (C2106 * C81013 + C2004 * C13873) +
                     C4438 * C81006 - C7898 * C13875 - C8006 * C80993 +
                     (C275 * C8500 + C81011 * C8714) * C13876 +
                     (C275 * C8574 + C81011 * C8784) * C80972) *
                        C81012 * C82) *
                       C80588 * C80726)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C81012 * C81 +
                     (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                        C80998 +
                    ((C13448 - (C13447 + C13446) + C13449) * C81012 * C81 +
                     (C13450 - (C13451 + C13452) + C13453) * C81012 * C82) *
                        C80982 +
                    ((C13452 + C13451 - C13450 - C13453) * C81012 * C81 +
                     (C13454 + C13455 - C13456 - C13457) * C81012 * C82) *
                        C80954) *
                       C17817 +
                   ((((C275 * C3979 + C81011 * C4305) * C13246 -
                      ((C275 * C1790 + C81011 * C2087) * C13173 +
                       (C275 * C1684 + C81011 * C1972) * C13245) +
                      (C275 * C4093 + C81011 * C4423) * C80686) *
                         C81012 * C81 +
                     (C14846 - (C14847 + C14848) + C14849) * C81012 * C82) *
                        C80998 +
                    ((C14848 + C14847 - C14846 - C14849) * C81012 * C81 +
                     (C16458 + C16459 - C16460 - C16461) * C81012 * C82) *
                        C80982 +
                    ((C16460 - (C16459 + C16458) + C16461) * C81012 * C81 +
                     ((C275 * C3982 + C81011 * C4308) * C13246 -
                      (C3570 * C13173 + C3498 * C13245) +
                      (C275 * C4096 + C81011 * C4426) * C80686) *
                         C81012 * C82) *
                        C80954) *
                       C80726)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C13245 +
                     (C275 * C166 + C81011 * C354) * C13173 -
                     (C275 * C748 + C81011 * C1036) * C13246 -
                     (C275 * C856 + C81011 * C1149) * C80686) *
                        C81012 * C81 +
                    (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                       C80588 * C81014 +
                   (((C275 * C3979 + C81011 * C4305) * C13246 -
                     ((C275 * C1790 + C81011 * C2087) * C13173 +
                      (C275 * C1684 + C81011 * C1972) * C13245) +
                     (C275 * C4093 + C81011 * C4423) * C80686) *
                        C81012 * C81 +
                    (C14846 - (C14847 + C14848) + C14849) * C81012 * C82) *
                       C80588 * C81008 +
                   (((C275 * C1686 + C81011 * C1975) * C13245 +
                     (C275 * C1792 + C81011 * C2089) * C13173 -
                     (C275 * C6138 + C81011 * C6408) * C13246 -
                     (C275 * C6238 + C81011 * C6495) * C80686) *
                        C81012 * C81 +
                    (C14850 + C14851 - C14852 - C14853) * C81012 * C82) *
                       C80588 * C80996 +
                   (((C275 * C12543 + C81011 * C12757) * C13246 -
                     ((C275 * C10527 + C81011 * C10682) * C13173 +
                      (C275 * C10469 + C81011 * C10632) * C13245) +
                     (C275 * C12617 + C81011 * C12827) * C80686) *
                        C81012 * C81 +
                    ((C275 * C12544 + C81011 * C12758) * C13246 -
                     (C12174 * C13173 + C12102 * C13245) +
                     (C275 * C12618 + C81011 * C12828) * C80686) *
                        C81012 * C82) *
                       C80588 * C80978)) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C17951 +
                     (C275 * C221 + C81011 * C422) * C17817 -
                     (C275 * C1684 + C81011 * C1972) * C17952 -
                     (C275 * C1882 + C81011 * C2187) * C80726) *
                        C81012 * C81 +
                    (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                       C81013 +
                   (((C275 * C3979 + C81011 * C4305) * C17952 -
                     ((C275 * C946 + C81011 * C1256) * C17817 +
                      (C275 * C748 + C81011 * C1036) * C17951) +
                     (C275 * C4199 + C81011 * C4539) * C80726) *
                        C81012 * C81 +
                    (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                       C81006 +
                   (((C275 * C750 + C81011 * C1039) * C17951 +
                     (C275 * C947 + C81011 * C1257) * C17817 -
                     (C275 * C6140 + C81011 * C6410) * C17952 -
                     (C275 * C6324 + C81011 * C6575) * C80726) *
                        C81012 * C81 +
                    (C18972 + C18973 - C18974 - C18975) * C81012 * C82) *
                       C80993 +
                   (((C275 * C8499 + C81011 * C8713) * C17952 -
                     ((C275 * C5772 + C81011 * C5918) * C17817 +
                      (C275 * C5659 + C81011 * C5822) * C17951) +
                     (C275 * C8643 + C81011 * C8851) * C80726) *
                        C81012 * C81 +
                    ((C275 * C8500 + C81011 * C8714) * C17952 -
                     (C7266 * C17817 + C7116 * C17951) +
                     (C275 * C8644 + C81011 * C8852) * C80726) *
                        C81012 * C82) *
                       C80972) *
                  C80588) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C17951 +
                      (C275 * C221 + C81011 * C422) * C17817 -
                      (C275 * C1684 + C81011 * C1972) * C17952 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                        C13173 +
                    (((C275 * C3979 + C81011 * C4305) * C17952 -
                      ((C275 * C946 + C81011 * C1256) * C17817 +
                       (C275 * C748 + C81011 * C1036) * C17951) +
                      (C275 * C4199 + C81011 * C4539) * C80726) *
                         C81012 * C81 +
                     (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                        C80686) *
                       C80998 +
                   (((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                     (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                        C13173 +
                    ((C18970 + C18969 - C18968 - C18971) * C81012 * C81 +
                     (C20490 + C20491 - C20492 - C20493) * C81012 * C82) *
                        C80686) *
                       C80982 +
                   (((C18158 + C18157 - C18156 - C18159) * C81012 * C81 +
                     (C18160 + C18161 - C18162 - C18163) * C81012 * C82) *
                        C13173 +
                    ((C20492 - (C20491 + C20490) + C20493) * C81012 * C81 +
                     ((C275 * C3982 + C81011 * C4308) * C17952 -
                      (C2986 * C17817 + C2832 * C17951) +
                      (C275 * C4202 + C81011 * C4542) * C80726) *
                         C81012 * C82) *
                        C80686) *
                       C80954)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C19485 +
                     (C275 * C221 + C81011 * C422) * C81014 -
                     (C275 * C1684 + C81011 * C1972) * C19486 -
                     (C275 * C1882 + C81011 * C2187) * C81008 +
                     (C275 * C1686 + C81011 * C1975) * C19487 +
                     (C275 * C1883 + C81011 * C2188) * C80996 -
                     (C275 * C10469 + C81011 * C10632) * C19488 -
                     (C275 * C10582 + C81011 * C10727) * C80978) *
                        C81012 * C81 +
                    (C19688 + C19689 - C19690 - C19691 + C19692 + C19693 -
                     C19694 - C19695) *
                        C81012 * C82) *
                       C13173 +
                   (((C275 * C3979 + C81011 * C4305) * C19486 -
                     ((C275 * C946 + C81011 * C1256) * C81014 +
                      (C275 * C748 + C81011 * C1036) * C19485) +
                     (C275 * C4199 + C81011 * C4539) * C81008 -
                     (C275 * C6138 + C81011 * C6408) * C19487 -
                     (C275 * C6322 + C81011 * C6573) * C80996 +
                     (C275 * C12543 + C81011 * C12757) * C19488 +
                     (C275 * C12687 + C81011 * C12895) * C80978) *
                        C81012 * C81 +
                    (C4322 * C19486 - (C1276 * C81014 + C1068 * C19485) +
                     C4554 * C81008 - C11280 * C19487 - C11494 * C80996 +
                     (C275 * C12544 + C81011 * C12758) * C19488 +
                     (C275 * C12688 + C81011 * C12896) * C80978) *
                        C81012 * C82) *
                       C80686) *
                  C80588) /
                     (p * q * std::sqrt(p + q));
    d2eezx[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81 +
                     (C520 * C5657 + C521 * C80588) * C82) *
                        C81011 * C17817 -
                    ((C2327 * C80588 + C2326 * C5657) * C82 +
                     ((C490 * C1693 + C81012 * C2301) * C80588 +
                      (C490 * C1684 + C81012 * C2294) * C5657) *
                         C81) *
                        C81011 * C80726) *
                       C81013 +
                   ((((C490 * C3979 + C81012 * C4655) * C5657 +
                      (C490 * C3985 + C81012 * C4659) * C80588) *
                         C81 +
                     (C4672 * C5657 + C4673 * C80588) * C82) *
                        C81011 * C80726 -
                    ((C1391 * C80588 + C1390 * C5657) * C82 +
                     ((C490 * C757 + C81012 * C1365) * C80588 +
                      (C490 * C748 + C81012 * C1358) * C5657) *
                         C81) *
                        C81011 * C17817) *
                       C81006 +
                   ((((C490 * C750 + C81012 * C1361) * C5657 +
                      (C490 * C764 + C81012 * C1369) * C80588) *
                         C81 +
                     (C1394 * C5657 + C1395 * C80588) * C82) *
                        C81011 * C17817 -
                    ((C8219 * C80588 + C8218 * C5657) * C82 +
                     ((C490 * C6148 + C81012 * C6662) * C80588 +
                      (C490 * C6140 + C81012 * C6656) * C5657) *
                         C81) *
                        C81011 * C80726) *
                       C80993 +
                   ((((C490 * C8499 + C81012 * C8919) * C5657 +
                      (C490 * C8503 + C81012 * C8921) * C80588) *
                         C81 +
                     ((C490 * C8500 + C81012 * C8920) * C5657 +
                      (C490 * C8504 + C81012 * C8922) * C80588) *
                         C82) *
                        C81011 * C80726 -
                    ((C7341 * C80588 + C7340 * C5657) * C82 +
                     ((C490 * C5663 + C81012 * C5968) * C80588 +
                      (C490 * C5659 + C81012 * C5964) * C5657) *
                         C81) *
                        C81011 * C17817) *
                       C80972)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81 +
                     (C520 * C4987 + C521 * C80998 - C522 * C4988 -
                      C523 * C80982 + C524 * C4989 + C525 * C80954) *
                         C82) *
                        C81011 * C17817 +
                    ((C2326 * C4988 -
                      ((C490 * C1693 + C81012 * C2301) * C80998 +
                       (C490 * C1684 + C81012 * C2294) * C4987) +
                      C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
                         C81 +
                     (C2328 * C4988 - (C2327 * C80998 + C2326 * C4987) +
                      C2329 * C80982 - C3726 * C4989 - C3727 * C80954) *
                         C82) *
                        C81011 * C80726) *
                       C13173 +
                   (((C1390 * C4988 -
                      ((C490 * C757 + C81012 * C1365) * C80998 +
                       (C490 * C748 + C81012 * C1358) * C4987) +
                      C1391 * C80982 - C1392 * C4989 - C1393 * C80954) *
                         C81 +
                     (C1392 * C4988 - (C1391 * C80998 + C1390 * C4987) +
                      C1393 * C80982 - C3060 * C4989 - C3061 * C80954) *
                         C82) *
                        C81011 * C17817 +
                    (((C490 * C3979 + C81012 * C4655) * C4987 +
                      (C490 * C3985 + C81012 * C4659) * C80998 - C4672 * C4988 -
                      C4673 * C80982 + C4674 * C4989 + C4675 * C80954) *
                         C81 +
                     (C4672 * C4987 + C4673 * C80998 - C4674 * C4988 -
                      C4675 * C80982 + (C490 * C3982 + C81012 * C4658) * C4989 +
                      (C490 * C3990 + C81012 * C4662) * C80954) *
                         C82) *
                        C81011 * C80726) *
                       C80686)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81 +
                     (C520 * C5657 + C521 * C80588) * C82) *
                        C81011 * C81014 -
                    ((C2327 * C80588 + C2326 * C5657) * C82 +
                     ((C490 * C1693 + C81012 * C2301) * C80588 +
                      (C490 * C1684 + C81012 * C2294) * C5657) *
                         C81) *
                        C81011 * C81008 +
                    (((C490 * C1686 + C81012 * C2297) * C5657 +
                      (C490 * C1700 + C81012 * C2305) * C80588) *
                         C81 +
                     (C2330 * C5657 + C2331 * C80588) * C82) *
                        C81011 * C80996 -
                    ((C12327 * C80588 + C12326 * C5657) * C82 +
                     ((C490 * C10473 + C81012 * C10778) * C80588 +
                      (C490 * C10469 + C81012 * C10774) * C5657) *
                         C81) *
                        C81011 * C80978) *
                       C13173 +
                   ((((C490 * C3979 + C81012 * C4655) * C5657 +
                      (C490 * C3985 + C81012 * C4659) * C80588) *
                         C81 +
                     (C4672 * C5657 + C4673 * C80588) * C82) *
                        C81011 * C81008 -
                    ((C1391 * C80588 + C1390 * C5657) * C82 +
                     ((C490 * C757 + C81012 * C1365) * C80588 +
                      (C490 * C748 + C81012 * C1358) * C5657) *
                         C81) *
                        C81011 * C81014 -
                    ((C11601 * C80588 + C11600 * C5657) * C82 +
                     ((C490 * C6144 + C81012 * C6660) * C80588 +
                      (C490 * C6138 + C81012 * C6654) * C5657) *
                         C81) *
                        C81011 * C80996 +
                    (((C490 * C12543 + C81012 * C12963) * C5657 +
                      (C490 * C12547 + C81012 * C12965) * C80588) *
                         C81 +
                     ((C490 * C12544 + C81012 * C12964) * C5657 +
                      (C490 * C12548 + C81012 * C12966) * C80588) *
                         C82) *
                        C81011 * C80978) *
                       C80686)) /
                     (p * q * std::sqrt(p + q));
    d2eezy[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C13873 +
                     (C490 * C166 + C81012 * C569) * C81013 -
                     (C490 * C748 + C81012 * C1358) * C13874 -
                     (C490 * C856 + C81012 * C1471) * C81006 +
                     (C490 * C750 + C81012 * C1361) * C13875 +
                     (C490 * C857 + C81012 * C1472) * C80993 -
                     (C490 * C5659 + C81012 * C5964) * C13876 -
                     (C490 * C5722 + C81012 * C6013) * C80972) *
                        C81 +
                    (C14282 + C14283 - C14284 - C14285 + C14286 + C14287 -
                     C14288 - C14289) *
                        C82) *
                       C81011 * C80588 * C17817 +
                   (((C490 * C3979 + C81012 * C4655) * C13874 -
                     ((C490 * C1790 + C81012 * C2409) * C81013 +
                      (C490 * C1684 + C81012 * C2294) * C13873) +
                     (C490 * C4093 + C81012 * C4773) * C81006 -
                     (C490 * C6140 + C81012 * C6656) * C13875 -
                     (C490 * C6236 + C81012 * C6739) * C80993 +
                     (C490 * C8499 + C81012 * C8919) * C13876 +
                     (C490 * C8573 + C81012 * C8989) * C80972) *
                        C81 +
                    (C4672 * C13874 - (C2428 * C81013 + C2326 * C13873) +
                     C4788 * C81006 - C8218 * C13875 - C8326 * C80993 +
                     (C490 * C8500 + C81012 * C8920) * C13876 +
                     (C490 * C8574 + C81012 * C8990) * C80972) *
                        C82) *
                       C81011 * C80588 * C80726)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C13245 +
                      (C490 * C166 + C81012 * C569) * C13173 -
                      (C490 * C748 + C81012 * C1358) * C13246 -
                      (C490 * C856 + C81012 * C1471) * C80686) *
                         C81 +
                     (C13656 + C13657 - C13658 - C13659) * C82) *
                        C81011 * C80998 +
                    ((C13658 - (C13657 + C13656) + C13659) * C81 +
                     (C13660 - (C13661 + C13662) + C13663) * C82) *
                        C81011 * C80982 +
                    ((C13662 + C13661 - C13660 - C13663) * C81 +
                     (C13664 + C13665 - C13666 - C13667) * C82) *
                        C81011 * C80954) *
                       C17817 +
                   ((((C490 * C3979 + C81012 * C4655) * C13246 -
                      ((C490 * C1790 + C81012 * C2409) * C13173 +
                       (C490 * C1684 + C81012 * C2294) * C13245) +
                      (C490 * C4093 + C81012 * C4773) * C80686) *
                         C81 +
                     (C15154 - (C15155 + C15156) + C15157) * C82) *
                        C81011 * C80998 +
                    ((C15156 + C15155 - C15154 - C15157) * C81 +
                     (C16756 + C16757 - C16758 - C16759) * C82) *
                        C81011 * C80982 +
                    ((C16758 - (C16757 + C16756) + C16759) * C81 +
                     ((C490 * C3982 + C81012 * C4658) * C13246 -
                      (C3798 * C13173 + C3726 * C13245) +
                      (C490 * C4096 + C81012 * C4776) * C80686) *
                         C82) *
                        C81011 * C80954) *
                       C80726)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C13245 +
                     (C490 * C166 + C81012 * C569) * C13173 -
                     (C490 * C748 + C81012 * C1358) * C13246 -
                     (C490 * C856 + C81012 * C1471) * C80686) *
                        C81 +
                    (C13656 + C13657 - C13658 - C13659) * C82) *
                       C81011 * C80588 * C81014 +
                   (((C490 * C3979 + C81012 * C4655) * C13246 -
                     ((C490 * C1790 + C81012 * C2409) * C13173 +
                      (C490 * C1684 + C81012 * C2294) * C13245) +
                     (C490 * C4093 + C81012 * C4773) * C80686) *
                        C81 +
                    (C15154 - (C15155 + C15156) + C15157) * C82) *
                       C81011 * C80588 * C81008 +
                   (((C490 * C1686 + C81012 * C2297) * C13245 +
                     (C490 * C1792 + C81012 * C2411) * C13173 -
                     (C490 * C6138 + C81012 * C6654) * C13246 -
                     (C490 * C6238 + C81012 * C6741) * C80686) *
                        C81 +
                    (C15158 + C15159 - C15160 - C15161) * C82) *
                       C81011 * C80588 * C80996 +
                   (((C490 * C12543 + C81012 * C12963) * C13246 -
                     ((C490 * C10527 + C81012 * C10824) * C13173 +
                      (C490 * C10469 + C81012 * C10774) * C13245) +
                     (C490 * C12617 + C81012 * C13033) * C80686) *
                        C81 +
                    ((C490 * C12544 + C81012 * C12964) * C13246 -
                     (C12398 * C13173 + C12326 * C13245) +
                     (C490 * C12618 + C81012 * C13034) * C80686) *
                        C82) *
                       C81011 * C80588 * C80978)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C17951 +
                     (C490 * C221 + C81012 * C637) * C17817 -
                     (C490 * C1684 + C81012 * C2294) * C17952 -
                     (C490 * C1882 + C81012 * C2509) * C80726) *
                        C81 +
                    (C18362 + C18363 - C18364 - C18365) * C82) *
                       C81011 * C81013 +
                   (((C490 * C3979 + C81012 * C4655) * C17952 -
                     ((C490 * C946 + C81012 * C1578) * C17817 +
                      (C490 * C748 + C81012 * C1358) * C17951) +
                     (C490 * C4199 + C81012 * C4889) * C80726) *
                        C81 +
                    (C19276 - (C19277 + C19278) + C19279) * C82) *
                       C81011 * C81006 +
                   (((C490 * C750 + C81012 * C1361) * C17951 +
                     (C490 * C947 + C81012 * C1579) * C17817 -
                     (C490 * C6140 + C81012 * C6656) * C17952 -
                     (C490 * C6324 + C81012 * C6821) * C80726) *
                        C81 +
                    (C19280 + C19281 - C19282 - C19283) * C82) *
                       C81011 * C80993 +
                   (((C490 * C8499 + C81012 * C8919) * C17952 -
                     ((C490 * C5772 + C81012 * C6060) * C17817 +
                      (C490 * C5659 + C81012 * C5964) * C17951) +
                     (C490 * C8643 + C81012 * C9057) * C80726) *
                        C81 +
                    ((C490 * C8500 + C81012 * C8920) * C17952 -
                     (C7490 * C17817 + C7340 * C17951) +
                     (C490 * C8644 + C81012 * C9058) * C80726) *
                        C82) *
                       C81011 * C80972) *
                  C80588) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C18362 + C18363 - C18364 - C18365) * C82) *
                        C81011 * C13173 +
                    (((C490 * C3979 + C81012 * C4655) * C17952 -
                      ((C490 * C946 + C81012 * C1578) * C17817 +
                       (C490 * C748 + C81012 * C1358) * C17951) +
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81 +
                     (C19276 - (C19277 + C19278) + C19279) * C82) *
                        C81011 * C80686) *
                       C80998 +
                   (((C18364 - (C18363 + C18362) + C18365) * C81 +
                     (C18366 - (C18367 + C18368) + C18369) * C82) *
                        C81011 * C13173 +
                    ((C19278 + C19277 - C19276 - C19279) * C81 +
                     (C20788 + C20789 - C20790 - C20791) * C82) *
                        C81011 * C80686) *
                       C80982 +
                   (((C18368 + C18367 - C18366 - C18369) * C81 +
                     (C18370 + C18371 - C18372 - C18373) * C82) *
                        C81011 * C13173 +
                    ((C20790 - (C20789 + C20788) + C20791) * C81 +
                     ((C490 * C3982 + C81012 * C4658) * C17952 -
                      (C3214 * C17817 + C3060 * C17951) +
                      (C490 * C4202 + C81012 * C4892) * C80726) *
                         C82) *
                        C81011 * C80686) *
                       C80954)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C19485 +
                     (C490 * C221 + C81012 * C637) * C81014 -
                     (C490 * C1684 + C81012 * C2294) * C19486 -
                     (C490 * C1882 + C81012 * C2509) * C81008 +
                     (C490 * C1686 + C81012 * C2297) * C19487 +
                     (C490 * C1883 + C81012 * C2510) * C80996 -
                     (C490 * C10469 + C81012 * C10774) * C19488 -
                     (C490 * C10582 + C81012 * C10869) * C80978) *
                        C81 +
                    (C19894 + C19895 - C19896 - C19897 + C19898 + C19899 -
                     C19900 - C19901) *
                        C82) *
                       C81011 * C13173 +
                   (((C490 * C3979 + C81012 * C4655) * C19486 -
                     ((C490 * C946 + C81012 * C1578) * C81014 +
                      (C490 * C748 + C81012 * C1358) * C19485) +
                     (C490 * C4199 + C81012 * C4889) * C81008 -
                     (C490 * C6138 + C81012 * C6654) * C19487 -
                     (C490 * C6322 + C81012 * C6819) * C80996 +
                     (C490 * C12543 + C81012 * C12963) * C19488 +
                     (C490 * C12687 + C81012 * C13101) * C80978) *
                        C81 +
                    (C4672 * C19486 - (C1598 * C81014 + C1390 * C19485) +
                     C4904 * C81008 - C11600 * C19487 - C11814 * C80996 +
                     (C490 * C12544 + C81012 * C12964) * C19488 +
                     (C490 * C12688 + C81012 * C13102) * C80978) *
                        C82) *
                       C81011 * C80686) *
                  C80588) /
                     (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C80722 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78260 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80916 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78279) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80729 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78279 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80916 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C78260 -
            (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80598) *
               C81011 * C81012 * C20867) *
              C13173 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78260 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80916 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78279) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C80722 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78279 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80916 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78260 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80729 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C78260 -
            ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80916 +
             (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C78279) +
            (C92 * C6143 + C81 * C6155 + C93 * C10973 + C82 * C10974) *
                C80598) *
               C81011 * C81012 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C80916 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13246 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C13173 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13245) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80598) *
              C80722 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13246 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C13173 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13245) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C80916 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13245 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C13173 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13246 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80598) *
              C80729 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C13245 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C13173 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C13246 -
            (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80686) *
               C81011 * C81012 * C80916 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C13246 -
            ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C13173 +
             (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C13245) +
            (C92 * C6237 + C81 * C6243 + C93 * C11073 + C82 * C11074) *
                C80686) *
               C81011 * C81012 * C80598) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78528 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80722 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78520 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80729 +
            (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78534 +
            (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C20867) *
               C81011 * C81012 * C13173 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78520 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80722 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78528) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80729 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C78534 -
            (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C20867) *
               C81011 * C81012 * C80686) *
              C80916 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78520 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80722 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78528) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80729 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C78534 -
            (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C20867) *
               C81011 * C81012 * C13173 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78528 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80722 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78520 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80729 +
            (C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C78534 +
            (C92 * C6321 + C81 * C6327 + C93 * C11173 + C82 * C11174) *
                C20867) *
               C81011 * C81012 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78279 +
             (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
                C81012 * C82) *
               C80722 +
           ((C2004 * C78260 -
             ((C275 * C1693 + C81011 * C1979) * C80916 +
              (C275 * C1684 + C81011 * C1972) * C78279) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C78260 - (C2005 * C80916 + C2004 * C78279) +
             C2007 * C80598) *
                C81012 * C82) *
               C80729 +
           (((C275 * C1686 + C81011 * C1975) * C78279 +
             (C275 * C1700 + C81011 * C1983) * C80916 - C2008 * C78260 -
             C2009 * C80598) *
                C81012 * C81 +
            (C2008 * C78279 + C2009 * C80916 - C2010 * C78260 -
             C2011 * C80598) *
                C81012 * C82) *
               C20867) *
              C13173 +
          (((C1068 * C78260 -
             ((C275 * C757 + C81011 * C1043) * C80916 +
              (C275 * C748 + C81011 * C1036) * C78279) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C78260 - (C1069 * C80916 + C1068 * C78279) +
             C1071 * C80598) *
                C81012 * C82) *
               C80722 +
           (((C275 * C3979 + C81011 * C4305) * C78279 +
             (C275 * C3985 + C81011 * C4309) * C80916 - C4322 * C78260 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C78279 + C4323 * C80916 - C4324 * C78260 -
             C4325 * C80598) *
                C81012 * C82) *
               C80729 +
           ((C11280 * C78260 -
             ((C275 * C6144 + C81011 * C6414) * C80916 +
              (C275 * C6138 + C81011 * C6408) * C78279) +
             C11281 * C80598) *
                C81012 * C81 +
            ((C275 * C10971 + C81011 * C11273) * C78260 -
             (C11281 * C80916 + C11280 * C78279) +
             (C275 * C10973 + C81011 * C11274) * C80598) *
                C81012 * C82) *
               C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C81012 * C81 +
                     (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                        C80916 +
                    ((C13448 - (C13447 + C13446) + C13449) * C81012 * C81 +
                     (C13450 - (C13451 + C13452) + C13453) * C81012 * C82) *
                        C80598) *
                       C80722 +
                   ((((C275 * C3979 + C81011 * C4305) * C13246 -
                      ((C275 * C1790 + C81011 * C2087) * C13173 +
                       (C275 * C1684 + C81011 * C1972) * C13245) +
                      (C275 * C4093 + C81011 * C4423) * C80686) *
                         C81012 * C81 +
                     (C14846 - (C14847 + C14848) + C14849) * C81012 * C82) *
                        C80916 +
                    ((C14848 + C14847 - C14846 - C14849) * C81012 * C81 +
                     (C16458 + C16459 - C16460 - C16461) * C81012 * C82) *
                        C80598) *
                       C80729 +
                   ((((C275 * C1686 + C81011 * C1975) * C13245 +
                      (C275 * C1792 + C81011 * C2089) * C13173 -
                      (C275 * C6138 + C81011 * C6408) * C13246 -
                      (C275 * C6238 + C81011 * C6495) * C80686) *
                         C81012 * C81 +
                     (C14850 + C14851 - C14852 - C14853) * C81012 * C82) *
                        C80916 +
                    ((C14852 - (C14851 + C14850) + C14853) * C81012 * C81 +
                     ((C275 * C10971 + C81011 * C11273) * C13246 -
                      (C2109 * C13173 + C2010 * C13245) +
                      (C275 * C11073 + C81011 * C11379) * C80686) *
                         C81012 * C82) *
                        C80598) *
                       C20867)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78528 +
             (C275 * C221 + C81011 * C422) * C80722 -
             (C275 * C1684 + C81011 * C1972) * C78520 -
             (C275 * C1882 + C81011 * C2187) * C80729 +
             (C275 * C1686 + C81011 * C1975) * C78534 +
             (C275 * C1883 + C81011 * C2188) * C20867) *
                C81012 * C81 +
            (C21242 + C21243 - C21244 - C21245 + C21246 + C21247) * C81012 *
                C82) *
               C13173 +
           (((C275 * C3979 + C81011 * C4305) * C78520 -
             ((C275 * C946 + C81011 * C1256) * C80722 +
              (C275 * C748 + C81011 * C1036) * C78528) +
             (C275 * C4199 + C81011 * C4539) * C80729 -
             (C275 * C6138 + C81011 * C6408) * C78534 -
             (C275 * C6322 + C81011 * C6573) * C20867) *
                C81012 * C81 +
            (C22076 - (C22077 + C22078) + C22079 - C22080 - C22081) * C81012 *
                C82) *
               C80686) *
              C80916 +
          (((C21244 - (C21243 + C21242) + C21245 - C21246 - C21247) * C81012 *
                C81 +
            (C21248 - (C21249 + C21250) + C21251 - C21252 - C21253) * C81012 *
                C82) *
               C13173 +
           ((C22078 + C22077 - C22076 - C22079 + C22080 + C22081) * C81012 *
                C81 +
            (C1070 * C78528 + C1278 * C80722 - C4324 * C78520 - C4555 * C80729 +
             (C275 * C10971 + C81011 * C11273) * C78534 +
             (C275 * C11173 + C81011 * C11485) * C20867) *
                C81012 * C82) *
               C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78279 +
             (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
             C521 * C80598) *
                C81 +
            (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
                C82) *
               C81011 * C80722 +
           ((C2326 * C78260 -
             ((C490 * C1693 + C81012 * C2301) * C80916 +
              (C490 * C1684 + C81012 * C2294) * C78279) +
             C2327 * C80598) *
                C81 +
            (C2328 * C78260 - (C2327 * C80916 + C2326 * C78279) +
             C2329 * C80598) *
                C82) *
               C81011 * C80729 +
           (((C490 * C1686 + C81012 * C2297) * C78279 +
             (C490 * C1700 + C81012 * C2305) * C80916 - C2330 * C78260 -
             C2331 * C80598) *
                C81 +
            (C2330 * C78279 + C2331 * C80916 - C2332 * C78260 -
             C2333 * C80598) *
                C82) *
               C81011 * C20867) *
              C13173 +
          (((C1390 * C78260 -
             ((C490 * C757 + C81012 * C1365) * C80916 +
              (C490 * C748 + C81012 * C1358) * C78279) +
             C1391 * C80598) *
                C81 +
            (C1392 * C78260 - (C1391 * C80916 + C1390 * C78279) +
             C1393 * C80598) *
                C82) *
               C81011 * C80722 +
           (((C490 * C3979 + C81012 * C4655) * C78279 +
             (C490 * C3985 + C81012 * C4659) * C80916 - C4672 * C78260 -
             C4673 * C80598) *
                C81 +
            (C4672 * C78279 + C4673 * C80916 - C4674 * C78260 -
             C4675 * C80598) *
                C82) *
               C81011 * C80729 +
           ((C11600 * C78260 -
             ((C490 * C6144 + C81012 * C6660) * C80916 +
              (C490 * C6138 + C81012 * C6654) * C78279) +
             C11601 * C80598) *
                C81 +
            ((C490 * C10971 + C81012 * C11593) * C78260 -
             (C11601 * C80916 + C11600 * C78279) +
             (C490 * C10973 + C81012 * C11594) * C80598) *
                C82) *
               C81011 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C13245 +
                      (C490 * C166 + C81012 * C569) * C13173 -
                      (C490 * C748 + C81012 * C1358) * C13246 -
                      (C490 * C856 + C81012 * C1471) * C80686) *
                         C81 +
                     (C13656 + C13657 - C13658 - C13659) * C82) *
                        C81011 * C80916 +
                    ((C13658 - (C13657 + C13656) + C13659) * C81 +
                     (C13660 - (C13661 + C13662) + C13663) * C82) *
                        C81011 * C80598) *
                       C80722 +
                   ((((C490 * C3979 + C81012 * C4655) * C13246 -
                      ((C490 * C1790 + C81012 * C2409) * C13173 +
                       (C490 * C1684 + C81012 * C2294) * C13245) +
                      (C490 * C4093 + C81012 * C4773) * C80686) *
                         C81 +
                     (C15154 - (C15155 + C15156) + C15157) * C82) *
                        C81011 * C80916 +
                    ((C15156 + C15155 - C15154 - C15157) * C81 +
                     (C16756 + C16757 - C16758 - C16759) * C82) *
                        C81011 * C80598) *
                       C80729 +
                   ((((C490 * C1686 + C81012 * C2297) * C13245 +
                      (C490 * C1792 + C81012 * C2411) * C13173 -
                      (C490 * C6138 + C81012 * C6654) * C13246 -
                      (C490 * C6238 + C81012 * C6741) * C80686) *
                         C81 +
                     (C15158 + C15159 - C15160 - C15161) * C82) *
                        C81011 * C80916 +
                    ((C15160 - (C15159 + C15158) + C15161) * C81 +
                     ((C490 * C10971 + C81012 * C11593) * C13246 -
                      (C2431 * C13173 + C2332 * C13245) +
                      (C490 * C11073 + C81012 * C11699) * C80686) *
                         C82) *
                        C81011 * C80598) *
                       C20867)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78528 +
             (C490 * C221 + C81012 * C637) * C80722 -
             (C490 * C1684 + C81012 * C2294) * C78520 -
             (C490 * C1882 + C81012 * C2509) * C80729 +
             (C490 * C1686 + C81012 * C2297) * C78534 +
             (C490 * C1883 + C81012 * C2510) * C20867) *
                C81 +
            (C21476 + C21477 - C21478 - C21479 + C21480 + C21481) * C82) *
               C81011 * C13173 +
           (((C490 * C3979 + C81012 * C4655) * C78520 -
             ((C490 * C946 + C81012 * C1578) * C80722 +
              (C490 * C748 + C81012 * C1358) * C78528) +
             (C490 * C4199 + C81012 * C4889) * C80729 -
             (C490 * C6138 + C81012 * C6654) * C78534 -
             (C490 * C6322 + C81012 * C6819) * C20867) *
                C81 +
            (C22376 - (C22377 + C22378) + C22379 - C22380 - C22381) * C82) *
               C81011 * C80686) *
              C80916 +
          (((C21478 - (C21477 + C21476) + C21479 - C21480 - C21481) * C81 +
            (C21482 - (C21483 + C21484) + C21485 - C21486 - C21487) * C82) *
               C81011 * C13173 +
           ((C22378 + C22377 - C22376 - C22379 + C22380 + C22381) * C81 +
            (C1392 * C78528 + C1600 * C80722 - C4674 * C78520 - C4905 * C80729 +
             (C490 * C10971 + C81012 * C11593) * C78534 +
             (C490 * C11173 + C81012 * C11805) * C20867) *
                C82) *
               C81011 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
            (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
            (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
               C81011 * C81012 * C17817 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C4988 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80998 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C4987) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80982 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C4989 -
            (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
               C81011 * C81012 * C80726) *
              C13173 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C4988 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80998 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C4987) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80982 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C4989 -
            (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
               C81011 * C81012 * C17817 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C4987 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80998 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C4988 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80982 +
            (C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C4989 +
            (C92 * C3988 + C81 * C3993 + C93 * C3990 + C82 * C3994) * C80954) *
               C81011 * C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C17817 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C80726) *
              C81013 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C17817) *
              C81006 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C17817 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C80726) *
              C80993 +
          (((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C5657 +
            (C92 * C8503 + C81 * C8505 + C93 * C8504 + C82 * C8506) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
               C81011 * C81012 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13245 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C13173 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13246 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C80998 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13246 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C13173 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13245) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80982 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13245 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C13173 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C13246 -
            (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
               C81011 * C81012 * C80954) *
              C17817 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13246 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C13173 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13245) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C80998 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13245 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C13173 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13246 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80982 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C13246 -
            ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C13173 +
             (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C13245) +
            (C92 * C4095 + C81 * C4099 + C93 * C4096 + C82 * C4100) * C80686) *
               C81011 * C81012 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13873 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81013 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13874 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C81006 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13875 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80993 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C13876 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C80588 * C17817 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13874 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C81013 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13873) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C81006 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C13875 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80993 +
           (C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C13876 +
           (C92 * C8573 + C81 * C8575 + C93 * C8574 + C82 * C8576) * C80972) *
              C81011 * C81012 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80998 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C17951 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C17817 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C17952 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80982 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C17951 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C17817 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C17952 -
            (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
               C81011 * C81012 * C13173 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C17952 -
            ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C17817 +
             (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C17951) +
            (C92 * C4201 + C81 * C4205 + C93 * C4202 + C82 * C4206) * C80726) *
               C81011 * C81012 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C81013 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
              C81011 * C81012 * C81006 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C17951 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C17817 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C17952 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
              C81011 * C81012 * C80993 +
          ((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C17952 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C17817 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C17951) +
           (C92 * C8643 + C81 * C8645 + C93 * C8644 + C82 * C8646) * C80726) *
              C81011 * C81012 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C17817 +
                    ((C2004 * C4988 -
                      ((C275 * C1693 + C81011 * C1979) * C80998 +
                       (C275 * C1684 + C81011 * C1972) * C4987) +
                      C2005 * C80982 - C2006 * C4989 - C2007 * C80954) *
                         C81012 * C81 +
                     (C2006 * C4988 - (C2005 * C80998 + C2004 * C4987) +
                      C2007 * C80982 - C3498 * C4989 - C3499 * C80954) *
                         C81012 * C82) *
                        C80726) *
                       C13173 +
                   (((C1068 * C4988 -
                      ((C275 * C757 + C81011 * C1043) * C80998 +
                       (C275 * C748 + C81011 * C1036) * C4987) +
                      C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C4988 - (C1069 * C80998 + C1068 * C4987) +
                      C1071 * C80982 - C2832 * C4989 - C2833 * C80954) *
                         C81012 * C82) *
                        C17817 +
                    (((C275 * C3979 + C81011 * C4305) * C4987 +
                      (C275 * C3985 + C81011 * C4309) * C80998 - C4322 * C4988 -
                      C4323 * C80982 + C4324 * C4989 + C4325 * C80954) *
                         C81012 * C81 +
                     (C4322 * C4987 + C4323 * C80998 - C4324 * C4988 -
                      C4325 * C80982 + (C275 * C3982 + C81011 * C4308) * C4989 +
                      (C275 * C3990 + C81011 * C4312) * C80954) *
                         C81012 * C82) *
                        C80726) *
                       C80686)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C17817 -
                    ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                     ((C275 * C1693 + C81011 * C1979) * C80588 +
                      (C275 * C1684 + C81011 * C1972) * C5657) *
                         C81012 * C81) *
                        C80726) *
                       C81013 +
                   ((((C275 * C3979 + C81011 * C4305) * C5657 +
                      (C275 * C3985 + C81011 * C4309) * C80588) *
                         C81012 * C81 +
                     (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                        C80726 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C17817) *
                       C81006 +
                   ((((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C81012 * C81 +
                     (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                        C17817 -
                    ((C7899 * C80588 + C7898 * C5657) * C81012 * C82 +
                     ((C275 * C6148 + C81011 * C6416) * C80588 +
                      (C275 * C6140 + C81011 * C6410) * C5657) *
                         C81012 * C81) *
                        C80726) *
                       C80993 +
                   ((((C275 * C8499 + C81011 * C8713) * C5657 +
                      (C275 * C8503 + C81011 * C8715) * C80588) *
                         C81012 * C81 +
                     ((C275 * C8500 + C81011 * C8714) * C5657 +
                      (C275 * C8504 + C81011 * C8716) * C80588) *
                         C81012 * C82) *
                        C80726 -
                    ((C7117 * C80588 + C7116 * C5657) * C81012 * C82 +
                     ((C275 * C5663 + C81011 * C5826) * C80588 +
                      (C275 * C5659 + C81011 * C5822) * C5657) *
                         C81012 * C81) *
                        C17817) *
                       C80972)) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C81012 * C81 +
                     (C13446 + C13447 - C13448 - C13449) * C81012 * C82) *
                        C80998 +
                    ((C13448 - (C13447 + C13446) + C13449) * C81012 * C81 +
                     (C13450 - (C13451 + C13452) + C13453) * C81012 * C82) *
                        C80982 +
                    ((C13452 + C13451 - C13450 - C13453) * C81012 * C81 +
                     (C13454 + C13455 - C13456 - C13457) * C81012 * C82) *
                        C80954) *
                       C17817 +
                   ((((C275 * C3979 + C81011 * C4305) * C13246 -
                      ((C275 * C1790 + C81011 * C2087) * C13173 +
                       (C275 * C1684 + C81011 * C1972) * C13245) +
                      (C275 * C4093 + C81011 * C4423) * C80686) *
                         C81012 * C81 +
                     (C14846 - (C14847 + C14848) + C14849) * C81012 * C82) *
                        C80998 +
                    ((C14848 + C14847 - C14846 - C14849) * C81012 * C81 +
                     (C16458 + C16459 - C16460 - C16461) * C81012 * C82) *
                        C80982 +
                    ((C16460 - (C16459 + C16458) + C16461) * C81012 * C81 +
                     ((C275 * C3982 + C81011 * C4308) * C13246 -
                      (C3570 * C13173 + C3498 * C13245) +
                      (C275 * C4096 + C81011 * C4426) * C80686) *
                         C81012 * C82) *
                        C80954) *
                       C80726)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C13873 +
                     (C275 * C166 + C81011 * C354) * C81013 -
                     (C275 * C748 + C81011 * C1036) * C13874 -
                     (C275 * C856 + C81011 * C1149) * C81006 +
                     (C275 * C750 + C81011 * C1039) * C13875 +
                     (C275 * C857 + C81011 * C1150) * C80993 -
                     (C275 * C5659 + C81011 * C5822) * C13876 -
                     (C275 * C5722 + C81011 * C5871) * C80972) *
                        C81012 * C81 +
                    (C14076 + C14077 - C14078 - C14079 + C14080 + C14081 -
                     C14082 - C14083) *
                        C81012 * C82) *
                       C80588 * C17817 +
                   (((C275 * C3979 + C81011 * C4305) * C13874 -
                     ((C275 * C1790 + C81011 * C2087) * C81013 +
                      (C275 * C1684 + C81011 * C1972) * C13873) +
                     (C275 * C4093 + C81011 * C4423) * C81006 -
                     (C275 * C6140 + C81011 * C6410) * C13875 -
                     (C275 * C6236 + C81011 * C6493) * C80993 +
                     (C275 * C8499 + C81011 * C8713) * C13876 +
                     (C275 * C8573 + C81011 * C8783) * C80972) *
                        C81012 * C81 +
                    (C4322 * C13874 - (C2106 * C81013 + C2004 * C13873) +
                     C4438 * C81006 - C7898 * C13875 - C8006 * C80993 +
                     (C275 * C8500 + C81011 * C8714) * C13876 +
                     (C275 * C8574 + C81011 * C8784) * C80972) *
                        C81012 * C82) *
                       C80588 * C80726)) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C275 * C99 + C81011 * C276) * C17951 +
                      (C275 * C221 + C81011 * C422) * C17817 -
                      (C275 * C1684 + C81011 * C1972) * C17952 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                        C13173 +
                    (((C275 * C3979 + C81011 * C4305) * C17952 -
                      ((C275 * C946 + C81011 * C1256) * C17817 +
                       (C275 * C748 + C81011 * C1036) * C17951) +
                      (C275 * C4199 + C81011 * C4539) * C80726) *
                         C81012 * C81 +
                     (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                        C80686) *
                       C80998 +
                   (((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                     (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                        C13173 +
                    ((C18970 + C18969 - C18968 - C18971) * C81012 * C81 +
                     (C20490 + C20491 - C20492 - C20493) * C81012 * C82) *
                        C80686) *
                       C80982 +
                   (((C18158 + C18157 - C18156 - C18159) * C81012 * C81 +
                     (C18160 + C18161 - C18162 - C18163) * C81012 * C82) *
                        C13173 +
                    ((C20492 - (C20491 + C20490) + C20493) * C81012 * C81 +
                     ((C275 * C3982 + C81011 * C4308) * C17952 -
                      (C2986 * C17817 + C2832 * C17951) +
                      (C275 * C4202 + C81011 * C4542) * C80726) *
                         C81012 * C82) *
                        C80686) *
                       C80954)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C275 * C99 + C81011 * C276) * C17951 +
                     (C275 * C221 + C81011 * C422) * C17817 -
                     (C275 * C1684 + C81011 * C1972) * C17952 -
                     (C275 * C1882 + C81011 * C2187) * C80726) *
                        C81012 * C81 +
                    (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                       C81013 +
                   (((C275 * C3979 + C81011 * C4305) * C17952 -
                     ((C275 * C946 + C81011 * C1256) * C17817 +
                      (C275 * C748 + C81011 * C1036) * C17951) +
                     (C275 * C4199 + C81011 * C4539) * C80726) *
                        C81012 * C81 +
                    (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                       C81006 +
                   (((C275 * C750 + C81011 * C1039) * C17951 +
                     (C275 * C947 + C81011 * C1257) * C17817 -
                     (C275 * C6140 + C81011 * C6410) * C17952 -
                     (C275 * C6324 + C81011 * C6575) * C80726) *
                        C81012 * C81 +
                    (C18972 + C18973 - C18974 - C18975) * C81012 * C82) *
                       C80993 +
                   (((C275 * C8499 + C81011 * C8713) * C17952 -
                     ((C275 * C5772 + C81011 * C5918) * C17817 +
                      (C275 * C5659 + C81011 * C5822) * C17951) +
                     (C275 * C8643 + C81011 * C8851) * C80726) *
                        C81012 * C81 +
                    ((C275 * C8500 + C81011 * C8714) * C17952 -
                     (C7266 * C17817 + C7116 * C17951) +
                     (C275 * C8644 + C81011 * C8852) * C80726) *
                        C81012 * C82) *
                       C80972) *
                  C80588) /
                     (p * q * std::sqrt(p + q));
    d2eezx[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81 +
                     (C520 * C4987 + C521 * C80998 - C522 * C4988 -
                      C523 * C80982 + C524 * C4989 + C525 * C80954) *
                         C82) *
                        C81011 * C17817 +
                    ((C2326 * C4988 -
                      ((C490 * C1693 + C81012 * C2301) * C80998 +
                       (C490 * C1684 + C81012 * C2294) * C4987) +
                      C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
                         C81 +
                     (C2328 * C4988 - (C2327 * C80998 + C2326 * C4987) +
                      C2329 * C80982 - C3726 * C4989 - C3727 * C80954) *
                         C82) *
                        C81011 * C80726) *
                       C13173 +
                   (((C1390 * C4988 -
                      ((C490 * C757 + C81012 * C1365) * C80998 +
                       (C490 * C748 + C81012 * C1358) * C4987) +
                      C1391 * C80982 - C1392 * C4989 - C1393 * C80954) *
                         C81 +
                     (C1392 * C4988 - (C1391 * C80998 + C1390 * C4987) +
                      C1393 * C80982 - C3060 * C4989 - C3061 * C80954) *
                         C82) *
                        C81011 * C17817 +
                    (((C490 * C3979 + C81012 * C4655) * C4987 +
                      (C490 * C3985 + C81012 * C4659) * C80998 - C4672 * C4988 -
                      C4673 * C80982 + C4674 * C4989 + C4675 * C80954) *
                         C81 +
                     (C4672 * C4987 + C4673 * C80998 - C4674 * C4988 -
                      C4675 * C80982 + (C490 * C3982 + C81012 * C4658) * C4989 +
                      (C490 * C3990 + C81012 * C4662) * C80954) *
                         C82) *
                        C81011 * C80726) *
                       C80686)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81 +
                     (C520 * C5657 + C521 * C80588) * C82) *
                        C81011 * C17817 -
                    ((C2327 * C80588 + C2326 * C5657) * C82 +
                     ((C490 * C1693 + C81012 * C2301) * C80588 +
                      (C490 * C1684 + C81012 * C2294) * C5657) *
                         C81) *
                        C81011 * C80726) *
                       C81013 +
                   ((((C490 * C3979 + C81012 * C4655) * C5657 +
                      (C490 * C3985 + C81012 * C4659) * C80588) *
                         C81 +
                     (C4672 * C5657 + C4673 * C80588) * C82) *
                        C81011 * C80726 -
                    ((C1391 * C80588 + C1390 * C5657) * C82 +
                     ((C490 * C757 + C81012 * C1365) * C80588 +
                      (C490 * C748 + C81012 * C1358) * C5657) *
                         C81) *
                        C81011 * C17817) *
                       C81006 +
                   ((((C490 * C750 + C81012 * C1361) * C5657 +
                      (C490 * C764 + C81012 * C1369) * C80588) *
                         C81 +
                     (C1394 * C5657 + C1395 * C80588) * C82) *
                        C81011 * C17817 -
                    ((C8219 * C80588 + C8218 * C5657) * C82 +
                     ((C490 * C6148 + C81012 * C6662) * C80588 +
                      (C490 * C6140 + C81012 * C6656) * C5657) *
                         C81) *
                        C81011 * C80726) *
                       C80993 +
                   ((((C490 * C8499 + C81012 * C8919) * C5657 +
                      (C490 * C8503 + C81012 * C8921) * C80588) *
                         C81 +
                     ((C490 * C8500 + C81012 * C8920) * C5657 +
                      (C490 * C8504 + C81012 * C8922) * C80588) *
                         C82) *
                        C81011 * C80726 -
                    ((C7341 * C80588 + C7340 * C5657) * C82 +
                     ((C490 * C5663 + C81012 * C5968) * C80588 +
                      (C490 * C5659 + C81012 * C5964) * C5657) *
                         C81) *
                        C81011 * C17817) *
                       C80972)) /
                     (p * q * std::sqrt(p + q));
    d2eezy[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C13245 +
                      (C490 * C166 + C81012 * C569) * C13173 -
                      (C490 * C748 + C81012 * C1358) * C13246 -
                      (C490 * C856 + C81012 * C1471) * C80686) *
                         C81 +
                     (C13656 + C13657 - C13658 - C13659) * C82) *
                        C81011 * C80998 +
                    ((C13658 - (C13657 + C13656) + C13659) * C81 +
                     (C13660 - (C13661 + C13662) + C13663) * C82) *
                        C81011 * C80982 +
                    ((C13662 + C13661 - C13660 - C13663) * C81 +
                     (C13664 + C13665 - C13666 - C13667) * C82) *
                        C81011 * C80954) *
                       C17817 +
                   ((((C490 * C3979 + C81012 * C4655) * C13246 -
                      ((C490 * C1790 + C81012 * C2409) * C13173 +
                       (C490 * C1684 + C81012 * C2294) * C13245) +
                      (C490 * C4093 + C81012 * C4773) * C80686) *
                         C81 +
                     (C15154 - (C15155 + C15156) + C15157) * C82) *
                        C81011 * C80998 +
                    ((C15156 + C15155 - C15154 - C15157) * C81 +
                     (C16756 + C16757 - C16758 - C16759) * C82) *
                        C81011 * C80982 +
                    ((C16758 - (C16757 + C16756) + C16759) * C81 +
                     ((C490 * C3982 + C81012 * C4658) * C13246 -
                      (C3798 * C13173 + C3726 * C13245) +
                      (C490 * C4096 + C81012 * C4776) * C80686) *
                         C82) *
                        C81011 * C80954) *
                       C80726)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C13873 +
                     (C490 * C166 + C81012 * C569) * C81013 -
                     (C490 * C748 + C81012 * C1358) * C13874 -
                     (C490 * C856 + C81012 * C1471) * C81006 +
                     (C490 * C750 + C81012 * C1361) * C13875 +
                     (C490 * C857 + C81012 * C1472) * C80993 -
                     (C490 * C5659 + C81012 * C5964) * C13876 -
                     (C490 * C5722 + C81012 * C6013) * C80972) *
                        C81 +
                    (C14282 + C14283 - C14284 - C14285 + C14286 + C14287 -
                     C14288 - C14289) *
                        C82) *
                       C81011 * C80588 * C17817 +
                   (((C490 * C3979 + C81012 * C4655) * C13874 -
                     ((C490 * C1790 + C81012 * C2409) * C81013 +
                      (C490 * C1684 + C81012 * C2294) * C13873) +
                     (C490 * C4093 + C81012 * C4773) * C81006 -
                     (C490 * C6140 + C81012 * C6656) * C13875 -
                     (C490 * C6236 + C81012 * C6739) * C80993 +
                     (C490 * C8499 + C81012 * C8919) * C13876 +
                     (C490 * C8573 + C81012 * C8989) * C80972) *
                        C81 +
                    (C4672 * C13874 - (C2428 * C81013 + C2326 * C13873) +
                     C4788 * C81006 - C8218 * C13875 - C8326 * C80993 +
                     (C490 * C8500 + C81012 * C8920) * C13876 +
                     (C490 * C8574 + C81012 * C8990) * C80972) *
                        C82) *
                       C81011 * C80588 * C80726)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C18362 + C18363 - C18364 - C18365) * C82) *
                        C81011 * C13173 +
                    (((C490 * C3979 + C81012 * C4655) * C17952 -
                      ((C490 * C946 + C81012 * C1578) * C17817 +
                       (C490 * C748 + C81012 * C1358) * C17951) +
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81 +
                     (C19276 - (C19277 + C19278) + C19279) * C82) *
                        C81011 * C80686) *
                       C80998 +
                   (((C18364 - (C18363 + C18362) + C18365) * C81 +
                     (C18366 - (C18367 + C18368) + C18369) * C82) *
                        C81011 * C13173 +
                    ((C19278 + C19277 - C19276 - C19279) * C81 +
                     (C20788 + C20789 - C20790 - C20791) * C82) *
                        C81011 * C80686) *
                       C80982 +
                   (((C18368 + C18367 - C18366 - C18369) * C81 +
                     (C18370 + C18371 - C18372 - C18373) * C82) *
                        C81011 * C13173 +
                    ((C20790 - (C20789 + C20788) + C20791) * C81 +
                     ((C490 * C3982 + C81012 * C4658) * C17952 -
                      (C3214 * C17817 + C3060 * C17951) +
                      (C490 * C4202 + C81012 * C4892) * C80726) *
                         C82) *
                        C81011 * C80686) *
                       C80954)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C490 * C99 + C81012 * C491) * C17951 +
                     (C490 * C221 + C81012 * C637) * C17817 -
                     (C490 * C1684 + C81012 * C2294) * C17952 -
                     (C490 * C1882 + C81012 * C2509) * C80726) *
                        C81 +
                    (C18362 + C18363 - C18364 - C18365) * C82) *
                       C81011 * C81013 +
                   (((C490 * C3979 + C81012 * C4655) * C17952 -
                     ((C490 * C946 + C81012 * C1578) * C17817 +
                      (C490 * C748 + C81012 * C1358) * C17951) +
                     (C490 * C4199 + C81012 * C4889) * C80726) *
                        C81 +
                    (C19276 - (C19277 + C19278) + C19279) * C82) *
                       C81011 * C81006 +
                   (((C490 * C750 + C81012 * C1361) * C17951 +
                     (C490 * C947 + C81012 * C1579) * C17817 -
                     (C490 * C6140 + C81012 * C6656) * C17952 -
                     (C490 * C6324 + C81012 * C6821) * C80726) *
                        C81 +
                    (C19280 + C19281 - C19282 - C19283) * C82) *
                       C81011 * C80993 +
                   (((C490 * C8499 + C81012 * C8919) * C17952 -
                     ((C490 * C5772 + C81012 * C6060) * C17817 +
                      (C490 * C5659 + C81012 * C5964) * C17951) +
                     (C490 * C8643 + C81012 * C9057) * C80726) *
                        C81 +
                    ((C490 * C8500 + C81012 * C8920) * C17952 -
                     (C7490 * C17817 + C7340 * C17951) +
                     (C490 * C8644 + C81012 * C9058) * C80726) *
                        C82) *
                       C81011 * C80972) *
                  C80588) /
                     (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
              C81011 * C81012 * C80639 * C6893 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78260 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80916 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78279) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
              C81011 * C81012 * C80639 * C6894 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78279 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80916 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78260 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
              C81011 * C81012 * C80639 * C6895 +
          ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C78260 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80916 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C78279) +
           (C92 * C5662 + C81 * C5670 + C93 * C6901 + C82 * C6902) * C80598) *
              C81011 * C81012 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2613 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C2607 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2614 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C2608 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2615 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C2609 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C2616 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C80639 * C80932 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2614 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C2607 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2613) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C2608 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C2615 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C2609 +
           (C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C2616 +
           (C92 * C761 + C81 * C773 + C93 * C2619 + C82 * C2620) * C80966) *
              C81011 * C81012 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C9133 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78260 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80916 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78279) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C9134 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78279 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80916 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C78260 -
            (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80598) *
               C81011 * C81012 * C80965) *
              C80932 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78260 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80916 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78279) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C9133 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78279 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80916 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78260 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C9134 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C78260 -
            ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80916 +
             (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C78279) +
            (C92 * C6143 + C81 * C6155 + C93 * C10973 + C82 * C10974) *
                C80598) *
               C81011 * C81012 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C6969 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C6893 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C6970 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C6894 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C6971 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C6895 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C6972 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C80916 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C6970 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C6893 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C6969) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C6894 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C6971 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C6895 +
           (C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C6972 +
           (C92 * C5721 + C81 * C5725 + C93 * C6973 + C82 * C6974) * C80972) *
              C81011 * C81012 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
              C81011 * C81012 * C2607 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2688 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80932 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2687) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
              C81011 * C81012 * C2608 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2687 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80932 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C2688 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
              C81011 * C81012 * C2609 +
          ((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C2688 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80932 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C2687) +
           (C92 * C861 + C81 * C869 + C93 * C2689 + C82 * C2690) * C80686) *
              C81011 * C81012 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C80916 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2688 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80932 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2687) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80598) *
              C9133 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C2688 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80932 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2687) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C80916 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C2687 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80932 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C2688 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80598) *
              C9134 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C2687 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80932 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C2688 -
            (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80686) *
               C81011 * C81012 * C80916 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C2688 -
            ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80932 +
             (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C2687) +
            (C92 * C6237 + C81 * C6243 + C93 * C11073 + C82 * C11074) *
                C80686) *
               C81011 * C81012 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C6893 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C6894 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C6895 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
               C81011 * C81012 * C80972) *
              C80916 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C6894 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C6893 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C6895 +
           ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C220 +
            (C92 * C5771 + C81 * C5775 + C93 * C7041 + C82 * C7042) * C80639) *
               C81011 * C81012 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C80932 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80686) *
              C2607 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C80932) *
              C2608 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C80932 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80686) *
              C2609 +
          (((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C220 +
            (C92 * C951 + C81 * C959 + C93 * C2757 + C82 * C2758) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
               C81011 * C81012 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C9284 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C9133 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C9285 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C9134 +
            (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C9286 +
            (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
               C81011 * C81012 * C80932 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C9285 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C9133 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C9284) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C9134 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C9286 -
            (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C80965) *
               C81011 * C81012 * C80686) *
              C80916 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C9285 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C9133 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C9284) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C9134 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C9286 -
            (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C80965) *
               C81011 * C81012 * C80932 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C9284 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C9133 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C9285 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C9134 +
            (C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C9286 +
            (C92 * C6321 + C81 * C6327 + C93 * C11173 + C82 * C11174) *
                C80965) *
               C81011 * C81012 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78279 +
            (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
            C306 * C80598) *
               C81012 * C81 +
           (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
               C81012 * C82) *
              C80639 * C6893 +
          ((C1068 * C78260 -
            ((C275 * C757 + C81011 * C1043) * C80916 +
             (C275 * C748 + C81011 * C1036) * C78279) +
            C1069 * C80598) *
               C81012 * C81 +
           (C1070 * C78260 - (C1069 * C80916 + C1068 * C78279) +
            C1071 * C80598) *
               C81012 * C82) *
              C80639 * C6894 +
          (((C275 * C750 + C81011 * C1039) * C78279 +
            (C275 * C764 + C81011 * C1047) * C80916 - C1072 * C78260 -
            C1073 * C80598) *
               C81012 * C81 +
           (C1072 * C78279 + C1073 * C80916 - C1074 * C78260 - C1075 * C80598) *
               C81012 * C82) *
              C80639 * C6895 +
          ((C7116 * C78260 -
            ((C275 * C5663 + C81011 * C5826) * C80916 +
             (C275 * C5659 + C81011 * C5822) * C78279) +
            C7117 * C80598) *
               C81012 * C81 +
           ((C275 * C6899 + C81011 * C7109) * C78260 -
            (C7117 * C80916 + C7116 * C78279) +
            (C275 * C6901 + C81011 * C7110) * C80598) *
               C81012 * C82) *
              C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2613 +
            (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
            C306 * C2608 + C307 * C2615 + C308 * C2609 - C309 * C2616 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C2613 + C306 * C2607 - C307 * C2614 - C308 * C2608 +
            C309 * C2615 + C310 * C2609 - C311 * C2616 - C312 * C80966) *
               C81012 * C82) *
              C80639 * C80932 +
          ((C1068 * C2614 -
            ((C275 * C757 + C81011 * C1043) * C2607 +
             (C275 * C748 + C81011 * C1036) * C2613) +
            C1069 * C2608 - C1070 * C2615 - C1071 * C2609 + C2832 * C2616 +
            C2833 * C80966) *
               C81012 * C81 +
           (C1070 * C2614 - (C1069 * C2607 + C1068 * C2613) + C1071 * C2608 -
            C2832 * C2615 - C2833 * C2609 +
            (C275 * C2617 + C81011 * C2825) * C2616 +
            (C275 * C2619 + C81011 * C2826) * C80966) *
               C81012 * C82) *
              C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78279 +
             (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
                C81012 * C82) *
               C9133 +
           ((C2004 * C78260 -
             ((C275 * C1693 + C81011 * C1979) * C80916 +
              (C275 * C1684 + C81011 * C1972) * C78279) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C78260 - (C2005 * C80916 + C2004 * C78279) +
             C2007 * C80598) *
                C81012 * C82) *
               C9134 +
           (((C275 * C1686 + C81011 * C1975) * C78279 +
             (C275 * C1700 + C81011 * C1983) * C80916 - C2008 * C78260 -
             C2009 * C80598) *
                C81012 * C81 +
            (C2008 * C78279 + C2009 * C80916 - C2010 * C78260 -
             C2011 * C80598) *
                C81012 * C82) *
               C80965) *
              C80932 +
          (((C1068 * C78260 -
             ((C275 * C757 + C81011 * C1043) * C80916 +
              (C275 * C748 + C81011 * C1036) * C78279) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C78260 - (C1069 * C80916 + C1068 * C78279) +
             C1071 * C80598) *
                C81012 * C82) *
               C9133 +
           (((C275 * C3979 + C81011 * C4305) * C78279 +
             (C275 * C3985 + C81011 * C4309) * C80916 - C4322 * C78260 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C78279 + C4323 * C80916 - C4324 * C78260 -
             C4325 * C80598) *
                C81012 * C82) *
               C9134 +
           ((C11280 * C78260 -
             ((C275 * C6144 + C81011 * C6414) * C80916 +
              (C275 * C6138 + C81011 * C6408) * C78279) +
             C11281 * C80598) *
                C81012 * C81 +
            ((C275 * C10971 + C81011 * C11273) * C78260 -
             (C11281 * C80916 + C11280 * C78279) +
             (C275 * C10973 + C81011 * C11274) * C80598) *
                C81012 * C82) *
               C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C6969 +
            (C275 * C166 + C81011 * C354) * C6893 -
            (C275 * C748 + C81011 * C1036) * C6970 -
            (C275 * C856 + C81011 * C1149) * C6894 +
            (C275 * C750 + C81011 * C1039) * C6971 +
            (C275 * C857 + C81011 * C1150) * C6895 -
            (C275 * C5659 + C81011 * C5822) * C6972 -
            (C275 * C5722 + C81011 * C5871) * C80972) *
               C81012 * C81 +
           (C7185 + C7186 - C7187 - C7188 + C7189 + C7190 - C7191 - C7195) *
               C81012 * C82) *
              C80916 +
          ((C7187 - (C7186 + C7185) + C7188 - C7189 - C7190 + C7191 + C7195) *
               C81012 * C81 +
           (C1070 * C6970 - (C374 * C6893 + C307 * C6969) + C1176 * C6894 -
            C1074 * C6971 - C1177 * C6895 +
            (C275 * C6899 + C81011 * C7109) * C6972 +
            (C275 * C6973 + C81011 * C7183) * C80972) *
               C81012 * C82) *
              C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2687 +
            (C275 * C166 + C81011 * C354) * C80932 -
            (C275 * C748 + C81011 * C1036) * C2688 -
            (C275 * C856 + C81011 * C1149) * C80686) *
               C81012 * C81 +
           (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
              C2607 +
          ((C2903 - (C2902 + C2901) + C2904) * C81012 * C81 +
           (C2905 - (C2906 + C2907) + C2908) * C81012 * C82) *
              C2608 +
          ((C2907 + C2906 - C2905 - C2908) * C81012 * C81 +
           (C2909 + C2910 - C2911 - C2915) * C81012 * C82) *
              C2609 +
          ((C2911 - (C2910 + C2909) + C2915) * C81012 * C81 +
           ((C275 * C2617 + C81011 * C2825) * C2688 -
            (C376 * C80932 + C311 * C2687) +
            (C275 * C2689 + C81011 * C2899) * C80686) *
               C81012 * C82) *
              C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C2687 +
             (C275 * C166 + C81011 * C354) * C80932 -
             (C275 * C748 + C81011 * C1036) * C2688 -
             (C275 * C856 + C81011 * C1149) * C80686) *
                C81012 * C81 +
            (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
               C80916 +
           ((C2903 - (C2902 + C2901) + C2904) * C81012 * C81 +
            (C2905 - (C2906 + C2907) + C2908) * C81012 * C82) *
               C80598) *
              C9133 +
          ((((C275 * C3979 + C81011 * C4305) * C2688 -
             ((C275 * C1790 + C81011 * C2087) * C80932 +
              (C275 * C1684 + C81011 * C1972) * C2687) +
             (C275 * C4093 + C81011 * C4423) * C80686) *
                C81012 * C81 +
            (C4428 - (C4429 + C4430) + C4440) * C81012 * C82) *
               C80916 +
           ((C4430 + C4429 - C4428 - C4440) * C81012 * C81 +
            (C4433 + C4434 - C4435 - C4441) * C81012 * C82) *
               C80598) *
              C9134 +
          ((((C275 * C1686 + C81011 * C1975) * C2687 +
             (C275 * C1792 + C81011 * C2089) * C80932 -
             (C275 * C6138 + C81011 * C6408) * C2688 -
             (C275 * C6238 + C81011 * C6495) * C80686) *
                C81012 * C81 +
            (C11381 + C11382 - C11383 - C11387) * C81012 * C82) *
               C80916 +
           ((C11383 - (C11382 + C11381) + C11387) * C81012 * C81 +
            ((C275 * C10971 + C81011 * C11273) * C2688 -
             (C2109 * C80932 + C2010 * C2687) +
             (C275 * C11073 + C81011 * C11379) * C80686) *
                C81012 * C82) *
               C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C6893 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C6894 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C6895 -
           ((C7267 + C7265) * C81012 * C82 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C81012 * C81) *
               C80972) *
              C80916 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C6894 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C6893 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C6895 +
           ((C7265 + C7267) * C81012 * C81 +
            ((C275 * C6899 + C81011 * C7109) * C220 +
             (C275 * C7041 + C81011 * C7261) * C80639) *
                C81012 * C82) *
               C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C80932 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80686) *
              C2607 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80686 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C80932) *
              C2608 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C80932 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C80686) *
              C2609 +
          (((C2985 + C2987) * C81012 * C81 +
            ((C275 * C2617 + C81011 * C2825) * C220 +
             (C275 * C2757 + C81011 * C2981) * C80639) *
                C81012 * C82) *
               C80686 -
           ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
               C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C9284 +
             (C275 * C221 + C81011 * C422) * C9133 -
             (C275 * C1684 + C81011 * C1972) * C9285 -
             (C275 * C1882 + C81011 * C2187) * C9134 +
             (C275 * C1686 + C81011 * C1975) * C9286 +
             (C275 * C1883 + C81011 * C2188) * C80965) *
                C81012 * C81 +
            (C9510 + C9511 - C9512 - C9513 + C9514 + C9515) * C81012 * C82) *
               C80932 +
           (((C275 * C3979 + C81011 * C4305) * C9285 -
             ((C275 * C946 + C81011 * C1256) * C9133 +
              (C275 * C748 + C81011 * C1036) * C9284) +
             (C275 * C4199 + C81011 * C4539) * C9134 -
             (C275 * C6138 + C81011 * C6408) * C9286 -
             (C275 * C6322 + C81011 * C6573) * C80965) *
                C81012 * C81 +
            (C11487 - (C11488 + C11489) + C11490 - C11491 - C11495) * C81012 *
                C82) *
               C80686) *
              C80916 +
          (((C9512 - (C9511 + C9510) + C9513 - C9514 - C9515) * C81012 * C81 +
            (C9516 - (C9517 + C9518) + C9519 - C9520 - C9521) * C81012 * C82) *
               C80932 +
           ((C11489 + C11488 - C11487 - C11490 + C11491 + C11495) * C81012 *
                C81 +
            (C1070 * C9284 + C1278 * C9133 - C4324 * C9285 - C4555 * C9134 +
             (C275 * C10971 + C81011 * C11273) * C9286 +
             (C275 * C11173 + C81011 * C11485) * C80965) *
                C81012 * C82) *
               C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78279 +
            (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
            C521 * C80598) *
               C81 +
           (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
               C82) *
              C81011 * C80639 * C6893 +
          ((C1390 * C78260 -
            ((C490 * C757 + C81012 * C1365) * C80916 +
             (C490 * C748 + C81012 * C1358) * C78279) +
            C1391 * C80598) *
               C81 +
           (C1392 * C78260 - (C1391 * C80916 + C1390 * C78279) +
            C1393 * C80598) *
               C82) *
              C81011 * C80639 * C6894 +
          (((C490 * C750 + C81012 * C1361) * C78279 +
            (C490 * C764 + C81012 * C1369) * C80916 - C1394 * C78260 -
            C1395 * C80598) *
               C81 +
           (C1394 * C78279 + C1395 * C80916 - C1396 * C78260 - C1397 * C80598) *
               C82) *
              C81011 * C80639 * C6895 +
          ((C7340 * C78260 -
            ((C490 * C5663 + C81012 * C5968) * C80916 +
             (C490 * C5659 + C81012 * C5964) * C78279) +
            C7341 * C80598) *
               C81 +
           ((C490 * C6899 + C81012 * C7333) * C78260 -
            (C7341 * C80916 + C7340 * C78279) +
            (C490 * C6901 + C81012 * C7334) * C80598) *
               C82) *
              C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2613 +
            (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
            C521 * C2608 + C522 * C2615 + C523 * C2609 - C524 * C2616 -
            C525 * C80966) *
               C81 +
           (C520 * C2613 + C521 * C2607 - C522 * C2614 - C523 * C2608 +
            C524 * C2615 + C525 * C2609 - C526 * C2616 - C527 * C80966) *
               C82) *
              C81011 * C80639 * C80932 +
          ((C1390 * C2614 -
            ((C490 * C757 + C81012 * C1365) * C2607 +
             (C490 * C748 + C81012 * C1358) * C2613) +
            C1391 * C2608 - C1392 * C2615 - C1393 * C2609 + C3060 * C2616 +
            C3061 * C80966) *
               C81 +
           (C1392 * C2614 - (C1391 * C2607 + C1390 * C2613) + C1393 * C2608 -
            C3060 * C2615 - C3061 * C2609 +
            (C490 * C2617 + C81012 * C3053) * C2616 +
            (C490 * C2619 + C81012 * C3054) * C80966) *
               C82) *
              C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78279 +
             (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
             C521 * C80598) *
                C81 +
            (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
                C82) *
               C81011 * C9133 +
           ((C2326 * C78260 -
             ((C490 * C1693 + C81012 * C2301) * C80916 +
              (C490 * C1684 + C81012 * C2294) * C78279) +
             C2327 * C80598) *
                C81 +
            (C2328 * C78260 - (C2327 * C80916 + C2326 * C78279) +
             C2329 * C80598) *
                C82) *
               C81011 * C9134 +
           (((C490 * C1686 + C81012 * C2297) * C78279 +
             (C490 * C1700 + C81012 * C2305) * C80916 - C2330 * C78260 -
             C2331 * C80598) *
                C81 +
            (C2330 * C78279 + C2331 * C80916 - C2332 * C78260 -
             C2333 * C80598) *
                C82) *
               C81011 * C80965) *
              C80932 +
          (((C1390 * C78260 -
             ((C490 * C757 + C81012 * C1365) * C80916 +
              (C490 * C748 + C81012 * C1358) * C78279) +
             C1391 * C80598) *
                C81 +
            (C1392 * C78260 - (C1391 * C80916 + C1390 * C78279) +
             C1393 * C80598) *
                C82) *
               C81011 * C9133 +
           (((C490 * C3979 + C81012 * C4655) * C78279 +
             (C490 * C3985 + C81012 * C4659) * C80916 - C4672 * C78260 -
             C4673 * C80598) *
                C81 +
            (C4672 * C78279 + C4673 * C80916 - C4674 * C78260 -
             C4675 * C80598) *
                C82) *
               C81011 * C9134 +
           ((C11600 * C78260 -
             ((C490 * C6144 + C81012 * C6660) * C80916 +
              (C490 * C6138 + C81012 * C6654) * C78279) +
             C11601 * C80598) *
                C81 +
            ((C490 * C10971 + C81012 * C11593) * C78260 -
             (C11601 * C80916 + C11600 * C78279) +
             (C490 * C10973 + C81012 * C11594) * C80598) *
                C82) *
               C81011 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 -
            (C490 * C748 + C81012 * C1358) * C6970 -
            (C490 * C856 + C81012 * C1471) * C6894 +
            (C490 * C750 + C81012 * C1361) * C6971 +
            (C490 * C857 + C81012 * C1472) * C6895 -
            (C490 * C5659 + C81012 * C5964) * C6972 -
            (C490 * C5722 + C81012 * C6013) * C80972) *
               C81 +
           (C7409 + C7410 - C7411 - C7412 + C7413 + C7414 - C7415 - C7419) *
               C82) *
              C81011 * C80916 +
          ((C7411 - (C7410 + C7409) + C7412 - C7413 - C7414 + C7415 + C7419) *
               C81 +
           (C1392 * C6970 - (C589 * C6893 + C522 * C6969) + C1498 * C6894 -
            C1396 * C6971 - C1499 * C6895 +
            (C490 * C6899 + C81012 * C7333) * C6972 +
            (C490 * C6973 + C81012 * C7407) * C80972) *
               C82) *
              C81011 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2687 +
            (C490 * C166 + C81012 * C569) * C80932 -
            (C490 * C748 + C81012 * C1358) * C2688 -
            (C490 * C856 + C81012 * C1471) * C80686) *
               C81 +
           (C3129 + C3130 - C3131 - C3132) * C82) *
              C81011 * C2607 +
          ((C3131 - (C3130 + C3129) + C3132) * C81 +
           (C3133 - (C3134 + C3135) + C3136) * C82) *
              C81011 * C2608 +
          ((C3135 + C3134 - C3133 - C3136) * C81 +
           (C3137 + C3138 - C3139 - C3143) * C82) *
              C81011 * C2609 +
          ((C3139 - (C3138 + C3137) + C3143) * C81 +
           ((C490 * C2617 + C81012 * C3053) * C2688 -
            (C591 * C80932 + C526 * C2687) +
            (C490 * C2689 + C81012 * C3127) * C80686) *
               C82) *
              C81011 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 -
             (C490 * C748 + C81012 * C1358) * C2688 -
             (C490 * C856 + C81012 * C1471) * C80686) *
                C81 +
            (C3129 + C3130 - C3131 - C3132) * C82) *
               C81011 * C80916 +
           ((C3131 - (C3130 + C3129) + C3132) * C81 +
            (C3133 - (C3134 + C3135) + C3136) * C82) *
               C81011 * C80598) *
              C9133 +
          ((((C490 * C3979 + C81012 * C4655) * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             (C490 * C4093 + C81012 * C4773) * C80686) *
                C81 +
            (C4778 - (C4779 + C4780) + C4790) * C82) *
               C81011 * C80916 +
           ((C4780 + C4779 - C4778 - C4790) * C81 +
            (C4783 + C4784 - C4785 - C4791) * C82) *
               C81011 * C80598) *
              C9134 +
          ((((C490 * C1686 + C81012 * C2297) * C2687 +
             (C490 * C1792 + C81012 * C2411) * C80932 -
             (C490 * C6138 + C81012 * C6654) * C2688 -
             (C490 * C6238 + C81012 * C6741) * C80686) *
                C81 +
            (C11701 + C11702 - C11703 - C11707) * C82) *
               C81011 * C80916 +
           ((C11703 - (C11702 + C11701) + C11707) * C81 +
            ((C490 * C10971 + C81012 * C11593) * C2688 -
             (C2431 * C80932 + C2332 * C2687) +
             (C490 * C11073 + C81012 * C11699) * C80686) *
                C82) *
               C81011 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C6893 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C6894 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C6895 -
           ((C7491 + C7489) * C82 + ((C490 * C5772 + C81012 * C6060) * C80639 +
                                     (C490 * C5659 + C81012 * C5964) * C220) *
                                        C81) *
               C81011 * C80972) *
              C80916 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C6894 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C6893 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C6895 +
           ((C7489 + C7491) * C81 + ((C490 * C6899 + C81012 * C7333) * C220 +
                                     (C490 * C7041 + C81012 * C7485) * C80639) *
                                        C82) *
               C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C80932 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80686) *
              C2607 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80686 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C80932) *
              C2608 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C80932 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C80686) *
              C2609 +
          (((C3213 + C3215) * C81 + ((C490 * C2617 + C81012 * C3053) * C220 +
                                     (C490 * C2757 + C81012 * C3209) * C80639) *
                                        C82) *
               C81011 * C80686 -
           ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C9284 +
             (C490 * C221 + C81012 * C637) * C9133 -
             (C490 * C1684 + C81012 * C2294) * C9285 -
             (C490 * C1882 + C81012 * C2509) * C9134 +
             (C490 * C1686 + C81012 * C2297) * C9286 +
             (C490 * C1883 + C81012 * C2510) * C80965) *
                C81 +
            (C9744 + C9745 - C9746 - C9747 + C9748 + C9749) * C82) *
               C81011 * C80932 +
           (((C490 * C3979 + C81012 * C4655) * C9285 -
             ((C490 * C946 + C81012 * C1578) * C9133 +
              (C490 * C748 + C81012 * C1358) * C9284) +
             (C490 * C4199 + C81012 * C4889) * C9134 -
             (C490 * C6138 + C81012 * C6654) * C9286 -
             (C490 * C6322 + C81012 * C6819) * C80965) *
                C81 +
            (C11807 - (C11808 + C11809) + C11810 - C11811 - C11815) * C82) *
               C81011 * C80686) *
              C80916 +
          (((C9746 - (C9745 + C9744) + C9747 - C9748 - C9749) * C81 +
            (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C82) *
               C81011 * C80932 +
           ((C11809 + C11808 - C11807 - C11810 + C11811 + C11815) * C81 +
            (C1392 * C9284 + C1600 * C9133 - C4674 * C9285 - C4905 * C9134 +
             (C490 * C10971 + C81012 * C11593) * C9286 +
             (C490 * C11173 + C81012 * C11805) * C80965) *
                C82) *
               C81011 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C80933 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C80726) *
              C6893 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C80933) *
              C6894 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C80933 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C80726) *
              C6895 +
          (((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C5657 +
            (C92 * C8503 + C81 * C8505 + C93 * C8504 + C82 * C8506) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
               C81011 * C81012 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
            (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
            (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
               C81011 * C81012 * C80933 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C744 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C737 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C743) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C738 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C745 -
            (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
               C81011 * C81012 * C80726) *
              C80932 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C744 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C737 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C743) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C738 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C745 -
            (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
               C81011 * C81012 * C80933 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C743 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C737 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C744 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C738 +
            (C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C745 +
            (C92 * C3988 + C81 * C3993 + C93 * C3990 + C82 * C3994) * C80954) *
               C81011 * C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C11881 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C11882 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
               C81011 * C81012 * C11883 -
           ((C93 * C10472 + C82 * C10480 + C92 * C10473 + C81 * C10481) *
                C80588 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C5657) *
               C81011 * C81012 * C80978) *
              C80932 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C11882 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C11881 -
           ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80588 +
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5657) *
               C81011 * C81012 * C11883 +
           ((C92 * C12543 + C81 * C12545 + C93 * C12544 + C82 * C12546) *
                C5657 +
            (C92 * C12547 + C81 * C12549 + C93 * C12548 + C82 * C12550) *
                C80588) *
               C81011 * C81012 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C6969 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C6893 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C6970 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C6894 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C6971 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C6895 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C6972 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C80588 * C80933 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C6970 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C6893 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C6969) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C6894 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C6971 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C6895 +
           (C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C6972 +
           (C92 * C8573 + C81 * C8575 + C93 * C8574 + C82 * C8576) * C80972) *
              C81011 * C81012 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C737 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2688 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80932 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2687) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C738 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2687 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80932 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C2688 -
            (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
               C81011 * C81012 * C80954) *
              C80933 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C2688 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80932 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2687) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C737 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C2687 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80932 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C2688 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C738 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C2688 -
            ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80932 +
             (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C2687) +
            (C92 * C4095 + C81 * C4099 + C93 * C4096 + C82 * C4100) * C80686) *
               C81011 * C81012 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
              C81011 * C81012 * C80588 * C11881 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C2688 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80932 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2687) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
              C81011 * C81012 * C80588 * C11882 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C2687 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80932 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C2688 -
           (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80686) *
              C81011 * C81012 * C80588 * C11883 +
          ((C92 * C12543 + C81 * C12545 + C93 * C12544 + C82 * C12546) * C2688 -
           ((C93 * C10526 + C82 * C10530 + C92 * C10527 + C81 * C10531) *
                C80932 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C2687) +
           (C92 * C12617 + C81 * C12619 + C93 * C12618 + C82 * C12620) *
               C80686) *
              C81011 * C81012 * C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C6893 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
              C81011 * C81012 * C6894 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C3421 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80933 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C3422 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
              C81011 * C81012 * C6895 +
          ((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C3422 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80933 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C3421) +
           (C92 * C8643 + C81 * C8645 + C93 * C8644 + C82 * C8646) * C80726) *
              C81011 * C81012 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C737 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C3421 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80933 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C3422 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C738 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C3421 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80933 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C3422 -
            (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C3422 -
            ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80933 +
             (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C3421) +
            (C92 * C4201 + C81 * C4205 + C93 * C4202 + C82 * C4206) * C80726) *
               C81011 * C81012 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C12023 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C11881 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C12024 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C11882 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C12025 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C11883 -
           (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
               C12026 -
           (C93 * C10581 + C82 * C10585 + C92 * C10582 + C81 * C10586) *
               C80978) *
              C81011 * C81012 * C80932 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C12024 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C11881 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C12023) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C11882 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C12025 -
           (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C11883 +
           (C92 * C12543 + C81 * C12545 + C93 * C12544 + C82 * C12546) *
               C12026 +
           (C92 * C12687 + C81 * C12689 + C93 * C12688 + C82 * C12690) *
               C80978) *
              C81011 * C81012 * C80686) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C81012 * C81 +
                      (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                         C80933 -
                     ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                      ((C275 * C1693 + C81011 * C1979) * C80588 +
                       (C275 * C1684 + C81011 * C1972) * C5657) *
                          C81012 * C81) *
                         C80726) *
                        C6893 +
                    ((((C275 * C3979 + C81011 * C4305) * C5657 +
                       (C275 * C3985 + C81011 * C4309) * C80588) *
                          C81012 * C81 +
                      (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                         C80726 -
                     ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C81012 * C81) *
                         C80933) *
                        C6894 +
                    ((((C275 * C750 + C81011 * C1039) * C5657 +
                       (C275 * C764 + C81011 * C1047) * C80588) *
                          C81012 * C81 +
                      (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                         C80933 -
                     ((C7899 * C80588 + C7898 * C5657) * C81012 * C82 +
                      ((C275 * C6148 + C81011 * C6416) * C80588 +
                       (C275 * C6140 + C81011 * C6410) * C5657) *
                          C81012 * C81) *
                         C80726) *
                        C6895 +
                    ((((C275 * C8499 + C81011 * C8713) * C5657 +
                       (C275 * C8503 + C81011 * C8715) * C80588) *
                          C81012 * C81 +
                      ((C275 * C8500 + C81011 * C8714) * C5657 +
                       (C275 * C8504 + C81011 * C8716) * C80588) *
                          C81012 * C82) *
                         C80726 -
                     ((C7117 * C80588 + C7116 * C5657) * C81012 * C82 +
                      ((C275 * C5663 + C81011 * C5826) * C80588 +
                       (C275 * C5659 + C81011 * C5822) * C5657) *
                          C81012 * C81) *
                         C80933) *
                        C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C743 +
                       (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                       C306 * C738 + C307 * C745 + C308 * C80954) *
                          C81012 * C81 +
                      (C305 * C743 + C306 * C737 - C307 * C744 - C308 * C738 +
                       C309 * C745 + C310 * C80954) *
                          C81012 * C82) *
                         C80933 +
                     ((C2004 * C744 -
                       ((C275 * C1693 + C81011 * C1979) * C737 +
                        (C275 * C1684 + C81011 * C1972) * C743) +
                       C2005 * C738 - C2006 * C745 - C2007 * C80954) *
                          C81012 * C81 +
                      (C2006 * C744 - (C2005 * C737 + C2004 * C743) +
                       C2007 * C738 - C3498 * C745 - C3499 * C80954) *
                          C81012 * C82) *
                         C80726) *
                        C80932 +
                    (((C1068 * C744 -
                       ((C275 * C757 + C81011 * C1043) * C737 +
                        (C275 * C748 + C81011 * C1036) * C743) +
                       C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                          C81012 * C81 +
                      (C1070 * C744 - (C1069 * C737 + C1068 * C743) +
                       C1071 * C738 - C2832 * C745 - C2833 * C80954) *
                          C81012 * C82) *
                         C80933 +
                     (((C275 * C3979 + C81011 * C4305) * C743 +
                       (C275 * C3985 + C81011 * C4309) * C737 - C4322 * C744 -
                       C4323 * C738 + C4324 * C745 + C4325 * C80954) *
                          C81012 * C81 +
                      (C4322 * C743 + C4323 * C737 - C4324 * C744 -
                       C4325 * C738 + (C275 * C3982 + C81011 * C4308) * C745 +
                       (C275 * C3990 + C81011 * C4312) * C80954) *
                          C81012 * C82) *
                         C80726) *
                        C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C81012 * C81 +
                      (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                         C11881 -
                     ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                      ((C275 * C1693 + C81011 * C1979) * C80588 +
                       (C275 * C1684 + C81011 * C1972) * C5657) *
                          C81012 * C81) *
                         C11882 +
                     (((C275 * C1686 + C81011 * C1975) * C5657 +
                       (C275 * C1700 + C81011 * C1983) * C80588) *
                          C81012 * C81 +
                      (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                         C11883 -
                     ((C12103 * C80588 + C12102 * C5657) * C81012 * C82 +
                      ((C275 * C10473 + C81011 * C10636) * C80588 +
                       (C275 * C10469 + C81011 * C10632) * C5657) *
                          C81012 * C81) *
                         C80978) *
                        C80932 +
                    ((((C275 * C3979 + C81011 * C4305) * C5657 +
                       (C275 * C3985 + C81011 * C4309) * C80588) *
                          C81012 * C81 +
                      (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                         C11882 -
                     ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C81012 * C81) *
                         C11881 -
                     ((C11281 * C80588 + C11280 * C5657) * C81012 * C82 +
                      ((C275 * C6144 + C81011 * C6414) * C80588 +
                       (C275 * C6138 + C81011 * C6408) * C5657) *
                          C81012 * C81) *
                         C11883 +
                     (((C275 * C12543 + C81011 * C12757) * C5657 +
                       (C275 * C12547 + C81011 * C12759) * C80588) *
                          C81012 * C81 +
                      ((C275 * C12544 + C81011 * C12758) * C5657 +
                       (C275 * C12548 + C81011 * C12760) * C80588) *
                          C81012 * C82) *
                         C80978) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C6969 +
            (C275 * C166 + C81011 * C354) * C6893 -
            (C275 * C748 + C81011 * C1036) * C6970 -
            (C275 * C856 + C81011 * C1149) * C6894 +
            (C275 * C750 + C81011 * C1039) * C6971 +
            (C275 * C857 + C81011 * C1150) * C6895 -
            (C275 * C5659 + C81011 * C5822) * C6972 -
            (C275 * C5722 + C81011 * C5871) * C80972) *
               C81012 * C81 +
           (C7185 + C7186 - C7187 - C7188 + C7189 + C7190 - C7191 - C7195) *
               C81012 * C82) *
              C80588 * C80933 +
          (((C275 * C3979 + C81011 * C4305) * C6970 -
            ((C275 * C1790 + C81011 * C2087) * C6893 +
             (C275 * C1684 + C81011 * C1972) * C6969) +
            (C275 * C4093 + C81011 * C4423) * C6894 -
            (C275 * C6140 + C81011 * C6410) * C6971 -
            (C275 * C6236 + C81011 * C6493) * C6895 +
            (C275 * C8499 + C81011 * C8713) * C6972 +
            (C275 * C8573 + C81011 * C8783) * C80972) *
               C81012 * C81 +
           (C4322 * C6970 - (C2106 * C6893 + C2004 * C6969) + C4438 * C6894 -
            C7898 * C6971 - C8006 * C6895 +
            (C275 * C8500 + C81011 * C8714) * C6972 +
            (C275 * C8574 + C81011 * C8784) * C80972) *
               C81012 * C82) *
              C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C2687 +
             (C275 * C166 + C81011 * C354) * C80932 -
             (C275 * C748 + C81011 * C1036) * C2688 -
             (C275 * C856 + C81011 * C1149) * C80686) *
                C81012 * C81 +
            (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
               C737 +
           ((C2903 - (C2902 + C2901) + C2904) * C81012 * C81 +
            (C2905 - (C2906 + C2907) + C2908) * C81012 * C82) *
               C738 +
           ((C2907 + C2906 - C2905 - C2908) * C81012 * C81 +
            (C2909 + C2910 - C2911 - C2915) * C81012 * C82) *
               C80954) *
              C80933 +
          ((((C275 * C3979 + C81011 * C4305) * C2688 -
             ((C275 * C1790 + C81011 * C2087) * C80932 +
              (C275 * C1684 + C81011 * C1972) * C2687) +
             (C275 * C4093 + C81011 * C4423) * C80686) *
                C81012 * C81 +
            (C4428 - (C4429 + C4430) + C4440) * C81012 * C82) *
               C737 +
           ((C4430 + C4429 - C4428 - C4440) * C81012 * C81 +
            (C4433 + C4434 - C4435 - C4441) * C81012 * C82) *
               C738 +
           ((C4435 - (C4434 + C4433) + C4441) * C81012 * C81 +
            ((C275 * C3982 + C81011 * C4308) * C2688 -
             (C3570 * C80932 + C3498 * C2687) +
             (C275 * C4096 + C81011 * C4426) * C80686) *
                C81012 * C82) *
               C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2687 +
            (C275 * C166 + C81011 * C354) * C80932 -
            (C275 * C748 + C81011 * C1036) * C2688 -
            (C275 * C856 + C81011 * C1149) * C80686) *
               C81012 * C81 +
           (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
              C80588 * C11881 +
          (((C275 * C3979 + C81011 * C4305) * C2688 -
            ((C275 * C1790 + C81011 * C2087) * C80932 +
             (C275 * C1684 + C81011 * C1972) * C2687) +
            (C275 * C4093 + C81011 * C4423) * C80686) *
               C81012 * C81 +
           (C4428 - (C4429 + C4430) + C4440) * C81012 * C82) *
              C80588 * C11882 +
          (((C275 * C1686 + C81011 * C1975) * C2687 +
            (C275 * C1792 + C81011 * C2089) * C80932 -
            (C275 * C6138 + C81011 * C6408) * C2688 -
            (C275 * C6238 + C81011 * C6495) * C80686) *
               C81012 * C81 +
           (C11381 + C11382 - C11383 - C11387) * C81012 * C82) *
              C80588 * C11883 +
          (((C275 * C12543 + C81011 * C12757) * C2688 -
            ((C275 * C10527 + C81011 * C10682) * C80932 +
             (C275 * C10469 + C81011 * C10632) * C2687) +
            (C275 * C12617 + C81011 * C12827) * C80686) *
               C81012 * C81 +
           ((C275 * C12544 + C81011 * C12758) * C2688 -
            (C12174 * C80932 + C12102 * C2687) +
            (C275 * C12618 + C81011 * C12828) * C80686) *
               C81012 * C82) *
              C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C3421 +
                      (C275 * C221 + C81011 * C422) * C80933 -
                      (C275 * C1684 + C81011 * C1972) * C3422 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                        C6893 +
                    (((C275 * C3979 + C81011 * C4305) * C3422 -
                      ((C275 * C946 + C81011 * C1256) * C80933 +
                       (C275 * C748 + C81011 * C1036) * C3421) +
                      (C275 * C4199 + C81011 * C4539) * C80726) *
                         C81012 * C81 +
                     (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                        C6894 +
                    (((C275 * C750 + C81011 * C1039) * C3421 +
                      (C275 * C947 + C81011 * C1257) * C80933 -
                      (C275 * C6140 + C81011 * C6410) * C3422 -
                      (C275 * C6324 + C81011 * C6575) * C80726) *
                         C81012 * C81 +
                     (C8107 + C8108 - C8109 - C8113) * C81012 * C82) *
                        C6895 +
                    (((C275 * C8499 + C81011 * C8713) * C3422 -
                      ((C275 * C5772 + C81011 * C5918) * C80933 +
                       (C275 * C5659 + C81011 * C5822) * C3421) +
                      (C275 * C8643 + C81011 * C8851) * C80726) *
                         C81012 * C81 +
                     ((C275 * C8500 + C81011 * C8714) * C3422 -
                      (C7266 * C80933 + C7116 * C3421) +
                      (C275 * C8644 + C81011 * C8852) * C80726) *
                         C81012 * C82) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C3421 +
                       (C275 * C221 + C81011 * C422) * C80933 -
                       (C275 * C1684 + C81011 * C1972) * C3422 -
                       (C275 * C1882 + C81011 * C2187) * C80726) *
                          C81012 * C81 +
                      (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                         C80932 +
                     (((C275 * C3979 + C81011 * C4305) * C3422 -
                       ((C275 * C946 + C81011 * C1256) * C80933 +
                        (C275 * C748 + C81011 * C1036) * C3421) +
                       (C275 * C4199 + C81011 * C4539) * C80726) *
                          C81012 * C81 +
                      (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                         C80686) *
                        C737 +
                    (((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                      (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                         C80932 +
                     ((C4546 + C4545 - C4544 - C4556) * C81012 * C81 +
                      (C4549 + C4550 - C4551 - C4557) * C81012 * C82) *
                         C80686) *
                        C738 +
                    (((C3645 + C3644 - C3643 - C3646) * C81012 * C81 +
                      (C3647 + C3648 - C3649 - C3653) * C81012 * C82) *
                         C80932 +
                     ((C4551 - (C4550 + C4549) + C4557) * C81012 * C81 +
                      ((C275 * C3982 + C81011 * C4308) * C3422 -
                       (C2986 * C80933 + C2832 * C3421) +
                       (C275 * C4202 + C81011 * C4542) * C80726) *
                          C81012 * C82) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C12023 +
                      (C275 * C221 + C81011 * C422) * C11881 -
                      (C275 * C1684 + C81011 * C1972) * C12024 -
                      (C275 * C1882 + C81011 * C2187) * C11882 +
                      (C275 * C1686 + C81011 * C1975) * C12025 +
                      (C275 * C1883 + C81011 * C2188) * C11883 -
                      (C275 * C10469 + C81011 * C10632) * C12026 -
                      (C275 * C10582 + C81011 * C10727) * C80978) *
                         C81012 * C81 +
                     (C12243 + C12244 - C12245 - C12246 + C12247 + C12248 -
                      C12249 - C12253) *
                         C81012 * C82) *
                        C80932 +
                    (((C275 * C3979 + C81011 * C4305) * C12024 -
                      ((C275 * C946 + C81011 * C1256) * C11881 +
                       (C275 * C748 + C81011 * C1036) * C12023) +
                      (C275 * C4199 + C81011 * C4539) * C11882 -
                      (C275 * C6138 + C81011 * C6408) * C12025 -
                      (C275 * C6322 + C81011 * C6573) * C11883 +
                      (C275 * C12543 + C81011 * C12757) * C12026 +
                      (C275 * C12687 + C81011 * C12895) * C80978) *
                         C81012 * C81 +
                     (C4322 * C12024 - (C1276 * C11881 + C1068 * C12023) +
                      C4554 * C11882 - C11280 * C12025 - C11494 * C11883 +
                      (C275 * C12544 + C81011 * C12758) * C12026 +
                      (C275 * C12688 + C81011 * C12896) * C80978) *
                         C81012 * C82) *
                        C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eezx[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81 +
                      (C520 * C5657 + C521 * C80588) * C82) *
                         C81011 * C80933 -
                     ((C2327 * C80588 + C2326 * C5657) * C82 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81) *
                         C81011 * C80726) *
                        C6893 +
                    ((((C490 * C3979 + C81012 * C4655) * C5657 +
                       (C490 * C3985 + C81012 * C4659) * C80588) *
                          C81 +
                      (C4672 * C5657 + C4673 * C80588) * C82) *
                         C81011 * C80726 -
                     ((C1391 * C80588 + C1390 * C5657) * C82 +
                      ((C490 * C757 + C81012 * C1365) * C80588 +
                       (C490 * C748 + C81012 * C1358) * C5657) *
                          C81) *
                         C81011 * C80933) *
                        C6894 +
                    ((((C490 * C750 + C81012 * C1361) * C5657 +
                       (C490 * C764 + C81012 * C1369) * C80588) *
                          C81 +
                      (C1394 * C5657 + C1395 * C80588) * C82) *
                         C81011 * C80933 -
                     ((C8219 * C80588 + C8218 * C5657) * C82 +
                      ((C490 * C6148 + C81012 * C6662) * C80588 +
                       (C490 * C6140 + C81012 * C6656) * C5657) *
                          C81) *
                         C81011 * C80726) *
                        C6895 +
                    ((((C490 * C8499 + C81012 * C8919) * C5657 +
                       (C490 * C8503 + C81012 * C8921) * C80588) *
                          C81 +
                      ((C490 * C8500 + C81012 * C8920) * C5657 +
                       (C490 * C8504 + C81012 * C8922) * C80588) *
                          C82) *
                         C81011 * C80726 -
                     ((C7341 * C80588 + C7340 * C5657) * C82 +
                      ((C490 * C5663 + C81012 * C5968) * C80588 +
                       (C490 * C5659 + C81012 * C5964) * C5657) *
                          C81) *
                         C81011 * C80933) *
                        C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C743 +
                       (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                       C521 * C738 + C522 * C745 + C523 * C80954) *
                          C81 +
                      (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
                       C524 * C745 + C525 * C80954) *
                          C82) *
                         C81011 * C80933 +
                     ((C2326 * C744 -
                       ((C490 * C1693 + C81012 * C2301) * C737 +
                        (C490 * C1684 + C81012 * C2294) * C743) +
                       C2327 * C738 - C2328 * C745 - C2329 * C80954) *
                          C81 +
                      (C2328 * C744 - (C2327 * C737 + C2326 * C743) +
                       C2329 * C738 - C3726 * C745 - C3727 * C80954) *
                          C82) *
                         C81011 * C80726) *
                        C80932 +
                    (((C1390 * C744 -
                       ((C490 * C757 + C81012 * C1365) * C737 +
                        (C490 * C748 + C81012 * C1358) * C743) +
                       C1391 * C738 - C1392 * C745 - C1393 * C80954) *
                          C81 +
                      (C1392 * C744 - (C1391 * C737 + C1390 * C743) +
                       C1393 * C738 - C3060 * C745 - C3061 * C80954) *
                          C82) *
                         C81011 * C80933 +
                     (((C490 * C3979 + C81012 * C4655) * C743 +
                       (C490 * C3985 + C81012 * C4659) * C737 - C4672 * C744 -
                       C4673 * C738 + C4674 * C745 + C4675 * C80954) *
                          C81 +
                      (C4672 * C743 + C4673 * C737 - C4674 * C744 -
                       C4675 * C738 + (C490 * C3982 + C81012 * C4658) * C745 +
                       (C490 * C3990 + C81012 * C4662) * C80954) *
                          C82) *
                         C81011 * C80726) *
                        C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81 +
                      (C520 * C5657 + C521 * C80588) * C82) *
                         C81011 * C11881 -
                     ((C2327 * C80588 + C2326 * C5657) * C82 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81) *
                         C81011 * C11882 +
                     (((C490 * C1686 + C81012 * C2297) * C5657 +
                       (C490 * C1700 + C81012 * C2305) * C80588) *
                          C81 +
                      (C2330 * C5657 + C2331 * C80588) * C82) *
                         C81011 * C11883 -
                     ((C12327 * C80588 + C12326 * C5657) * C82 +
                      ((C490 * C10473 + C81012 * C10778) * C80588 +
                       (C490 * C10469 + C81012 * C10774) * C5657) *
                          C81) *
                         C81011 * C80978) *
                        C80932 +
                    ((((C490 * C3979 + C81012 * C4655) * C5657 +
                       (C490 * C3985 + C81012 * C4659) * C80588) *
                          C81 +
                      (C4672 * C5657 + C4673 * C80588) * C82) *
                         C81011 * C11882 -
                     ((C1391 * C80588 + C1390 * C5657) * C82 +
                      ((C490 * C757 + C81012 * C1365) * C80588 +
                       (C490 * C748 + C81012 * C1358) * C5657) *
                          C81) *
                         C81011 * C11881 -
                     ((C11601 * C80588 + C11600 * C5657) * C82 +
                      ((C490 * C6144 + C81012 * C6660) * C80588 +
                       (C490 * C6138 + C81012 * C6654) * C5657) *
                          C81) *
                         C81011 * C11883 +
                     (((C490 * C12543 + C81012 * C12963) * C5657 +
                       (C490 * C12547 + C81012 * C12965) * C80588) *
                          C81 +
                      ((C490 * C12544 + C81012 * C12964) * C5657 +
                       (C490 * C12548 + C81012 * C12966) * C80588) *
                          C82) *
                         C81011 * C80978) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 -
            (C490 * C748 + C81012 * C1358) * C6970 -
            (C490 * C856 + C81012 * C1471) * C6894 +
            (C490 * C750 + C81012 * C1361) * C6971 +
            (C490 * C857 + C81012 * C1472) * C6895 -
            (C490 * C5659 + C81012 * C5964) * C6972 -
            (C490 * C5722 + C81012 * C6013) * C80972) *
               C81 +
           (C7409 + C7410 - C7411 - C7412 + C7413 + C7414 - C7415 - C7419) *
               C82) *
              C81011 * C80588 * C80933 +
          (((C490 * C3979 + C81012 * C4655) * C6970 -
            ((C490 * C1790 + C81012 * C2409) * C6893 +
             (C490 * C1684 + C81012 * C2294) * C6969) +
            (C490 * C4093 + C81012 * C4773) * C6894 -
            (C490 * C6140 + C81012 * C6656) * C6971 -
            (C490 * C6236 + C81012 * C6739) * C6895 +
            (C490 * C8499 + C81012 * C8919) * C6972 +
            (C490 * C8573 + C81012 * C8989) * C80972) *
               C81 +
           (C4672 * C6970 - (C2428 * C6893 + C2326 * C6969) + C4788 * C6894 -
            C8218 * C6971 - C8326 * C6895 +
            (C490 * C8500 + C81012 * C8920) * C6972 +
            (C490 * C8574 + C81012 * C8990) * C80972) *
               C82) *
              C81011 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 -
             (C490 * C748 + C81012 * C1358) * C2688 -
             (C490 * C856 + C81012 * C1471) * C80686) *
                C81 +
            (C3129 + C3130 - C3131 - C3132) * C82) *
               C81011 * C737 +
           ((C3131 - (C3130 + C3129) + C3132) * C81 +
            (C3133 - (C3134 + C3135) + C3136) * C82) *
               C81011 * C738 +
           ((C3135 + C3134 - C3133 - C3136) * C81 +
            (C3137 + C3138 - C3139 - C3143) * C82) *
               C81011 * C80954) *
              C80933 +
          ((((C490 * C3979 + C81012 * C4655) * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             (C490 * C4093 + C81012 * C4773) * C80686) *
                C81 +
            (C4778 - (C4779 + C4780) + C4790) * C82) *
               C81011 * C737 +
           ((C4780 + C4779 - C4778 - C4790) * C81 +
            (C4783 + C4784 - C4785 - C4791) * C82) *
               C81011 * C738 +
           ((C4785 - (C4784 + C4783) + C4791) * C81 +
            ((C490 * C3982 + C81012 * C4658) * C2688 -
             (C3798 * C80932 + C3726 * C2687) +
             (C490 * C4096 + C81012 * C4776) * C80686) *
                C82) *
               C81011 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2687 +
            (C490 * C166 + C81012 * C569) * C80932 -
            (C490 * C748 + C81012 * C1358) * C2688 -
            (C490 * C856 + C81012 * C1471) * C80686) *
               C81 +
           (C3129 + C3130 - C3131 - C3132) * C82) *
              C81011 * C80588 * C11881 +
          (((C490 * C3979 + C81012 * C4655) * C2688 -
            ((C490 * C1790 + C81012 * C2409) * C80932 +
             (C490 * C1684 + C81012 * C2294) * C2687) +
            (C490 * C4093 + C81012 * C4773) * C80686) *
               C81 +
           (C4778 - (C4779 + C4780) + C4790) * C82) *
              C81011 * C80588 * C11882 +
          (((C490 * C1686 + C81012 * C2297) * C2687 +
            (C490 * C1792 + C81012 * C2411) * C80932 -
            (C490 * C6138 + C81012 * C6654) * C2688 -
            (C490 * C6238 + C81012 * C6741) * C80686) *
               C81 +
           (C11701 + C11702 - C11703 - C11707) * C82) *
              C81011 * C80588 * C11883 +
          (((C490 * C12543 + C81012 * C12963) * C2688 -
            ((C490 * C10527 + C81012 * C10824) * C80932 +
             (C490 * C10469 + C81012 * C10774) * C2687) +
            (C490 * C12617 + C81012 * C13033) * C80686) *
               C81 +
           ((C490 * C12544 + C81012 * C12964) * C2688 -
            (C12398 * C80932 + C12326 * C2687) +
            (C490 * C12618 + C81012 * C13034) * C80686) *
               C82) *
              C81011 * C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C3867 + C3868 - C3869 - C3870) * C82) *
                        C81011 * C6893 +
                    (((C490 * C3979 + C81012 * C4655) * C3422 -
                      ((C490 * C946 + C81012 * C1578) * C80933 +
                       (C490 * C748 + C81012 * C1358) * C3421) +
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81 +
                     (C4894 - (C4895 + C4896) + C4906) * C82) *
                        C81011 * C6894 +
                    (((C490 * C750 + C81012 * C1361) * C3421 +
                      (C490 * C947 + C81012 * C1579) * C80933 -
                      (C490 * C6140 + C81012 * C6656) * C3422 -
                      (C490 * C6324 + C81012 * C6821) * C80726) *
                         C81 +
                     (C8427 + C8428 - C8429 - C8433) * C82) *
                        C81011 * C6895 +
                    (((C490 * C8499 + C81012 * C8919) * C3422 -
                      ((C490 * C5772 + C81012 * C6060) * C80933 +
                       (C490 * C5659 + C81012 * C5964) * C3421) +
                      (C490 * C8643 + C81012 * C9057) * C80726) *
                         C81 +
                     ((C490 * C8500 + C81012 * C8920) * C3422 -
                      (C7490 * C80933 + C7340 * C3421) +
                      (C490 * C8644 + C81012 * C9058) * C80726) *
                         C82) *
                        C81011 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81 +
                      (C3867 + C3868 - C3869 - C3870) * C82) *
                         C81011 * C80932 +
                     (((C490 * C3979 + C81012 * C4655) * C3422 -
                       ((C490 * C946 + C81012 * C1578) * C80933 +
                        (C490 * C748 + C81012 * C1358) * C3421) +
                       (C490 * C4199 + C81012 * C4889) * C80726) *
                          C81 +
                      (C4894 - (C4895 + C4896) + C4906) * C82) *
                         C81011 * C80686) *
                        C737 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81 +
                      (C3871 - (C3872 + C3873) + C3874) * C82) *
                         C81011 * C80932 +
                     ((C4896 + C4895 - C4894 - C4906) * C81 +
                      (C4899 + C4900 - C4901 - C4907) * C82) *
                         C81011 * C80686) *
                        C738 +
                    (((C3873 + C3872 - C3871 - C3874) * C81 +
                      (C3875 + C3876 - C3877 - C3881) * C82) *
                         C81011 * C80932 +
                     ((C4901 - (C4900 + C4899) + C4907) * C81 +
                      ((C490 * C3982 + C81012 * C4658) * C3422 -
                       (C3214 * C80933 + C3060 * C3421) +
                       (C490 * C4202 + C81012 * C4892) * C80726) *
                          C82) *
                         C81011 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C12023 +
                      (C490 * C221 + C81012 * C637) * C11881 -
                      (C490 * C1684 + C81012 * C2294) * C12024 -
                      (C490 * C1882 + C81012 * C2509) * C11882 +
                      (C490 * C1686 + C81012 * C2297) * C12025 +
                      (C490 * C1883 + C81012 * C2510) * C11883 -
                      (C490 * C10469 + C81012 * C10774) * C12026 -
                      (C490 * C10582 + C81012 * C10869) * C80978) *
                         C81 +
                     (C12467 + C12468 - C12469 - C12470 + C12471 + C12472 -
                      C12473 - C12477) *
                         C82) *
                        C81011 * C80932 +
                    (((C490 * C3979 + C81012 * C4655) * C12024 -
                      ((C490 * C946 + C81012 * C1578) * C11881 +
                       (C490 * C748 + C81012 * C1358) * C12023) +
                      (C490 * C4199 + C81012 * C4889) * C11882 -
                      (C490 * C6138 + C81012 * C6654) * C12025 -
                      (C490 * C6322 + C81012 * C6819) * C11883 +
                      (C490 * C12543 + C81012 * C12963) * C12026 +
                      (C490 * C12687 + C81012 * C13101) * C80978) *
                         C81 +
                     (C4672 * C12024 - (C1598 * C11881 + C1390 * C12023) +
                      C4904 * C11882 - C11600 * C12025 - C11814 * C11883 +
                      (C490 * C12544 + C81012 * C12964) * C12026 +
                      (C490 * C12688 + C81012 * C13102) * C80978) *
                         C82) *
                        C81011 * C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C94 +
              (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C83 -
              (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C95 -
              (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C84 +
              (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C96 +
              (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C85 -
              (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C97 -
              (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C86 +
              (C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C98 +
              (C92 * C114 + C81 * C121 + C93 * C116 + C82 * C122) * C87) *
             C81011 * C81012 * C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
               (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
               (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
               (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
               (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
               (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
                  C81011 * C81012 * C80639 * C81003 +
              ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C744 -
               ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C737 +
                (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C743) +
               (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C738 -
               (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C745 -
               (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
                  C81011 * C81012 * C80639 * C80988 +
              ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C743 +
               (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C737 -
               (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C744 -
               (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C738 +
               (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C745 +
               (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
                  C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C81004 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C744 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C737 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C743) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C738 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C745 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
              C81011 * C81012 * C80990 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C743 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C737 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C744 -
           (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C738 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C745 +
           (C92 * C1703 + C81 * C1712 + C93 * C1705 + C82 * C1713) * C80954) *
              C81011 * C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C80639 * C4984 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C4988 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80998 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C4987) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80982 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C4989 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
              C81011 * C81012 * C80639 * C4985 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C4987 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80998 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C4988 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80982 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C4989 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
              C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
              C81011 * C81012 * C80639 * C5652 -
          ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
              C81011 * C81012 * C80639 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
              C81011 * C81012 * C80639 * C5654 -
          ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
              C81011 * C81012 * C80639 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5657 +
           (C92 * C5668 + C81 * C5672 + C93 * C5669 + C82 * C5673) * C80588) *
              C81011 * C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C81004 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C80990 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
               C81011 * C81012 * C80965) *
              C4984 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C80990 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C81004 -
           ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80588 +
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5657) *
               C81011 * C81012 * C80965) *
              C4985 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C81004 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C80990 +
           ((C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C5657 +
            (C92 * C6153 + C81 * C6159 + C93 * C6154 + C82 * C6160) * C80588) *
               C81011 * C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C9133 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C4988 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80998 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C4987) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80982 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C4989 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
              C81011 * C81012 * C9134 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C4987 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80998 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C4988 -
           (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80982 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C4989 +
           (C92 * C1703 + C81 * C1712 + C93 * C1705 + C82 * C1713) * C80954) *
              C81011 * C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C9133 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C9134 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
               C81011 * C81012 * C80965) *
              C81003 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C9134 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C9133 -
           ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80588 +
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5657) *
               C81011 * C81012 * C80965) *
              C80988 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C9133 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C9134 +
           ((C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C5657 +
            (C92 * C6153 + C81 * C6159 + C93 * C6154 + C82 * C6160) * C80588) *
               C81011 * C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
              C81011 * C81012 * C10463 -
          ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
              C81011 * C81012 * C10464 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
              C81011 * C81012 * C10465 -
          ((C93 * C10472 + C82 * C10480 + C92 * C10473 + C81 * C10481) *
               C80588 +
           (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
               C5657) *
              C81011 * C81012 * C10466 +
          ((C92 * C10470 + C81 * C10476 + C93 * C10471 + C82 * C10477) * C5657 +
           (C92 * C10478 + C81 * C10482 + C93 * C10479 + C82 * C10483) *
               C80588) *
              C81011 * C81012 * C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
               (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
                  C81011 * C81012 * C83 -
              ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
               (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
                  C81011 * C81012 * C84 +
              ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
               (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
                  C81011 * C81012 * C85 -
              ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
               (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
                  C81011 * C81012 * C86 +
              ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C165 +
               (C92 * C170 + C81 * C176 + C93 * C171 + C82 * C177) * C80628) *
                  C81011 * C81012 * C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
               (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
               (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
               (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
               (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
               (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
                  C81011 * C81012 * C737 +
              ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C853 -
               ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81003 +
                (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C852) +
               (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80988 -
               (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C854 -
               (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
                  C81011 * C81012 * C738 +
              ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C852 +
               (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C81003 -
               (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C853 -
               (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80988 +
               (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C854 +
               (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
                  C81011 * C81012 * C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C737 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C738 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C80954) *
              C81004 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C738 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C737 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C80954) *
              C80990 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
               C81011 * C81012 * C737 -
           ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80628 +
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C165) *
               C81011 * C81012 * C738 +
           ((C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C165 +
            (C92 * C1794 + C81 * C1802 + C93 * C1795 + C82 * C1803) * C80628) *
               C81011 * C81012 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80998 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C5065 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C4984 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C5064) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C4985 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C5066 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
              C81011 * C81012 * C80982 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C5064 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C4984 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C5065 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C4985 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C5066 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
              C81011 * C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5716 +
          (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C5652 -
          (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5717 -
          (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C5653 +
          (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5718 +
          (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C5654 -
          (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5719 -
          (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C5655 +
          (C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5720 +
          (C92 * C5723 + C81 * C5727 + C93 * C5724 + C82 * C5728) * C5656) *
         C81011 * C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80588 * C81004 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5065 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C4984 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5064) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C4985 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5066 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
              C81011 * C81012 * C80588 * C80990 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5064 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C4984 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5065 -
           (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C4985 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C5066 +
           (C92 * C6239 + C81 * C6245 + C93 * C6240 + C82 * C6246) * C80962) *
              C81011 * C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C80998 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C80982 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C80954) *
              C9133 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C80982 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C80998 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C80954) *
              C9134 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
               C81011 * C81012 * C80998 -
           ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80628 +
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C165) *
               C81011 * C81012 * C80982 +
           ((C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C165 +
            (C92 * C1794 + C81 * C1802 + C93 * C1795 + C82 * C1803) * C80628) *
               C81011 * C81012 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80588 * C9133 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C853 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C81003 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C852) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80988 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C854 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
              C81011 * C81012 * C80588 * C9134 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C852 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C81003 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C853 -
           (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80988 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C854 +
           (C92 * C6239 + C81 * C6245 + C93 * C6240 + C82 * C6246) * C80962) *
              C81011 * C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
              C81011 * C81012 * C80588 * C10463 -
          ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
              C81011 * C81012 * C80588 * C10464 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
              C81011 * C81012 * C80588 * C10465 -
          ((C93 * C10526 + C82 * C10530 + C92 * C10527 + C81 * C10531) *
               C80628 +
           (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) * C165) *
              C81011 * C81012 * C80588 * C10466 +
          ((C92 * C10470 + C81 * C10476 + C93 * C10471 + C82 * C10477) * C165 +
           (C92 * C10528 + C81 * C10532 + C93 * C10529 + C82 * C10533) *
               C80628) *
              C81011 * C81012 * C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
               (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
                  C81011 * C81012 * C80628 * C83 -
              ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
               (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
                  C81011 * C81012 * C80628 * C84 +
              ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
               (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
                  C81011 * C81012 * C80628 * C85 -
              ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
               (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
                  C81011 * C81012 * C80628 * C86 +
              ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C220 +
               (C92 * C225 + C81 * C231 + C93 * C226 + C82 * C232) * C80639) *
                  C81011 * C81012 * C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
                (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
                   C81011 * C81012 * C81003 -
               ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
                (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
                   C81011 * C81012 * C80988 +
               ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
                (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
                   C81011 * C81012 * C80962) *
                  C737 +
              (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
                (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
                   C81011 * C81012 * C80988 -
               ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
                (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
                   C81011 * C81012 * C81003 -
               ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
                (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
                   C81011 * C81012 * C80962) *
                  C738 +
              (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
                (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
                   C81011 * C81012 * C81003 -
               ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
                (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
                   C81011 * C81012 * C80988 +
               ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
                (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
                   C81011 * C81012 * C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C1878 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C81004 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C1879 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80990 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C1880 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C737 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C1879 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C81004 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C1878) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80990 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C1880 -
           (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C738 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C1878 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C81004 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C1879 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80990 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C1880 +
           (C92 * C1886 + C81 * C1894 + C93 * C1888 + C82 * C1896) * C80965) *
              C81011 * C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80962) *
              C80998 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C4985 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C4984 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80962) *
              C80982 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
              C81011 * C81012 * C5652 -
          ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
              C81011 * C81012 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
              C81011 * C81012 * C5654 -
          ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
              C81011 * C81012 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C220 +
           (C92 * C5773 + C81 * C5777 + C93 * C5774 + C82 * C5778) * C80639) *
              C81011 * C81012 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C1878 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C81004 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C1879 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80990 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C1880 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C4984 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C1879 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C81004 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C1878) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80990 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C1880 -
           (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C80965) *
              C81011 * C81012 * C4985 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C1878 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C81004 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C1879 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80990 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C1880 +
           (C92 * C6325 + C81 * C6331 + C93 * C6326 + C82 * C6332) * C80965) *
              C81011 * C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C9284 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C9133 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C9285 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C9134 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C9286 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C80998 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C9285 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C9133 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C9284) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C9134 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C9286 -
           (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C80982 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C9284 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C9133 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C9285 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C9134 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C9286 +
           (C92 * C1886 + C81 * C1894 + C93 * C1888 + C82 * C1896) * C80965) *
              C81011 * C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C9284 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C9133 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C9285 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C9134 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C9286 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C81003 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C9285 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C9133 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C9284) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C9134 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C9286 -
           (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C80965) *
              C81011 * C81012 * C80988 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C9284 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C9133 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C9285 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C9134 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C9286 +
           (C92 * C6325 + C81 * C6331 + C93 * C6326 + C82 * C6332) * C80965) *
              C81011 * C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C10576 +
          (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C10463 -
          (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C10577 -
          (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C10464 +
          (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C10578 +
          (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C10465 -
          (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) * C10579 -
          (C93 * C10581 + C82 * C10585 + C92 * C10582 + C81 * C10586) * C10466 +
          (C92 * C10470 + C81 * C10476 + C93 * C10471 + C82 * C10477) * C10580 +
          (C92 * C10583 + C81 * C10587 + C93 * C10584 + C82 * C10588) *
              C10467) *
         C81011 * C81012 * C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] += (0.5 * std::pow(Pi, 2.5) *
                       (((C275 * C99 + C81011 * C276) * C94 +
                         (C275 * C107 + C81011 * C282) * C83 - C305 * C95 -
                         C306 * C84 + C307 * C96 + C308 * C85 - C309 * C97 -
                         C310 * C86 + C311 * C98 + C312 * C87) *
                            C81012 * C81 +
                        (C305 * C94 + C306 * C83 - C307 * C95 - C308 * C84 +
                         C309 * C96 + C310 * C85 - C311 * C97 - C312 * C86 +
                         (C275 * C104 + C81011 * C281) * C98 +
                         (C275 * C116 + C81011 * C287) * C87) *
                            C81012 * C82) *
                       C80639 * C80628 +
                   0.5 * std::pow(Pi, 2.5) *
                       ((((C275 * C99 + C81011 * C276) * C743 +
                          (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                          C306 * C738 + C307 * C745 + C308 * C80954) *
                             C81012 * C81 +
                         (C305 * C743 + C306 * C737 - C307 * C744 -
                          C308 * C738 + C309 * C745 + C310 * C80954) *
                             C81012 * C82) *
                            C80639 * C81003 +
                        ((C1068 * C744 -
                          ((C275 * C757 + C81011 * C1043) * C737 +
                           (C275 * C748 + C81011 * C1036) * C743) +
                          C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                             C81012 * C81 +
                         (C1070 * C744 - (C1069 * C737 + C1068 * C743) +
                          C1071 * C738 - (C275 * C749 + C81011 * C1038) * C745 -
                          (C275 * C761 + C81011 * C1046) * C80954) *
                             C81012 * C82) *
                            C80639 * C80988 +
                        (((C275 * C750 + C81011 * C1039) * C743 +
                          (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
                          C1073 * C738 + C1074 * C745 + C1075 * C80954) *
                             C81012 * C81 +
                         (C1072 * C743 + C1073 * C737 - C1074 * C744 -
                          C1075 * C738 + (C275 * C753 + C81011 * C1042) * C745 +
                          (C275 * C769 + C81011 * C1050) * C80954) *
                             C81012 * C82) *
                            C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C743 +
                      (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                      C306 * C738 + C307 * C745 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C743 + C306 * C737 - C307 * C744 - C308 * C738 +
                      C309 * C745 + C310 * C80954) *
                         C81012 * C82) *
                        C81004 +
                    ((C2004 * C744 -
                      ((C275 * C1693 + C81011 * C1979) * C737 +
                       (C275 * C1684 + C81011 * C1972) * C743) +
                      C2005 * C738 - C2006 * C745 - C2007 * C80954) *
                         C81012 * C81 +
                     (C2006 * C744 - (C2005 * C737 + C2004 * C743) +
                      C2007 * C738 - (C275 * C1685 + C81011 * C1974) * C745 -
                      (C275 * C1697 + C81011 * C1982) * C80954) *
                         C81012 * C82) *
                        C80990 +
                    (((C275 * C1686 + C81011 * C1975) * C743 +
                      (C275 * C1700 + C81011 * C1983) * C737 - C2008 * C744 -
                      C2009 * C738 + C2010 * C745 + C2011 * C80954) *
                         C81012 * C81 +
                     (C2008 * C743 + C2009 * C737 - C2010 * C744 -
                      C2011 * C738 + (C275 * C1689 + C81011 * C1978) * C745 +
                      (C275 * C1705 + C81011 * C1986) * C80954) *
                         C81012 * C82) *
                        C80965) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C80639 * C4984 +
                    ((C1068 * C4988 -
                      ((C275 * C757 + C81011 * C1043) * C80998 +
                       (C275 * C748 + C81011 * C1036) * C4987) +
                      C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C4988 - (C1069 * C80998 + C1068 * C4987) +
                      C1071 * C80982 - C2832 * C4989 - C2833 * C80954) *
                         C81012 * C82) *
                        C80639 * C4985 +
                    (((C275 * C750 + C81011 * C1039) * C4987 +
                      (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
                      C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
                         C81012 * C81 +
                     (C1072 * C4987 + C1073 * C80998 - C1074 * C4988 -
                      C1075 * C80982 + (C275 * C753 + C81011 * C1042) * C4989 +
                      (C275 * C769 + C81011 * C1050) * C80954) *
                         C81012 * C82) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C80639 * C5652 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C80639 * C5653 +
                    (((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C81012 * C81 +
                     (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                        C80639 * C5654 -
                    (((C275 * C5662 + C81011 * C5825) * C80588 +
                      (C275 * C5658 + C81011 * C5821) * C5657) *
                         C81012 * C82 +
                     ((C275 * C5663 + C81011 * C5826) * C80588 +
                      (C275 * C5659 + C81011 * C5822) * C5657) *
                         C81012 * C81) *
                        C80639 * C5655 +
                    (((C275 * C5660 + C81011 * C5823) * C5657 +
                      (C275 * C5668 + C81011 * C5827) * C80588) *
                         C81012 * C81 +
                     ((C275 * C5661 + C81011 * C5824) * C5657 +
                      (C275 * C5669 + C81011 * C5828) * C80588) *
                         C81012 * C82) *
                        C80639 * C5656)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C81012 * C81 +
                      (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                         C81004 -
                     ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                      ((C275 * C1693 + C81011 * C1979) * C80588 +
                       (C275 * C1684 + C81011 * C1972) * C5657) *
                          C81012 * C81) *
                         C80990 +
                     (((C275 * C1686 + C81011 * C1975) * C5657 +
                       (C275 * C1700 + C81011 * C1983) * C80588) *
                          C81012 * C81 +
                      (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                         C80965) *
                        C4984 +
                    ((((C275 * C3979 + C81011 * C4305) * C5657 +
                       (C275 * C3985 + C81011 * C4309) * C80588) *
                          C81012 * C81 +
                      (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                         C80990 -
                     ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C81012 * C81) *
                         C81004 -
                     (((C275 * C6143 + C81011 * C6413) * C80588 +
                       (C275 * C6137 + C81011 * C6407) * C5657) *
                          C81012 * C82 +
                      ((C275 * C6144 + C81011 * C6414) * C80588 +
                       (C275 * C6138 + C81011 * C6408) * C5657) *
                          C81012 * C81) *
                         C80965) *
                        C4985 +
                    ((((C275 * C750 + C81011 * C1039) * C5657 +
                       (C275 * C764 + C81011 * C1047) * C80588) *
                          C81012 * C81 +
                      (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                         C81004 -
                     (((C275 * C6147 + C81011 * C6415) * C80588 +
                       (C275 * C6139 + C81011 * C6409) * C5657) *
                          C81012 * C82 +
                      ((C275 * C6148 + C81011 * C6416) * C80588 +
                       (C275 * C6140 + C81011 * C6410) * C5657) *
                          C81012 * C81) *
                         C80990 +
                     (((C275 * C6141 + C81011 * C6411) * C5657 +
                       (C275 * C6153 + C81011 * C6417) * C80588) *
                          C81012 * C81 +
                      ((C275 * C6142 + C81011 * C6412) * C5657 +
                       (C275 * C6154 + C81011 * C6418) * C80588) *
                          C81012 * C82) *
                         C80965) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C9133 +
                    ((C2004 * C4988 -
                      ((C275 * C1693 + C81011 * C1979) * C80998 +
                       (C275 * C1684 + C81011 * C1972) * C4987) +
                      C2005 * C80982 - C2006 * C4989 - C2007 * C80954) *
                         C81012 * C81 +
                     (C2006 * C4988 - (C2005 * C80998 + C2004 * C4987) +
                      C2007 * C80982 - C3498 * C4989 - C3499 * C80954) *
                         C81012 * C82) *
                        C9134 +
                    (((C275 * C1686 + C81011 * C1975) * C4987 +
                      (C275 * C1700 + C81011 * C1983) * C80998 - C2008 * C4988 -
                      C2009 * C80982 + C2010 * C4989 + C2011 * C80954) *
                         C81012 * C81 +
                     (C2008 * C4987 + C2009 * C80998 - C2010 * C4988 -
                      C2011 * C80982 + (C275 * C1689 + C81011 * C1978) * C4989 +
                      (C275 * C1705 + C81011 * C1986) * C80954) *
                         C81012 * C82) *
                        C80965) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C81012 * C81 +
                      (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                         C9133 -
                     ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                      ((C275 * C1693 + C81011 * C1979) * C80588 +
                       (C275 * C1684 + C81011 * C1972) * C5657) *
                          C81012 * C81) *
                         C9134 +
                     (((C275 * C1686 + C81011 * C1975) * C5657 +
                       (C275 * C1700 + C81011 * C1983) * C80588) *
                          C81012 * C81 +
                      (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                         C80965) *
                        C81003 +
                    ((((C275 * C3979 + C81011 * C4305) * C5657 +
                       (C275 * C3985 + C81011 * C4309) * C80588) *
                          C81012 * C81 +
                      (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                         C9134 -
                     ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C81012 * C81) *
                         C9133 -
                     (((C275 * C6143 + C81011 * C6413) * C80588 +
                       (C275 * C6137 + C81011 * C6407) * C5657) *
                          C81012 * C82 +
                      ((C275 * C6144 + C81011 * C6414) * C80588 +
                       (C275 * C6138 + C81011 * C6408) * C5657) *
                          C81012 * C81) *
                         C80965) *
                        C80988 +
                    ((((C275 * C750 + C81011 * C1039) * C5657 +
                       (C275 * C764 + C81011 * C1047) * C80588) *
                          C81012 * C81 +
                      (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                         C9133 -
                     ((C7899 * C80588 + C7898 * C5657) * C81012 * C82 +
                      ((C275 * C6148 + C81011 * C6416) * C80588 +
                       (C275 * C6140 + C81011 * C6410) * C5657) *
                          C81012 * C81) *
                         C9134 +
                     (((C275 * C6141 + C81011 * C6411) * C5657 +
                       (C275 * C6153 + C81011 * C6417) * C80588) *
                          C81012 * C81 +
                      ((C275 * C6142 + C81011 * C6412) * C5657 +
                       (C275 * C6154 + C81011 * C6418) * C80588) *
                          C81012 * C82) *
                         C80965) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C10463 -
                    ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                     ((C275 * C1693 + C81011 * C1979) * C80588 +
                      (C275 * C1684 + C81011 * C1972) * C5657) *
                         C81012 * C81) *
                        C10464 +
                    (((C275 * C1686 + C81011 * C1975) * C5657 +
                      (C275 * C1700 + C81011 * C1983) * C80588) *
                         C81012 * C81 +
                     (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                        C10465 -
                    (((C275 * C10472 + C81011 * C10635) * C80588 +
                      (C275 * C10468 + C81011 * C10631) * C5657) *
                         C81012 * C82 +
                     ((C275 * C10473 + C81011 * C10636) * C80588 +
                      (C275 * C10469 + C81011 * C10632) * C5657) *
                         C81012 * C81) *
                        C10466 +
                    (((C275 * C10470 + C81011 * C10633) * C5657 +
                      (C275 * C10478 + C81011 * C10637) * C80588) *
                         C81012 * C81 +
                     ((C275 * C10471 + C81011 * C10634) * C5657 +
                      (C275 * C10479 + C81011 * C10638) * C80588) *
                         C81012 * C82) *
                        C10467) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C99 + C81011 * C276) * C165 +
                (C275 * C166 + C81011 * C354) * C80628) *
                   C81012 * C81 +
               (C361 + C377) * C81012 * C82) *
                  C83 -
              ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
                  C84 +
              ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
                  C85 -
              ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) *
                  C86 +
              ((C372 + C380) * C81012 * C81 +
               ((C275 * C104 + C81011 * C281) * C165 +
                (C275 * C171 + C81011 * C359) * C80628) *
                   C81012 * C82) *
                  C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C99 + C81011 * C276) * C852 +
                (C275 * C166 + C81011 * C354) * C81003 -
                (C275 * C748 + C81011 * C1036) * C853 -
                (C275 * C856 + C81011 * C1149) * C80988 +
                (C275 * C750 + C81011 * C1039) * C854 +
                (C275 * C857 + C81011 * C1150) * C80962) *
                   C81012 * C81 +
               (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
                  C737 +
              ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C81012 *
                   C81 +
               (C1166 - (C1167 + C1168) + C1180 - C1171 - C1181) * C81012 *
                   C82) *
                  C738 +
              ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C81012 * C81 +
               (C309 * C852 + C375 * C81003 -
                (C275 * C749 + C81011 * C1038) * C853 -
                (C275 * C861 + C81011 * C1155) * C80988 +
                (C275 * C753 + C81011 * C1042) * C854 +
                (C275 * C862 + C81011 * C1156) * C80962) *
                   C81012 * C82) *
                  C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C737 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C738 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C80954) *
              C81004 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C738 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C737 -
           (((C275 * C1791 + C81011 * C2088) * C80628 +
             (C275 * C1685 + C81011 * C1974) * C165) *
                C81012 * C82 +
            (C2111 + C2097) * C81012 * C81) *
               C80954) *
              C80990 +
          ((((C275 * C1686 + C81011 * C1975) * C165 +
             (C275 * C1792 + C81011 * C2089) * C80628) *
                C81012 * C81 +
            (C2100 + C2112) * C81012 * C82) *
               C737 -
           ((C2113 + C2105) * C81012 * C82 + (C2112 + C2100) * C81012 * C81) *
               C738 +
           ((C2105 + C2113) * C81012 * C81 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C81012 * C82) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
              C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C81012 * C81 +
           (C5296 - (C5297 + C5298) + C5299 - C5300 - C5301) * C81012 * C82) *
              C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C81012 * C81 +
           (C309 * C5064 + C375 * C4984 - C2832 * C5065 - C2914 * C4985 +
            (C275 * C753 + C81011 * C1042) * C5066 +
            (C275 * C862 + C81011 * C1156) * C80962) *
               C81012 * C82) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C81012 * C81 +
          (C305 * C5716 + C373 * C5652 - C1068 * C5717 - C1174 * C5653 +
           C1072 * C5718 + C1175 * C5654 -
           (C275 * C5658 + C81011 * C5821) * C5719 -
           (C275 * C5721 + C81011 * C5873) * C5655 +
           (C275 * C5661 + C81011 * C5824) * C5720 +
           (C275 * C5724 + C81011 * C5874) * C5656) *
              C81012 * C82) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
              C80588 * C81004 +
          (((C275 * C3979 + C81011 * C4305) * C5065 -
            ((C275 * C1790 + C81011 * C2087) * C4984 +
             (C275 * C1684 + C81011 * C1972) * C5064) +
            (C275 * C4093 + C81011 * C4423) * C4985 -
            (C275 * C6140 + C81011 * C6410) * C5066 -
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C81012 * C81 +
           (C4322 * C5065 - (C2106 * C4984 + C2004 * C5064) + C4438 * C4985 -
            (C275 * C6139 + C81011 * C6409) * C5066 -
            (C275 * C6235 + C81011 * C6494) * C80962) *
               C81012 * C82) *
              C80588 * C80990 +
          (((C275 * C1686 + C81011 * C1975) * C5064 +
            (C275 * C1792 + C81011 * C2089) * C4984 -
            (C275 * C6138 + C81011 * C6408) * C5065 -
            (C275 * C6238 + C81011 * C6495) * C4985 +
            (C275 * C6141 + C81011 * C6411) * C5066 +
            (C275 * C6239 + C81011 * C6496) * C80962) *
               C81012 * C81 +
           (C2008 * C5064 + C2108 * C4984 -
            (C275 * C6137 + C81011 * C6407) * C5065 -
            (C275 * C6237 + C81011 * C6497) * C4985 +
            (C275 * C6142 + C81011 * C6412) * C5066 +
            (C275 * C6240 + C81011 * C6498) * C80962) *
               C81012 * C82) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C80998 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C80982 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C80954) *
              C9133 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C80982 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C80998 -
           ((C3571 + C3569) * C81012 * C82 + (C2111 + C2097) * C81012 * C81) *
               C80954) *
              C9134 +
          ((((C275 * C1686 + C81011 * C1975) * C165 +
             (C275 * C1792 + C81011 * C2089) * C80628) *
                C81012 * C81 +
            (C2100 + C2112) * C81012 * C82) *
               C80998 -
           ((C2113 + C2105) * C81012 * C82 + (C2112 + C2100) * C81012 * C81) *
               C80982 +
           ((C2105 + C2113) * C81012 * C81 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C81012 * C82) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
              C80588 * C9133 +
          (((C275 * C3979 + C81011 * C4305) * C853 -
            ((C275 * C1790 + C81011 * C2087) * C81003 +
             (C275 * C1684 + C81011 * C1972) * C852) +
            (C275 * C4093 + C81011 * C4423) * C80988 -
            (C275 * C6140 + C81011 * C6410) * C854 -
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C81012 * C81 +
           (C4322 * C853 - (C2106 * C81003 + C2004 * C852) + C4438 * C80988 -
            C7898 * C854 - C8006 * C80962) *
               C81012 * C82) *
              C80588 * C9134 +
          (((C275 * C1686 + C81011 * C1975) * C852 +
            (C275 * C1792 + C81011 * C2089) * C81003 -
            (C275 * C6138 + C81011 * C6408) * C853 -
            (C275 * C6238 + C81011 * C6495) * C80988 +
            (C275 * C6141 + C81011 * C6411) * C854 +
            (C275 * C6239 + C81011 * C6496) * C80962) *
               C81012 * C81 +
           (C2008 * C852 + C2108 * C81003 -
            (C275 * C6137 + C81011 * C6407) * C853 -
            (C275 * C6237 + C81011 * C6497) * C80988 +
            (C275 * C6142 + C81011 * C6412) * C854 +
            (C275 * C6240 + C81011 * C6498) * C80962) *
               C81012 * C82) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C81012 * C81 +
           (C361 + C377) * C81012 * C82) *
              C80588 * C10463 -
          ((C2110 + C2094) * C81012 * C82 +
           ((C275 * C1790 + C81011 * C2087) * C80628 +
            (C275 * C1684 + C81011 * C1972) * C165) *
               C81012 * C81) *
              C80588 * C10464 +
          (((C275 * C1686 + C81011 * C1975) * C165 +
            (C275 * C1792 + C81011 * C2089) * C80628) *
               C81012 * C81 +
           (C2100 + C2112) * C81012 * C82) *
              C80588 * C10465 -
          (((C275 * C10526 + C81011 * C10681) * C80628 +
            (C275 * C10468 + C81011 * C10631) * C165) *
               C81012 * C82 +
           ((C275 * C10527 + C81011 * C10682) * C80628 +
            (C275 * C10469 + C81011 * C10632) * C165) *
               C81012 * C81) *
              C80588 * C10466 +
          (((C275 * C10470 + C81011 * C10633) * C165 +
            (C275 * C10528 + C81011 * C10683) * C80628) *
               C81012 * C81 +
           ((C275 * C10471 + C81011 * C10634) * C165 +
            (C275 * C10529 + C81011 * C10684) * C80628) *
               C81012 * C82) *
              C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C99 + C81011 * C276) * C220 +
                (C275 * C221 + C81011 * C422) * C80639) *
                   C81012 * C81 +
               (C429 + C445) * C81012 * C82) *
                  C80628 * C83 -
              ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
                  C80628 * C84 +
              ((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
                  C80628 * C85 -
              ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
                  C80628 * C86 +
              ((C440 + C448) * C81012 * C81 +
               ((C275 * C104 + C81011 * C281) * C220 +
                (C275 * C226 + C81011 * C427) * C80639) *
                   C81012 * C82) *
                  C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C275 * C99 + C81011 * C276) * C220 +
                 (C275 * C221 + C81011 * C422) * C80639) *
                    C81012 * C81 +
                (C429 + C445) * C81012 * C82) *
                   C81003 -
               ((C1280 + C1266) * C81012 * C82 +
                ((C275 * C946 + C81011 * C1256) * C80639 +
                 (C275 * C748 + C81011 * C1036) * C220) *
                    C81012 * C81) *
                   C80988 +
               (((C275 * C750 + C81011 * C1039) * C220 +
                 (C275 * C947 + C81011 * C1257) * C80639) *
                    C81012 * C81 +
                (C1267 + C1281) * C81012 * C82) *
                   C80962) *
                  C737 +
              (((C1266 + C1280) * C81012 * C81 +
                (C1270 + C1282) * C81012 * C82) *
                   C80988 -
               ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
                   C81003 -
               ((C1283 + C1275) * C81012 * C82 +
                (C1281 + C1267) * C81012 * C81) *
                   C80962) *
                  C738 +
              (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
                   C81003 -
               (((C275 * C951 + C81011 * C1261) * C80639 +
                 (C275 * C749 + C81011 * C1038) * C220) *
                    C81012 * C82 +
                (C1282 + C1270) * C81012 * C81) *
                   C80988 +
               ((C1275 + C1283) * C81012 * C81 +
                ((C275 * C753 + C81011 * C1042) * C220 +
                 (C275 * C952 + C81011 * C1262) * C80639) *
                    C81012 * C82) *
                   C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 -
            (C275 * C1684 + C81011 * C1972) * C1879 -
            (C275 * C1882 + C81011 * C2187) * C80990 +
            (C275 * C1686 + C81011 * C1975) * C1880 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C2196 + C2197 - C2198 - C2216 + C2201 + C2217) * C81012 * C82) *
              C80628 * C737 +
          ((C2198 - (C2197 + C2196) + C2216 - C2201 - C2217) * C81012 * C81 +
           (C2204 - (C2205 + C2206) + C2218 - C2209 - C2219) * C81012 * C82) *
              C80628 * C738 +
          ((C2206 + C2205 - C2204 - C2218 + C2209 + C2219) * C81012 * C81 +
           (C309 * C1878 + C443 * C81004 -
            (C275 * C1685 + C81011 * C1974) * C1879 -
            (C275 * C1887 + C81011 * C2193) * C80990 +
            (C275 * C1689 + C81011 * C1978) * C1880 +
            (C275 * C1888 + C81011 * C2194) * C80965) *
               C81012 * C82) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C4984 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80962) *
              C80998 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C4985 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C4984 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80962) *
              C80982 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C4984 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C4985 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C81012 * C81 +
           (C429 + C445) * C81012 * C82) *
              C5652 -
          ((C1280 + C1266) * C81012 * C82 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C81012 * C81) *
              C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C81012 * C81 +
           (C1267 + C1281) * C81012 * C82) *
              C5654 -
          (((C275 * C5771 + C81011 * C5917) * C80639 +
            (C275 * C5658 + C81011 * C5821) * C220) *
               C81012 * C82 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C81012 * C81) *
              C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C81012 * C81 +
           ((C275 * C5661 + C81011 * C5824) * C220 +
            (C275 * C5774 + C81011 * C5920) * C80639) *
               C81012 * C82) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 -
            (C275 * C1684 + C81011 * C1972) * C1879 -
            (C275 * C1882 + C81011 * C2187) * C80990 +
            (C275 * C1686 + C81011 * C1975) * C1880 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C2196 + C2197 - C2198 - C2216 + C2201 + C2217) * C81012 * C82) *
              C4984 +
          (((C275 * C3979 + C81011 * C4305) * C1879 -
            ((C275 * C946 + C81011 * C1256) * C81004 +
             (C275 * C748 + C81011 * C1036) * C1878) +
            (C275 * C4199 + C81011 * C4539) * C80990 -
            (C275 * C6138 + C81011 * C6408) * C1880 -
            (C275 * C6322 + C81011 * C6573) * C80965) *
               C81012 * C81 +
           (C4322 * C1879 - (C1276 * C81004 + C1068 * C1878) + C4554 * C80990 -
            (C275 * C6137 + C81011 * C6407) * C1880 -
            (C275 * C6321 + C81011 * C6574) * C80965) *
               C81012 * C82) *
              C4985 +
          (((C275 * C750 + C81011 * C1039) * C1878 +
            (C275 * C947 + C81011 * C1257) * C81004 -
            (C275 * C6140 + C81011 * C6410) * C1879 -
            (C275 * C6324 + C81011 * C6575) * C80990 +
            (C275 * C6141 + C81011 * C6411) * C1880 +
            (C275 * C6325 + C81011 * C6576) * C80965) *
               C81012 * C81 +
           (C1072 * C1878 + C1277 * C81004 -
            (C275 * C6139 + C81011 * C6409) * C1879 -
            (C275 * C6323 + C81011 * C6577) * C80990 +
            (C275 * C6142 + C81011 * C6412) * C1880 +
            (C275 * C6326 + C81011 * C6578) * C80965) *
               C81012 * C82) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 -
            (C275 * C1684 + C81011 * C1972) * C9285 -
            (C275 * C1882 + C81011 * C2187) * C9134 +
            (C275 * C1686 + C81011 * C1975) * C9286 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C9510 + C9511 - C9512 - C9513 + C9514 + C9515) * C81012 * C82) *
              C80628 * C80998 +
          ((C9512 - (C9511 + C9510) + C9513 - C9514 - C9515) * C81012 * C81 +
           (C9516 - (C9517 + C9518) + C9519 - C9520 - C9521) * C81012 * C82) *
              C80628 * C80982 +
          ((C9518 + C9517 - C9516 - C9519 + C9520 + C9521) * C81012 * C81 +
           (C309 * C9284 + C443 * C9133 - C3498 * C9285 - C3652 * C9134 +
            (C275 * C1689 + C81011 * C1978) * C9286 +
            (C275 * C1888 + C81011 * C2194) * C80965) *
               C81012 * C82) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 -
            (C275 * C1684 + C81011 * C1972) * C9285 -
            (C275 * C1882 + C81011 * C2187) * C9134 +
            (C275 * C1686 + C81011 * C1975) * C9286 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C9510 + C9511 - C9512 - C9513 + C9514 + C9515) * C81012 * C82) *
              C81003 +
          (((C275 * C3979 + C81011 * C4305) * C9285 -
            ((C275 * C946 + C81011 * C1256) * C9133 +
             (C275 * C748 + C81011 * C1036) * C9284) +
            (C275 * C4199 + C81011 * C4539) * C9134 -
            (C275 * C6138 + C81011 * C6408) * C9286 -
            (C275 * C6322 + C81011 * C6573) * C80965) *
               C81012 * C81 +
           (C4322 * C9285 - (C1276 * C9133 + C1068 * C9284) + C4554 * C9134 -
            (C275 * C6137 + C81011 * C6407) * C9286 -
            (C275 * C6321 + C81011 * C6574) * C80965) *
               C81012 * C82) *
              C80988 +
          (((C275 * C750 + C81011 * C1039) * C9284 +
            (C275 * C947 + C81011 * C1257) * C9133 -
            (C275 * C6140 + C81011 * C6410) * C9285 -
            (C275 * C6324 + C81011 * C6575) * C9134 +
            (C275 * C6141 + C81011 * C6411) * C9286 +
            (C275 * C6325 + C81011 * C6576) * C80965) *
               C81012 * C81 +
           (C1072 * C9284 + C1277 * C9133 - C7898 * C9285 - C8112 * C9134 +
            (C275 * C6142 + C81011 * C6412) * C9286 +
            (C275 * C6326 + C81011 * C6578) * C80965) *
               C81012 * C82) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C10576 +
           (C275 * C221 + C81011 * C422) * C10463 -
           (C275 * C1684 + C81011 * C1972) * C10577 -
           (C275 * C1882 + C81011 * C2187) * C10464 +
           (C275 * C1686 + C81011 * C1975) * C10578 +
           (C275 * C1883 + C81011 * C2188) * C10465 -
           (C275 * C10469 + C81011 * C10632) * C10579 -
           (C275 * C10582 + C81011 * C10727) * C10466 +
           (C275 * C10470 + C81011 * C10633) * C10580 +
           (C275 * C10583 + C81011 * C10728) * C10467) *
              C81012 * C81 +
          (C305 * C10576 + C441 * C10463 - C2004 * C10577 - C2212 * C10464 +
           C2008 * C10578 + C2213 * C10465 -
           (C275 * C10468 + C81011 * C10631) * C10579 -
           (C275 * C10581 + C81011 * C10729) * C10466 +
           (C275 * C10471 + C81011 * C10634) * C10580 +
           (C275 * C10584 + C81011 * C10730) * C10467) *
              C81012 * C82) *
         C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C490 * C99 + C81012 * C491) * C94 +
               (C490 * C107 + C81012 * C497) * C83 - C520 * C95 - C521 * C84 +
               C522 * C96 + C523 * C85 - C524 * C97 - C525 * C86 + C526 * C98 +
               C527 * C87) *
                  C81 +
              (C520 * C94 + C521 * C83 - C522 * C95 - C523 * C84 + C524 * C96 +
               C525 * C85 - C526 * C97 - C527 * C86 +
               (C490 * C104 + C81012 * C496) * C98 +
               (C490 * C116 + C81012 * C502) * C87) *
                  C82) *
             C81011 * C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C743 +
                (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                C521 * C738 + C522 * C745 + C523 * C80954) *
                   C81 +
               (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
                C524 * C745 + C525 * C80954) *
                   C82) *
                  C81011 * C80639 * C81003 +
              ((C1390 * C744 -
                ((C490 * C757 + C81012 * C1365) * C737 +
                 (C490 * C748 + C81012 * C1358) * C743) +
                C1391 * C738 - C1392 * C745 - C1393 * C80954) *
                   C81 +
               (C1392 * C744 - (C1391 * C737 + C1390 * C743) + C1393 * C738 -
                (C490 * C749 + C81012 * C1360) * C745 -
                (C490 * C761 + C81012 * C1368) * C80954) *
                   C82) *
                  C81011 * C80639 * C80988 +
              (((C490 * C750 + C81012 * C1361) * C743 +
                (C490 * C764 + C81012 * C1369) * C737 - C1394 * C744 -
                C1395 * C738 + C1396 * C745 + C1397 * C80954) *
                   C81 +
               (C1394 * C743 + C1395 * C737 - C1396 * C744 - C1397 * C738 +
                (C490 * C753 + C81012 * C1364) * C745 +
                (C490 * C769 + C81012 * C1372) * C80954) *
                   C82) *
                  C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C743 +
            (C490 * C107 + C81012 * C497) * C737 - C520 * C744 - C521 * C738 +
            C522 * C745 + C523 * C80954) *
               C81 +
           (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
            C524 * C745 + C525 * C80954) *
               C82) *
              C81011 * C81004 +
          ((C2326 * C744 -
            ((C490 * C1693 + C81012 * C2301) * C737 +
             (C490 * C1684 + C81012 * C2294) * C743) +
            C2327 * C738 - C2328 * C745 - C2329 * C80954) *
               C81 +
           (C2328 * C744 - (C2327 * C737 + C2326 * C743) + C2329 * C738 -
            (C490 * C1685 + C81012 * C2296) * C745 -
            (C490 * C1697 + C81012 * C2304) * C80954) *
               C82) *
              C81011 * C80990 +
          (((C490 * C1686 + C81012 * C2297) * C743 +
            (C490 * C1700 + C81012 * C2305) * C737 - C2330 * C744 -
            C2331 * C738 + C2332 * C745 + C2333 * C80954) *
               C81 +
           (C2330 * C743 + C2331 * C737 - C2332 * C744 - C2333 * C738 +
            (C490 * C1689 + C81012 * C2300) * C745 +
            (C490 * C1705 + C81012 * C2308) * C80954) *
               C82) *
              C81011 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C4987 +
            (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
            C521 * C80982 + C522 * C4989 + C523 * C80954) *
               C81 +
           (C520 * C4987 + C521 * C80998 - C522 * C4988 - C523 * C80982 +
            C524 * C4989 + C525 * C80954) *
               C82) *
              C81011 * C80639 * C4984 +
          ((C1390 * C4988 -
            ((C490 * C757 + C81012 * C1365) * C80998 +
             (C490 * C748 + C81012 * C1358) * C4987) +
            C1391 * C80982 - C1392 * C4989 - C1393 * C80954) *
               C81 +
           (C1392 * C4988 - (C1391 * C80998 + C1390 * C4987) + C1393 * C80982 -
            C3060 * C4989 - C3061 * C80954) *
               C82) *
              C81011 * C80639 * C4985 +
          (((C490 * C750 + C81012 * C1361) * C4987 +
            (C490 * C764 + C81012 * C1369) * C80998 - C1394 * C4988 -
            C1395 * C80982 + C1396 * C4989 + C1397 * C80954) *
               C81 +
           (C1394 * C4987 + C1395 * C80998 - C1396 * C4988 - C1397 * C80982 +
            (C490 * C753 + C81012 * C1364) * C4989 +
            (C490 * C769 + C81012 * C1372) * C80954) *
               C82) *
              C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5657 +
            (C490 * C107 + C81012 * C497) * C80588) *
               C81 +
           (C520 * C5657 + C521 * C80588) * C82) *
              C81011 * C80639 * C5652 -
          ((C1391 * C80588 + C1390 * C5657) * C82 +
           ((C490 * C757 + C81012 * C1365) * C80588 +
            (C490 * C748 + C81012 * C1358) * C5657) *
               C81) *
              C81011 * C80639 * C5653 +
          (((C490 * C750 + C81012 * C1361) * C5657 +
            (C490 * C764 + C81012 * C1369) * C80588) *
               C81 +
           (C1394 * C5657 + C1395 * C80588) * C82) *
              C81011 * C80639 * C5654 -
          (((C490 * C5662 + C81012 * C5967) * C80588 +
            (C490 * C5658 + C81012 * C5963) * C5657) *
               C82 +
           ((C490 * C5663 + C81012 * C5968) * C80588 +
            (C490 * C5659 + C81012 * C5964) * C5657) *
               C81) *
              C81011 * C80639 * C5655 +
          (((C490 * C5660 + C81012 * C5965) * C5657 +
            (C490 * C5668 + C81012 * C5969) * C80588) *
               C81 +
           ((C490 * C5661 + C81012 * C5966) * C5657 +
            (C490 * C5669 + C81012 * C5970) * C80588) *
               C82) *
              C81011 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C490 * C99 + C81012 * C491) * C5657 +
                                 (C490 * C107 + C81012 * C497) * C80588) *
                                    C81 +
                                (C520 * C5657 + C521 * C80588) * C82) *
                                   C81011 * C81004 -
                               ((C2327 * C80588 + C2326 * C5657) * C82 +
                                ((C490 * C1693 + C81012 * C2301) * C80588 +
                                 (C490 * C1684 + C81012 * C2294) * C5657) *
                                    C81) *
                                   C81011 * C80990 +
                               (((C490 * C1686 + C81012 * C2297) * C5657 +
                                 (C490 * C1700 + C81012 * C2305) * C80588) *
                                    C81 +
                                (C2330 * C5657 + C2331 * C80588) * C82) *
                                   C81011 * C80965) *
                                  C4984 +
                              ((((C490 * C3979 + C81012 * C4655) * C5657 +
                                 (C490 * C3985 + C81012 * C4659) * C80588) *
                                    C81 +
                                (C4672 * C5657 + C4673 * C80588) * C82) *
                                   C81011 * C80990 -
                               ((C1391 * C80588 + C1390 * C5657) * C82 +
                                ((C490 * C757 + C81012 * C1365) * C80588 +
                                 (C490 * C748 + C81012 * C1358) * C5657) *
                                    C81) *
                                   C81011 * C81004 -
                               (((C490 * C6143 + C81012 * C6659) * C80588 +
                                 (C490 * C6137 + C81012 * C6653) * C5657) *
                                    C82 +
                                ((C490 * C6144 + C81012 * C6660) * C80588 +
                                 (C490 * C6138 + C81012 * C6654) * C5657) *
                                    C81) *
                                   C81011 * C80965) *
                                  C4985 +
                              ((((C490 * C750 + C81012 * C1361) * C5657 +
                                 (C490 * C764 + C81012 * C1369) * C80588) *
                                    C81 +
                                (C1394 * C5657 + C1395 * C80588) * C82) *
                                   C81011 * C81004 -
                               (((C490 * C6147 + C81012 * C6661) * C80588 +
                                 (C490 * C6139 + C81012 * C6655) * C5657) *
                                    C82 +
                                ((C490 * C6148 + C81012 * C6662) * C80588 +
                                 (C490 * C6140 + C81012 * C6656) * C5657) *
                                    C81) *
                                   C81011 * C80990 +
                               (((C490 * C6141 + C81012 * C6657) * C5657 +
                                 (C490 * C6153 + C81012 * C6663) * C80588) *
                                    C81 +
                                ((C490 * C6142 + C81012 * C6658) * C5657 +
                                 (C490 * C6154 + C81012 * C6664) * C80588) *
                                    C82) *
                                   C81011 * C80965) *
                                  C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C4987 +
            (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
            C521 * C80982 + C522 * C4989 + C523 * C80954) *
               C81 +
           (C520 * C4987 + C521 * C80998 - C522 * C4988 - C523 * C80982 +
            C524 * C4989 + C525 * C80954) *
               C82) *
              C81011 * C9133 +
          ((C2326 * C4988 -
            ((C490 * C1693 + C81012 * C2301) * C80998 +
             (C490 * C1684 + C81012 * C2294) * C4987) +
            C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
               C81 +
           (C2328 * C4988 - (C2327 * C80998 + C2326 * C4987) + C2329 * C80982 -
            C3726 * C4989 - C3727 * C80954) *
               C82) *
              C81011 * C9134 +
          (((C490 * C1686 + C81012 * C2297) * C4987 +
            (C490 * C1700 + C81012 * C2305) * C80998 - C2330 * C4988 -
            C2331 * C80982 + C2332 * C4989 + C2333 * C80954) *
               C81 +
           (C2330 * C4987 + C2331 * C80998 - C2332 * C4988 - C2333 * C80982 +
            (C490 * C1689 + C81012 * C2300) * C4989 +
            (C490 * C1705 + C81012 * C2308) * C80954) *
               C82) *
              C81011 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C490 * C99 + C81012 * C491) * C5657 +
                                 (C490 * C107 + C81012 * C497) * C80588) *
                                    C81 +
                                (C520 * C5657 + C521 * C80588) * C82) *
                                   C81011 * C9133 -
                               ((C2327 * C80588 + C2326 * C5657) * C82 +
                                ((C490 * C1693 + C81012 * C2301) * C80588 +
                                 (C490 * C1684 + C81012 * C2294) * C5657) *
                                    C81) *
                                   C81011 * C9134 +
                               (((C490 * C1686 + C81012 * C2297) * C5657 +
                                 (C490 * C1700 + C81012 * C2305) * C80588) *
                                    C81 +
                                (C2330 * C5657 + C2331 * C80588) * C82) *
                                   C81011 * C80965) *
                                  C81003 +
                              ((((C490 * C3979 + C81012 * C4655) * C5657 +
                                 (C490 * C3985 + C81012 * C4659) * C80588) *
                                    C81 +
                                (C4672 * C5657 + C4673 * C80588) * C82) *
                                   C81011 * C9134 -
                               ((C1391 * C80588 + C1390 * C5657) * C82 +
                                ((C490 * C757 + C81012 * C1365) * C80588 +
                                 (C490 * C748 + C81012 * C1358) * C5657) *
                                    C81) *
                                   C81011 * C9133 -
                               (((C490 * C6143 + C81012 * C6659) * C80588 +
                                 (C490 * C6137 + C81012 * C6653) * C5657) *
                                    C82 +
                                ((C490 * C6144 + C81012 * C6660) * C80588 +
                                 (C490 * C6138 + C81012 * C6654) * C5657) *
                                    C81) *
                                   C81011 * C80965) *
                                  C80988 +
                              ((((C490 * C750 + C81012 * C1361) * C5657 +
                                 (C490 * C764 + C81012 * C1369) * C80588) *
                                    C81 +
                                (C1394 * C5657 + C1395 * C80588) * C82) *
                                   C81011 * C9133 -
                               ((C8219 * C80588 + C8218 * C5657) * C82 +
                                ((C490 * C6148 + C81012 * C6662) * C80588 +
                                 (C490 * C6140 + C81012 * C6656) * C5657) *
                                    C81) *
                                   C81011 * C9134 +
                               (((C490 * C6141 + C81012 * C6657) * C5657 +
                                 (C490 * C6153 + C81012 * C6663) * C80588) *
                                    C81 +
                                ((C490 * C6142 + C81012 * C6658) * C5657 +
                                 (C490 * C6154 + C81012 * C6664) * C80588) *
                                    C82) *
                                   C81011 * C80965) *
                                  C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5657 +
            (C490 * C107 + C81012 * C497) * C80588) *
               C81 +
           (C520 * C5657 + C521 * C80588) * C82) *
              C81011 * C10463 -
          ((C2327 * C80588 + C2326 * C5657) * C82 +
           ((C490 * C1693 + C81012 * C2301) * C80588 +
            (C490 * C1684 + C81012 * C2294) * C5657) *
               C81) *
              C81011 * C10464 +
          (((C490 * C1686 + C81012 * C2297) * C5657 +
            (C490 * C1700 + C81012 * C2305) * C80588) *
               C81 +
           (C2330 * C5657 + C2331 * C80588) * C82) *
              C81011 * C10465 -
          (((C490 * C10472 + C81012 * C10777) * C80588 +
            (C490 * C10468 + C81012 * C10773) * C5657) *
               C82 +
           ((C490 * C10473 + C81012 * C10778) * C80588 +
            (C490 * C10469 + C81012 * C10774) * C5657) *
               C81) *
              C81011 * C10466 +
          (((C490 * C10470 + C81012 * C10775) * C5657 +
            (C490 * C10478 + C81012 * C10779) * C80588) *
               C81 +
           ((C490 * C10471 + C81012 * C10776) * C5657 +
            (C490 * C10479 + C81012 * C10780) * C80588) *
               C82) *
              C81011 * C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C165 +
                (C490 * C166 + C81012 * C569) * C80628) *
                   C81 +
               (C576 + C592) * C82) *
                  C81011 * C83 -
              ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C84 +
              ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C85 -
              ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C86 +
              ((C587 + C595) * C81 + ((C490 * C104 + C81012 * C496) * C165 +
                                      (C490 * C171 + C81012 * C574) * C80628) *
                                         C82) *
                  C81011 * C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C852 +
                (C490 * C166 + C81012 * C569) * C81003 -
                (C490 * C748 + C81012 * C1358) * C853 -
                (C490 * C856 + C81012 * C1471) * C80988 +
                (C490 * C750 + C81012 * C1361) * C854 +
                (C490 * C857 + C81012 * C1472) * C80962) *
                   C81 +
               (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
                  C81011 * C737 +
              ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81 +
               (C1488 - (C1489 + C1490) + C1502 - C1493 - C1503) * C82) *
                  C81011 * C738 +
              ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81 +
               (C524 * C852 + C590 * C81003 -
                (C490 * C749 + C81012 * C1360) * C853 -
                (C490 * C861 + C81012 * C1477) * C80988 +
                (C490 * C753 + C81012 * C1364) * C854 +
                (C490 * C862 + C81012 * C1478) * C80962) *
                   C82) *
                  C81011 * C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C737 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C738 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C80954) *
              C81004 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C738 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C737 -
           (((C490 * C1791 + C81012 * C2410) * C80628 +
             (C490 * C1685 + C81012 * C2296) * C165) *
                C82 +
            (C2433 + C2419) * C81) *
               C81011 * C80954) *
              C80990 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81 +
            (C2422 + C2434) * C82) *
               C81011 * C737 -
           ((C2435 + C2427) * C82 + (C2434 + C2422) * C81) * C81011 * C738 +
           ((C2427 + C2435) * C81 + ((C490 * C1689 + C81012 * C2300) * C165 +
                                     (C490 * C1795 + C81012 * C2414) * C80628) *
                                        C82) *
               C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 -
            (C490 * C748 + C81012 * C1358) * C5065 -
            (C490 * C856 + C81012 * C1471) * C4985 +
            (C490 * C750 + C81012 * C1361) * C5066 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
              C81011 * C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C82) *
              C81011 * C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81 +
           (C524 * C5064 + C590 * C4984 - C3060 * C5065 - C3142 * C4985 +
            (C490 * C753 + C81012 * C1364) * C5066 +
            (C490 * C862 + C81012 * C1478) * C80962) *
               C82) *
              C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 -
           (C490 * C748 + C81012 * C1358) * C5717 -
           (C490 * C856 + C81012 * C1471) * C5653 +
           (C490 * C750 + C81012 * C1361) * C5718 +
           (C490 * C857 + C81012 * C1472) * C5654 -
           (C490 * C5659 + C81012 * C5964) * C5719 -
           (C490 * C5722 + C81012 * C6013) * C5655 +
           (C490 * C5660 + C81012 * C5965) * C5720 +
           (C490 * C5723 + C81012 * C6014) * C5656) *
              C81 +
          (C520 * C5716 + C588 * C5652 - C1390 * C5717 - C1496 * C5653 +
           C1394 * C5718 + C1497 * C5654 -
           (C490 * C5658 + C81012 * C5963) * C5719 -
           (C490 * C5721 + C81012 * C6015) * C5655 +
           (C490 * C5661 + C81012 * C5966) * C5720 +
           (C490 * C5724 + C81012 * C6016) * C5656) *
              C82) *
         C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 -
            (C490 * C748 + C81012 * C1358) * C5065 -
            (C490 * C856 + C81012 * C1471) * C4985 +
            (C490 * C750 + C81012 * C1361) * C5066 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
              C81011 * C80588 * C81004 +
          (((C490 * C3979 + C81012 * C4655) * C5065 -
            ((C490 * C1790 + C81012 * C2409) * C4984 +
             (C490 * C1684 + C81012 * C2294) * C5064) +
            (C490 * C4093 + C81012 * C4773) * C4985 -
            (C490 * C6140 + C81012 * C6656) * C5066 -
            (C490 * C6236 + C81012 * C6739) * C80962) *
               C81 +
           (C4672 * C5065 - (C2428 * C4984 + C2326 * C5064) + C4788 * C4985 -
            (C490 * C6139 + C81012 * C6655) * C5066 -
            (C490 * C6235 + C81012 * C6740) * C80962) *
               C82) *
              C81011 * C80588 * C80990 +
          (((C490 * C1686 + C81012 * C2297) * C5064 +
            (C490 * C1792 + C81012 * C2411) * C4984 -
            (C490 * C6138 + C81012 * C6654) * C5065 -
            (C490 * C6238 + C81012 * C6741) * C4985 +
            (C490 * C6141 + C81012 * C6657) * C5066 +
            (C490 * C6239 + C81012 * C6742) * C80962) *
               C81 +
           (C2330 * C5064 + C2430 * C4984 -
            (C490 * C6137 + C81012 * C6653) * C5065 -
            (C490 * C6237 + C81012 * C6743) * C4985 +
            (C490 * C6142 + C81012 * C6658) * C5066 +
            (C490 * C6240 + C81012 * C6744) * C80962) *
               C82) *
              C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C80998 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C80982 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C80954) *
              C9133 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C80982 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C80998 -
           ((C3799 + C3797) * C82 + (C2433 + C2419) * C81) * C81011 * C80954) *
              C9134 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81 +
            (C2422 + C2434) * C82) *
               C81011 * C80998 -
           ((C2435 + C2427) * C82 + (C2434 + C2422) * C81) * C81011 * C80982 +
           ((C2427 + C2435) * C81 + ((C490 * C1689 + C81012 * C2300) * C165 +
                                     (C490 * C1795 + C81012 * C2414) * C80628) *
                                        C82) *
               C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 -
            (C490 * C748 + C81012 * C1358) * C853 -
            (C490 * C856 + C81012 * C1471) * C80988 +
            (C490 * C750 + C81012 * C1361) * C854 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
              C81011 * C80588 * C9133 +
          (((C490 * C3979 + C81012 * C4655) * C853 -
            ((C490 * C1790 + C81012 * C2409) * C81003 +
             (C490 * C1684 + C81012 * C2294) * C852) +
            (C490 * C4093 + C81012 * C4773) * C80988 -
            (C490 * C6140 + C81012 * C6656) * C854 -
            (C490 * C6236 + C81012 * C6739) * C80962) *
               C81 +
           (C4672 * C853 - (C2428 * C81003 + C2326 * C852) + C4788 * C80988 -
            C8218 * C854 - C8326 * C80962) *
               C82) *
              C81011 * C80588 * C9134 +
          (((C490 * C1686 + C81012 * C2297) * C852 +
            (C490 * C1792 + C81012 * C2411) * C81003 -
            (C490 * C6138 + C81012 * C6654) * C853 -
            (C490 * C6238 + C81012 * C6741) * C80988 +
            (C490 * C6141 + C81012 * C6657) * C854 +
            (C490 * C6239 + C81012 * C6742) * C80962) *
               C81 +
           (C2330 * C852 + C2430 * C81003 -
            (C490 * C6137 + C81012 * C6653) * C853 -
            (C490 * C6237 + C81012 * C6743) * C80988 +
            (C490 * C6142 + C81012 * C6658) * C854 +
            (C490 * C6240 + C81012 * C6744) * C80962) *
               C82) *
              C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81 +
           (C576 + C592) * C82) *
              C81011 * C80588 * C10463 -
          ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                    (C490 * C1684 + C81012 * C2294) * C165) *
                                       C81) *
              C81011 * C80588 * C10464 +
          (((C490 * C1686 + C81012 * C2297) * C165 +
            (C490 * C1792 + C81012 * C2411) * C80628) *
               C81 +
           (C2422 + C2434) * C82) *
              C81011 * C80588 * C10465 -
          (((C490 * C10526 + C81012 * C10823) * C80628 +
            (C490 * C10468 + C81012 * C10773) * C165) *
               C82 +
           ((C490 * C10527 + C81012 * C10824) * C80628 +
            (C490 * C10469 + C81012 * C10774) * C165) *
               C81) *
              C81011 * C80588 * C10466 +
          (((C490 * C10470 + C81012 * C10775) * C165 +
            (C490 * C10528 + C81012 * C10825) * C80628) *
               C81 +
           ((C490 * C10471 + C81012 * C10776) * C165 +
            (C490 * C10529 + C81012 * C10826) * C80628) *
               C82) *
              C81011 * C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C220 +
                (C490 * C221 + C81012 * C637) * C80639) *
                   C81 +
               (C644 + C660) * C82) *
                  C81011 * C80628 * C83 -
              ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C80628 *
                  C84 +
              ((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C80628 *
                  C85 -
              ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C80628 *
                  C86 +
              ((C655 + C663) * C81 + ((C490 * C104 + C81012 * C496) * C220 +
                                      (C490 * C226 + C81012 * C642) * C80639) *
                                         C82) *
                  C81011 * C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C490 * C99 + C81012 * C491) * C220 +
                 (C490 * C221 + C81012 * C637) * C80639) *
                    C81 +
                (C644 + C660) * C82) *
                   C81011 * C81003 -
               ((C1602 + C1588) * C82 +
                ((C490 * C946 + C81012 * C1578) * C80639 +
                 (C490 * C748 + C81012 * C1358) * C220) *
                    C81) *
                   C81011 * C80988 +
               (((C490 * C750 + C81012 * C1361) * C220 +
                 (C490 * C947 + C81012 * C1579) * C80639) *
                    C81 +
                (C1589 + C1603) * C82) *
                   C81011 * C80962) *
                  C737 +
              (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 *
                   C80988 -
               ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C81003 -
               ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 *
                   C80962) *
                  C738 +
              (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C81003 -
               (((C490 * C951 + C81012 * C1583) * C80639 +
                 (C490 * C749 + C81012 * C1360) * C220) *
                    C82 +
                (C1604 + C1592) * C81) *
                   C81011 * C80988 +
               ((C1597 + C1605) * C81 +
                ((C490 * C753 + C81012 * C1364) * C220 +
                 (C490 * C952 + C81012 * C1584) * C80639) *
                    C82) *
                   C81011 * C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C2518 + C2519 - C2520 - C2538 + C2523 + C2539) * C82) *
              C81011 * C80628 * C737 +
          ((C2520 - (C2519 + C2518) + C2538 - C2523 - C2539) * C81 +
           (C2526 - (C2527 + C2528) + C2540 - C2531 - C2541) * C82) *
              C81011 * C80628 * C738 +
          ((C2528 + C2527 - C2526 - C2540 + C2531 + C2541) * C81 +
           (C524 * C1878 + C658 * C81004 -
            (C490 * C1685 + C81012 * C2296) * C1879 -
            (C490 * C1887 + C81012 * C2515) * C80990 +
            (C490 * C1689 + C81012 * C2300) * C1880 +
            (C490 * C1888 + C81012 * C2516) * C80965) *
               C82) *
              C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C4984 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C4985 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80962) *
              C80998 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C4985 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C4984 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80962) *
              C80982 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C4984 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C4985 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81 +
           (C644 + C660) * C82) *
              C81011 * C5652 -
          ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                    (C490 * C748 + C81012 * C1358) * C220) *
                                       C81) *
              C81011 * C5653 +
          (((C490 * C750 + C81012 * C1361) * C220 +
            (C490 * C947 + C81012 * C1579) * C80639) *
               C81 +
           (C1589 + C1603) * C82) *
              C81011 * C5654 -
          (((C490 * C5771 + C81012 * C6059) * C80639 +
            (C490 * C5658 + C81012 * C5963) * C220) *
               C82 +
           ((C490 * C5772 + C81012 * C6060) * C80639 +
            (C490 * C5659 + C81012 * C5964) * C220) *
               C81) *
              C81011 * C5655 +
          (((C490 * C5660 + C81012 * C5965) * C220 +
            (C490 * C5773 + C81012 * C6061) * C80639) *
               C81 +
           ((C490 * C5661 + C81012 * C5966) * C220 +
            (C490 * C5774 + C81012 * C6062) * C80639) *
               C82) *
              C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C2518 + C2519 - C2520 - C2538 + C2523 + C2539) * C82) *
              C81011 * C4984 +
          (((C490 * C3979 + C81012 * C4655) * C1879 -
            ((C490 * C946 + C81012 * C1578) * C81004 +
             (C490 * C748 + C81012 * C1358) * C1878) +
            (C490 * C4199 + C81012 * C4889) * C80990 -
            (C490 * C6138 + C81012 * C6654) * C1880 -
            (C490 * C6322 + C81012 * C6819) * C80965) *
               C81 +
           (C4672 * C1879 - (C1598 * C81004 + C1390 * C1878) + C4904 * C80990 -
            (C490 * C6137 + C81012 * C6653) * C1880 -
            (C490 * C6321 + C81012 * C6820) * C80965) *
               C82) *
              C81011 * C4985 +
          (((C490 * C750 + C81012 * C1361) * C1878 +
            (C490 * C947 + C81012 * C1579) * C81004 -
            (C490 * C6140 + C81012 * C6656) * C1879 -
            (C490 * C6324 + C81012 * C6821) * C80990 +
            (C490 * C6141 + C81012 * C6657) * C1880 +
            (C490 * C6325 + C81012 * C6822) * C80965) *
               C81 +
           (C1394 * C1878 + C1599 * C81004 -
            (C490 * C6139 + C81012 * C6655) * C1879 -
            (C490 * C6323 + C81012 * C6823) * C80990 +
            (C490 * C6142 + C81012 * C6658) * C1880 +
            (C490 * C6326 + C81012 * C6824) * C80965) *
               C82) *
              C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C9744 + C9745 - C9746 - C9747 + C9748 + C9749) * C82) *
              C81011 * C80628 * C80998 +
          ((C9746 - (C9745 + C9744) + C9747 - C9748 - C9749) * C81 +
           (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C82) *
              C81011 * C80628 * C80982 +
          ((C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C81 +
           (C524 * C9284 + C658 * C9133 - C3726 * C9285 - C3880 * C9134 +
            (C490 * C1689 + C81012 * C2300) * C9286 +
            (C490 * C1888 + C81012 * C2516) * C80965) *
               C82) *
              C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C9744 + C9745 - C9746 - C9747 + C9748 + C9749) * C82) *
              C81011 * C81003 +
          (((C490 * C3979 + C81012 * C4655) * C9285 -
            ((C490 * C946 + C81012 * C1578) * C9133 +
             (C490 * C748 + C81012 * C1358) * C9284) +
            (C490 * C4199 + C81012 * C4889) * C9134 -
            (C490 * C6138 + C81012 * C6654) * C9286 -
            (C490 * C6322 + C81012 * C6819) * C80965) *
               C81 +
           (C4672 * C9285 - (C1598 * C9133 + C1390 * C9284) + C4904 * C9134 -
            (C490 * C6137 + C81012 * C6653) * C9286 -
            (C490 * C6321 + C81012 * C6820) * C80965) *
               C82) *
              C81011 * C80988 +
          (((C490 * C750 + C81012 * C1361) * C9284 +
            (C490 * C947 + C81012 * C1579) * C9133 -
            (C490 * C6140 + C81012 * C6656) * C9285 -
            (C490 * C6324 + C81012 * C6821) * C9134 +
            (C490 * C6141 + C81012 * C6657) * C9286 +
            (C490 * C6325 + C81012 * C6822) * C80965) *
               C81 +
           (C1394 * C9284 + C1599 * C9133 - C8218 * C9285 - C8432 * C9134 +
            (C490 * C6142 + C81012 * C6658) * C9286 +
            (C490 * C6326 + C81012 * C6824) * C80965) *
               C82) *
              C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C10576 +
           (C490 * C221 + C81012 * C637) * C10463 -
           (C490 * C1684 + C81012 * C2294) * C10577 -
           (C490 * C1882 + C81012 * C2509) * C10464 +
           (C490 * C1686 + C81012 * C2297) * C10578 +
           (C490 * C1883 + C81012 * C2510) * C10465 -
           (C490 * C10469 + C81012 * C10774) * C10579 -
           (C490 * C10582 + C81012 * C10869) * C10466 +
           (C490 * C10470 + C81012 * C10775) * C10580 +
           (C490 * C10583 + C81012 * C10870) * C10467) *
              C81 +
          (C520 * C10576 + C656 * C10463 - C2326 * C10577 - C2534 * C10464 +
           C2330 * C10578 + C2535 * C10465 -
           (C490 * C10468 + C81012 * C10773) * C10579 -
           (C490 * C10581 + C81012 * C10871) * C10466 +
           (C490 * C10471 + C81012 * C10776) * C10580 +
           (C490 * C10584 + C81012 * C10872) * C10467) *
              C82) *
         C81011 * C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78260 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80916 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78279) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80726) *
              C4984 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78260 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80916 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78279) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78279 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80916 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78260 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80726) *
              C4985 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78279 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80916 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78260 -
            (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C78260 -
            ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80916 +
             (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C78279) +
            (C92 * C6147 + C81 * C6157 + C93 * C7591 + C82 * C7592) * C80598) *
               C81011 * C81012 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2613 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C2607 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2614 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C2608 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2615 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C2609 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C2616 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C80933 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C2614 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C2607 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2613) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C2608 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C2615 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C2609 +
           (C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C2616 +
           (C92 * C1697 + C81 * C1709 + C93 * C3285 + C82 * C3286) * C80966) *
              C81011 * C81012 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
              C81011 * C81012 * C11881 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78260 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80916 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78279) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
              C81011 * C81012 * C11882 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78279 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80916 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C78260 -
           (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80598) *
              C81011 * C81012 * C11883 +
          ((C92 * C10468 + C81 * C10474 + C93 * C11885 + C82 * C11886) *
               C78260 -
           ((C93 * C10472 + C82 * C10480 + C92 * C10473 + C81 * C10481) *
                C80916 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C78279) +
           (C92 * C10472 + C81 * C10480 + C93 * C11887 + C82 * C11888) *
               C80598) *
              C81011 * C81012 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
            (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
            (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
               C81011 * C81012 * C80916 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C5065 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C4984 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C5064) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C4985 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C5066 -
            (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
               C81011 * C81012 * C80598) *
              C80933 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5065 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C4984 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5064) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C4985 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5066 -
            (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
               C81011 * C81012 * C80916 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C5064 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C4984 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C5065 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C4985 +
            (C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C5066 +
            (C92 * C6235 + C81 * C6241 + C93 * C7691 + C82 * C7692) * C80962) *
               C81011 * C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C2607 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C2608 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C2609 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
               C81011 * C81012 * C80966) *
              C80933 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C2608 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C2607 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C2609 +
           ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C165 +
            (C92 * C1791 + C81 * C1799 + C93 * C3353 + C82 * C3354) * C80628) *
               C81011 * C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C80916 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C80598) *
              C11881 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C80598 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C80916) *
              C11882 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
               C81011 * C81012 * C80916 -
           ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80628 +
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C165) *
               C81011 * C81012 * C80598) *
              C11883 +
          (((C92 * C10468 + C81 * C10474 + C93 * C11885 + C82 * C11886) * C165 +
            (C92 * C10526 + C81 * C10530 + C93 * C11955 + C82 * C11956) *
                C80628) *
               C81011 * C81012 * C80598 -
           ((C93 * C10526 + C82 * C10530 + C92 * C10527 + C81 * C10531) *
                C80628 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C165) *
               C81011 * C81012 * C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C4984 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C4985 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C3421 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80933 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C3422 -
            (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
               C81011 * C81012 * C80962) *
              C80916 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C4984 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C3421 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80933 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C3422 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C4985 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C3422 -
            ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80933 +
             (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C3421) +
            (C92 * C6323 + C81 * C6329 + C93 * C7791 + C82 * C7792) * C80726) *
               C81011 * C81012 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C80628 * C2607 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C2608 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C3421 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80933 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C3422 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C2609 +
          ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C3422 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80933 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C3421) +
           (C92 * C1887 + C81 * C1895 + C93 * C3423 + C82 * C3424) * C80726) *
              C81011 * C81012 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C12023 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C11881 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C12024 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C11882 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C12025 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C11883 -
           (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
               C12026 -
           (C93 * C10581 + C82 * C10585 + C92 * C10582 + C81 * C10586) *
               C80978) *
              C81011 * C81012 * C80628 * C80916 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C12024 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C11881 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C12023) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C11882 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C12025 -
           (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C11883 +
           (C92 * C10468 + C81 * C10474 + C93 * C11885 + C82 * C11886) *
               C12026 +
           (C92 * C10581 + C81 * C10585 + C93 * C12027 + C82 * C12028) *
               C80978) *
              C81011 * C81012 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78279 +
             (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
                C81012 * C82) *
               C80933 +
           ((C2004 * C78260 -
             ((C275 * C1693 + C81011 * C1979) * C80916 +
              (C275 * C1684 + C81011 * C1972) * C78279) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C78260 - (C2005 * C80916 + C2004 * C78279) +
             C2007 * C80598) *
                C81012 * C82) *
               C80726) *
              C4984 +
          (((C1068 * C78260 -
             ((C275 * C757 + C81011 * C1043) * C80916 +
              (C275 * C748 + C81011 * C1036) * C78279) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C78260 - (C1069 * C80916 + C1068 * C78279) +
             C1071 * C80598) *
                C81012 * C82) *
               C80933 +
           (((C275 * C3979 + C81011 * C4305) * C78279 +
             (C275 * C3985 + C81011 * C4309) * C80916 - C4322 * C78260 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C78279 + C4323 * C80916 - C4324 * C78260 -
             C4325 * C80598) *
                C81012 * C82) *
               C80726) *
              C4985 +
          ((((C275 * C750 + C81011 * C1039) * C78279 +
             (C275 * C764 + C81011 * C1047) * C80916 - C1072 * C78260 -
             C1073 * C80598) *
                C81012 * C81 +
            (C1072 * C78279 + C1073 * C80916 - C1074 * C78260 -
             C1075 * C80598) *
                C81012 * C82) *
               C80933 +
           ((C7898 * C78260 -
             ((C275 * C6148 + C81011 * C6416) * C80916 +
              (C275 * C6140 + C81011 * C6410) * C78279) +
             C7899 * C80598) *
                C81012 * C81 +
            ((C275 * C7589 + C81011 * C7891) * C78260 -
             (C7899 * C80916 + C7898 * C78279) +
             (C275 * C7591 + C81011 * C7892) * C80598) *
                C81012 * C82) *
               C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2613 +
            (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
            C306 * C2608 + C307 * C2615 + C308 * C2609 - C309 * C2616 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C2613 + C306 * C2607 - C307 * C2614 - C308 * C2608 +
            C309 * C2615 + C310 * C2609 - C311 * C2616 - C312 * C80966) *
               C81012 * C82) *
              C80933 +
          ((C2004 * C2614 -
            ((C275 * C1693 + C81011 * C1979) * C2607 +
             (C275 * C1684 + C81011 * C1972) * C2613) +
            C2005 * C2608 - C2006 * C2615 - C2007 * C2609 + C3498 * C2616 +
            C3499 * C80966) *
               C81012 * C81 +
           (C2006 * C2614 - (C2005 * C2607 + C2004 * C2613) + C2007 * C2608 -
            C3498 * C2615 - C3499 * C2609 +
            (C275 * C3283 + C81011 * C3491) * C2616 +
            (C275 * C3285 + C81011 * C3492) * C80966) *
               C81012 * C82) *
              C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78279 +
            (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
            C306 * C80598) *
               C81012 * C81 +
           (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
               C81012 * C82) *
              C11881 +
          ((C2004 * C78260 -
            ((C275 * C1693 + C81011 * C1979) * C80916 +
             (C275 * C1684 + C81011 * C1972) * C78279) +
            C2005 * C80598) *
               C81012 * C81 +
           (C2006 * C78260 - (C2005 * C80916 + C2004 * C78279) +
            C2007 * C80598) *
               C81012 * C82) *
              C11882 +
          (((C275 * C1686 + C81011 * C1975) * C78279 +
            (C275 * C1700 + C81011 * C1983) * C80916 - C2008 * C78260 -
            C2009 * C80598) *
               C81012 * C81 +
           (C2008 * C78279 + C2009 * C80916 - C2010 * C78260 - C2011 * C80598) *
               C81012 * C82) *
              C11883 +
          ((C12102 * C78260 -
            ((C275 * C10473 + C81011 * C10636) * C80916 +
             (C275 * C10469 + C81011 * C10632) * C78279) +
            C12103 * C80598) *
               C81012 * C81 +
           ((C275 * C11885 + C81011 * C12095) * C78260 -
            (C12103 * C80916 + C12102 * C78279) +
            (C275 * C11887 + C81011 * C12096) * C80598) *
               C81012 * C82) *
              C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5064 +
             (C275 * C166 + C81011 * C354) * C4984 -
             (C275 * C748 + C81011 * C1036) * C5065 -
             (C275 * C856 + C81011 * C1149) * C4985 +
             (C275 * C750 + C81011 * C1039) * C5066 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C81012 * C81 +
            (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
               C80916 +
           ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C81012 * C81 +
            (C5296 - (C5297 + C5298) + C5299 - C5300 - C5301) * C81012 * C82) *
               C80598) *
              C80933 +
          ((((C275 * C3979 + C81011 * C4305) * C5065 -
             ((C275 * C1790 + C81011 * C2087) * C4984 +
              (C275 * C1684 + C81011 * C1972) * C5064) +
             (C275 * C4093 + C81011 * C4423) * C4985 -
             (C275 * C6140 + C81011 * C6410) * C5066 -
             (C275 * C6236 + C81011 * C6493) * C80962) *
                C81012 * C81 +
            (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C81012 * C82) *
               C80916 +
           ((C8001 + C8000 - C7999 - C8002 + C8003 + C8007) * C81012 * C81 +
            (C2006 * C5064 + C2107 * C4984 - C4324 * C5065 - C4439 * C4985 +
             (C275 * C7589 + C81011 * C7891) * C5066 +
             (C275 * C7691 + C81011 * C7997) * C80962) *
                C81012 * C82) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C2607 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C2608 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C2609 -
           ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) *
               C80966) *
              C80933 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C2608 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C2607 -
           ((C3571 + C3569) * C81012 * C82 + (C2111 + C2097) * C81012 * C81) *
               C2609 +
           ((C3569 + C3571) * C81012 * C81 +
            ((C275 * C3283 + C81011 * C3491) * C165 +
             (C275 * C3353 + C81011 * C3565) * C80628) *
                C81012 * C82) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C80916 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C80598) *
              C11881 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C80598 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C80916) *
              C11882 +
          ((((C275 * C1686 + C81011 * C1975) * C165 +
             (C275 * C1792 + C81011 * C2089) * C80628) *
                C81012 * C81 +
            (C2100 + C2112) * C81012 * C82) *
               C80916 -
           ((C2113 + C2105) * C81012 * C82 + (C2112 + C2100) * C81012 * C81) *
               C80598) *
              C11883 +
          (((C12171 + C12175) * C81012 * C81 +
            ((C275 * C11885 + C81011 * C12095) * C165 +
             (C275 * C11955 + C81011 * C12169) * C80628) *
                C81012 * C82) *
               C80598 -
           ((C12175 + C12171) * C81012 * C82 +
            ((C275 * C10527 + C81011 * C10682) * C80628 +
             (C275 * C10469 + C81011 * C10632) * C165) *
                C81012 * C81) *
               C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C3421 +
                       (C275 * C221 + C81011 * C422) * C80933 -
                       (C275 * C1684 + C81011 * C1972) * C3422 -
                       (C275 * C1882 + C81011 * C2187) * C80726) *
                          C81012 * C81 +
                      (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                         C4984 +
                     (((C275 * C3979 + C81011 * C4305) * C3422 -
                       ((C275 * C946 + C81011 * C1256) * C80933 +
                        (C275 * C748 + C81011 * C1036) * C3421) +
                       (C275 * C4199 + C81011 * C4539) * C80726) *
                          C81012 * C81 +
                      (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                         C4985 +
                     (((C275 * C750 + C81011 * C1039) * C3421 +
                       (C275 * C947 + C81011 * C1257) * C80933 -
                       (C275 * C6140 + C81011 * C6410) * C3422 -
                       (C275 * C6324 + C81011 * C6575) * C80726) *
                          C81012 * C81 +
                      (C8107 + C8108 - C8109 - C8113) * C81012 * C82) *
                         C80962) *
                        C80916 +
                    (((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                      (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                         C4984 +
                     ((C4546 + C4545 - C4544 - C4556) * C81012 * C81 +
                      (C4549 + C4550 - C4551 - C4557) * C81012 * C82) *
                         C4985 +
                     ((C8109 - (C8108 + C8107) + C8113) * C81012 * C81 +
                      ((C275 * C7589 + C81011 * C7891) * C3422 -
                       (C1279 * C80933 + C1074 * C3421) +
                       (C275 * C7791 + C81011 * C8105) * C80726) *
                          C81012 * C82) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C3421 +
                      (C275 * C221 + C81011 * C422) * C80933 -
                      (C275 * C1684 + C81011 * C1972) * C3422 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                        C80628 * C2607 +
                    ((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                     (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                        C80628 * C2608 +
                    ((C3645 + C3644 - C3643 - C3646) * C81012 * C81 +
                     (C3647 + C3648 - C3649 - C3653) * C81012 * C82) *
                        C80628 * C2609 +
                    ((C3649 - (C3648 + C3647) + C3653) * C81012 * C81 +
                     ((C275 * C3283 + C81011 * C3491) * C3422 -
                      (C444 * C80933 + C311 * C3421) +
                      (C275 * C3423 + C81011 * C3637) * C80726) *
                         C81012 * C82) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C12023 +
                      (C275 * C221 + C81011 * C422) * C11881 -
                      (C275 * C1684 + C81011 * C1972) * C12024 -
                      (C275 * C1882 + C81011 * C2187) * C11882 +
                      (C275 * C1686 + C81011 * C1975) * C12025 +
                      (C275 * C1883 + C81011 * C2188) * C11883 -
                      (C275 * C10469 + C81011 * C10632) * C12026 -
                      (C275 * C10582 + C81011 * C10727) * C80978) *
                         C81012 * C81 +
                     (C12243 + C12244 - C12245 - C12246 + C12247 + C12248 -
                      C12249 - C12253) *
                         C81012 * C82) *
                        C80628 * C80916 +
                    ((C12245 - (C12244 + C12243) + C12246 - C12247 - C12248 +
                      C12249 + C12253) *
                         C81012 * C81 +
                     (C2006 * C12024 - (C442 * C11881 + C307 * C12023) +
                      C2214 * C11882 - C2010 * C12025 - C2215 * C11883 +
                      (C275 * C11885 + C81011 * C12095) * C12026 +
                      (C275 * C12027 + C81011 * C12241) * C80978) *
                         C81012 * C82) *
                        C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78279 +
             (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
             C521 * C80598) *
                C81 +
            (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
                C82) *
               C81011 * C80933 +
           ((C2326 * C78260 -
             ((C490 * C1693 + C81012 * C2301) * C80916 +
              (C490 * C1684 + C81012 * C2294) * C78279) +
             C2327 * C80598) *
                C81 +
            (C2328 * C78260 - (C2327 * C80916 + C2326 * C78279) +
             C2329 * C80598) *
                C82) *
               C81011 * C80726) *
              C4984 +
          (((C1390 * C78260 -
             ((C490 * C757 + C81012 * C1365) * C80916 +
              (C490 * C748 + C81012 * C1358) * C78279) +
             C1391 * C80598) *
                C81 +
            (C1392 * C78260 - (C1391 * C80916 + C1390 * C78279) +
             C1393 * C80598) *
                C82) *
               C81011 * C80933 +
           (((C490 * C3979 + C81012 * C4655) * C78279 +
             (C490 * C3985 + C81012 * C4659) * C80916 - C4672 * C78260 -
             C4673 * C80598) *
                C81 +
            (C4672 * C78279 + C4673 * C80916 - C4674 * C78260 -
             C4675 * C80598) *
                C82) *
               C81011 * C80726) *
              C4985 +
          ((((C490 * C750 + C81012 * C1361) * C78279 +
             (C490 * C764 + C81012 * C1369) * C80916 - C1394 * C78260 -
             C1395 * C80598) *
                C81 +
            (C1394 * C78279 + C1395 * C80916 - C1396 * C78260 -
             C1397 * C80598) *
                C82) *
               C81011 * C80933 +
           ((C8218 * C78260 -
             ((C490 * C6148 + C81012 * C6662) * C80916 +
              (C490 * C6140 + C81012 * C6656) * C78279) +
             C8219 * C80598) *
                C81 +
            ((C490 * C7589 + C81012 * C8211) * C78260 -
             (C8219 * C80916 + C8218 * C78279) +
             (C490 * C7591 + C81012 * C8212) * C80598) *
                C82) *
               C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2613 +
            (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
            C521 * C2608 + C522 * C2615 + C523 * C2609 - C524 * C2616 -
            C525 * C80966) *
               C81 +
           (C520 * C2613 + C521 * C2607 - C522 * C2614 - C523 * C2608 +
            C524 * C2615 + C525 * C2609 - C526 * C2616 - C527 * C80966) *
               C82) *
              C81011 * C80933 +
          ((C2326 * C2614 -
            ((C490 * C1693 + C81012 * C2301) * C2607 +
             (C490 * C1684 + C81012 * C2294) * C2613) +
            C2327 * C2608 - C2328 * C2615 - C2329 * C2609 + C3726 * C2616 +
            C3727 * C80966) *
               C81 +
           (C2328 * C2614 - (C2327 * C2607 + C2326 * C2613) + C2329 * C2608 -
            C3726 * C2615 - C3727 * C2609 +
            (C490 * C3283 + C81012 * C3719) * C2616 +
            (C490 * C3285 + C81012 * C3720) * C80966) *
               C82) *
              C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78279 +
            (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
            C521 * C80598) *
               C81 +
           (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
               C82) *
              C81011 * C11881 +
          ((C2326 * C78260 -
            ((C490 * C1693 + C81012 * C2301) * C80916 +
             (C490 * C1684 + C81012 * C2294) * C78279) +
            C2327 * C80598) *
               C81 +
           (C2328 * C78260 - (C2327 * C80916 + C2326 * C78279) +
            C2329 * C80598) *
               C82) *
              C81011 * C11882 +
          (((C490 * C1686 + C81012 * C2297) * C78279 +
            (C490 * C1700 + C81012 * C2305) * C80916 - C2330 * C78260 -
            C2331 * C80598) *
               C81 +
           (C2330 * C78279 + C2331 * C80916 - C2332 * C78260 - C2333 * C80598) *
               C82) *
              C81011 * C11883 +
          ((C12326 * C78260 -
            ((C490 * C10473 + C81012 * C10778) * C80916 +
             (C490 * C10469 + C81012 * C10774) * C78279) +
            C12327 * C80598) *
               C81 +
           ((C490 * C11885 + C81012 * C12319) * C78260 -
            (C12327 * C80916 + C12326 * C78279) +
            (C490 * C11887 + C81012 * C12320) * C80598) *
               C82) *
              C81011 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5064 +
             (C490 * C166 + C81012 * C569) * C4984 -
             (C490 * C748 + C81012 * C1358) * C5065 -
             (C490 * C856 + C81012 * C1471) * C4985 +
             (C490 * C750 + C81012 * C1361) * C5066 +
             (C490 * C857 + C81012 * C1472) * C80962) *
                C81 +
            (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
               C81011 * C80916 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81 +
            (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C82) *
               C81011 * C80598) *
              C80933 +
          ((((C490 * C3979 + C81012 * C4655) * C5065 -
             ((C490 * C1790 + C81012 * C2409) * C4984 +
              (C490 * C1684 + C81012 * C2294) * C5064) +
             (C490 * C4093 + C81012 * C4773) * C4985 -
             (C490 * C6140 + C81012 * C6656) * C5066 -
             (C490 * C6236 + C81012 * C6739) * C80962) *
                C81 +
            (C8319 - (C8320 + C8321) + C8322 - C8323 - C8327) * C82) *
               C81011 * C80916 +
           ((C8321 + C8320 - C8319 - C8322 + C8323 + C8327) * C81 +
            (C2328 * C5064 + C2429 * C4984 - C4674 * C5065 - C4789 * C4985 +
             (C490 * C7589 + C81012 * C8211) * C5066 +
             (C490 * C7691 + C81012 * C8317) * C80962) *
                C82) *
               C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C2607 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C2608 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C2609 -
           ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C80966) *
              C80933 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C2608 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C2607 -
           ((C3799 + C3797) * C82 + (C2433 + C2419) * C81) * C81011 * C2609 +
           ((C3797 + C3799) * C81 + ((C490 * C3283 + C81012 * C3719) * C165 +
                                     (C490 * C3353 + C81012 * C3793) * C80628) *
                                        C82) *
               C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C80916 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C80598) *
              C11881 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C80598 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C80916) *
              C11882 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81 +
            (C2422 + C2434) * C82) *
               C81011 * C80916 -
           ((C2435 + C2427) * C82 + (C2434 + C2422) * C81) * C81011 * C80598) *
              C11883 +
          (((C12395 + C12399) * C81 +
            ((C490 * C11885 + C81012 * C12319) * C165 +
             (C490 * C11955 + C81012 * C12393) * C80628) *
                C82) *
               C81011 * C80598 -
           ((C12399 + C12395) * C82 +
            ((C490 * C10527 + C81012 * C10824) * C80628 +
             (C490 * C10469 + C81012 * C10774) * C165) *
                C81) *
               C81011 * C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81 +
                      (C3867 + C3868 - C3869 - C3870) * C82) *
                         C81011 * C4984 +
                     (((C490 * C3979 + C81012 * C4655) * C3422 -
                       ((C490 * C946 + C81012 * C1578) * C80933 +
                        (C490 * C748 + C81012 * C1358) * C3421) +
                       (C490 * C4199 + C81012 * C4889) * C80726) *
                          C81 +
                      (C4894 - (C4895 + C4896) + C4906) * C82) *
                         C81011 * C4985 +
                     (((C490 * C750 + C81012 * C1361) * C3421 +
                       (C490 * C947 + C81012 * C1579) * C80933 -
                       (C490 * C6140 + C81012 * C6656) * C3422 -
                       (C490 * C6324 + C81012 * C6821) * C80726) *
                          C81 +
                      (C8427 + C8428 - C8429 - C8433) * C82) *
                         C81011 * C80962) *
                        C80916 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81 +
                      (C3871 - (C3872 + C3873) + C3874) * C82) *
                         C81011 * C4984 +
                     ((C4896 + C4895 - C4894 - C4906) * C81 +
                      (C4899 + C4900 - C4901 - C4907) * C82) *
                         C81011 * C4985 +
                     ((C8429 - (C8428 + C8427) + C8433) * C81 +
                      ((C490 * C7589 + C81012 * C8211) * C3422 -
                       (C1601 * C80933 + C1396 * C3421) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C82) *
                         C81011 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C3867 + C3868 - C3869 - C3870) * C82) *
                        C81011 * C80628 * C2607 +
                    ((C3869 - (C3868 + C3867) + C3870) * C81 +
                     (C3871 - (C3872 + C3873) + C3874) * C82) *
                        C81011 * C80628 * C2608 +
                    ((C3873 + C3872 - C3871 - C3874) * C81 +
                     (C3875 + C3876 - C3877 - C3881) * C82) *
                        C81011 * C80628 * C2609 +
                    ((C3877 - (C3876 + C3875) + C3881) * C81 +
                     ((C490 * C3283 + C81012 * C3719) * C3422 -
                      (C659 * C80933 + C526 * C3421) +
                      (C490 * C3423 + C81012 * C3865) * C80726) *
                         C82) *
                        C81011 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C12023 +
                      (C490 * C221 + C81012 * C637) * C11881 -
                      (C490 * C1684 + C81012 * C2294) * C12024 -
                      (C490 * C1882 + C81012 * C2509) * C11882 +
                      (C490 * C1686 + C81012 * C2297) * C12025 +
                      (C490 * C1883 + C81012 * C2510) * C11883 -
                      (C490 * C10469 + C81012 * C10774) * C12026 -
                      (C490 * C10582 + C81012 * C10869) * C80978) *
                         C81 +
                     (C12467 + C12468 - C12469 - C12470 + C12471 + C12472 -
                      C12473 - C12477) *
                         C82) *
                        C81011 * C80628 * C80916 +
                    ((C12469 - (C12468 + C12467) + C12470 - C12471 - C12472 +
                      C12473 + C12477) *
                         C81 +
                     (C2328 * C12024 - (C657 * C11881 + C522 * C12023) +
                      C2536 * C11882 - C2332 * C12025 - C2537 * C11883 +
                      (C490 * C11885 + C81012 * C12319) * C12026 +
                      (C490 * C12027 + C81012 * C12465) * C80978) *
                         C82) *
                        C81011 * C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C80639 * C81003 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C744 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C737 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C743) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C738 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C745 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
              C81011 * C81012 * C80639 * C80988 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C743 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C737 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C744 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C738 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C745 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
              C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C94 +
          (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C83 -
          (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C95 -
          (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C84 +
          (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C96 +
          (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C85 -
          (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C97 -
          (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C86 +
          (C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C98 +
          (C92 * C114 + C81 * C121 + C93 * C116 + C82 * C122) * C87) *
         C81011 * C81012 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C80639 * C4984 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C4988 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80998 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C4987) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80982 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C4989 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
              C81011 * C81012 * C80639 * C4985 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C4987 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80998 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C4988 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80982 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C4989 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
              C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
              C81011 * C81012 * C80639 * C5652 -
          ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
              C81011 * C81012 * C80639 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
              C81011 * C81012 * C80639 * C5654 -
          ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
              C81011 * C81012 * C80639 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5657 +
           (C92 * C5668 + C81 * C5672 + C93 * C5669 + C82 * C5673) * C80588) *
              C81011 * C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C9133 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C4988 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80998 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C4987) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80982 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C4989 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
              C81011 * C81012 * C9134 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C4987 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80998 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C4988 -
           (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80982 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C4989 +
           (C92 * C1703 + C81 * C1712 + C93 * C1705 + C82 * C1713) * C80954) *
              C81011 * C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C9133 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C9134 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
               C81011 * C81012 * C80965) *
              C81003 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C9134 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C9133 -
           ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80588 +
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5657) *
               C81011 * C81012 * C80965) *
              C80988 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C9133 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C9134 +
           ((C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C5657 +
            (C92 * C6153 + C81 * C6159 + C93 * C6154 + C82 * C6160) * C80588) *
               C81011 * C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C737 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C853 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81003 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C852) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80988 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C854 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
              C81011 * C81012 * C738 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C852 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C81003 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C853 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80988 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C854 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
              C81011 * C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
              C81011 * C81012 * C83 -
          ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
              C81011 * C81012 * C84 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
              C81011 * C81012 * C85 -
          ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
              C81011 * C81012 * C86 +
          ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C165 +
           (C92 * C170 + C81 * C176 + C93 * C171 + C82 * C177) * C80628) *
              C81011 * C81012 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80998 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C5065 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C4984 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C5064) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C4985 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C5066 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
              C81011 * C81012 * C80982 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C5064 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C4984 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C5065 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C4985 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C5066 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
              C81011 * C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5716 +
          (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C5652 -
          (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5717 -
          (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C5653 +
          (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5718 +
          (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C5654 -
          (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5719 -
          (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C5655 +
          (C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5720 +
          (C92 * C5723 + C81 * C5727 + C93 * C5724 + C82 * C5728) * C5656) *
         C81011 * C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C80998 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C80982 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C80954) *
              C9133 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C80982 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C80998 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C80954) *
              C9134 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
               C81011 * C81012 * C80998 -
           ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80628 +
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C165) *
               C81011 * C81012 * C80982 +
           ((C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C165 +
            (C92 * C1794 + C81 * C1802 + C93 * C1795 + C82 * C1803) * C80628) *
               C81011 * C81012 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80588 * C9133 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C853 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C81003 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C852) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80988 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C854 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
              C81011 * C81012 * C80588 * C9134 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C852 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C81003 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C853 -
           (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80988 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C854 +
           (C92 * C6239 + C81 * C6245 + C93 * C6240 + C82 * C6246) * C80962) *
              C81011 * C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C81003 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80988 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80962) *
              C737 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80988 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C81003 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80962) *
              C738 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C81003 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80988 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
              C81011 * C81012 * C80628 * C83 -
          ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
              C81011 * C81012 * C80628 * C84 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
              C81011 * C81012 * C80628 * C85 -
          ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
              C81011 * C81012 * C80628 * C86 +
          ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C220 +
           (C92 * C225 + C81 * C231 + C93 * C226 + C82 * C232) * C80639) *
              C81011 * C81012 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80962) *
              C80998 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C4985 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C4984 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80962) *
              C80982 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
              C81011 * C81012 * C5652 -
          ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
              C81011 * C81012 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
              C81011 * C81012 * C5654 -
          ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
              C81011 * C81012 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C220 +
           (C92 * C5773 + C81 * C5777 + C93 * C5774 + C82 * C5778) * C80639) *
              C81011 * C81012 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C9284 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C9133 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C9285 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C9134 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C9286 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C80998 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C9285 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C9133 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C9284) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C9134 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C9286 -
           (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C80982 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C9284 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C9133 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C9285 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C9134 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C9286 +
           (C92 * C1886 + C81 * C1894 + C93 * C1888 + C82 * C1896) * C80965) *
              C81011 * C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C9284 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C9133 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C9285 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C9134 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C9286 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C81003 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C9285 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C9133 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C9284) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C9134 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C9286 -
           (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C80965) *
              C81011 * C81012 * C80988 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C9284 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C9133 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C9285 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C9134 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C9286 +
           (C92 * C6325 + C81 * C6331 + C93 * C6326 + C82 * C6332) * C80965) *
              C81011 * C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C743 +
                      (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                      C306 * C738 + C307 * C745 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C743 + C306 * C737 - C307 * C744 - C308 * C738 +
                      C309 * C745 + C310 * C80954) *
                         C81012 * C82) *
                        C80639 * C81003 +
                    ((C1068 * C744 -
                      ((C275 * C757 + C81011 * C1043) * C737 +
                       (C275 * C748 + C81011 * C1036) * C743) +
                      C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C744 - (C1069 * C737 + C1068 * C743) +
                      C1071 * C738 - (C275 * C749 + C81011 * C1038) * C745 -
                      (C275 * C761 + C81011 * C1046) * C80954) *
                         C81012 * C82) *
                        C80639 * C80988 +
                    (((C275 * C750 + C81011 * C1039) * C743 +
                      (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
                      C1073 * C738 + C1074 * C745 + C1075 * C80954) *
                         C81012 * C81 +
                     (C1072 * C743 + C1073 * C737 - C1074 * C744 -
                      C1075 * C738 + (C275 * C753 + C81011 * C1042) * C745 +
                      (C275 * C769 + C81011 * C1050) * C80954) *
                         C81012 * C82) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C275 * C99 + C81011 * C276) * C94 +
                     (C275 * C107 + C81011 * C282) * C83 - C305 * C95 -
                     C306 * C84 + C307 * C96 + C308 * C85 - C309 * C97 -
                     C310 * C86 + C311 * C98 + C312 * C87) *
                        C81012 * C81 +
                    (C305 * C94 + C306 * C83 - C307 * C95 - C308 * C84 +
                     C309 * C96 + C310 * C85 - C311 * C97 - C312 * C86 +
                     (C275 * C104 + C81011 * C281) * C98 +
                     (C275 * C116 + C81011 * C287) * C87) *
                        C81012 * C82) *
                   C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C80639 * C4984 +
                    ((C1068 * C4988 -
                      ((C275 * C757 + C81011 * C1043) * C80998 +
                       (C275 * C748 + C81011 * C1036) * C4987) +
                      C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C4988 - (C1069 * C80998 + C1068 * C4987) +
                      C1071 * C80982 - C2832 * C4989 - C2833 * C80954) *
                         C81012 * C82) *
                        C80639 * C4985 +
                    (((C275 * C750 + C81011 * C1039) * C4987 +
                      (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
                      C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
                         C81012 * C81 +
                     (C1072 * C4987 + C1073 * C80998 - C1074 * C4988 -
                      C1075 * C80982 + (C275 * C753 + C81011 * C1042) * C4989 +
                      (C275 * C769 + C81011 * C1050) * C80954) *
                         C81012 * C82) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C80639 * C5652 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C80639 * C5653 +
                    (((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C81012 * C81 +
                     (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                        C80639 * C5654 -
                    (((C275 * C5662 + C81011 * C5825) * C80588 +
                      (C275 * C5658 + C81011 * C5821) * C5657) *
                         C81012 * C82 +
                     ((C275 * C5663 + C81011 * C5826) * C80588 +
                      (C275 * C5659 + C81011 * C5822) * C5657) *
                         C81012 * C81) *
                        C80639 * C5655 +
                    (((C275 * C5660 + C81011 * C5823) * C5657 +
                      (C275 * C5668 + C81011 * C5827) * C80588) *
                         C81012 * C81 +
                     ((C275 * C5661 + C81011 * C5824) * C5657 +
                      (C275 * C5669 + C81011 * C5828) * C80588) *
                         C81012 * C82) *
                        C80639 * C5656)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C9133 +
                    ((C2004 * C4988 -
                      ((C275 * C1693 + C81011 * C1979) * C80998 +
                       (C275 * C1684 + C81011 * C1972) * C4987) +
                      C2005 * C80982 - C2006 * C4989 - C2007 * C80954) *
                         C81012 * C81 +
                     (C2006 * C4988 - (C2005 * C80998 + C2004 * C4987) +
                      C2007 * C80982 - C3498 * C4989 - C3499 * C80954) *
                         C81012 * C82) *
                        C9134 +
                    (((C275 * C1686 + C81011 * C1975) * C4987 +
                      (C275 * C1700 + C81011 * C1983) * C80998 - C2008 * C4988 -
                      C2009 * C80982 + C2010 * C4989 + C2011 * C80954) *
                         C81012 * C81 +
                     (C2008 * C4987 + C2009 * C80998 - C2010 * C4988 -
                      C2011 * C80982 + (C275 * C1689 + C81011 * C1978) * C4989 +
                      (C275 * C1705 + C81011 * C1986) * C80954) *
                         C81012 * C82) *
                        C80965) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C81012 * C81 +
                      (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                         C9133 -
                     ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                      ((C275 * C1693 + C81011 * C1979) * C80588 +
                       (C275 * C1684 + C81011 * C1972) * C5657) *
                          C81012 * C81) *
                         C9134 +
                     (((C275 * C1686 + C81011 * C1975) * C5657 +
                       (C275 * C1700 + C81011 * C1983) * C80588) *
                          C81012 * C81 +
                      (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                         C80965) *
                        C81003 +
                    ((((C275 * C3979 + C81011 * C4305) * C5657 +
                       (C275 * C3985 + C81011 * C4309) * C80588) *
                          C81012 * C81 +
                      (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                         C9134 -
                     ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C81012 * C81) *
                         C9133 -
                     (((C275 * C6143 + C81011 * C6413) * C80588 +
                       (C275 * C6137 + C81011 * C6407) * C5657) *
                          C81012 * C82 +
                      ((C275 * C6144 + C81011 * C6414) * C80588 +
                       (C275 * C6138 + C81011 * C6408) * C5657) *
                          C81012 * C81) *
                         C80965) *
                        C80988 +
                    ((((C275 * C750 + C81011 * C1039) * C5657 +
                       (C275 * C764 + C81011 * C1047) * C80588) *
                          C81012 * C81 +
                      (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                         C9133 -
                     ((C7899 * C80588 + C7898 * C5657) * C81012 * C82 +
                      ((C275 * C6148 + C81011 * C6416) * C80588 +
                       (C275 * C6140 + C81011 * C6410) * C5657) *
                          C81012 * C81) *
                         C9134 +
                     (((C275 * C6141 + C81011 * C6411) * C5657 +
                       (C275 * C6153 + C81011 * C6417) * C80588) *
                          C81012 * C81 +
                      ((C275 * C6142 + C81011 * C6412) * C5657 +
                       (C275 * C6154 + C81011 * C6418) * C80588) *
                          C81012 * C82) *
                         C80965) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
              C737 +
          ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C81012 * C81 +
           (C1166 - (C1167 + C1168) + C1180 - C1171 - C1181) * C81012 * C82) *
              C738 +
          ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C81012 * C81 +
           (C309 * C852 + C375 * C81003 -
            (C275 * C749 + C81011 * C1038) * C853 -
            (C275 * C861 + C81011 * C1155) * C80988 +
            (C275 * C753 + C81011 * C1042) * C854 +
            (C275 * C862 + C81011 * C1156) * C80962) *
               C81012 * C82) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C81012 * C81 +
           (C361 + C377) * C81012 * C82) *
              C83 -
          ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) * C84 +
          ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) * C85 -
          ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) * C86 +
          ((C372 + C380) * C81012 * C81 +
           ((C275 * C104 + C81011 * C281) * C165 +
            (C275 * C171 + C81011 * C359) * C80628) *
               C81012 * C82) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
              C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C81012 * C81 +
           (C5296 - (C5297 + C5298) + C5299 - C5300 - C5301) * C81012 * C82) *
              C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C81012 * C81 +
           (C309 * C5064 + C375 * C4984 - C2832 * C5065 - C2914 * C4985 +
            (C275 * C753 + C81011 * C1042) * C5066 +
            (C275 * C862 + C81011 * C1156) * C80962) *
               C81012 * C82) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C81012 * C81 +
          (C305 * C5716 + C373 * C5652 - C1068 * C5717 - C1174 * C5653 +
           C1072 * C5718 + C1175 * C5654 -
           (C275 * C5658 + C81011 * C5821) * C5719 -
           (C275 * C5721 + C81011 * C5873) * C5655 +
           (C275 * C5661 + C81011 * C5824) * C5720 +
           (C275 * C5724 + C81011 * C5874) * C5656) *
              C81012 * C82) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C80998 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C80982 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C80954) *
              C9133 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C80982 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C80998 -
           ((C3571 + C3569) * C81012 * C82 + (C2111 + C2097) * C81012 * C81) *
               C80954) *
              C9134 +
          ((((C275 * C1686 + C81011 * C1975) * C165 +
             (C275 * C1792 + C81011 * C2089) * C80628) *
                C81012 * C81 +
            (C2100 + C2112) * C81012 * C82) *
               C80998 -
           ((C2113 + C2105) * C81012 * C82 + (C2112 + C2100) * C81012 * C81) *
               C80982 +
           ((C2105 + C2113) * C81012 * C81 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C81012 * C82) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
              C80588 * C9133 +
          (((C275 * C3979 + C81011 * C4305) * C853 -
            ((C275 * C1790 + C81011 * C2087) * C81003 +
             (C275 * C1684 + C81011 * C1972) * C852) +
            (C275 * C4093 + C81011 * C4423) * C80988 -
            (C275 * C6140 + C81011 * C6410) * C854 -
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C81012 * C81 +
           (C4322 * C853 - (C2106 * C81003 + C2004 * C852) + C4438 * C80988 -
            C7898 * C854 - C8006 * C80962) *
               C81012 * C82) *
              C80588 * C9134 +
          (((C275 * C1686 + C81011 * C1975) * C852 +
            (C275 * C1792 + C81011 * C2089) * C81003 -
            (C275 * C6138 + C81011 * C6408) * C853 -
            (C275 * C6238 + C81011 * C6495) * C80988 +
            (C275 * C6141 + C81011 * C6411) * C854 +
            (C275 * C6239 + C81011 * C6496) * C80962) *
               C81012 * C81 +
           (C2008 * C852 + C2108 * C81003 -
            (C275 * C6137 + C81011 * C6407) * C853 -
            (C275 * C6237 + C81011 * C6497) * C80988 +
            (C275 * C6142 + C81011 * C6412) * C854 +
            (C275 * C6240 + C81011 * C6498) * C80962) *
               C81012 * C82) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C81003 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80988 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80962) *
              C737 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80988 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C81003 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80962) *
              C738 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C81003 -
           (((C275 * C951 + C81011 * C1261) * C80639 +
             (C275 * C749 + C81011 * C1038) * C220) *
                C81012 * C82 +
            (C1282 + C1270) * C81012 * C81) *
               C80988 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C81012 * C81 +
           (C429 + C445) * C81012 * C82) *
              C80628 * C83 -
          ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
              C80628 * C84 +
          ((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
              C80628 * C85 -
          ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
              C80628 * C86 +
          ((C440 + C448) * C81012 * C81 +
           ((C275 * C104 + C81011 * C281) * C220 +
            (C275 * C226 + C81011 * C427) * C80639) *
               C81012 * C82) *
              C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C4984 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80962) *
              C80998 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C4985 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C4984 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80962) *
              C80982 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C4984 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C4985 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C81012 * C81 +
           (C429 + C445) * C81012 * C82) *
              C5652 -
          ((C1280 + C1266) * C81012 * C82 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C81012 * C81) *
              C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C81012 * C81 +
           (C1267 + C1281) * C81012 * C82) *
              C5654 -
          (((C275 * C5771 + C81011 * C5917) * C80639 +
            (C275 * C5658 + C81011 * C5821) * C220) *
               C81012 * C82 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C81012 * C81) *
              C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C81012 * C81 +
           ((C275 * C5661 + C81011 * C5824) * C220 +
            (C275 * C5774 + C81011 * C5920) * C80639) *
               C81012 * C82) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 -
            (C275 * C1684 + C81011 * C1972) * C9285 -
            (C275 * C1882 + C81011 * C2187) * C9134 +
            (C275 * C1686 + C81011 * C1975) * C9286 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C9510 + C9511 - C9512 - C9513 + C9514 + C9515) * C81012 * C82) *
              C80628 * C80998 +
          ((C9512 - (C9511 + C9510) + C9513 - C9514 - C9515) * C81012 * C81 +
           (C9516 - (C9517 + C9518) + C9519 - C9520 - C9521) * C81012 * C82) *
              C80628 * C80982 +
          ((C9518 + C9517 - C9516 - C9519 + C9520 + C9521) * C81012 * C81 +
           (C309 * C9284 + C443 * C9133 - C3498 * C9285 - C3652 * C9134 +
            (C275 * C1689 + C81011 * C1978) * C9286 +
            (C275 * C1888 + C81011 * C2194) * C80965) *
               C81012 * C82) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 -
            (C275 * C1684 + C81011 * C1972) * C9285 -
            (C275 * C1882 + C81011 * C2187) * C9134 +
            (C275 * C1686 + C81011 * C1975) * C9286 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C9510 + C9511 - C9512 - C9513 + C9514 + C9515) * C81012 * C82) *
              C81003 +
          (((C275 * C3979 + C81011 * C4305) * C9285 -
            ((C275 * C946 + C81011 * C1256) * C9133 +
             (C275 * C748 + C81011 * C1036) * C9284) +
            (C275 * C4199 + C81011 * C4539) * C9134 -
            (C275 * C6138 + C81011 * C6408) * C9286 -
            (C275 * C6322 + C81011 * C6573) * C80965) *
               C81012 * C81 +
           (C4322 * C9285 - (C1276 * C9133 + C1068 * C9284) + C4554 * C9134 -
            (C275 * C6137 + C81011 * C6407) * C9286 -
            (C275 * C6321 + C81011 * C6574) * C80965) *
               C81012 * C82) *
              C80988 +
          (((C275 * C750 + C81011 * C1039) * C9284 +
            (C275 * C947 + C81011 * C1257) * C9133 -
            (C275 * C6140 + C81011 * C6410) * C9285 -
            (C275 * C6324 + C81011 * C6575) * C9134 +
            (C275 * C6141 + C81011 * C6411) * C9286 +
            (C275 * C6325 + C81011 * C6576) * C80965) *
               C81012 * C81 +
           (C1072 * C9284 + C1277 * C9133 - C7898 * C9285 - C8112 * C9134 +
            (C275 * C6142 + C81011 * C6412) * C9286 +
            (C275 * C6326 + C81011 * C6578) * C80965) *
               C81012 * C82) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C743 +
                      (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                      C521 * C738 + C522 * C745 + C523 * C80954) *
                         C81 +
                     (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
                      C524 * C745 + C525 * C80954) *
                         C82) *
                        C81011 * C80639 * C81003 +
                    ((C1390 * C744 -
                      ((C490 * C757 + C81012 * C1365) * C737 +
                       (C490 * C748 + C81012 * C1358) * C743) +
                      C1391 * C738 - C1392 * C745 - C1393 * C80954) *
                         C81 +
                     (C1392 * C744 - (C1391 * C737 + C1390 * C743) +
                      C1393 * C738 - (C490 * C749 + C81012 * C1360) * C745 -
                      (C490 * C761 + C81012 * C1368) * C80954) *
                         C82) *
                        C81011 * C80639 * C80988 +
                    (((C490 * C750 + C81012 * C1361) * C743 +
                      (C490 * C764 + C81012 * C1369) * C737 - C1394 * C744 -
                      C1395 * C738 + C1396 * C745 + C1397 * C80954) *
                         C81 +
                     (C1394 * C743 + C1395 * C737 - C1396 * C744 -
                      C1397 * C738 + (C490 * C753 + C81012 * C1364) * C745 +
                      (C490 * C769 + C81012 * C1372) * C80954) *
                         C82) *
                        C81011 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C490 * C99 + C81012 * C491) * C94 +
                     (C490 * C107 + C81012 * C497) * C83 - C520 * C95 -
                     C521 * C84 + C522 * C96 + C523 * C85 - C524 * C97 -
                     C525 * C86 + C526 * C98 + C527 * C87) *
                        C81 +
                    (C520 * C94 + C521 * C83 - C522 * C95 - C523 * C84 +
                     C524 * C96 + C525 * C85 - C526 * C97 - C527 * C86 +
                     (C490 * C104 + C81012 * C496) * C98 +
                     (C490 * C116 + C81012 * C502) * C87) *
                        C82) *
                   C81011 * C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81 +
                     (C520 * C4987 + C521 * C80998 - C522 * C4988 -
                      C523 * C80982 + C524 * C4989 + C525 * C80954) *
                         C82) *
                        C81011 * C80639 * C4984 +
                    ((C1390 * C4988 -
                      ((C490 * C757 + C81012 * C1365) * C80998 +
                       (C490 * C748 + C81012 * C1358) * C4987) +
                      C1391 * C80982 - C1392 * C4989 - C1393 * C80954) *
                         C81 +
                     (C1392 * C4988 - (C1391 * C80998 + C1390 * C4987) +
                      C1393 * C80982 - C3060 * C4989 - C3061 * C80954) *
                         C82) *
                        C81011 * C80639 * C4985 +
                    (((C490 * C750 + C81012 * C1361) * C4987 +
                      (C490 * C764 + C81012 * C1369) * C80998 - C1394 * C4988 -
                      C1395 * C80982 + C1396 * C4989 + C1397 * C80954) *
                         C81 +
                     (C1394 * C4987 + C1395 * C80998 - C1396 * C4988 -
                      C1397 * C80982 + (C490 * C753 + C81012 * C1364) * C4989 +
                      (C490 * C769 + C81012 * C1372) * C80954) *
                         C82) *
                        C81011 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81 +
                     (C520 * C5657 + C521 * C80588) * C82) *
                        C81011 * C80639 * C5652 -
                    ((C1391 * C80588 + C1390 * C5657) * C82 +
                     ((C490 * C757 + C81012 * C1365) * C80588 +
                      (C490 * C748 + C81012 * C1358) * C5657) *
                         C81) *
                        C81011 * C80639 * C5653 +
                    (((C490 * C750 + C81012 * C1361) * C5657 +
                      (C490 * C764 + C81012 * C1369) * C80588) *
                         C81 +
                     (C1394 * C5657 + C1395 * C80588) * C82) *
                        C81011 * C80639 * C5654 -
                    (((C490 * C5662 + C81012 * C5967) * C80588 +
                      (C490 * C5658 + C81012 * C5963) * C5657) *
                         C82 +
                     ((C490 * C5663 + C81012 * C5968) * C80588 +
                      (C490 * C5659 + C81012 * C5964) * C5657) *
                         C81) *
                        C81011 * C80639 * C5655 +
                    (((C490 * C5660 + C81012 * C5965) * C5657 +
                      (C490 * C5668 + C81012 * C5969) * C80588) *
                         C81 +
                     ((C490 * C5661 + C81012 * C5966) * C5657 +
                      (C490 * C5669 + C81012 * C5970) * C80588) *
                         C82) *
                        C81011 * C80639 * C5656)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81 +
                     (C520 * C4987 + C521 * C80998 - C522 * C4988 -
                      C523 * C80982 + C524 * C4989 + C525 * C80954) *
                         C82) *
                        C81011 * C9133 +
                    ((C2326 * C4988 -
                      ((C490 * C1693 + C81012 * C2301) * C80998 +
                       (C490 * C1684 + C81012 * C2294) * C4987) +
                      C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
                         C81 +
                     (C2328 * C4988 - (C2327 * C80998 + C2326 * C4987) +
                      C2329 * C80982 - C3726 * C4989 - C3727 * C80954) *
                         C82) *
                        C81011 * C9134 +
                    (((C490 * C1686 + C81012 * C2297) * C4987 +
                      (C490 * C1700 + C81012 * C2305) * C80998 - C2330 * C4988 -
                      C2331 * C80982 + C2332 * C4989 + C2333 * C80954) *
                         C81 +
                     (C2330 * C4987 + C2331 * C80998 - C2332 * C4988 -
                      C2333 * C80982 + (C490 * C1689 + C81012 * C2300) * C4989 +
                      (C490 * C1705 + C81012 * C2308) * C80954) *
                         C82) *
                        C81011 * C80965) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81 +
                      (C520 * C5657 + C521 * C80588) * C82) *
                         C81011 * C9133 -
                     ((C2327 * C80588 + C2326 * C5657) * C82 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81) *
                         C81011 * C9134 +
                     (((C490 * C1686 + C81012 * C2297) * C5657 +
                       (C490 * C1700 + C81012 * C2305) * C80588) *
                          C81 +
                      (C2330 * C5657 + C2331 * C80588) * C82) *
                         C81011 * C80965) *
                        C81003 +
                    ((((C490 * C3979 + C81012 * C4655) * C5657 +
                       (C490 * C3985 + C81012 * C4659) * C80588) *
                          C81 +
                      (C4672 * C5657 + C4673 * C80588) * C82) *
                         C81011 * C9134 -
                     ((C1391 * C80588 + C1390 * C5657) * C82 +
                      ((C490 * C757 + C81012 * C1365) * C80588 +
                       (C490 * C748 + C81012 * C1358) * C5657) *
                          C81) *
                         C81011 * C9133 -
                     (((C490 * C6143 + C81012 * C6659) * C80588 +
                       (C490 * C6137 + C81012 * C6653) * C5657) *
                          C82 +
                      ((C490 * C6144 + C81012 * C6660) * C80588 +
                       (C490 * C6138 + C81012 * C6654) * C5657) *
                          C81) *
                         C81011 * C80965) *
                        C80988 +
                    ((((C490 * C750 + C81012 * C1361) * C5657 +
                       (C490 * C764 + C81012 * C1369) * C80588) *
                          C81 +
                      (C1394 * C5657 + C1395 * C80588) * C82) *
                         C81011 * C9133 -
                     ((C8219 * C80588 + C8218 * C5657) * C82 +
                      ((C490 * C6148 + C81012 * C6662) * C80588 +
                       (C490 * C6140 + C81012 * C6656) * C5657) *
                          C81) *
                         C81011 * C9134 +
                     (((C490 * C6141 + C81012 * C6657) * C5657 +
                       (C490 * C6153 + C81012 * C6663) * C80588) *
                          C81 +
                      ((C490 * C6142 + C81012 * C6658) * C5657 +
                       (C490 * C6154 + C81012 * C6664) * C80588) *
                          C82) *
                         C81011 * C80965) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 -
            (C490 * C748 + C81012 * C1358) * C853 -
            (C490 * C856 + C81012 * C1471) * C80988 +
            (C490 * C750 + C81012 * C1361) * C854 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
              C81011 * C737 +
          ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81 +
           (C1488 - (C1489 + C1490) + C1502 - C1493 - C1503) * C82) *
              C81011 * C738 +
          ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81 +
           (C524 * C852 + C590 * C81003 -
            (C490 * C749 + C81012 * C1360) * C853 -
            (C490 * C861 + C81012 * C1477) * C80988 +
            (C490 * C753 + C81012 * C1364) * C854 +
            (C490 * C862 + C81012 * C1478) * C80962) *
               C82) *
              C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81 +
           (C576 + C592) * C82) *
              C81011 * C83 -
          ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C84 +
          ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C85 -
          ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C86 +
          ((C587 + C595) * C81 + ((C490 * C104 + C81012 * C496) * C165 +
                                  (C490 * C171 + C81012 * C574) * C80628) *
                                     C82) *
              C81011 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 -
            (C490 * C748 + C81012 * C1358) * C5065 -
            (C490 * C856 + C81012 * C1471) * C4985 +
            (C490 * C750 + C81012 * C1361) * C5066 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
              C81011 * C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C82) *
              C81011 * C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81 +
           (C524 * C5064 + C590 * C4984 - C3060 * C5065 - C3142 * C4985 +
            (C490 * C753 + C81012 * C1364) * C5066 +
            (C490 * C862 + C81012 * C1478) * C80962) *
               C82) *
              C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 -
           (C490 * C748 + C81012 * C1358) * C5717 -
           (C490 * C856 + C81012 * C1471) * C5653 +
           (C490 * C750 + C81012 * C1361) * C5718 +
           (C490 * C857 + C81012 * C1472) * C5654 -
           (C490 * C5659 + C81012 * C5964) * C5719 -
           (C490 * C5722 + C81012 * C6013) * C5655 +
           (C490 * C5660 + C81012 * C5965) * C5720 +
           (C490 * C5723 + C81012 * C6014) * C5656) *
              C81 +
          (C520 * C5716 + C588 * C5652 - C1390 * C5717 - C1496 * C5653 +
           C1394 * C5718 + C1497 * C5654 -
           (C490 * C5658 + C81012 * C5963) * C5719 -
           (C490 * C5721 + C81012 * C6015) * C5655 +
           (C490 * C5661 + C81012 * C5966) * C5720 +
           (C490 * C5724 + C81012 * C6016) * C5656) *
              C82) *
         C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C80998 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C80982 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C80954) *
              C9133 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C80982 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C80998 -
           ((C3799 + C3797) * C82 + (C2433 + C2419) * C81) * C81011 * C80954) *
              C9134 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81 +
            (C2422 + C2434) * C82) *
               C81011 * C80998 -
           ((C2435 + C2427) * C82 + (C2434 + C2422) * C81) * C81011 * C80982 +
           ((C2427 + C2435) * C81 + ((C490 * C1689 + C81012 * C2300) * C165 +
                                     (C490 * C1795 + C81012 * C2414) * C80628) *
                                        C82) *
               C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 -
            (C490 * C748 + C81012 * C1358) * C853 -
            (C490 * C856 + C81012 * C1471) * C80988 +
            (C490 * C750 + C81012 * C1361) * C854 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
              C81011 * C80588 * C9133 +
          (((C490 * C3979 + C81012 * C4655) * C853 -
            ((C490 * C1790 + C81012 * C2409) * C81003 +
             (C490 * C1684 + C81012 * C2294) * C852) +
            (C490 * C4093 + C81012 * C4773) * C80988 -
            (C490 * C6140 + C81012 * C6656) * C854 -
            (C490 * C6236 + C81012 * C6739) * C80962) *
               C81 +
           (C4672 * C853 - (C2428 * C81003 + C2326 * C852) + C4788 * C80988 -
            C8218 * C854 - C8326 * C80962) *
               C82) *
              C81011 * C80588 * C9134 +
          (((C490 * C1686 + C81012 * C2297) * C852 +
            (C490 * C1792 + C81012 * C2411) * C81003 -
            (C490 * C6138 + C81012 * C6654) * C853 -
            (C490 * C6238 + C81012 * C6741) * C80988 +
            (C490 * C6141 + C81012 * C6657) * C854 +
            (C490 * C6239 + C81012 * C6742) * C80962) *
               C81 +
           (C2330 * C852 + C2430 * C81003 -
            (C490 * C6137 + C81012 * C6653) * C853 -
            (C490 * C6237 + C81012 * C6743) * C80988 +
            (C490 * C6142 + C81012 * C6658) * C854 +
            (C490 * C6240 + C81012 * C6744) * C80962) *
               C82) *
              C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C81003 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80988 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80962) *
              C737 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80988 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C81003 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80962) *
              C738 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C81003 -
           (((C490 * C951 + C81012 * C1583) * C80639 +
             (C490 * C749 + C81012 * C1360) * C220) *
                C82 +
            (C1604 + C1592) * C81) *
               C81011 * C80988 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81 +
           (C644 + C660) * C82) *
              C81011 * C80628 * C83 -
          ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C80628 * C84 +
          ((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C80628 * C85 -
          ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C80628 * C86 +
          ((C655 + C663) * C81 + ((C490 * C104 + C81012 * C496) * C220 +
                                  (C490 * C226 + C81012 * C642) * C80639) *
                                     C82) *
              C81011 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C4984 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C4985 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80962) *
              C80998 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C4985 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C4984 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80962) *
              C80982 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C4984 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C4985 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81 +
           (C644 + C660) * C82) *
              C81011 * C5652 -
          ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                    (C490 * C748 + C81012 * C1358) * C220) *
                                       C81) *
              C81011 * C5653 +
          (((C490 * C750 + C81012 * C1361) * C220 +
            (C490 * C947 + C81012 * C1579) * C80639) *
               C81 +
           (C1589 + C1603) * C82) *
              C81011 * C5654 -
          (((C490 * C5771 + C81012 * C6059) * C80639 +
            (C490 * C5658 + C81012 * C5963) * C220) *
               C82 +
           ((C490 * C5772 + C81012 * C6060) * C80639 +
            (C490 * C5659 + C81012 * C5964) * C220) *
               C81) *
              C81011 * C5655 +
          (((C490 * C5660 + C81012 * C5965) * C220 +
            (C490 * C5773 + C81012 * C6061) * C80639) *
               C81 +
           ((C490 * C5661 + C81012 * C5966) * C220 +
            (C490 * C5774 + C81012 * C6062) * C80639) *
               C82) *
              C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C9744 + C9745 - C9746 - C9747 + C9748 + C9749) * C82) *
              C81011 * C80628 * C80998 +
          ((C9746 - (C9745 + C9744) + C9747 - C9748 - C9749) * C81 +
           (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C82) *
              C81011 * C80628 * C80982 +
          ((C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C81 +
           (C524 * C9284 + C658 * C9133 - C3726 * C9285 - C3880 * C9134 +
            (C490 * C1689 + C81012 * C2300) * C9286 +
            (C490 * C1888 + C81012 * C2516) * C80965) *
               C82) *
              C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C9744 + C9745 - C9746 - C9747 + C9748 + C9749) * C82) *
              C81011 * C81003 +
          (((C490 * C3979 + C81012 * C4655) * C9285 -
            ((C490 * C946 + C81012 * C1578) * C9133 +
             (C490 * C748 + C81012 * C1358) * C9284) +
            (C490 * C4199 + C81012 * C4889) * C9134 -
            (C490 * C6138 + C81012 * C6654) * C9286 -
            (C490 * C6322 + C81012 * C6819) * C80965) *
               C81 +
           (C4672 * C9285 - (C1598 * C9133 + C1390 * C9284) + C4904 * C9134 -
            (C490 * C6137 + C81012 * C6653) * C9286 -
            (C490 * C6321 + C81012 * C6820) * C80965) *
               C82) *
              C81011 * C80988 +
          (((C490 * C750 + C81012 * C1361) * C9284 +
            (C490 * C947 + C81012 * C1579) * C9133 -
            (C490 * C6140 + C81012 * C6656) * C9285 -
            (C490 * C6324 + C81012 * C6821) * C9134 +
            (C490 * C6141 + C81012 * C6657) * C9286 +
            (C490 * C6325 + C81012 * C6822) * C80965) *
               C81 +
           (C1394 * C9284 + C1599 * C9133 - C8218 * C9285 - C8432 * C9134 +
            (C490 * C6142 + C81012 * C6658) * C9286 +
            (C490 * C6326 + C81012 * C6824) * C80965) *
               C82) *
              C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78289 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80593 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78285 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80601 +
            (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C78295 +
            (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C15341) *
               C81011 * C81012 * C17817 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78285 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80593 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78289) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80601 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C78295 -
            (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C15341) *
               C81011 * C81012 * C80726) *
              C80932 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78285 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80593 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78289) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80601 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C78295 -
            (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C15341) *
               C81011 * C81012 * C17817 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78289 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80593 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78285 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80601 +
            (C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C78295 +
            (C92 * C3988 + C81 * C3993 + C93 * C3990 + C82 * C3994) * C15341) *
               C81011 * C81012 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C80593 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2688 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80932 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2687) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80601 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2687 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80932 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C2688 -
            (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
               C81011 * C81012 * C15341) *
              C17817 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C2688 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80932 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2687) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C80593 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C2687 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80932 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C2688 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80601 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C2688 -
            ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80932 +
             (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C2687) +
            (C92 * C4095 + C81 * C4099 + C93 * C4096 + C82 * C4100) * C80686) *
               C81011 * C81012 * C15341) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80593 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C17951 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C17817 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C17952 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C80601 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C17951 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C17817 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C17952 -
            (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C17952 -
            ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C17817 +
             (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C17951) +
            (C92 * C4201 + C81 * C4205 + C93 * C4202 + C82 * C4206) * C80726) *
               C81011 * C81012 * C80686) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78289 +
             (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
             C306 * C80601 + C307 * C78295 + C308 * C15341) *
                C81012 * C81 +
            (C305 * C78289 + C306 * C80593 - C307 * C78285 - C308 * C80601 +
             C309 * C78295 + C310 * C15341) *
                C81012 * C82) *
               C17817 +
           ((C2004 * C78285 -
             ((C275 * C1693 + C81011 * C1979) * C80593 +
              (C275 * C1684 + C81011 * C1972) * C78289) +
             C2005 * C80601 - C2006 * C78295 - C2007 * C15341) *
                C81012 * C81 +
            (C2006 * C78285 - (C2005 * C80593 + C2004 * C78289) +
             C2007 * C80601 - C3498 * C78295 - C3499 * C15341) *
                C81012 * C82) *
               C80726) *
              C80932 +
          (((C1068 * C78285 -
             ((C275 * C757 + C81011 * C1043) * C80593 +
              (C275 * C748 + C81011 * C1036) * C78289) +
             C1069 * C80601 - C1070 * C78295 - C1071 * C15341) *
                C81012 * C81 +
            (C1070 * C78285 - (C1069 * C80593 + C1068 * C78289) +
             C1071 * C80601 - C2832 * C78295 - C2833 * C15341) *
                C81012 * C82) *
               C17817 +
           (((C275 * C3979 + C81011 * C4305) * C78289 +
             (C275 * C3985 + C81011 * C4309) * C80593 - C4322 * C78285 -
             C4323 * C80601 + C4324 * C78295 + C4325 * C15341) *
                C81012 * C81 +
            (C4322 * C78289 + C4323 * C80593 - C4324 * C78285 - C4325 * C80601 +
             (C275 * C3982 + C81011 * C4308) * C78295 +
             (C275 * C3990 + C81011 * C4312) * C15341) *
                C81012 * C82) *
               C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C2687 +
                       (C275 * C166 + C81011 * C354) * C80932 -
                       (C275 * C748 + C81011 * C1036) * C2688 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C81012 * C81 +
                      (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
                         C80593 +
                     ((C2903 - (C2902 + C2901) + C2904) * C81012 * C81 +
                      (C2905 - (C2906 + C2907) + C2908) * C81012 * C82) *
                         C80601 +
                     ((C2907 + C2906 - C2905 - C2908) * C81012 * C81 +
                      (C2909 + C2910 - C2911 - C2915) * C81012 * C82) *
                         C15341) *
                        C17817 +
                    ((((C275 * C3979 + C81011 * C4305) * C2688 -
                       ((C275 * C1790 + C81011 * C2087) * C80932 +
                        (C275 * C1684 + C81011 * C1972) * C2687) +
                       (C275 * C4093 + C81011 * C4423) * C80686) *
                          C81012 * C81 +
                      (C4428 - (C4429 + C4430) + C4440) * C81012 * C82) *
                         C80593 +
                     ((C4430 + C4429 - C4428 - C4440) * C81012 * C81 +
                      (C4433 + C4434 - C4435 - C4441) * C81012 * C82) *
                         C80601 +
                     ((C4435 - (C4434 + C4433) + C4441) * C81012 * C81 +
                      ((C275 * C3982 + C81011 * C4308) * C2688 -
                       (C3570 * C80932 + C3498 * C2687) +
                       (C275 * C4096 + C81011 * C4426) * C80686) *
                          C81012 * C82) *
                         C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C17951 +
                       (C275 * C221 + C81011 * C422) * C17817 -
                       (C275 * C1684 + C81011 * C1972) * C17952 -
                       (C275 * C1882 + C81011 * C2187) * C80726) *
                          C81012 * C81 +
                      (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                         C80932 +
                     (((C275 * C3979 + C81011 * C4305) * C17952 -
                       ((C275 * C946 + C81011 * C1256) * C17817 +
                        (C275 * C748 + C81011 * C1036) * C17951) +
                       (C275 * C4199 + C81011 * C4539) * C80726) *
                          C81012 * C81 +
                      (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                         C80686) *
                        C80593 +
                    (((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                      (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                         C80932 +
                     ((C18970 + C18969 - C18968 - C18971) * C81012 * C81 +
                      (C20490 + C20491 - C20492 - C20493) * C81012 * C82) *
                         C80686) *
                        C80601 +
                    (((C18158 + C18157 - C18156 - C18159) * C81012 * C81 +
                      (C18160 + C18161 - C18162 - C18163) * C81012 * C82) *
                         C80932 +
                     ((C20492 - (C20491 + C20490) + C20493) * C81012 * C81 +
                      ((C275 * C3982 + C81011 * C4308) * C17952 -
                       (C2986 * C17817 + C2832 * C17951) +
                       (C275 * C4202 + C81011 * C4542) * C80726) *
                          C81012 * C82) *
                         C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78289 +
             (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
             C521 * C80601 + C522 * C78295 + C523 * C15341) *
                C81 +
            (C520 * C78289 + C521 * C80593 - C522 * C78285 - C523 * C80601 +
             C524 * C78295 + C525 * C15341) *
                C82) *
               C81011 * C17817 +
           ((C2326 * C78285 -
             ((C490 * C1693 + C81012 * C2301) * C80593 +
              (C490 * C1684 + C81012 * C2294) * C78289) +
             C2327 * C80601 - C2328 * C78295 - C2329 * C15341) *
                C81 +
            (C2328 * C78285 - (C2327 * C80593 + C2326 * C78289) +
             C2329 * C80601 - C3726 * C78295 - C3727 * C15341) *
                C82) *
               C81011 * C80726) *
              C80932 +
          (((C1390 * C78285 -
             ((C490 * C757 + C81012 * C1365) * C80593 +
              (C490 * C748 + C81012 * C1358) * C78289) +
             C1391 * C80601 - C1392 * C78295 - C1393 * C15341) *
                C81 +
            (C1392 * C78285 - (C1391 * C80593 + C1390 * C78289) +
             C1393 * C80601 - C3060 * C78295 - C3061 * C15341) *
                C82) *
               C81011 * C17817 +
           (((C490 * C3979 + C81012 * C4655) * C78289 +
             (C490 * C3985 + C81012 * C4659) * C80593 - C4672 * C78285 -
             C4673 * C80601 + C4674 * C78295 + C4675 * C15341) *
                C81 +
            (C4672 * C78289 + C4673 * C80593 - C4674 * C78285 - C4675 * C80601 +
             (C490 * C3982 + C81012 * C4658) * C78295 +
             (C490 * C3990 + C81012 * C4662) * C15341) *
                C82) *
               C81011 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C2687 +
                       (C490 * C166 + C81012 * C569) * C80932 -
                       (C490 * C748 + C81012 * C1358) * C2688 -
                       (C490 * C856 + C81012 * C1471) * C80686) *
                          C81 +
                      (C3129 + C3130 - C3131 - C3132) * C82) *
                         C81011 * C80593 +
                     ((C3131 - (C3130 + C3129) + C3132) * C81 +
                      (C3133 - (C3134 + C3135) + C3136) * C82) *
                         C81011 * C80601 +
                     ((C3135 + C3134 - C3133 - C3136) * C81 +
                      (C3137 + C3138 - C3139 - C3143) * C82) *
                         C81011 * C15341) *
                        C17817 +
                    ((((C490 * C3979 + C81012 * C4655) * C2688 -
                       ((C490 * C1790 + C81012 * C2409) * C80932 +
                        (C490 * C1684 + C81012 * C2294) * C2687) +
                       (C490 * C4093 + C81012 * C4773) * C80686) *
                          C81 +
                      (C4778 - (C4779 + C4780) + C4790) * C82) *
                         C81011 * C80593 +
                     ((C4780 + C4779 - C4778 - C4790) * C81 +
                      (C4783 + C4784 - C4785 - C4791) * C82) *
                         C81011 * C80601 +
                     ((C4785 - (C4784 + C4783) + C4791) * C81 +
                      ((C490 * C3982 + C81012 * C4658) * C2688 -
                       (C3798 * C80932 + C3726 * C2687) +
                       (C490 * C4096 + C81012 * C4776) * C80686) *
                          C82) *
                         C81011 * C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81 +
                      (C18362 + C18363 - C18364 - C18365) * C82) *
                         C81011 * C80932 +
                     (((C490 * C3979 + C81012 * C4655) * C17952 -
                       ((C490 * C946 + C81012 * C1578) * C17817 +
                        (C490 * C748 + C81012 * C1358) * C17951) +
                       (C490 * C4199 + C81012 * C4889) * C80726) *
                          C81 +
                      (C19276 - (C19277 + C19278) + C19279) * C82) *
                         C81011 * C80686) *
                        C80593 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81 +
                      (C18366 - (C18367 + C18368) + C18369) * C82) *
                         C81011 * C80932 +
                     ((C19278 + C19277 - C19276 - C19279) * C81 +
                      (C20788 + C20789 - C20790 - C20791) * C82) *
                         C81011 * C80686) *
                        C80601 +
                    (((C18368 + C18367 - C18366 - C18369) * C81 +
                      (C18370 + C18371 - C18372 - C18373) * C82) *
                         C81011 * C80932 +
                     ((C20790 - (C20789 + C20788) + C20791) * C81 +
                      ((C490 * C3982 + C81012 * C4658) * C17952 -
                       (C3214 * C17817 + C3060 * C17951) +
                       (C490 * C4202 + C81012 * C4892) * C80726) *
                          C82) *
                         C81011 * C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C80722 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13806 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C13799 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13805) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80729 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C13805 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C13799 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C13806 -
            (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80598) *
               C81011 * C81012 * C20867) *
              C80932 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13806 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C13799 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13805) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C80722 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13805 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C13799 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13806 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80729 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C13806 -
            ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C13799 +
             (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C13805) +
            (C92 * C6143 + C81 * C6155 + C93 * C10973 + C82 * C10974) *
                C80598) *
               C81011 * C81012 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C13799 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2688 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80932 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2687) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C80598) *
              C80722 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C2688 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80932 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2687) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C13799 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C2687 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80932 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C2688 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C80598) *
              C80729 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C2687 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80932 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C2688 -
            (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C80686) *
               C81011 * C81012 * C13799 +
           ((C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C2688 -
            ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80932 +
             (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C2687) +
            (C92 * C6237 + C81 * C6243 + C93 * C11073 + C82 * C11074) *
                C80686) *
               C81011 * C81012 * C80598) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78528 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80722 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78520 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80729 +
            (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78534 +
            (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C20867) *
               C81011 * C81012 * C80932 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78520 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80722 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78528) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80729 -
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C78534 -
            (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C20867) *
               C81011 * C81012 * C80686) *
              C13799 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78520 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80722 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78528) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80729 -
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C78534 -
            (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C20867) *
               C81011 * C81012 * C80932 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78528 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80722 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78520 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80729 +
            (C92 * C6137 + C81 * C6145 + C93 * C10971 + C82 * C10972) * C78534 +
            (C92 * C6321 + C81 * C6327 + C93 * C11173 + C82 * C11174) *
                C20867) *
               C81011 * C81012 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C13805 +
             (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
                C81012 * C82) *
               C80722 +
           ((C2004 * C13806 -
             ((C275 * C1693 + C81011 * C1979) * C13799 +
              (C275 * C1684 + C81011 * C1972) * C13805) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C13806 - (C2005 * C13799 + C2004 * C13805) +
             C2007 * C80598) *
                C81012 * C82) *
               C80729 +
           (((C275 * C1686 + C81011 * C1975) * C13805 +
             (C275 * C1700 + C81011 * C1983) * C13799 - C2008 * C13806 -
             C2009 * C80598) *
                C81012 * C81 +
            (C2008 * C13805 + C2009 * C13799 - C2010 * C13806 -
             C2011 * C80598) *
                C81012 * C82) *
               C20867) *
              C80932 +
          (((C1068 * C13806 -
             ((C275 * C757 + C81011 * C1043) * C13799 +
              (C275 * C748 + C81011 * C1036) * C13805) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C13806 - (C1069 * C13799 + C1068 * C13805) +
             C1071 * C80598) *
                C81012 * C82) *
               C80722 +
           (((C275 * C3979 + C81011 * C4305) * C13805 +
             (C275 * C3985 + C81011 * C4309) * C13799 - C4322 * C13806 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C13805 + C4323 * C13799 - C4324 * C13806 -
             C4325 * C80598) *
                C81012 * C82) *
               C80729 +
           ((C11280 * C13806 -
             ((C275 * C6144 + C81011 * C6414) * C13799 +
              (C275 * C6138 + C81011 * C6408) * C13805) +
             C11281 * C80598) *
                C81012 * C81 +
            ((C275 * C10971 + C81011 * C11273) * C13806 -
             (C11281 * C13799 + C11280 * C13805) +
             (C275 * C10973 + C81011 * C11274) * C80598) *
                C81012 * C82) *
               C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C2687 +
                       (C275 * C166 + C81011 * C354) * C80932 -
                       (C275 * C748 + C81011 * C1036) * C2688 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C81012 * C81 +
                      (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
                         C13799 +
                     ((C2903 - (C2902 + C2901) + C2904) * C81012 * C81 +
                      (C2905 - (C2906 + C2907) + C2908) * C81012 * C82) *
                         C80598) *
                        C80722 +
                    ((((C275 * C3979 + C81011 * C4305) * C2688 -
                       ((C275 * C1790 + C81011 * C2087) * C80932 +
                        (C275 * C1684 + C81011 * C1972) * C2687) +
                       (C275 * C4093 + C81011 * C4423) * C80686) *
                          C81012 * C81 +
                      (C4428 - (C4429 + C4430) + C4440) * C81012 * C82) *
                         C13799 +
                     ((C4430 + C4429 - C4428 - C4440) * C81012 * C81 +
                      (C4433 + C4434 - C4435 - C4441) * C81012 * C82) *
                         C80598) *
                        C80729 +
                    ((((C275 * C1686 + C81011 * C1975) * C2687 +
                       (C275 * C1792 + C81011 * C2089) * C80932 -
                       (C275 * C6138 + C81011 * C6408) * C2688 -
                       (C275 * C6238 + C81011 * C6495) * C80686) *
                          C81012 * C81 +
                      (C11381 + C11382 - C11383 - C11387) * C81012 * C82) *
                         C13799 +
                     ((C11383 - (C11382 + C11381) + C11387) * C81012 * C81 +
                      ((C275 * C10971 + C81011 * C11273) * C2688 -
                       (C2109 * C80932 + C2010 * C2687) +
                       (C275 * C11073 + C81011 * C11379) * C80686) *
                          C81012 * C82) *
                         C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78528 +
             (C275 * C221 + C81011 * C422) * C80722 -
             (C275 * C1684 + C81011 * C1972) * C78520 -
             (C275 * C1882 + C81011 * C2187) * C80729 +
             (C275 * C1686 + C81011 * C1975) * C78534 +
             (C275 * C1883 + C81011 * C2188) * C20867) *
                C81012 * C81 +
            (C21242 + C21243 - C21244 - C21245 + C21246 + C21247) * C81012 *
                C82) *
               C80932 +
           (((C275 * C3979 + C81011 * C4305) * C78520 -
             ((C275 * C946 + C81011 * C1256) * C80722 +
              (C275 * C748 + C81011 * C1036) * C78528) +
             (C275 * C4199 + C81011 * C4539) * C80729 -
             (C275 * C6138 + C81011 * C6408) * C78534 -
             (C275 * C6322 + C81011 * C6573) * C20867) *
                C81012 * C81 +
            (C22076 - (C22077 + C22078) + C22079 - C22080 - C22081) * C81012 *
                C82) *
               C80686) *
              C13799 +
          (((C21244 - (C21243 + C21242) + C21245 - C21246 - C21247) * C81012 *
                C81 +
            (C21248 - (C21249 + C21250) + C21251 - C21252 - C21253) * C81012 *
                C82) *
               C80932 +
           ((C22078 + C22077 - C22076 - C22079 + C22080 + C22081) * C81012 *
                C81 +
            (C1070 * C78528 + C1278 * C80722 - C4324 * C78520 - C4555 * C80729 +
             (C275 * C10971 + C81011 * C11273) * C78534 +
             (C275 * C11173 + C81011 * C11485) * C20867) *
                C81012 * C82) *
               C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C13805 +
             (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
             C521 * C80598) *
                C81 +
            (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
                C82) *
               C81011 * C80722 +
           ((C2326 * C13806 -
             ((C490 * C1693 + C81012 * C2301) * C13799 +
              (C490 * C1684 + C81012 * C2294) * C13805) +
             C2327 * C80598) *
                C81 +
            (C2328 * C13806 - (C2327 * C13799 + C2326 * C13805) +
             C2329 * C80598) *
                C82) *
               C81011 * C80729 +
           (((C490 * C1686 + C81012 * C2297) * C13805 +
             (C490 * C1700 + C81012 * C2305) * C13799 - C2330 * C13806 -
             C2331 * C80598) *
                C81 +
            (C2330 * C13805 + C2331 * C13799 - C2332 * C13806 -
             C2333 * C80598) *
                C82) *
               C81011 * C20867) *
              C80932 +
          (((C1390 * C13806 -
             ((C490 * C757 + C81012 * C1365) * C13799 +
              (C490 * C748 + C81012 * C1358) * C13805) +
             C1391 * C80598) *
                C81 +
            (C1392 * C13806 - (C1391 * C13799 + C1390 * C13805) +
             C1393 * C80598) *
                C82) *
               C81011 * C80722 +
           (((C490 * C3979 + C81012 * C4655) * C13805 +
             (C490 * C3985 + C81012 * C4659) * C13799 - C4672 * C13806 -
             C4673 * C80598) *
                C81 +
            (C4672 * C13805 + C4673 * C13799 - C4674 * C13806 -
             C4675 * C80598) *
                C82) *
               C81011 * C80729 +
           ((C11600 * C13806 -
             ((C490 * C6144 + C81012 * C6660) * C13799 +
              (C490 * C6138 + C81012 * C6654) * C13805) +
             C11601 * C80598) *
                C81 +
            ((C490 * C10971 + C81012 * C11593) * C13806 -
             (C11601 * C13799 + C11600 * C13805) +
             (C490 * C10973 + C81012 * C11594) * C80598) *
                C82) *
               C81011 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C2687 +
                       (C490 * C166 + C81012 * C569) * C80932 -
                       (C490 * C748 + C81012 * C1358) * C2688 -
                       (C490 * C856 + C81012 * C1471) * C80686) *
                          C81 +
                      (C3129 + C3130 - C3131 - C3132) * C82) *
                         C81011 * C13799 +
                     ((C3131 - (C3130 + C3129) + C3132) * C81 +
                      (C3133 - (C3134 + C3135) + C3136) * C82) *
                         C81011 * C80598) *
                        C80722 +
                    ((((C490 * C3979 + C81012 * C4655) * C2688 -
                       ((C490 * C1790 + C81012 * C2409) * C80932 +
                        (C490 * C1684 + C81012 * C2294) * C2687) +
                       (C490 * C4093 + C81012 * C4773) * C80686) *
                          C81 +
                      (C4778 - (C4779 + C4780) + C4790) * C82) *
                         C81011 * C13799 +
                     ((C4780 + C4779 - C4778 - C4790) * C81 +
                      (C4783 + C4784 - C4785 - C4791) * C82) *
                         C81011 * C80598) *
                        C80729 +
                    ((((C490 * C1686 + C81012 * C2297) * C2687 +
                       (C490 * C1792 + C81012 * C2411) * C80932 -
                       (C490 * C6138 + C81012 * C6654) * C2688 -
                       (C490 * C6238 + C81012 * C6741) * C80686) *
                          C81 +
                      (C11701 + C11702 - C11703 - C11707) * C82) *
                         C81011 * C13799 +
                     ((C11703 - (C11702 + C11701) + C11707) * C81 +
                      ((C490 * C10971 + C81012 * C11593) * C2688 -
                       (C2431 * C80932 + C2332 * C2687) +
                       (C490 * C11073 + C81012 * C11699) * C80686) *
                          C82) *
                         C81011 * C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78528 +
             (C490 * C221 + C81012 * C637) * C80722 -
             (C490 * C1684 + C81012 * C2294) * C78520 -
             (C490 * C1882 + C81012 * C2509) * C80729 +
             (C490 * C1686 + C81012 * C2297) * C78534 +
             (C490 * C1883 + C81012 * C2510) * C20867) *
                C81 +
            (C21476 + C21477 - C21478 - C21479 + C21480 + C21481) * C82) *
               C81011 * C80932 +
           (((C490 * C3979 + C81012 * C4655) * C78520 -
             ((C490 * C946 + C81012 * C1578) * C80722 +
              (C490 * C748 + C81012 * C1358) * C78528) +
             (C490 * C4199 + C81012 * C4889) * C80729 -
             (C490 * C6138 + C81012 * C6654) * C78534 -
             (C490 * C6322 + C81012 * C6819) * C20867) *
                C81 +
            (C22376 - (C22377 + C22378) + C22379 - C22380 - C22381) * C82) *
               C81011 * C80686) *
              C13799 +
          (((C21478 - (C21477 + C21476) + C21479 - C21480 - C21481) * C81 +
            (C21482 - (C21483 + C21484) + C21485 - C21486 - C21487) * C82) *
               C81011 * C80932 +
           ((C22378 + C22377 - C22376 - C22379 + C22380 + C22381) * C81 +
            (C1392 * C78528 + C1600 * C80722 - C4674 * C78520 - C4905 * C80729 +
             (C490 * C10971 + C81012 * C11593) * C78534 +
             (C490 * C11173 + C81012 * C11805) * C20867) *
                C82) *
               C81011 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13806 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C13799 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13805) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80726) *
              C81003 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13806 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C13799 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13805) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13805 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C13799 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13806 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80726) *
              C80988 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13805 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C13799 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C13806 -
            (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C13806 -
            ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C13799 +
             (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C13805) +
            (C92 * C6147 + C81 * C6157 + C93 * C7591 + C82 * C7592) * C80598) *
               C81011 * C81012 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13175 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C81010 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13176 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C81000 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13177 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80984 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C13178 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C17817 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13176 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C81010 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13175) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C81000 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C13177 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80984 +
           (C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C13178 +
           (C92 * C1697 + C81 * C1709 + C93 * C3285 + C82 * C3286) * C80966) *
              C81011 * C81012 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
              C81011 * C81012 * C81014 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13806 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C13799 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13805) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
              C81011 * C81012 * C81008 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C13805 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C13799 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C13806 -
           (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80598) *
              C81011 * C81012 * C80996 +
          ((C92 * C10468 + C81 * C10474 + C93 * C11885 + C82 * C11886) *
               C13806 -
           ((C93 * C10472 + C82 * C10480 + C92 * C10473 + C81 * C10481) *
                C13799 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C13805) +
           (C92 * C10472 + C81 * C10480 + C93 * C11887 + C82 * C11888) *
               C80598) *
              C81011 * C81012 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
            (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
            (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
               C81011 * C81012 * C13799 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C853 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81003 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C852) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80988 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C854 -
            (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
               C81011 * C81012 * C80598) *
              C17817 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C853 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C81003 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C852) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80988 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C854 -
            (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
               C81011 * C81012 * C13799 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C852 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C81003 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C853 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80988 +
            (C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C854 +
            (C92 * C6235 + C81 * C6241 + C93 * C7691 + C82 * C7692) * C80962) *
               C81011 * C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C81010 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C81000 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C80984 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
               C81011 * C81012 * C80966) *
              C17817 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C81000 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C81010 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C80984 +
           ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C165 +
            (C92 * C1791 + C81 * C1799 + C93 * C3353 + C82 * C3354) * C80628) *
               C81011 * C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C13799 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C80598) *
              C81014 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C80598 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C13799) *
              C81008 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
               C81011 * C81012 * C13799 -
           ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80628 +
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C165) *
               C81011 * C81012 * C80598) *
              C80996 +
          (((C92 * C10468 + C81 * C10474 + C93 * C11885 + C82 * C11886) * C165 +
            (C92 * C10526 + C81 * C10530 + C93 * C11955 + C82 * C11956) *
                C80628) *
               C81011 * C81012 * C80598 -
           ((C93 * C10526 + C82 * C10530 + C92 * C10527 + C81 * C10531) *
                C80628 +
            (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
                C165) *
               C81011 * C81012 * C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C81003 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80988 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C17951 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C17817 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C17952 -
            (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
               C81011 * C81012 * C80962) *
              C13799 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C81003 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C17951 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C17817 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C17952 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80988 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C17952 -
            ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C17817 +
             (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C17951) +
            (C92 * C6323 + C81 * C6329 + C93 * C7791 + C82 * C7792) * C80726) *
               C81011 * C81012 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C80628 * C81010 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C81000 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C17951 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C17817 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C17952 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C80984 +
          ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C17952 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C17817 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C17951) +
           (C92 * C1887 + C81 * C1895 + C93 * C3423 + C82 * C3424) * C80726) *
              C81011 * C81012 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C19485 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C81014 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C19486 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C81008 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C19487 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80996 -
           (C93 * C10468 + C82 * C10474 + C92 * C10469 + C81 * C10475) *
               C19488 -
           (C93 * C10581 + C82 * C10585 + C92 * C10582 + C81 * C10586) *
               C80978) *
              C81011 * C81012 * C80628 * C13799 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C19486 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C81014 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C19485) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C81008 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C19487 -
           (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C80996 +
           (C92 * C10468 + C81 * C10474 + C93 * C11885 + C82 * C11886) *
               C19488 +
           (C92 * C10581 + C81 * C10585 + C93 * C12027 + C82 * C12028) *
               C80978) *
              C81011 * C81012 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C13805 +
             (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
                C81012 * C82) *
               C17817 +
           ((C2004 * C13806 -
             ((C275 * C1693 + C81011 * C1979) * C13799 +
              (C275 * C1684 + C81011 * C1972) * C13805) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C13806 - (C2005 * C13799 + C2004 * C13805) +
             C2007 * C80598) *
                C81012 * C82) *
               C80726) *
              C81003 +
          (((C1068 * C13806 -
             ((C275 * C757 + C81011 * C1043) * C13799 +
              (C275 * C748 + C81011 * C1036) * C13805) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C13806 - (C1069 * C13799 + C1068 * C13805) +
             C1071 * C80598) *
                C81012 * C82) *
               C17817 +
           (((C275 * C3979 + C81011 * C4305) * C13805 +
             (C275 * C3985 + C81011 * C4309) * C13799 - C4322 * C13806 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C13805 + C4323 * C13799 - C4324 * C13806 -
             C4325 * C80598) *
                C81012 * C82) *
               C80726) *
              C80988 +
          ((((C275 * C750 + C81011 * C1039) * C13805 +
             (C275 * C764 + C81011 * C1047) * C13799 - C1072 * C13806 -
             C1073 * C80598) *
                C81012 * C81 +
            (C1072 * C13805 + C1073 * C13799 - C1074 * C13806 -
             C1075 * C80598) *
                C81012 * C82) *
               C17817 +
           ((C7898 * C13806 -
             ((C275 * C6148 + C81011 * C6416) * C13799 +
              (C275 * C6140 + C81011 * C6410) * C13805) +
             C7899 * C80598) *
                C81012 * C81 +
            ((C275 * C7589 + C81011 * C7891) * C13806 -
             (C7899 * C13799 + C7898 * C13805) +
             (C275 * C7591 + C81011 * C7892) * C80598) *
                C81012 * C82) *
               C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C13175 +
            (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
            C306 * C81000 + C307 * C13177 + C308 * C80984 - C309 * C13178 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C13175 + C306 * C81010 - C307 * C13176 - C308 * C81000 +
            C309 * C13177 + C310 * C80984 - C311 * C13178 - C312 * C80966) *
               C81012 * C82) *
              C17817 +
          ((C2004 * C13176 -
            ((C275 * C1693 + C81011 * C1979) * C81010 +
             (C275 * C1684 + C81011 * C1972) * C13175) +
            C2005 * C81000 - C2006 * C13177 - C2007 * C80984 + C3498 * C13178 +
            C3499 * C80966) *
               C81012 * C81 +
           (C2006 * C13176 - (C2005 * C81010 + C2004 * C13175) +
            C2007 * C81000 - C3498 * C13177 - C3499 * C80984 +
            (C275 * C3283 + C81011 * C3491) * C13178 +
            (C275 * C3285 + C81011 * C3492) * C80966) *
               C81012 * C82) *
              C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C13805 +
            (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
            C306 * C80598) *
               C81012 * C81 +
           (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
               C81012 * C82) *
              C81014 +
          ((C2004 * C13806 -
            ((C275 * C1693 + C81011 * C1979) * C13799 +
             (C275 * C1684 + C81011 * C1972) * C13805) +
            C2005 * C80598) *
               C81012 * C81 +
           (C2006 * C13806 - (C2005 * C13799 + C2004 * C13805) +
            C2007 * C80598) *
               C81012 * C82) *
              C81008 +
          (((C275 * C1686 + C81011 * C1975) * C13805 +
            (C275 * C1700 + C81011 * C1983) * C13799 - C2008 * C13806 -
            C2009 * C80598) *
               C81012 * C81 +
           (C2008 * C13805 + C2009 * C13799 - C2010 * C13806 - C2011 * C80598) *
               C81012 * C82) *
              C80996 +
          ((C12102 * C13806 -
            ((C275 * C10473 + C81011 * C10636) * C13799 +
             (C275 * C10469 + C81011 * C10632) * C13805) +
            C12103 * C80598) *
               C81012 * C81 +
           ((C275 * C11885 + C81011 * C12095) * C13806 -
            (C12103 * C13799 + C12102 * C13805) +
            (C275 * C11887 + C81011 * C12096) * C80598) *
               C81012 * C82) *
              C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C852 +
             (C275 * C166 + C81011 * C354) * C81003 -
             (C275 * C748 + C81011 * C1036) * C853 -
             (C275 * C856 + C81011 * C1149) * C80988 +
             (C275 * C750 + C81011 * C1039) * C854 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C81012 * C81 +
            (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
               C13799 +
           ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C81012 * C81 +
            (C1166 - (C1167 + C1168) + C1180 - C1171 - C1181) * C81012 * C82) *
               C80598) *
              C17817 +
          ((((C275 * C3979 + C81011 * C4305) * C853 -
             ((C275 * C1790 + C81011 * C2087) * C81003 +
              (C275 * C1684 + C81011 * C1972) * C852) +
             (C275 * C4093 + C81011 * C4423) * C80988 -
             (C275 * C6140 + C81011 * C6410) * C854 -
             (C275 * C6236 + C81011 * C6493) * C80962) *
                C81012 * C81 +
            (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) * C81012 *
                C82) *
               C13799 +
           ((C18866 + C18865 - C18864 - C18867 + C18868 + C18869) * C81012 *
                C81 +
            (C2006 * C852 + C2107 * C81003 - C4324 * C853 - C4439 * C80988 +
             (C275 * C7589 + C81011 * C7891) * C854 +
             (C275 * C7691 + C81011 * C7997) * C80962) *
                C81012 * C82) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C81010 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C81000 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C80984 -
           ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) *
               C80966) *
              C17817 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C81000 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C81010 -
           ((C3571 + C3569) * C81012 * C82 + (C2111 + C2097) * C81012 * C81) *
               C80984 +
           ((C3569 + C3571) * C81012 * C81 +
            ((C275 * C3283 + C81011 * C3491) * C165 +
             (C275 * C3353 + C81011 * C3565) * C80628) *
                C81012 * C82) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C13799 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C80598) *
              C81014 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C80598 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C13799) *
              C81008 +
          ((((C275 * C1686 + C81011 * C1975) * C165 +
             (C275 * C1792 + C81011 * C2089) * C80628) *
                C81012 * C81 +
            (C2100 + C2112) * C81012 * C82) *
               C13799 -
           ((C2113 + C2105) * C81012 * C82 + (C2112 + C2100) * C81012 * C81) *
               C80598) *
              C80996 +
          (((C12171 + C12175) * C81012 * C81 +
            ((C275 * C11885 + C81011 * C12095) * C165 +
             (C275 * C11955 + C81011 * C12169) * C80628) *
                C81012 * C82) *
               C80598 -
           ((C12175 + C12171) * C81012 * C82 +
            ((C275 * C10527 + C81011 * C10682) * C80628 +
             (C275 * C10469 + C81011 * C10632) * C165) *
                C81012 * C81) *
               C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C17951 +
                       (C275 * C221 + C81011 * C422) * C17817 -
                       (C275 * C1684 + C81011 * C1972) * C17952 -
                       (C275 * C1882 + C81011 * C2187) * C80726) *
                          C81012 * C81 +
                      (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                         C81003 +
                     (((C275 * C3979 + C81011 * C4305) * C17952 -
                       ((C275 * C946 + C81011 * C1256) * C17817 +
                        (C275 * C748 + C81011 * C1036) * C17951) +
                       (C275 * C4199 + C81011 * C4539) * C80726) *
                          C81012 * C81 +
                      (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                         C80988 +
                     (((C275 * C750 + C81011 * C1039) * C17951 +
                       (C275 * C947 + C81011 * C1257) * C17817 -
                       (C275 * C6140 + C81011 * C6410) * C17952 -
                       (C275 * C6324 + C81011 * C6575) * C80726) *
                          C81012 * C81 +
                      (C18972 + C18973 - C18974 - C18975) * C81012 * C82) *
                         C80962) *
                        C13799 +
                    (((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                      (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                         C81003 +
                     ((C18970 + C18969 - C18968 - C18971) * C81012 * C81 +
                      (C1070 * C17951 + C1278 * C17817 - C4324 * C17952 -
                       C4555 * C80726) *
                          C81012 * C82) *
                         C80988 +
                     ((C18974 - (C18973 + C18972) + C18975) * C81012 * C81 +
                      ((C275 * C7589 + C81011 * C7891) * C17952 -
                       (C1279 * C17817 + C1074 * C17951) +
                       (C275 * C7791 + C81011 * C8105) * C80726) *
                          C81012 * C82) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C17951 +
                      (C275 * C221 + C81011 * C422) * C17817 -
                      (C275 * C1684 + C81011 * C1972) * C17952 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                        C80628 * C81010 +
                    ((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                     (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                        C80628 * C81000 +
                    ((C18158 + C18157 - C18156 - C18159) * C81012 * C81 +
                     (C18160 + C18161 - C18162 - C18163) * C81012 * C82) *
                        C80628 * C80984 +
                    ((C18162 - (C18161 + C18160) + C18163) * C81012 * C81 +
                     ((C275 * C3283 + C81011 * C3491) * C17952 -
                      (C444 * C17817 + C311 * C17951) +
                      (C275 * C3423 + C81011 * C3637) * C80726) *
                         C81012 * C82) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C19485 +
                      (C275 * C221 + C81011 * C422) * C81014 -
                      (C275 * C1684 + C81011 * C1972) * C19486 -
                      (C275 * C1882 + C81011 * C2187) * C81008 +
                      (C275 * C1686 + C81011 * C1975) * C19487 +
                      (C275 * C1883 + C81011 * C2188) * C80996 -
                      (C275 * C10469 + C81011 * C10632) * C19488 -
                      (C275 * C10582 + C81011 * C10727) * C80978) *
                         C81012 * C81 +
                     (C19688 + C19689 - C19690 - C19691 + C19692 + C19693 -
                      C19694 - C19695) *
                         C81012 * C82) *
                        C80628 * C13799 +
                    ((C19690 - (C19689 + C19688) + C19691 - C19692 - C19693 +
                      C19694 + C19695) *
                         C81012 * C81 +
                     (C2006 * C19486 - (C442 * C81014 + C307 * C19485) +
                      C2214 * C81008 - C2010 * C19487 - C2215 * C80996 +
                      (C275 * C11885 + C81011 * C12095) * C19488 +
                      (C275 * C12027 + C81011 * C12241) * C80978) *
                         C81012 * C82) *
                        C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C13805 +
             (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
             C521 * C80598) *
                C81 +
            (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
                C82) *
               C81011 * C17817 +
           ((C2326 * C13806 -
             ((C490 * C1693 + C81012 * C2301) * C13799 +
              (C490 * C1684 + C81012 * C2294) * C13805) +
             C2327 * C80598) *
                C81 +
            (C2328 * C13806 - (C2327 * C13799 + C2326 * C13805) +
             C2329 * C80598) *
                C82) *
               C81011 * C80726) *
              C81003 +
          (((C1390 * C13806 -
             ((C490 * C757 + C81012 * C1365) * C13799 +
              (C490 * C748 + C81012 * C1358) * C13805) +
             C1391 * C80598) *
                C81 +
            (C1392 * C13806 - (C1391 * C13799 + C1390 * C13805) +
             C1393 * C80598) *
                C82) *
               C81011 * C17817 +
           (((C490 * C3979 + C81012 * C4655) * C13805 +
             (C490 * C3985 + C81012 * C4659) * C13799 - C4672 * C13806 -
             C4673 * C80598) *
                C81 +
            (C4672 * C13805 + C4673 * C13799 - C4674 * C13806 -
             C4675 * C80598) *
                C82) *
               C81011 * C80726) *
              C80988 +
          ((((C490 * C750 + C81012 * C1361) * C13805 +
             (C490 * C764 + C81012 * C1369) * C13799 - C1394 * C13806 -
             C1395 * C80598) *
                C81 +
            (C1394 * C13805 + C1395 * C13799 - C1396 * C13806 -
             C1397 * C80598) *
                C82) *
               C81011 * C17817 +
           ((C8218 * C13806 -
             ((C490 * C6148 + C81012 * C6662) * C13799 +
              (C490 * C6140 + C81012 * C6656) * C13805) +
             C8219 * C80598) *
                C81 +
            ((C490 * C7589 + C81012 * C8211) * C13806 -
             (C8219 * C13799 + C8218 * C13805) +
             (C490 * C7591 + C81012 * C8212) * C80598) *
                C82) *
               C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13175 +
            (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
            C521 * C81000 + C522 * C13177 + C523 * C80984 - C524 * C13178 -
            C525 * C80966) *
               C81 +
           (C520 * C13175 + C521 * C81010 - C522 * C13176 - C523 * C81000 +
            C524 * C13177 + C525 * C80984 - C526 * C13178 - C527 * C80966) *
               C82) *
              C81011 * C17817 +
          ((C2326 * C13176 -
            ((C490 * C1693 + C81012 * C2301) * C81010 +
             (C490 * C1684 + C81012 * C2294) * C13175) +
            C2327 * C81000 - C2328 * C13177 - C2329 * C80984 + C3726 * C13178 +
            C3727 * C80966) *
               C81 +
           (C2328 * C13176 - (C2327 * C81010 + C2326 * C13175) +
            C2329 * C81000 - C3726 * C13177 - C3727 * C80984 +
            (C490 * C3283 + C81012 * C3719) * C13178 +
            (C490 * C3285 + C81012 * C3720) * C80966) *
               C82) *
              C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13805 +
            (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
            C521 * C80598) *
               C81 +
           (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
               C82) *
              C81011 * C81014 +
          ((C2326 * C13806 -
            ((C490 * C1693 + C81012 * C2301) * C13799 +
             (C490 * C1684 + C81012 * C2294) * C13805) +
            C2327 * C80598) *
               C81 +
           (C2328 * C13806 - (C2327 * C13799 + C2326 * C13805) +
            C2329 * C80598) *
               C82) *
              C81011 * C81008 +
          (((C490 * C1686 + C81012 * C2297) * C13805 +
            (C490 * C1700 + C81012 * C2305) * C13799 - C2330 * C13806 -
            C2331 * C80598) *
               C81 +
           (C2330 * C13805 + C2331 * C13799 - C2332 * C13806 - C2333 * C80598) *
               C82) *
              C81011 * C80996 +
          ((C12326 * C13806 -
            ((C490 * C10473 + C81012 * C10778) * C13799 +
             (C490 * C10469 + C81012 * C10774) * C13805) +
            C12327 * C80598) *
               C81 +
           ((C490 * C11885 + C81012 * C12319) * C13806 -
            (C12327 * C13799 + C12326 * C13805) +
            (C490 * C11887 + C81012 * C12320) * C80598) *
               C82) *
              C81011 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C852 +
             (C490 * C166 + C81012 * C569) * C81003 -
             (C490 * C748 + C81012 * C1358) * C853 -
             (C490 * C856 + C81012 * C1471) * C80988 +
             (C490 * C750 + C81012 * C1361) * C854 +
             (C490 * C857 + C81012 * C1472) * C80962) *
                C81 +
            (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
               C81011 * C13799 +
           ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81 +
            (C1488 - (C1489 + C1490) + C1502 - C1493 - C1503) * C82) *
               C81011 * C80598) *
              C17817 +
          ((((C490 * C3979 + C81012 * C4655) * C853 -
             ((C490 * C1790 + C81012 * C2409) * C81003 +
              (C490 * C1684 + C81012 * C2294) * C852) +
             (C490 * C4093 + C81012 * C4773) * C80988 -
             (C490 * C6140 + C81012 * C6656) * C854 -
             (C490 * C6236 + C81012 * C6739) * C80962) *
                C81 +
            (C19172 - (C19173 + C19174) + C19175 - C19176 - C19177) * C82) *
               C81011 * C13799 +
           ((C19174 + C19173 - C19172 - C19175 + C19176 + C19177) * C81 +
            (C2328 * C852 + C2429 * C81003 - C4674 * C853 - C4789 * C80988 +
             (C490 * C7589 + C81012 * C8211) * C854 +
             (C490 * C7691 + C81012 * C8317) * C80962) *
                C82) *
               C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C81010 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C81000 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C80984 -
           ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C80966) *
              C17817 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C81000 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C81010 -
           ((C3799 + C3797) * C82 + (C2433 + C2419) * C81) * C81011 * C80984 +
           ((C3797 + C3799) * C81 + ((C490 * C3283 + C81012 * C3719) * C165 +
                                     (C490 * C3353 + C81012 * C3793) * C80628) *
                                        C82) *
               C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C13799 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C80598) *
              C81014 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C80598 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C13799) *
              C81008 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81 +
            (C2422 + C2434) * C82) *
               C81011 * C13799 -
           ((C2435 + C2427) * C82 + (C2434 + C2422) * C81) * C81011 * C80598) *
              C80996 +
          (((C12395 + C12399) * C81 +
            ((C490 * C11885 + C81012 * C12319) * C165 +
             (C490 * C11955 + C81012 * C12393) * C80628) *
                C82) *
               C81011 * C80598 -
           ((C12399 + C12395) * C82 +
            ((C490 * C10527 + C81012 * C10824) * C80628 +
             (C490 * C10469 + C81012 * C10774) * C165) *
                C81) *
               C81011 * C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81 +
                      (C18362 + C18363 - C18364 - C18365) * C82) *
                         C81011 * C81003 +
                     (((C490 * C3979 + C81012 * C4655) * C17952 -
                       ((C490 * C946 + C81012 * C1578) * C17817 +
                        (C490 * C748 + C81012 * C1358) * C17951) +
                       (C490 * C4199 + C81012 * C4889) * C80726) *
                          C81 +
                      (C19276 - (C19277 + C19278) + C19279) * C82) *
                         C81011 * C80988 +
                     (((C490 * C750 + C81012 * C1361) * C17951 +
                       (C490 * C947 + C81012 * C1579) * C17817 -
                       (C490 * C6140 + C81012 * C6656) * C17952 -
                       (C490 * C6324 + C81012 * C6821) * C80726) *
                          C81 +
                      (C19280 + C19281 - C19282 - C19283) * C82) *
                         C81011 * C80962) *
                        C13799 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81 +
                      (C18366 - (C18367 + C18368) + C18369) * C82) *
                         C81011 * C81003 +
                     ((C19278 + C19277 - C19276 - C19279) * C81 +
                      (C1392 * C17951 + C1600 * C17817 - C4674 * C17952 -
                       C4905 * C80726) *
                          C82) *
                         C81011 * C80988 +
                     ((C19282 - (C19281 + C19280) + C19283) * C81 +
                      ((C490 * C7589 + C81012 * C8211) * C17952 -
                       (C1601 * C17817 + C1396 * C17951) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C82) *
                         C81011 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C18362 + C18363 - C18364 - C18365) * C82) *
                        C81011 * C80628 * C81010 +
                    ((C18364 - (C18363 + C18362) + C18365) * C81 +
                     (C18366 - (C18367 + C18368) + C18369) * C82) *
                        C81011 * C80628 * C81000 +
                    ((C18368 + C18367 - C18366 - C18369) * C81 +
                     (C18370 + C18371 - C18372 - C18373) * C82) *
                        C81011 * C80628 * C80984 +
                    ((C18372 - (C18371 + C18370) + C18373) * C81 +
                     ((C490 * C3283 + C81012 * C3719) * C17952 -
                      (C659 * C17817 + C526 * C17951) +
                      (C490 * C3423 + C81012 * C3865) * C80726) *
                         C82) *
                        C81011 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C19485 +
                      (C490 * C221 + C81012 * C637) * C81014 -
                      (C490 * C1684 + C81012 * C2294) * C19486 -
                      (C490 * C1882 + C81012 * C2509) * C81008 +
                      (C490 * C1686 + C81012 * C2297) * C19487 +
                      (C490 * C1883 + C81012 * C2510) * C80996 -
                      (C490 * C10469 + C81012 * C10774) * C19488 -
                      (C490 * C10582 + C81012 * C10869) * C80978) *
                         C81 +
                     (C19894 + C19895 - C19896 - C19897 + C19898 + C19899 -
                      C19900 - C19901) *
                         C82) *
                        C81011 * C80628 * C13799 +
                    ((C19896 - (C19895 + C19894) + C19897 - C19898 - C19899 +
                      C19900 + C19901) *
                         C81 +
                     (C2328 * C19486 - (C657 * C81014 + C522 * C19485) +
                      C2536 * C81008 - C2332 * C19487 - C2537 * C80996 +
                      (C490 * C11885 + C81012 * C12319) * C19488 +
                      (C490 * C12027 + C81012 * C12465) * C80978) *
                         C82) *
                        C81011 * C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78289 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80593 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78285 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80601 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C78295 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C15341) *
              C81011 * C81012 * C80722 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78285 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80593 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78289) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80601 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C78295 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C15341) *
              C81011 * C81012 * C80729 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78289 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80593 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C78285 -
           (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C80601 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C78295 +
           (C92 * C1703 + C81 * C1712 + C93 * C1705 + C82 * C1713) * C15341) *
              C81011 * C81012 * C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C80593 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C80601 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C15341) *
              C80722 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C80601 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C80593 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C15341) *
              C80729 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
               C81011 * C81012 * C80593 -
           ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80628 +
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C165) *
               C81011 * C81012 * C80601 +
           ((C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C165 +
            (C92 * C1794 + C81 * C1802 + C93 * C1795 + C82 * C1803) * C80628) *
               C81011 * C81012 * C15341) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78528 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80722 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78520 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80729 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C78534 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C20867) *
              C81011 * C81012 * C80628 * C80593 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78520 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80722 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78528) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80729 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C78534 -
           (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C20867) *
              C81011 * C81012 * C80628 * C80601 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C78528 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80722 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C78520 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80729 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C78534 +
           (C92 * C1886 + C81 * C1894 + C93 * C1888 + C82 * C1896) * C20867) *
              C81011 * C81012 * C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78289 +
            (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
            C306 * C80601 + C307 * C78295 + C308 * C15341) *
               C81012 * C81 +
           (C305 * C78289 + C306 * C80593 - C307 * C78285 - C308 * C80601 +
            C309 * C78295 + C310 * C15341) *
               C81012 * C82) *
              C80722 +
          ((C2004 * C78285 -
            ((C275 * C1693 + C81011 * C1979) * C80593 +
             (C275 * C1684 + C81011 * C1972) * C78289) +
            C2005 * C80601 - C2006 * C78295 - C2007 * C15341) *
               C81012 * C81 +
           (C2006 * C78285 - (C2005 * C80593 + C2004 * C78289) +
            C2007 * C80601 - C3498 * C78295 - C3499 * C15341) *
               C81012 * C82) *
              C80729 +
          (((C275 * C1686 + C81011 * C1975) * C78289 +
            (C275 * C1700 + C81011 * C1983) * C80593 - C2008 * C78285 -
            C2009 * C80601 + C2010 * C78295 + C2011 * C15341) *
               C81012 * C81 +
           (C2008 * C78289 + C2009 * C80593 - C2010 * C78285 - C2011 * C80601 +
            (C275 * C1689 + C81011 * C1978) * C78295 +
            (C275 * C1705 + C81011 * C1986) * C15341) *
               C81012 * C82) *
              C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C80593 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C80601 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C15341) *
              C80722 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C80601 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C80593 -
           ((C3571 + C3569) * C81012 * C82 + (C2111 + C2097) * C81012 * C81) *
               C15341) *
              C80729 +
          ((((C275 * C1686 + C81011 * C1975) * C165 +
             (C275 * C1792 + C81011 * C2089) * C80628) *
                C81012 * C81 +
            (C2100 + C2112) * C81012 * C82) *
               C80593 -
           ((C2113 + C2105) * C81012 * C82 + (C2112 + C2100) * C81012 * C81) *
               C80601 +
           ((C2105 + C2113) * C81012 * C81 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C81012 * C82) *
               C15341) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78528 +
            (C275 * C221 + C81011 * C422) * C80722 -
            (C275 * C1684 + C81011 * C1972) * C78520 -
            (C275 * C1882 + C81011 * C2187) * C80729 +
            (C275 * C1686 + C81011 * C1975) * C78534 +
            (C275 * C1883 + C81011 * C2188) * C20867) *
               C81012 * C81 +
           (C21242 + C21243 - C21244 - C21245 + C21246 + C21247) * C81012 *
               C82) *
              C80628 * C80593 +
          ((C21244 - (C21243 + C21242) + C21245 - C21246 - C21247) * C81012 *
               C81 +
           (C21248 - (C21249 + C21250) + C21251 - C21252 - C21253) * C81012 *
               C82) *
              C80628 * C80601 +
          ((C21250 + C21249 - C21248 - C21251 + C21252 + C21253) * C81012 *
               C81 +
           (C309 * C78528 + C443 * C80722 - C3498 * C78520 - C3652 * C80729 +
            (C275 * C1689 + C81011 * C1978) * C78534 +
            (C275 * C1888 + C81011 * C2194) * C20867) *
               C81012 * C82) *
              C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78289 +
            (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
            C521 * C80601 + C522 * C78295 + C523 * C15341) *
               C81 +
           (C520 * C78289 + C521 * C80593 - C522 * C78285 - C523 * C80601 +
            C524 * C78295 + C525 * C15341) *
               C82) *
              C81011 * C80722 +
          ((C2326 * C78285 -
            ((C490 * C1693 + C81012 * C2301) * C80593 +
             (C490 * C1684 + C81012 * C2294) * C78289) +
            C2327 * C80601 - C2328 * C78295 - C2329 * C15341) *
               C81 +
           (C2328 * C78285 - (C2327 * C80593 + C2326 * C78289) +
            C2329 * C80601 - C3726 * C78295 - C3727 * C15341) *
               C82) *
              C81011 * C80729 +
          (((C490 * C1686 + C81012 * C2297) * C78289 +
            (C490 * C1700 + C81012 * C2305) * C80593 - C2330 * C78285 -
            C2331 * C80601 + C2332 * C78295 + C2333 * C15341) *
               C81 +
           (C2330 * C78289 + C2331 * C80593 - C2332 * C78285 - C2333 * C80601 +
            (C490 * C1689 + C81012 * C2300) * C78295 +
            (C490 * C1705 + C81012 * C2308) * C15341) *
               C82) *
              C81011 * C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C80593 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C80601 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C15341) *
              C80722 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C80601 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C80593 -
           ((C3799 + C3797) * C82 + (C2433 + C2419) * C81) * C81011 * C15341) *
              C80729 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81 +
            (C2422 + C2434) * C82) *
               C81011 * C80593 -
           ((C2435 + C2427) * C82 + (C2434 + C2422) * C81) * C81011 * C80601 +
           ((C2427 + C2435) * C81 + ((C490 * C1689 + C81012 * C2300) * C165 +
                                     (C490 * C1795 + C81012 * C2414) * C80628) *
                                        C82) *
               C81011 * C15341) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78528 +
            (C490 * C221 + C81012 * C637) * C80722 -
            (C490 * C1684 + C81012 * C2294) * C78520 -
            (C490 * C1882 + C81012 * C2509) * C80729 +
            (C490 * C1686 + C81012 * C2297) * C78534 +
            (C490 * C1883 + C81012 * C2510) * C20867) *
               C81 +
           (C21476 + C21477 - C21478 - C21479 + C21480 + C21481) * C82) *
              C81011 * C80628 * C80593 +
          ((C21478 - (C21477 + C21476) + C21479 - C21480 - C21481) * C81 +
           (C21482 - (C21483 + C21484) + C21485 - C21486 - C21487) * C82) *
              C81011 * C80628 * C80601 +
          ((C21484 + C21483 - C21482 - C21485 + C21486 + C21487) * C81 +
           (C524 * C78528 + C658 * C80722 - C3726 * C78520 - C3880 * C80729 +
            (C490 * C1689 + C81012 * C2300) * C78534 +
            (C490 * C1888 + C81012 * C2516) * C20867) *
               C82) *
              C81011 * C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13175 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C81010 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13176 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C81000 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C13177 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80984 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C13178 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C17817 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13176 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C81010 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13175) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C81000 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C13177 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80984 +
           (C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C13178 +
           (C92 * C1697 + C81 * C1709 + C93 * C3285 + C82 * C3286) * C80966) *
              C81011 * C81012 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C13805 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C13799 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C13806 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C13806 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C13799 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C13805) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80726) *
              C81003 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C13806 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C13799 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C13805) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C13805 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C13799 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C13806 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80726) *
              C80988 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C13805 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C13799 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C13806 -
            (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
               C81011 * C81012 * C17817 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C13806 -
            ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C13799 +
             (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C13805) +
            (C92 * C6147 + C81 * C6157 + C93 * C7591 + C82 * C7592) * C80598) *
               C81011 * C81012 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C81010 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C81000 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C80984 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
               C81011 * C81012 * C80966) *
              C17817 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C81000 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C81010 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C80984 +
           ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C165 +
            (C92 * C1791 + C81 * C1799 + C93 * C3353 + C82 * C3354) * C80628) *
               C81011 * C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
            (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
            (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
               C81011 * C81012 * C13799 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C853 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81003 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C852) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80988 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C854 -
            (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
               C81011 * C81012 * C80598) *
              C17817 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C853 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C81003 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C852) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80988 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C854 -
            (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
               C81011 * C81012 * C13799 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C852 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C81003 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C853 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80988 +
            (C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C854 +
            (C92 * C6235 + C81 * C6241 + C93 * C7691 + C82 * C7692) * C80962) *
               C81011 * C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C80628 * C81010 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C81000 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C17951 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C17817 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C17952 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C80984 +
          ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C17952 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C17817 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C17951) +
           (C92 * C1887 + C81 * C1895 + C93 * C3423 + C82 * C3424) * C80726) *
              C81011 * C81012 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C17951 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C17817 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C17952 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C81003 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C17952 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C17817 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C17951) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80988 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C17951 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C17817 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C17952 -
            (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
               C81011 * C81012 * C80962) *
              C13799 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C17952 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C17817 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C17951) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C81003 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C17951 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C17817 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C17952 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80988 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C17952 -
            ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C17817 +
             (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C17951) +
            (C92 * C6323 + C81 * C6329 + C93 * C7791 + C82 * C7792) * C80726) *
               C81011 * C81012 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C13175 +
            (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
            C306 * C81000 + C307 * C13177 + C308 * C80984 - C309 * C13178 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C13175 + C306 * C81010 - C307 * C13176 - C308 * C81000 +
            C309 * C13177 + C310 * C80984 - C311 * C13178 - C312 * C80966) *
               C81012 * C82) *
              C17817 +
          ((C2004 * C13176 -
            ((C275 * C1693 + C81011 * C1979) * C81010 +
             (C275 * C1684 + C81011 * C1972) * C13175) +
            C2005 * C81000 - C2006 * C13177 - C2007 * C80984 + C3498 * C13178 +
            C3499 * C80966) *
               C81012 * C81 +
           (C2006 * C13176 - (C2005 * C81010 + C2004 * C13175) +
            C2007 * C81000 - C3498 * C13177 - C3499 * C80984 +
            (C275 * C3283 + C81011 * C3491) * C13178 +
            (C275 * C3285 + C81011 * C3492) * C80966) *
               C81012 * C82) *
              C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C13805 +
             (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C13805 + C306 * C13799 - C307 * C13806 - C308 * C80598) *
                C81012 * C82) *
               C17817 +
           ((C2004 * C13806 -
             ((C275 * C1693 + C81011 * C1979) * C13799 +
              (C275 * C1684 + C81011 * C1972) * C13805) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C13806 - (C2005 * C13799 + C2004 * C13805) +
             C2007 * C80598) *
                C81012 * C82) *
               C80726) *
              C81003 +
          (((C1068 * C13806 -
             ((C275 * C757 + C81011 * C1043) * C13799 +
              (C275 * C748 + C81011 * C1036) * C13805) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C13806 - (C1069 * C13799 + C1068 * C13805) +
             C1071 * C80598) *
                C81012 * C82) *
               C17817 +
           (((C275 * C3979 + C81011 * C4305) * C13805 +
             (C275 * C3985 + C81011 * C4309) * C13799 - C4322 * C13806 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C13805 + C4323 * C13799 - C4324 * C13806 -
             C4325 * C80598) *
                C81012 * C82) *
               C80726) *
              C80988 +
          ((((C275 * C750 + C81011 * C1039) * C13805 +
             (C275 * C764 + C81011 * C1047) * C13799 - C1072 * C13806 -
             C1073 * C80598) *
                C81012 * C81 +
            (C1072 * C13805 + C1073 * C13799 - C1074 * C13806 -
             C1075 * C80598) *
                C81012 * C82) *
               C17817 +
           ((C7898 * C13806 -
             ((C275 * C6148 + C81011 * C6416) * C13799 +
              (C275 * C6140 + C81011 * C6410) * C13805) +
             C7899 * C80598) *
                C81012 * C81 +
            ((C275 * C7589 + C81011 * C7891) * C13806 -
             (C7899 * C13799 + C7898 * C13805) +
             (C275 * C7591 + C81011 * C7892) * C80598) *
                C81012 * C82) *
               C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C81010 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C81000 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C80984 -
           ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) *
               C80966) *
              C17817 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C81000 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C81010 -
           ((C3571 + C3569) * C81012 * C82 + (C2111 + C2097) * C81012 * C81) *
               C80984 +
           ((C3569 + C3571) * C81012 * C81 +
            ((C275 * C3283 + C81011 * C3491) * C165 +
             (C275 * C3353 + C81011 * C3565) * C80628) *
                C81012 * C82) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C852 +
             (C275 * C166 + C81011 * C354) * C81003 -
             (C275 * C748 + C81011 * C1036) * C853 -
             (C275 * C856 + C81011 * C1149) * C80988 +
             (C275 * C750 + C81011 * C1039) * C854 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C81012 * C81 +
            (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
               C13799 +
           ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C81012 * C81 +
            (C1166 - (C1167 + C1168) + C1180 - C1171 - C1181) * C81012 * C82) *
               C80598) *
              C17817 +
          ((((C275 * C3979 + C81011 * C4305) * C853 -
             ((C275 * C1790 + C81011 * C2087) * C81003 +
              (C275 * C1684 + C81011 * C1972) * C852) +
             (C275 * C4093 + C81011 * C4423) * C80988 -
             (C275 * C6140 + C81011 * C6410) * C854 -
             (C275 * C6236 + C81011 * C6493) * C80962) *
                C81012 * C81 +
            (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) * C81012 *
                C82) *
               C13799 +
           ((C18866 + C18865 - C18864 - C18867 + C18868 + C18869) * C81012 *
                C81 +
            (C2006 * C852 + C2107 * C81003 - C4324 * C853 - C4439 * C80988 +
             (C275 * C7589 + C81011 * C7891) * C854 +
             (C275 * C7691 + C81011 * C7997) * C80962) *
                C81012 * C82) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C17951 +
                      (C275 * C221 + C81011 * C422) * C17817 -
                      (C275 * C1684 + C81011 * C1972) * C17952 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                        C80628 * C81010 +
                    ((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                     (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                        C80628 * C81000 +
                    ((C18158 + C18157 - C18156 - C18159) * C81012 * C81 +
                     (C18160 + C18161 - C18162 - C18163) * C81012 * C82) *
                        C80628 * C80984 +
                    ((C18162 - (C18161 + C18160) + C18163) * C81012 * C81 +
                     ((C275 * C3283 + C81011 * C3491) * C17952 -
                      (C444 * C17817 + C311 * C17951) +
                      (C275 * C3423 + C81011 * C3637) * C80726) *
                         C81012 * C82) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C17951 +
                       (C275 * C221 + C81011 * C422) * C17817 -
                       (C275 * C1684 + C81011 * C1972) * C17952 -
                       (C275 * C1882 + C81011 * C2187) * C80726) *
                          C81012 * C81 +
                      (C18152 + C18153 - C18154 - C18155) * C81012 * C82) *
                         C81003 +
                     (((C275 * C3979 + C81011 * C4305) * C17952 -
                       ((C275 * C946 + C81011 * C1256) * C17817 +
                        (C275 * C748 + C81011 * C1036) * C17951) +
                       (C275 * C4199 + C81011 * C4539) * C80726) *
                          C81012 * C81 +
                      (C18968 - (C18969 + C18970) + C18971) * C81012 * C82) *
                         C80988 +
                     (((C275 * C750 + C81011 * C1039) * C17951 +
                       (C275 * C947 + C81011 * C1257) * C17817 -
                       (C275 * C6140 + C81011 * C6410) * C17952 -
                       (C275 * C6324 + C81011 * C6575) * C80726) *
                          C81012 * C81 +
                      (C18972 + C18973 - C18974 - C18975) * C81012 * C82) *
                         C80962) *
                        C13799 +
                    (((C18154 - (C18153 + C18152) + C18155) * C81012 * C81 +
                      (C18156 - (C18157 + C18158) + C18159) * C81012 * C82) *
                         C81003 +
                     ((C18970 + C18969 - C18968 - C18971) * C81012 * C81 +
                      (C1070 * C17951 + C1278 * C17817 - C4324 * C17952 -
                       C4555 * C80726) *
                          C81012 * C82) *
                         C80988 +
                     ((C18974 - (C18973 + C18972) + C18975) * C81012 * C81 +
                      ((C275 * C7589 + C81011 * C7891) * C17952 -
                       (C1279 * C17817 + C1074 * C17951) +
                       (C275 * C7791 + C81011 * C8105) * C80726) *
                          C81012 * C82) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13175 +
            (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
            C521 * C81000 + C522 * C13177 + C523 * C80984 - C524 * C13178 -
            C525 * C80966) *
               C81 +
           (C520 * C13175 + C521 * C81010 - C522 * C13176 - C523 * C81000 +
            C524 * C13177 + C525 * C80984 - C526 * C13178 - C527 * C80966) *
               C82) *
              C81011 * C17817 +
          ((C2326 * C13176 -
            ((C490 * C1693 + C81012 * C2301) * C81010 +
             (C490 * C1684 + C81012 * C2294) * C13175) +
            C2327 * C81000 - C2328 * C13177 - C2329 * C80984 + C3726 * C13178 +
            C3727 * C80966) *
               C81 +
           (C2328 * C13176 - (C2327 * C81010 + C2326 * C13175) +
            C2329 * C81000 - C3726 * C13177 - C3727 * C80984 +
            (C490 * C3283 + C81012 * C3719) * C13178 +
            (C490 * C3285 + C81012 * C3720) * C80966) *
               C82) *
              C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C13805 +
             (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
             C521 * C80598) *
                C81 +
            (C520 * C13805 + C521 * C13799 - C522 * C13806 - C523 * C80598) *
                C82) *
               C81011 * C17817 +
           ((C2326 * C13806 -
             ((C490 * C1693 + C81012 * C2301) * C13799 +
              (C490 * C1684 + C81012 * C2294) * C13805) +
             C2327 * C80598) *
                C81 +
            (C2328 * C13806 - (C2327 * C13799 + C2326 * C13805) +
             C2329 * C80598) *
                C82) *
               C81011 * C80726) *
              C81003 +
          (((C1390 * C13806 -
             ((C490 * C757 + C81012 * C1365) * C13799 +
              (C490 * C748 + C81012 * C1358) * C13805) +
             C1391 * C80598) *
                C81 +
            (C1392 * C13806 - (C1391 * C13799 + C1390 * C13805) +
             C1393 * C80598) *
                C82) *
               C81011 * C17817 +
           (((C490 * C3979 + C81012 * C4655) * C13805 +
             (C490 * C3985 + C81012 * C4659) * C13799 - C4672 * C13806 -
             C4673 * C80598) *
                C81 +
            (C4672 * C13805 + C4673 * C13799 - C4674 * C13806 -
             C4675 * C80598) *
                C82) *
               C81011 * C80726) *
              C80988 +
          ((((C490 * C750 + C81012 * C1361) * C13805 +
             (C490 * C764 + C81012 * C1369) * C13799 - C1394 * C13806 -
             C1395 * C80598) *
                C81 +
            (C1394 * C13805 + C1395 * C13799 - C1396 * C13806 -
             C1397 * C80598) *
                C82) *
               C81011 * C17817 +
           ((C8218 * C13806 -
             ((C490 * C6148 + C81012 * C6662) * C13799 +
              (C490 * C6140 + C81012 * C6656) * C13805) +
             C8219 * C80598) *
                C81 +
            ((C490 * C7589 + C81012 * C8211) * C13806 -
             (C8219 * C13799 + C8218 * C13805) +
             (C490 * C7591 + C81012 * C8212) * C80598) *
                C82) *
               C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C81010 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C81000 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C80984 -
           ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C80966) *
              C17817 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C81000 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C81010 -
           ((C3799 + C3797) * C82 + (C2433 + C2419) * C81) * C81011 * C80984 +
           ((C3797 + C3799) * C81 + ((C490 * C3283 + C81012 * C3719) * C165 +
                                     (C490 * C3353 + C81012 * C3793) * C80628) *
                                        C82) *
               C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C852 +
             (C490 * C166 + C81012 * C569) * C81003 -
             (C490 * C748 + C81012 * C1358) * C853 -
             (C490 * C856 + C81012 * C1471) * C80988 +
             (C490 * C750 + C81012 * C1361) * C854 +
             (C490 * C857 + C81012 * C1472) * C80962) *
                C81 +
            (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
               C81011 * C13799 +
           ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81 +
            (C1488 - (C1489 + C1490) + C1502 - C1493 - C1503) * C82) *
               C81011 * C80598) *
              C17817 +
          ((((C490 * C3979 + C81012 * C4655) * C853 -
             ((C490 * C1790 + C81012 * C2409) * C81003 +
              (C490 * C1684 + C81012 * C2294) * C852) +
             (C490 * C4093 + C81012 * C4773) * C80988 -
             (C490 * C6140 + C81012 * C6656) * C854 -
             (C490 * C6236 + C81012 * C6739) * C80962) *
                C81 +
            (C19172 - (C19173 + C19174) + C19175 - C19176 - C19177) * C82) *
               C81011 * C13799 +
           ((C19174 + C19173 - C19172 - C19175 + C19176 + C19177) * C81 +
            (C2328 * C852 + C2429 * C81003 - C4674 * C853 - C4789 * C80988 +
             (C490 * C7589 + C81012 * C8211) * C854 +
             (C490 * C7691 + C81012 * C8317) * C80962) *
                C82) *
               C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C18362 + C18363 - C18364 - C18365) * C82) *
                        C81011 * C80628 * C81010 +
                    ((C18364 - (C18363 + C18362) + C18365) * C81 +
                     (C18366 - (C18367 + C18368) + C18369) * C82) *
                        C81011 * C80628 * C81000 +
                    ((C18368 + C18367 - C18366 - C18369) * C81 +
                     (C18370 + C18371 - C18372 - C18373) * C82) *
                        C81011 * C80628 * C80984 +
                    ((C18372 - (C18371 + C18370) + C18373) * C81 +
                     ((C490 * C3283 + C81012 * C3719) * C17952 -
                      (C659 * C17817 + C526 * C17951) +
                      (C490 * C3423 + C81012 * C3865) * C80726) *
                         C82) *
                        C81011 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81 +
                      (C18362 + C18363 - C18364 - C18365) * C82) *
                         C81011 * C81003 +
                     (((C490 * C3979 + C81012 * C4655) * C17952 -
                       ((C490 * C946 + C81012 * C1578) * C17817 +
                        (C490 * C748 + C81012 * C1358) * C17951) +
                       (C490 * C4199 + C81012 * C4889) * C80726) *
                          C81 +
                      (C19276 - (C19277 + C19278) + C19279) * C82) *
                         C81011 * C80988 +
                     (((C490 * C750 + C81012 * C1361) * C17951 +
                       (C490 * C947 + C81012 * C1579) * C17817 -
                       (C490 * C6140 + C81012 * C6656) * C17952 -
                       (C490 * C6324 + C81012 * C6821) * C80726) *
                          C81 +
                      (C19280 + C19281 - C19282 - C19283) * C82) *
                         C81011 * C80962) *
                        C13799 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81 +
                      (C18366 - (C18367 + C18368) + C18369) * C82) *
                         C81011 * C81003 +
                     ((C19278 + C19277 - C19276 - C19279) * C81 +
                      (C1392 * C17951 + C1600 * C17817 - C4674 * C17952 -
                       C4905 * C80726) *
                          C82) *
                         C81011 * C80988 +
                     ((C19282 - (C19281 + C19280) + C19283) * C81 +
                      ((C490 * C7589 + C81012 * C8211) * C17952 -
                       (C1601 * C17817 + C1396 * C17951) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C82) *
                         C81011 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2613 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C2607 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2614 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C2608 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2615 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C2609 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C2616 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C80639 * C80932 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2614 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C2607 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2613) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C2608 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C2615 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C2609 +
           (C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C2616 +
           (C92 * C761 + C81 * C773 + C93 * C2619 + C82 * C2620) * C80966) *
              C81011 * C81012 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
              C81011 * C81012 * C80639 * C6893 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78260 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80916 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78279) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
              C81011 * C81012 * C80639 * C6894 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78279 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80916 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78260 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
              C81011 * C81012 * C80639 * C6895 +
          ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C78260 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80916 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C78279) +
           (C92 * C5662 + C81 * C5670 + C93 * C6901 + C82 * C6902) * C80598) *
              C81011 * C81012 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
              C81011 * C81012 * C2607 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2688 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80932 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2687) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
              C81011 * C81012 * C2608 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2687 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80932 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C2688 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
              C81011 * C81012 * C2609 +
          ((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C2688 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80932 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C2687) +
           (C92 * C861 + C81 * C869 + C93 * C2689 + C82 * C2690) * C80686) *
              C81011 * C81012 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C6969 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C6893 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C6970 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C6894 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C6971 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C6895 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C6972 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C80916 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C6970 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C6893 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C6969) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C6894 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C6971 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C6895 +
           (C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C6972 +
           (C92 * C5721 + C81 * C5725 + C93 * C6973 + C82 * C6974) * C80972) *
              C81011 * C81012 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C80932 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80686) *
              C2607 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C80932) *
              C2608 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C80932 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80686) *
              C2609 +
          (((C92 * C749 + C81 * C760 + C93 * C2617 + C82 * C2618) * C220 +
            (C92 * C951 + C81 * C959 + C93 * C2757 + C82 * C2758) * C80639) *
               C81011 * C81012 * C80686 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
               C81011 * C81012 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C6893 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C6894 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C6895 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
               C81011 * C81012 * C80972) *
              C80916 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C6894 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C6893 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C6895 +
           ((C92 * C5658 + C81 * C5664 + C93 * C6899 + C82 * C6900) * C220 +
            (C92 * C5771 + C81 * C5775 + C93 * C7041 + C82 * C7042) * C80639) *
               C81011 * C81012 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2613 +
            (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
            C306 * C2608 + C307 * C2615 + C308 * C2609 - C309 * C2616 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C2613 + C306 * C2607 - C307 * C2614 - C308 * C2608 +
            C309 * C2615 + C310 * C2609 - C311 * C2616 - C312 * C80966) *
               C81012 * C82) *
              C80639 * C80932 +
          ((C1068 * C2614 -
            ((C275 * C757 + C81011 * C1043) * C2607 +
             (C275 * C748 + C81011 * C1036) * C2613) +
            C1069 * C2608 - C1070 * C2615 - C1071 * C2609 + C2832 * C2616 +
            C2833 * C80966) *
               C81012 * C81 +
           (C1070 * C2614 - (C1069 * C2607 + C1068 * C2613) + C1071 * C2608 -
            C2832 * C2615 - C2833 * C2609 +
            (C275 * C2617 + C81011 * C2825) * C2616 +
            (C275 * C2619 + C81011 * C2826) * C80966) *
               C81012 * C82) *
              C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78279 +
            (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
            C306 * C80598) *
               C81012 * C81 +
           (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
               C81012 * C82) *
              C80639 * C6893 +
          ((C1068 * C78260 -
            ((C275 * C757 + C81011 * C1043) * C80916 +
             (C275 * C748 + C81011 * C1036) * C78279) +
            C1069 * C80598) *
               C81012 * C81 +
           (C1070 * C78260 - (C1069 * C80916 + C1068 * C78279) +
            C1071 * C80598) *
               C81012 * C82) *
              C80639 * C6894 +
          (((C275 * C750 + C81011 * C1039) * C78279 +
            (C275 * C764 + C81011 * C1047) * C80916 - C1072 * C78260 -
            C1073 * C80598) *
               C81012 * C81 +
           (C1072 * C78279 + C1073 * C80916 - C1074 * C78260 - C1075 * C80598) *
               C81012 * C82) *
              C80639 * C6895 +
          ((C7116 * C78260 -
            ((C275 * C5663 + C81011 * C5826) * C80916 +
             (C275 * C5659 + C81011 * C5822) * C78279) +
            C7117 * C80598) *
               C81012 * C81 +
           ((C275 * C6899 + C81011 * C7109) * C78260 -
            (C7117 * C80916 + C7116 * C78279) +
            (C275 * C6901 + C81011 * C7110) * C80598) *
               C81012 * C82) *
              C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2687 +
            (C275 * C166 + C81011 * C354) * C80932 -
            (C275 * C748 + C81011 * C1036) * C2688 -
            (C275 * C856 + C81011 * C1149) * C80686) *
               C81012 * C81 +
           (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
              C2607 +
          ((C2903 - (C2902 + C2901) + C2904) * C81012 * C81 +
           (C2905 - (C2906 + C2907) + C2908) * C81012 * C82) *
              C2608 +
          ((C2907 + C2906 - C2905 - C2908) * C81012 * C81 +
           (C2909 + C2910 - C2911 - C2915) * C81012 * C82) *
              C2609 +
          ((C2911 - (C2910 + C2909) + C2915) * C81012 * C81 +
           ((C275 * C2617 + C81011 * C2825) * C2688 -
            (C376 * C80932 + C311 * C2687) +
            (C275 * C2689 + C81011 * C2899) * C80686) *
               C81012 * C82) *
              C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C6969 +
            (C275 * C166 + C81011 * C354) * C6893 -
            (C275 * C748 + C81011 * C1036) * C6970 -
            (C275 * C856 + C81011 * C1149) * C6894 +
            (C275 * C750 + C81011 * C1039) * C6971 +
            (C275 * C857 + C81011 * C1150) * C6895 -
            (C275 * C5659 + C81011 * C5822) * C6972 -
            (C275 * C5722 + C81011 * C5871) * C80972) *
               C81012 * C81 +
           (C7185 + C7186 - C7187 - C7188 + C7189 + C7190 - C7191 - C7195) *
               C81012 * C82) *
              C80916 +
          ((C7187 - (C7186 + C7185) + C7188 - C7189 - C7190 + C7191 + C7195) *
               C81012 * C81 +
           (C1070 * C6970 - (C374 * C6893 + C307 * C6969) + C1176 * C6894 -
            C1074 * C6971 - C1177 * C6895 +
            (C275 * C6899 + C81011 * C7109) * C6972 +
            (C275 * C6973 + C81011 * C7183) * C80972) *
               C81012 * C82) *
              C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C80932 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80686) *
              C2607 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80686 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C80932) *
              C2608 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C80932 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C80686) *
              C2609 +
          (((C2985 + C2987) * C81012 * C81 +
            ((C275 * C2617 + C81011 * C2825) * C220 +
             (C275 * C2757 + C81011 * C2981) * C80639) *
                C81012 * C82) *
               C80686 -
           ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
               C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C6893 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C6894 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C6895 -
           ((C7267 + C7265) * C81012 * C82 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C81012 * C81) *
               C80972) *
              C80916 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C6894 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C6893 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C6895 +
           ((C7265 + C7267) * C81012 * C81 +
            ((C275 * C6899 + C81011 * C7109) * C220 +
             (C275 * C7041 + C81011 * C7261) * C80639) *
                C81012 * C82) *
               C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2613 +
            (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
            C521 * C2608 + C522 * C2615 + C523 * C2609 - C524 * C2616 -
            C525 * C80966) *
               C81 +
           (C520 * C2613 + C521 * C2607 - C522 * C2614 - C523 * C2608 +
            C524 * C2615 + C525 * C2609 - C526 * C2616 - C527 * C80966) *
               C82) *
              C81011 * C80639 * C80932 +
          ((C1390 * C2614 -
            ((C490 * C757 + C81012 * C1365) * C2607 +
             (C490 * C748 + C81012 * C1358) * C2613) +
            C1391 * C2608 - C1392 * C2615 - C1393 * C2609 + C3060 * C2616 +
            C3061 * C80966) *
               C81 +
           (C1392 * C2614 - (C1391 * C2607 + C1390 * C2613) + C1393 * C2608 -
            C3060 * C2615 - C3061 * C2609 +
            (C490 * C2617 + C81012 * C3053) * C2616 +
            (C490 * C2619 + C81012 * C3054) * C80966) *
               C82) *
              C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78279 +
            (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
            C521 * C80598) *
               C81 +
           (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
               C82) *
              C81011 * C80639 * C6893 +
          ((C1390 * C78260 -
            ((C490 * C757 + C81012 * C1365) * C80916 +
             (C490 * C748 + C81012 * C1358) * C78279) +
            C1391 * C80598) *
               C81 +
           (C1392 * C78260 - (C1391 * C80916 + C1390 * C78279) +
            C1393 * C80598) *
               C82) *
              C81011 * C80639 * C6894 +
          (((C490 * C750 + C81012 * C1361) * C78279 +
            (C490 * C764 + C81012 * C1369) * C80916 - C1394 * C78260 -
            C1395 * C80598) *
               C81 +
           (C1394 * C78279 + C1395 * C80916 - C1396 * C78260 - C1397 * C80598) *
               C82) *
              C81011 * C80639 * C6895 +
          ((C7340 * C78260 -
            ((C490 * C5663 + C81012 * C5968) * C80916 +
             (C490 * C5659 + C81012 * C5964) * C78279) +
            C7341 * C80598) *
               C81 +
           ((C490 * C6899 + C81012 * C7333) * C78260 -
            (C7341 * C80916 + C7340 * C78279) +
            (C490 * C6901 + C81012 * C7334) * C80598) *
               C82) *
              C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2687 +
            (C490 * C166 + C81012 * C569) * C80932 -
            (C490 * C748 + C81012 * C1358) * C2688 -
            (C490 * C856 + C81012 * C1471) * C80686) *
               C81 +
           (C3129 + C3130 - C3131 - C3132) * C82) *
              C81011 * C2607 +
          ((C3131 - (C3130 + C3129) + C3132) * C81 +
           (C3133 - (C3134 + C3135) + C3136) * C82) *
              C81011 * C2608 +
          ((C3135 + C3134 - C3133 - C3136) * C81 +
           (C3137 + C3138 - C3139 - C3143) * C82) *
              C81011 * C2609 +
          ((C3139 - (C3138 + C3137) + C3143) * C81 +
           ((C490 * C2617 + C81012 * C3053) * C2688 -
            (C591 * C80932 + C526 * C2687) +
            (C490 * C2689 + C81012 * C3127) * C80686) *
               C82) *
              C81011 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 -
            (C490 * C748 + C81012 * C1358) * C6970 -
            (C490 * C856 + C81012 * C1471) * C6894 +
            (C490 * C750 + C81012 * C1361) * C6971 +
            (C490 * C857 + C81012 * C1472) * C6895 -
            (C490 * C5659 + C81012 * C5964) * C6972 -
            (C490 * C5722 + C81012 * C6013) * C80972) *
               C81 +
           (C7409 + C7410 - C7411 - C7412 + C7413 + C7414 - C7415 - C7419) *
               C82) *
              C81011 * C80916 +
          ((C7411 - (C7410 + C7409) + C7412 - C7413 - C7414 + C7415 + C7419) *
               C81 +
           (C1392 * C6970 - (C589 * C6893 + C522 * C6969) + C1498 * C6894 -
            C1396 * C6971 - C1499 * C6895 +
            (C490 * C6899 + C81012 * C7333) * C6972 +
            (C490 * C6973 + C81012 * C7407) * C80972) *
               C82) *
              C81011 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C80932 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80686) *
              C2607 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80686 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C80932) *
              C2608 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C80932 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C80686) *
              C2609 +
          (((C3213 + C3215) * C81 + ((C490 * C2617 + C81012 * C3053) * C220 +
                                     (C490 * C2757 + C81012 * C3209) * C80639) *
                                        C82) *
               C81011 * C80686 -
           ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C6893 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C6894 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C6895 -
           ((C7491 + C7489) * C82 + ((C490 * C5772 + C81012 * C6060) * C80639 +
                                     (C490 * C5659 + C81012 * C5964) * C220) *
                                        C81) *
               C81011 * C80972) *
              C80916 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C6894 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C6893 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C6895 +
           ((C7489 + C7491) * C81 + ((C490 * C6899 + C81012 * C7333) * C220 +
                                     (C490 * C7041 + C81012 * C7485) * C80639) *
                                        C82) *
               C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
            (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
            (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
               C81011 * C81012 * C80933 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C744 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C737 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C743) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C738 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C745 -
            (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
               C81011 * C81012 * C80726) *
              C80932 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C744 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C737 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C743) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C738 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C745 -
            (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
               C81011 * C81012 * C80933 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C743 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C737 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C744 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C738 +
            (C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C745 +
            (C92 * C3988 + C81 * C3993 + C93 * C3990 + C82 * C3994) * C80954) *
               C81011 * C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C80933 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C80726) *
              C6893 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C80933) *
              C6894 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C80933 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C80726) *
              C6895 +
          (((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C5657 +
            (C92 * C8503 + C81 * C8505 + C93 * C8504 + C82 * C8506) * C80588) *
               C81011 * C81012 * C80726 -
           ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
               C81011 * C81012 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2687 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80932 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C2688 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80686) *
               C81011 * C81012 * C737 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C2688 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80932 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2687) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80686) *
               C81011 * C81012 * C738 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2687 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80932 -
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C2688 -
            (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80686) *
               C81011 * C81012 * C80954) *
              C80933 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C2688 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80932 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2687) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C80686) *
               C81011 * C81012 * C737 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C2687 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80932 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C2688 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C80686) *
               C81011 * C81012 * C738 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C2688 -
            ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80932 +
             (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C2687) +
            (C92 * C4095 + C81 * C4099 + C93 * C4096 + C82 * C4100) * C80686) *
               C81011 * C81012 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C6969 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C6893 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C6970 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C6894 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C6971 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C6895 -
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C6972 -
           (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C80972) *
              C81011 * C81012 * C80588 * C80933 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C6970 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C6893 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C6969) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C6894 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C6971 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C6895 +
           (C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C6972 +
           (C92 * C8573 + C81 * C8575 + C93 * C8574 + C82 * C8576) * C80972) *
              C81011 * C81012 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C737 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C3421 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80933 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C3422 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C80686) *
              C738 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C3421 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80933 -
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C3422 -
            (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
               C81011 * C81012 * C80932 +
           ((C92 * C3981 + C81 * C3987 + C93 * C3982 + C82 * C3989) * C3422 -
            ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80933 +
             (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C3421) +
            (C92 * C4201 + C81 * C4205 + C93 * C4202 + C82 * C4206) * C80726) *
               C81011 * C81012 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C6893 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
              C81011 * C81012 * C6894 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C3421 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80933 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C3422 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
              C81011 * C81012 * C6895 +
          ((C92 * C8499 + C81 * C8501 + C93 * C8500 + C82 * C8502) * C3422 -
           ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80933 +
            (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C3421) +
           (C92 * C8643 + C81 * C8645 + C93 * C8644 + C82 * C8646) * C80726) *
              C81011 * C81012 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C743 +
                       (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                       C306 * C738 + C307 * C745 + C308 * C80954) *
                          C81012 * C81 +
                      (C305 * C743 + C306 * C737 - C307 * C744 - C308 * C738 +
                       C309 * C745 + C310 * C80954) *
                          C81012 * C82) *
                         C80933 +
                     ((C2004 * C744 -
                       ((C275 * C1693 + C81011 * C1979) * C737 +
                        (C275 * C1684 + C81011 * C1972) * C743) +
                       C2005 * C738 - C2006 * C745 - C2007 * C80954) *
                          C81012 * C81 +
                      (C2006 * C744 - (C2005 * C737 + C2004 * C743) +
                       C2007 * C738 - C3498 * C745 - C3499 * C80954) *
                          C81012 * C82) *
                         C80726) *
                        C80932 +
                    (((C1068 * C744 -
                       ((C275 * C757 + C81011 * C1043) * C737 +
                        (C275 * C748 + C81011 * C1036) * C743) +
                       C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                          C81012 * C81 +
                      (C1070 * C744 - (C1069 * C737 + C1068 * C743) +
                       C1071 * C738 - C2832 * C745 - C2833 * C80954) *
                          C81012 * C82) *
                         C80933 +
                     (((C275 * C3979 + C81011 * C4305) * C743 +
                       (C275 * C3985 + C81011 * C4309) * C737 - C4322 * C744 -
                       C4323 * C738 + C4324 * C745 + C4325 * C80954) *
                          C81012 * C81 +
                      (C4322 * C743 + C4323 * C737 - C4324 * C744 -
                       C4325 * C738 + (C275 * C3982 + C81011 * C4308) * C745 +
                       (C275 * C3990 + C81011 * C4312) * C80954) *
                          C81012 * C82) *
                         C80726) *
                        C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C81012 * C81 +
                      (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                         C80933 -
                     ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                      ((C275 * C1693 + C81011 * C1979) * C80588 +
                       (C275 * C1684 + C81011 * C1972) * C5657) *
                          C81012 * C81) *
                         C80726) *
                        C6893 +
                    ((((C275 * C3979 + C81011 * C4305) * C5657 +
                       (C275 * C3985 + C81011 * C4309) * C80588) *
                          C81012 * C81 +
                      (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                         C80726 -
                     ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C81012 * C81) *
                         C80933) *
                        C6894 +
                    ((((C275 * C750 + C81011 * C1039) * C5657 +
                       (C275 * C764 + C81011 * C1047) * C80588) *
                          C81012 * C81 +
                      (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                         C80933 -
                     ((C7899 * C80588 + C7898 * C5657) * C81012 * C82 +
                      ((C275 * C6148 + C81011 * C6416) * C80588 +
                       (C275 * C6140 + C81011 * C6410) * C5657) *
                          C81012 * C81) *
                         C80726) *
                        C6895 +
                    ((((C275 * C8499 + C81011 * C8713) * C5657 +
                       (C275 * C8503 + C81011 * C8715) * C80588) *
                          C81012 * C81 +
                      ((C275 * C8500 + C81011 * C8714) * C5657 +
                       (C275 * C8504 + C81011 * C8716) * C80588) *
                          C81012 * C82) *
                         C80726 -
                     ((C7117 * C80588 + C7116 * C5657) * C81012 * C82 +
                      ((C275 * C5663 + C81011 * C5826) * C80588 +
                       (C275 * C5659 + C81011 * C5822) * C5657) *
                          C81012 * C81) *
                         C80933) *
                        C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C2687 +
             (C275 * C166 + C81011 * C354) * C80932 -
             (C275 * C748 + C81011 * C1036) * C2688 -
             (C275 * C856 + C81011 * C1149) * C80686) *
                C81012 * C81 +
            (C2901 + C2902 - C2903 - C2904) * C81012 * C82) *
               C737 +
           ((C2903 - (C2902 + C2901) + C2904) * C81012 * C81 +
            (C2905 - (C2906 + C2907) + C2908) * C81012 * C82) *
               C738 +
           ((C2907 + C2906 - C2905 - C2908) * C81012 * C81 +
            (C2909 + C2910 - C2911 - C2915) * C81012 * C82) *
               C80954) *
              C80933 +
          ((((C275 * C3979 + C81011 * C4305) * C2688 -
             ((C275 * C1790 + C81011 * C2087) * C80932 +
              (C275 * C1684 + C81011 * C1972) * C2687) +
             (C275 * C4093 + C81011 * C4423) * C80686) *
                C81012 * C81 +
            (C4428 - (C4429 + C4430) + C4440) * C81012 * C82) *
               C737 +
           ((C4430 + C4429 - C4428 - C4440) * C81012 * C81 +
            (C4433 + C4434 - C4435 - C4441) * C81012 * C82) *
               C738 +
           ((C4435 - (C4434 + C4433) + C4441) * C81012 * C81 +
            ((C275 * C3982 + C81011 * C4308) * C2688 -
             (C3570 * C80932 + C3498 * C2687) +
             (C275 * C4096 + C81011 * C4426) * C80686) *
                C81012 * C82) *
               C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C6969 +
            (C275 * C166 + C81011 * C354) * C6893 -
            (C275 * C748 + C81011 * C1036) * C6970 -
            (C275 * C856 + C81011 * C1149) * C6894 +
            (C275 * C750 + C81011 * C1039) * C6971 +
            (C275 * C857 + C81011 * C1150) * C6895 -
            (C275 * C5659 + C81011 * C5822) * C6972 -
            (C275 * C5722 + C81011 * C5871) * C80972) *
               C81012 * C81 +
           (C7185 + C7186 - C7187 - C7188 + C7189 + C7190 - C7191 - C7195) *
               C81012 * C82) *
              C80588 * C80933 +
          (((C275 * C3979 + C81011 * C4305) * C6970 -
            ((C275 * C1790 + C81011 * C2087) * C6893 +
             (C275 * C1684 + C81011 * C1972) * C6969) +
            (C275 * C4093 + C81011 * C4423) * C6894 -
            (C275 * C6140 + C81011 * C6410) * C6971 -
            (C275 * C6236 + C81011 * C6493) * C6895 +
            (C275 * C8499 + C81011 * C8713) * C6972 +
            (C275 * C8573 + C81011 * C8783) * C80972) *
               C81012 * C81 +
           (C4322 * C6970 - (C2106 * C6893 + C2004 * C6969) + C4438 * C6894 -
            C7898 * C6971 - C8006 * C6895 +
            (C275 * C8500 + C81011 * C8714) * C6972 +
            (C275 * C8574 + C81011 * C8784) * C80972) *
               C81012 * C82) *
              C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C3421 +
                       (C275 * C221 + C81011 * C422) * C80933 -
                       (C275 * C1684 + C81011 * C1972) * C3422 -
                       (C275 * C1882 + C81011 * C2187) * C80726) *
                          C81012 * C81 +
                      (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                         C80932 +
                     (((C275 * C3979 + C81011 * C4305) * C3422 -
                       ((C275 * C946 + C81011 * C1256) * C80933 +
                        (C275 * C748 + C81011 * C1036) * C3421) +
                       (C275 * C4199 + C81011 * C4539) * C80726) *
                          C81012 * C81 +
                      (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                         C80686) *
                        C737 +
                    (((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                      (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                         C80932 +
                     ((C4546 + C4545 - C4544 - C4556) * C81012 * C81 +
                      (C4549 + C4550 - C4551 - C4557) * C81012 * C82) *
                         C80686) *
                        C738 +
                    (((C3645 + C3644 - C3643 - C3646) * C81012 * C81 +
                      (C3647 + C3648 - C3649 - C3653) * C81012 * C82) *
                         C80932 +
                     ((C4551 - (C4550 + C4549) + C4557) * C81012 * C81 +
                      ((C275 * C3982 + C81011 * C4308) * C3422 -
                       (C2986 * C80933 + C2832 * C3421) +
                       (C275 * C4202 + C81011 * C4542) * C80726) *
                          C81012 * C82) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C3421 +
                      (C275 * C221 + C81011 * C422) * C80933 -
                      (C275 * C1684 + C81011 * C1972) * C3422 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                        C6893 +
                    (((C275 * C3979 + C81011 * C4305) * C3422 -
                      ((C275 * C946 + C81011 * C1256) * C80933 +
                       (C275 * C748 + C81011 * C1036) * C3421) +
                      (C275 * C4199 + C81011 * C4539) * C80726) *
                         C81012 * C81 +
                     (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                        C6894 +
                    (((C275 * C750 + C81011 * C1039) * C3421 +
                      (C275 * C947 + C81011 * C1257) * C80933 -
                      (C275 * C6140 + C81011 * C6410) * C3422 -
                      (C275 * C6324 + C81011 * C6575) * C80726) *
                         C81012 * C81 +
                     (C8107 + C8108 - C8109 - C8113) * C81012 * C82) *
                        C6895 +
                    (((C275 * C8499 + C81011 * C8713) * C3422 -
                      ((C275 * C5772 + C81011 * C5918) * C80933 +
                       (C275 * C5659 + C81011 * C5822) * C3421) +
                      (C275 * C8643 + C81011 * C8851) * C80726) *
                         C81012 * C81 +
                     ((C275 * C8500 + C81011 * C8714) * C3422 -
                      (C7266 * C80933 + C7116 * C3421) +
                      (C275 * C8644 + C81011 * C8852) * C80726) *
                         C81012 * C82) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eezx[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C743 +
                       (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                       C521 * C738 + C522 * C745 + C523 * C80954) *
                          C81 +
                      (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
                       C524 * C745 + C525 * C80954) *
                          C82) *
                         C81011 * C80933 +
                     ((C2326 * C744 -
                       ((C490 * C1693 + C81012 * C2301) * C737 +
                        (C490 * C1684 + C81012 * C2294) * C743) +
                       C2327 * C738 - C2328 * C745 - C2329 * C80954) *
                          C81 +
                      (C2328 * C744 - (C2327 * C737 + C2326 * C743) +
                       C2329 * C738 - C3726 * C745 - C3727 * C80954) *
                          C82) *
                         C81011 * C80726) *
                        C80932 +
                    (((C1390 * C744 -
                       ((C490 * C757 + C81012 * C1365) * C737 +
                        (C490 * C748 + C81012 * C1358) * C743) +
                       C1391 * C738 - C1392 * C745 - C1393 * C80954) *
                          C81 +
                      (C1392 * C744 - (C1391 * C737 + C1390 * C743) +
                       C1393 * C738 - C3060 * C745 - C3061 * C80954) *
                          C82) *
                         C81011 * C80933 +
                     (((C490 * C3979 + C81012 * C4655) * C743 +
                       (C490 * C3985 + C81012 * C4659) * C737 - C4672 * C744 -
                       C4673 * C738 + C4674 * C745 + C4675 * C80954) *
                          C81 +
                      (C4672 * C743 + C4673 * C737 - C4674 * C744 -
                       C4675 * C738 + (C490 * C3982 + C81012 * C4658) * C745 +
                       (C490 * C3990 + C81012 * C4662) * C80954) *
                          C82) *
                         C81011 * C80726) *
                        C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81 +
                      (C520 * C5657 + C521 * C80588) * C82) *
                         C81011 * C80933 -
                     ((C2327 * C80588 + C2326 * C5657) * C82 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81) *
                         C81011 * C80726) *
                        C6893 +
                    ((((C490 * C3979 + C81012 * C4655) * C5657 +
                       (C490 * C3985 + C81012 * C4659) * C80588) *
                          C81 +
                      (C4672 * C5657 + C4673 * C80588) * C82) *
                         C81011 * C80726 -
                     ((C1391 * C80588 + C1390 * C5657) * C82 +
                      ((C490 * C757 + C81012 * C1365) * C80588 +
                       (C490 * C748 + C81012 * C1358) * C5657) *
                          C81) *
                         C81011 * C80933) *
                        C6894 +
                    ((((C490 * C750 + C81012 * C1361) * C5657 +
                       (C490 * C764 + C81012 * C1369) * C80588) *
                          C81 +
                      (C1394 * C5657 + C1395 * C80588) * C82) *
                         C81011 * C80933 -
                     ((C8219 * C80588 + C8218 * C5657) * C82 +
                      ((C490 * C6148 + C81012 * C6662) * C80588 +
                       (C490 * C6140 + C81012 * C6656) * C5657) *
                          C81) *
                         C81011 * C80726) *
                        C6895 +
                    ((((C490 * C8499 + C81012 * C8919) * C5657 +
                       (C490 * C8503 + C81012 * C8921) * C80588) *
                          C81 +
                      ((C490 * C8500 + C81012 * C8920) * C5657 +
                       (C490 * C8504 + C81012 * C8922) * C80588) *
                          C82) *
                         C81011 * C80726 -
                     ((C7341 * C80588 + C7340 * C5657) * C82 +
                      ((C490 * C5663 + C81012 * C5968) * C80588 +
                       (C490 * C5659 + C81012 * C5964) * C5657) *
                          C81) *
                         C81011 * C80933) *
                        C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 -
             (C490 * C748 + C81012 * C1358) * C2688 -
             (C490 * C856 + C81012 * C1471) * C80686) *
                C81 +
            (C3129 + C3130 - C3131 - C3132) * C82) *
               C81011 * C737 +
           ((C3131 - (C3130 + C3129) + C3132) * C81 +
            (C3133 - (C3134 + C3135) + C3136) * C82) *
               C81011 * C738 +
           ((C3135 + C3134 - C3133 - C3136) * C81 +
            (C3137 + C3138 - C3139 - C3143) * C82) *
               C81011 * C80954) *
              C80933 +
          ((((C490 * C3979 + C81012 * C4655) * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             (C490 * C4093 + C81012 * C4773) * C80686) *
                C81 +
            (C4778 - (C4779 + C4780) + C4790) * C82) *
               C81011 * C737 +
           ((C4780 + C4779 - C4778 - C4790) * C81 +
            (C4783 + C4784 - C4785 - C4791) * C82) *
               C81011 * C738 +
           ((C4785 - (C4784 + C4783) + C4791) * C81 +
            ((C490 * C3982 + C81012 * C4658) * C2688 -
             (C3798 * C80932 + C3726 * C2687) +
             (C490 * C4096 + C81012 * C4776) * C80686) *
                C82) *
               C81011 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 -
            (C490 * C748 + C81012 * C1358) * C6970 -
            (C490 * C856 + C81012 * C1471) * C6894 +
            (C490 * C750 + C81012 * C1361) * C6971 +
            (C490 * C857 + C81012 * C1472) * C6895 -
            (C490 * C5659 + C81012 * C5964) * C6972 -
            (C490 * C5722 + C81012 * C6013) * C80972) *
               C81 +
           (C7409 + C7410 - C7411 - C7412 + C7413 + C7414 - C7415 - C7419) *
               C82) *
              C81011 * C80588 * C80933 +
          (((C490 * C3979 + C81012 * C4655) * C6970 -
            ((C490 * C1790 + C81012 * C2409) * C6893 +
             (C490 * C1684 + C81012 * C2294) * C6969) +
            (C490 * C4093 + C81012 * C4773) * C6894 -
            (C490 * C6140 + C81012 * C6656) * C6971 -
            (C490 * C6236 + C81012 * C6739) * C6895 +
            (C490 * C8499 + C81012 * C8919) * C6972 +
            (C490 * C8573 + C81012 * C8989) * C80972) *
               C81 +
           (C4672 * C6970 - (C2428 * C6893 + C2326 * C6969) + C4788 * C6894 -
            C8218 * C6971 - C8326 * C6895 +
            (C490 * C8500 + C81012 * C8920) * C6972 +
            (C490 * C8574 + C81012 * C8990) * C80972) *
               C82) *
              C81011 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81 +
                      (C3867 + C3868 - C3869 - C3870) * C82) *
                         C81011 * C80932 +
                     (((C490 * C3979 + C81012 * C4655) * C3422 -
                       ((C490 * C946 + C81012 * C1578) * C80933 +
                        (C490 * C748 + C81012 * C1358) * C3421) +
                       (C490 * C4199 + C81012 * C4889) * C80726) *
                          C81 +
                      (C4894 - (C4895 + C4896) + C4906) * C82) *
                         C81011 * C80686) *
                        C737 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81 +
                      (C3871 - (C3872 + C3873) + C3874) * C82) *
                         C81011 * C80932 +
                     ((C4896 + C4895 - C4894 - C4906) * C81 +
                      (C4899 + C4900 - C4901 - C4907) * C82) *
                         C81011 * C80686) *
                        C738 +
                    (((C3873 + C3872 - C3871 - C3874) * C81 +
                      (C3875 + C3876 - C3877 - C3881) * C82) *
                         C81011 * C80932 +
                     ((C4901 - (C4900 + C4899) + C4907) * C81 +
                      ((C490 * C3982 + C81012 * C4658) * C3422 -
                       (C3214 * C80933 + C3060 * C3421) +
                       (C490 * C4202 + C81012 * C4892) * C80726) *
                          C82) *
                         C81011 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C3867 + C3868 - C3869 - C3870) * C82) *
                        C81011 * C6893 +
                    (((C490 * C3979 + C81012 * C4655) * C3422 -
                      ((C490 * C946 + C81012 * C1578) * C80933 +
                       (C490 * C748 + C81012 * C1358) * C3421) +
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81 +
                     (C4894 - (C4895 + C4896) + C4906) * C82) *
                        C81011 * C6894 +
                    (((C490 * C750 + C81012 * C1361) * C3421 +
                      (C490 * C947 + C81012 * C1579) * C80933 -
                      (C490 * C6140 + C81012 * C6656) * C3422 -
                      (C490 * C6324 + C81012 * C6821) * C80726) *
                         C81 +
                     (C8427 + C8428 - C8429 - C8433) * C82) *
                        C81011 * C6895 +
                    (((C490 * C8499 + C81012 * C8919) * C3422 -
                      ((C490 * C5772 + C81012 * C6060) * C80933 +
                       (C490 * C5659 + C81012 * C5964) * C3421) +
                      (C490 * C8643 + C81012 * C9057) * C80726) *
                         C81 +
                     ((C490 * C8500 + C81012 * C8920) * C3422 -
                      (C7490 * C80933 + C7340 * C3421) +
                      (C490 * C8644 + C81012 * C9058) * C80726) *
                         C82) *
                        C81011 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C80639 * C81003 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C744 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C737 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C743) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C738 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C745 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
              C81011 * C81012 * C80639 * C80988 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C743 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C737 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C744 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C738 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C745 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
              C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C94 +
          (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C83 -
          (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C95 -
          (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C84 +
          (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C96 +
          (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C85 -
          (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C97 -
          (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C86 +
          (C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C98 +
          (C92 * C114 + C81 * C121 + C93 * C116 + C82 * C122) * C87) *
         C81011 * C81012 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C81004 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C744 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C737 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C743) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C738 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C745 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C80954) *
              C81011 * C81012 * C80990 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C743 +
           (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C737 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C744 -
           (C93 * C1703 + C82 * C1712 + C92 * C1701 + C81 * C1711) * C738 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C745 +
           (C92 * C1703 + C81 * C1712 + C93 * C1705 + C82 * C1713) * C80954) *
              C81011 * C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C80639 * C4984 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C4988 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80998 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C4987) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80982 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C4989 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
              C81011 * C81012 * C80639 * C4985 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C4987 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80998 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C4988 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80982 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C4989 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
              C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
              C81011 * C81012 * C80639 * C5652 -
          ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
              C81011 * C81012 * C80639 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
              C81011 * C81012 * C80639 * C5654 -
          ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
              C81011 * C81012 * C80639 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5657 +
           (C92 * C5668 + C81 * C5672 + C93 * C5669 + C82 * C5673) * C80588) *
              C81011 * C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
               C81011 * C81012 * C81004 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80588 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5657) *
               C81011 * C81012 * C80990 +
           ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5657 +
            (C92 * C1700 + C81 * C1710 + C93 * C1701 + C82 * C1711) * C80588) *
               C81011 * C81012 * C80965) *
              C4984 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5657 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80588) *
               C81011 * C81012 * C80990 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
               C81011 * C81012 * C81004 -
           ((C93 * C6143 + C82 * C6155 + C92 * C6144 + C81 * C6156) * C80588 +
            (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5657) *
               C81011 * C81012 * C80965) *
              C4985 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
               C81011 * C81012 * C81004 -
           ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80588 +
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5657) *
               C81011 * C81012 * C80990 +
           ((C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C5657 +
            (C92 * C6153 + C81 * C6159 + C93 * C6154 + C82 * C6160) * C80588) *
               C81011 * C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C737 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C853 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81003 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C852) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80988 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C854 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
              C81011 * C81012 * C738 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C852 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C81003 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C853 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80988 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C854 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
              C81011 * C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
              C81011 * C81012 * C83 -
          ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
              C81011 * C81012 * C84 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
              C81011 * C81012 * C85 -
          ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
              C81011 * C81012 * C86 +
          ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C165 +
           (C92 * C170 + C81 * C176 + C93 * C171 + C82 * C177) * C80628) *
              C81011 * C81012 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C737 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C738 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C80954) *
              C81004 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C738 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C737 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C80954) *
              C80990 +
          (((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C165 +
            (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C80628) *
               C81011 * C81012 * C737 -
           ((C93 * C1794 + C82 * C1802 + C92 * C1793 + C81 * C1801) * C80628 +
            (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C165) *
               C81011 * C81012 * C738 +
           ((C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C165 +
            (C92 * C1794 + C81 * C1802 + C93 * C1795 + C82 * C1803) * C80628) *
               C81011 * C81012 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80998 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C5065 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C4984 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C5064) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C4985 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C5066 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
              C81011 * C81012 * C80982 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C5064 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C4984 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C5065 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C4985 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C5066 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
              C81011 * C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5716 +
          (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C5652 -
          (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5717 -
          (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C5653 +
          (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5718 +
          (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C5654 -
          (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5719 -
          (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C5655 +
          (C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5720 +
          (C92 * C5723 + C81 * C5727 + C93 * C5724 + C82 * C5728) * C5656) *
         C81011 * C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80588 * C81004 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5065 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C4984 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5064) +
           (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C4985 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5066 -
           (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
              C81011 * C81012 * C80588 * C80990 +
          ((C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C5064 +
           (C92 * C1792 + C81 * C1800 + C93 * C1793 + C82 * C1801) * C4984 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C5065 -
           (C93 * C6237 + C82 * C6243 + C92 * C6238 + C81 * C6244) * C4985 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C5066 +
           (C92 * C6239 + C81 * C6245 + C93 * C6240 + C82 * C6246) * C80962) *
              C81011 * C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C81003 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80988 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80962) *
              C737 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80988 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C81003 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80962) *
              C738 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C81003 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80988 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
              C81011 * C81012 * C80628 * C83 -
          ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
              C81011 * C81012 * C80628 * C84 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
              C81011 * C81012 * C80628 * C85 -
          ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
              C81011 * C81012 * C80628 * C86 +
          ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C220 +
           (C92 * C225 + C81 * C231 + C93 * C226 + C82 * C232) * C80639) *
              C81011 * C81012 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C1878 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C81004 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C1879 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80990 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C1880 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C737 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C1879 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C81004 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C1878) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80990 -
           (C93 * C1688 + C82 * C1702 + C92 * C1687 + C81 * C1699) * C1880 -
           (C93 * C1886 + C82 * C1894 + C92 * C1884 + C81 * C1892) * C80965) *
              C81011 * C81012 * C80628 * C738 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C1878 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C81004 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C1879 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80990 +
           (C92 * C1688 + C81 * C1702 + C93 * C1689 + C82 * C1704) * C1880 +
           (C92 * C1886 + C81 * C1894 + C93 * C1888 + C82 * C1896) * C80965) *
              C81011 * C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80962) *
              C80998 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C4985 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C4984 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80962) *
              C80982 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
              C81011 * C81012 * C5652 -
          ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
              C81011 * C81012 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
              C81011 * C81012 * C5654 -
          ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
              C81011 * C81012 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C220 +
           (C92 * C5773 + C81 * C5777 + C93 * C5774 + C82 * C5778) * C80639) *
              C81011 * C81012 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C1878 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C81004 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C1879 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80990 +
           (C92 * C1686 + C81 * C1698 + C93 * C1687 + C82 * C1699) * C1880 +
           (C92 * C1883 + C81 * C1891 + C93 * C1884 + C82 * C1892) * C80965) *
              C81011 * C81012 * C4984 +
          ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C1879 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C81004 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C1878) +
           (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80990 -
           (C93 * C6137 + C82 * C6145 + C92 * C6138 + C81 * C6146) * C1880 -
           (C93 * C6321 + C82 * C6327 + C92 * C6322 + C81 * C6328) * C80965) *
              C81011 * C81012 * C4985 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C1878 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C81004 -
           (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C1879 -
           (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80990 +
           (C92 * C6141 + C81 * C6151 + C93 * C6142 + C82 * C6152) * C1880 +
           (C92 * C6325 + C81 * C6331 + C93 * C6326 + C82 * C6332) * C80965) *
              C81011 * C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C743 +
                      (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                      C306 * C738 + C307 * C745 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C743 + C306 * C737 - C307 * C744 - C308 * C738 +
                      C309 * C745 + C310 * C80954) *
                         C81012 * C82) *
                        C80639 * C81003 +
                    ((C1068 * C744 -
                      ((C275 * C757 + C81011 * C1043) * C737 +
                       (C275 * C748 + C81011 * C1036) * C743) +
                      C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C744 - (C1069 * C737 + C1068 * C743) +
                      C1071 * C738 - (C275 * C749 + C81011 * C1038) * C745 -
                      (C275 * C761 + C81011 * C1046) * C80954) *
                         C81012 * C82) *
                        C80639 * C80988 +
                    (((C275 * C750 + C81011 * C1039) * C743 +
                      (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
                      C1073 * C738 + C1074 * C745 + C1075 * C80954) *
                         C81012 * C81 +
                     (C1072 * C743 + C1073 * C737 - C1074 * C744 -
                      C1075 * C738 + (C275 * C753 + C81011 * C1042) * C745 +
                      (C275 * C769 + C81011 * C1050) * C80954) *
                         C81012 * C82) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C275 * C99 + C81011 * C276) * C94 +
                     (C275 * C107 + C81011 * C282) * C83 - C305 * C95 -
                     C306 * C84 + C307 * C96 + C308 * C85 - C309 * C97 -
                     C310 * C86 + C311 * C98 + C312 * C87) *
                        C81012 * C81 +
                    (C305 * C94 + C306 * C83 - C307 * C95 - C308 * C84 +
                     C309 * C96 + C310 * C85 - C311 * C97 - C312 * C86 +
                     (C275 * C104 + C81011 * C281) * C98 +
                     (C275 * C116 + C81011 * C287) * C87) *
                        C81012 * C82) *
                   C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C743 +
                      (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                      C306 * C738 + C307 * C745 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C743 + C306 * C737 - C307 * C744 - C308 * C738 +
                      C309 * C745 + C310 * C80954) *
                         C81012 * C82) *
                        C81004 +
                    ((C2004 * C744 -
                      ((C275 * C1693 + C81011 * C1979) * C737 +
                       (C275 * C1684 + C81011 * C1972) * C743) +
                      C2005 * C738 - C2006 * C745 - C2007 * C80954) *
                         C81012 * C81 +
                     (C2006 * C744 - (C2005 * C737 + C2004 * C743) +
                      C2007 * C738 - (C275 * C1685 + C81011 * C1974) * C745 -
                      (C275 * C1697 + C81011 * C1982) * C80954) *
                         C81012 * C82) *
                        C80990 +
                    (((C275 * C1686 + C81011 * C1975) * C743 +
                      (C275 * C1700 + C81011 * C1983) * C737 - C2008 * C744 -
                      C2009 * C738 + C2010 * C745 + C2011 * C80954) *
                         C81012 * C81 +
                     (C2008 * C743 + C2009 * C737 - C2010 * C744 -
                      C2011 * C738 + (C275 * C1689 + C81011 * C1978) * C745 +
                      (C275 * C1705 + C81011 * C1986) * C80954) *
                         C81012 * C82) *
                        C80965) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C80639 * C4984 +
                    ((C1068 * C4988 -
                      ((C275 * C757 + C81011 * C1043) * C80998 +
                       (C275 * C748 + C81011 * C1036) * C4987) +
                      C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C4988 - (C1069 * C80998 + C1068 * C4987) +
                      C1071 * C80982 - C2832 * C4989 - C2833 * C80954) *
                         C81012 * C82) *
                        C80639 * C4985 +
                    (((C275 * C750 + C81011 * C1039) * C4987 +
                      (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
                      C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
                         C81012 * C81 +
                     (C1072 * C4987 + C1073 * C80998 - C1074 * C4988 -
                      C1075 * C80982 + (C275 * C753 + C81011 * C1042) * C4989 +
                      (C275 * C769 + C81011 * C1050) * C80954) *
                         C81012 * C82) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C80639 * C5652 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C80639 * C5653 +
                    (((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C81012 * C81 +
                     (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                        C80639 * C5654 -
                    (((C275 * C5662 + C81011 * C5825) * C80588 +
                      (C275 * C5658 + C81011 * C5821) * C5657) *
                         C81012 * C82 +
                     ((C275 * C5663 + C81011 * C5826) * C80588 +
                      (C275 * C5659 + C81011 * C5822) * C5657) *
                         C81012 * C81) *
                        C80639 * C5655 +
                    (((C275 * C5660 + C81011 * C5823) * C5657 +
                      (C275 * C5668 + C81011 * C5827) * C80588) *
                         C81012 * C81 +
                     ((C275 * C5661 + C81011 * C5824) * C5657 +
                      (C275 * C5669 + C81011 * C5828) * C80588) *
                         C81012 * C82) *
                        C80639 * C5656)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C81012 * C81 +
                      (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                         C81004 -
                     ((C2005 * C80588 + C2004 * C5657) * C81012 * C82 +
                      ((C275 * C1693 + C81011 * C1979) * C80588 +
                       (C275 * C1684 + C81011 * C1972) * C5657) *
                          C81012 * C81) *
                         C80990 +
                     (((C275 * C1686 + C81011 * C1975) * C5657 +
                       (C275 * C1700 + C81011 * C1983) * C80588) *
                          C81012 * C81 +
                      (C2008 * C5657 + C2009 * C80588) * C81012 * C82) *
                         C80965) *
                        C4984 +
                    ((((C275 * C3979 + C81011 * C4305) * C5657 +
                       (C275 * C3985 + C81011 * C4309) * C80588) *
                          C81012 * C81 +
                      (C4322 * C5657 + C4323 * C80588) * C81012 * C82) *
                         C80990 -
                     ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C81012 * C81) *
                         C81004 -
                     (((C275 * C6143 + C81011 * C6413) * C80588 +
                       (C275 * C6137 + C81011 * C6407) * C5657) *
                          C81012 * C82 +
                      ((C275 * C6144 + C81011 * C6414) * C80588 +
                       (C275 * C6138 + C81011 * C6408) * C5657) *
                          C81012 * C81) *
                         C80965) *
                        C4985 +
                    ((((C275 * C750 + C81011 * C1039) * C5657 +
                       (C275 * C764 + C81011 * C1047) * C80588) *
                          C81012 * C81 +
                      (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                         C81004 -
                     (((C275 * C6147 + C81011 * C6415) * C80588 +
                       (C275 * C6139 + C81011 * C6409) * C5657) *
                          C81012 * C82 +
                      ((C275 * C6148 + C81011 * C6416) * C80588 +
                       (C275 * C6140 + C81011 * C6410) * C5657) *
                          C81012 * C81) *
                         C80990 +
                     (((C275 * C6141 + C81011 * C6411) * C5657 +
                       (C275 * C6153 + C81011 * C6417) * C80588) *
                          C81012 * C81 +
                      ((C275 * C6142 + C81011 * C6412) * C5657 +
                       (C275 * C6154 + C81011 * C6418) * C80588) *
                          C81012 * C82) *
                         C80965) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
              C737 +
          ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C81012 * C81 +
           (C1166 - (C1167 + C1168) + C1180 - C1171 - C1181) * C81012 * C82) *
              C738 +
          ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C81012 * C81 +
           (C309 * C852 + C375 * C81003 -
            (C275 * C749 + C81011 * C1038) * C853 -
            (C275 * C861 + C81011 * C1155) * C80988 +
            (C275 * C753 + C81011 * C1042) * C854 +
            (C275 * C862 + C81011 * C1156) * C80962) *
               C81012 * C82) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C81012 * C81 +
           (C361 + C377) * C81012 * C82) *
              C83 -
          ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) * C84 +
          ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) * C85 -
          ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) * C86 +
          ((C372 + C380) * C81012 * C81 +
           ((C275 * C104 + C81011 * C281) * C165 +
            (C275 * C171 + C81011 * C359) * C80628) *
               C81012 * C82) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C737 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C738 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C80954) *
              C81004 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C738 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C737 -
           (((C275 * C1791 + C81011 * C2088) * C80628 +
             (C275 * C1685 + C81011 * C1974) * C165) *
                C81012 * C82 +
            (C2111 + C2097) * C81012 * C81) *
               C80954) *
              C80990 +
          ((((C275 * C1686 + C81011 * C1975) * C165 +
             (C275 * C1792 + C81011 * C2089) * C80628) *
                C81012 * C81 +
            (C2100 + C2112) * C81012 * C82) *
               C737 -
           ((C2113 + C2105) * C81012 * C82 + (C2112 + C2100) * C81012 * C81) *
               C738 +
           ((C2105 + C2113) * C81012 * C81 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C81012 * C82) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
              C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C81012 * C81 +
           (C5296 - (C5297 + C5298) + C5299 - C5300 - C5301) * C81012 * C82) *
              C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C81012 * C81 +
           (C309 * C5064 + C375 * C4984 - C2832 * C5065 - C2914 * C4985 +
            (C275 * C753 + C81011 * C1042) * C5066 +
            (C275 * C862 + C81011 * C1156) * C80962) *
               C81012 * C82) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C81012 * C81 +
          (C305 * C5716 + C373 * C5652 - C1068 * C5717 - C1174 * C5653 +
           C1072 * C5718 + C1175 * C5654 -
           (C275 * C5658 + C81011 * C5821) * C5719 -
           (C275 * C5721 + C81011 * C5873) * C5655 +
           (C275 * C5661 + C81011 * C5824) * C5720 +
           (C275 * C5724 + C81011 * C5874) * C5656) *
              C81012 * C82) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
              C80588 * C81004 +
          (((C275 * C3979 + C81011 * C4305) * C5065 -
            ((C275 * C1790 + C81011 * C2087) * C4984 +
             (C275 * C1684 + C81011 * C1972) * C5064) +
            (C275 * C4093 + C81011 * C4423) * C4985 -
            (C275 * C6140 + C81011 * C6410) * C5066 -
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C81012 * C81 +
           (C4322 * C5065 - (C2106 * C4984 + C2004 * C5064) + C4438 * C4985 -
            (C275 * C6139 + C81011 * C6409) * C5066 -
            (C275 * C6235 + C81011 * C6494) * C80962) *
               C81012 * C82) *
              C80588 * C80990 +
          (((C275 * C1686 + C81011 * C1975) * C5064 +
            (C275 * C1792 + C81011 * C2089) * C4984 -
            (C275 * C6138 + C81011 * C6408) * C5065 -
            (C275 * C6238 + C81011 * C6495) * C4985 +
            (C275 * C6141 + C81011 * C6411) * C5066 +
            (C275 * C6239 + C81011 * C6496) * C80962) *
               C81012 * C81 +
           (C2008 * C5064 + C2108 * C4984 -
            (C275 * C6137 + C81011 * C6407) * C5065 -
            (C275 * C6237 + C81011 * C6497) * C4985 +
            (C275 * C6142 + C81011 * C6412) * C5066 +
            (C275 * C6240 + C81011 * C6498) * C80962) *
               C81012 * C82) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C81003 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80988 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80962) *
              C737 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80988 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C81003 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80962) *
              C738 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C81003 -
           (((C275 * C951 + C81011 * C1261) * C80639 +
             (C275 * C749 + C81011 * C1038) * C220) *
                C81012 * C82 +
            (C1282 + C1270) * C81012 * C81) *
               C80988 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C81012 * C81 +
           (C429 + C445) * C81012 * C82) *
              C80628 * C83 -
          ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
              C80628 * C84 +
          ((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
              C80628 * C85 -
          ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
              C80628 * C86 +
          ((C440 + C448) * C81012 * C81 +
           ((C275 * C104 + C81011 * C281) * C220 +
            (C275 * C226 + C81011 * C427) * C80639) *
               C81012 * C82) *
              C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 -
            (C275 * C1684 + C81011 * C1972) * C1879 -
            (C275 * C1882 + C81011 * C2187) * C80990 +
            (C275 * C1686 + C81011 * C1975) * C1880 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C2196 + C2197 - C2198 - C2216 + C2201 + C2217) * C81012 * C82) *
              C80628 * C737 +
          ((C2198 - (C2197 + C2196) + C2216 - C2201 - C2217) * C81012 * C81 +
           (C2204 - (C2205 + C2206) + C2218 - C2209 - C2219) * C81012 * C82) *
              C80628 * C738 +
          ((C2206 + C2205 - C2204 - C2218 + C2209 + C2219) * C81012 * C81 +
           (C309 * C1878 + C443 * C81004 -
            (C275 * C1685 + C81011 * C1974) * C1879 -
            (C275 * C1887 + C81011 * C2193) * C80990 +
            (C275 * C1689 + C81011 * C1978) * C1880 +
            (C275 * C1888 + C81011 * C2194) * C80965) *
               C81012 * C82) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C4984 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80962) *
              C80998 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C4985 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C4984 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80962) *
              C80982 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C4984 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C4985 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C81012 * C81 +
           (C429 + C445) * C81012 * C82) *
              C5652 -
          ((C1280 + C1266) * C81012 * C82 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C81012 * C81) *
              C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C81012 * C81 +
           (C1267 + C1281) * C81012 * C82) *
              C5654 -
          (((C275 * C5771 + C81011 * C5917) * C80639 +
            (C275 * C5658 + C81011 * C5821) * C220) *
               C81012 * C82 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C81012 * C81) *
              C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C81012 * C81 +
           ((C275 * C5661 + C81011 * C5824) * C220 +
            (C275 * C5774 + C81011 * C5920) * C80639) *
               C81012 * C82) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 -
            (C275 * C1684 + C81011 * C1972) * C1879 -
            (C275 * C1882 + C81011 * C2187) * C80990 +
            (C275 * C1686 + C81011 * C1975) * C1880 +
            (C275 * C1883 + C81011 * C2188) * C80965) *
               C81012 * C81 +
           (C2196 + C2197 - C2198 - C2216 + C2201 + C2217) * C81012 * C82) *
              C4984 +
          (((C275 * C3979 + C81011 * C4305) * C1879 -
            ((C275 * C946 + C81011 * C1256) * C81004 +
             (C275 * C748 + C81011 * C1036) * C1878) +
            (C275 * C4199 + C81011 * C4539) * C80990 -
            (C275 * C6138 + C81011 * C6408) * C1880 -
            (C275 * C6322 + C81011 * C6573) * C80965) *
               C81012 * C81 +
           (C4322 * C1879 - (C1276 * C81004 + C1068 * C1878) + C4554 * C80990 -
            (C275 * C6137 + C81011 * C6407) * C1880 -
            (C275 * C6321 + C81011 * C6574) * C80965) *
               C81012 * C82) *
              C4985 +
          (((C275 * C750 + C81011 * C1039) * C1878 +
            (C275 * C947 + C81011 * C1257) * C81004 -
            (C275 * C6140 + C81011 * C6410) * C1879 -
            (C275 * C6324 + C81011 * C6575) * C80990 +
            (C275 * C6141 + C81011 * C6411) * C1880 +
            (C275 * C6325 + C81011 * C6576) * C80965) *
               C81012 * C81 +
           (C1072 * C1878 + C1277 * C81004 -
            (C275 * C6139 + C81011 * C6409) * C1879 -
            (C275 * C6323 + C81011 * C6577) * C80990 +
            (C275 * C6142 + C81011 * C6412) * C1880 +
            (C275 * C6326 + C81011 * C6578) * C80965) *
               C81012 * C82) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C743 +
                      (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                      C521 * C738 + C522 * C745 + C523 * C80954) *
                         C81 +
                     (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
                      C524 * C745 + C525 * C80954) *
                         C82) *
                        C81011 * C80639 * C81003 +
                    ((C1390 * C744 -
                      ((C490 * C757 + C81012 * C1365) * C737 +
                       (C490 * C748 + C81012 * C1358) * C743) +
                      C1391 * C738 - C1392 * C745 - C1393 * C80954) *
                         C81 +
                     (C1392 * C744 - (C1391 * C737 + C1390 * C743) +
                      C1393 * C738 - (C490 * C749 + C81012 * C1360) * C745 -
                      (C490 * C761 + C81012 * C1368) * C80954) *
                         C82) *
                        C81011 * C80639 * C80988 +
                    (((C490 * C750 + C81012 * C1361) * C743 +
                      (C490 * C764 + C81012 * C1369) * C737 - C1394 * C744 -
                      C1395 * C738 + C1396 * C745 + C1397 * C80954) *
                         C81 +
                     (C1394 * C743 + C1395 * C737 - C1396 * C744 -
                      C1397 * C738 + (C490 * C753 + C81012 * C1364) * C745 +
                      (C490 * C769 + C81012 * C1372) * C80954) *
                         C82) *
                        C81011 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C490 * C99 + C81012 * C491) * C94 +
                     (C490 * C107 + C81012 * C497) * C83 - C520 * C95 -
                     C521 * C84 + C522 * C96 + C523 * C85 - C524 * C97 -
                     C525 * C86 + C526 * C98 + C527 * C87) *
                        C81 +
                    (C520 * C94 + C521 * C83 - C522 * C95 - C523 * C84 +
                     C524 * C96 + C525 * C85 - C526 * C97 - C527 * C86 +
                     (C490 * C104 + C81012 * C496) * C98 +
                     (C490 * C116 + C81012 * C502) * C87) *
                        C82) *
                   C81011 * C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C743 +
                      (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                      C521 * C738 + C522 * C745 + C523 * C80954) *
                         C81 +
                     (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
                      C524 * C745 + C525 * C80954) *
                         C82) *
                        C81011 * C81004 +
                    ((C2326 * C744 -
                      ((C490 * C1693 + C81012 * C2301) * C737 +
                       (C490 * C1684 + C81012 * C2294) * C743) +
                      C2327 * C738 - C2328 * C745 - C2329 * C80954) *
                         C81 +
                     (C2328 * C744 - (C2327 * C737 + C2326 * C743) +
                      C2329 * C738 - (C490 * C1685 + C81012 * C2296) * C745 -
                      (C490 * C1697 + C81012 * C2304) * C80954) *
                         C82) *
                        C81011 * C80990 +
                    (((C490 * C1686 + C81012 * C2297) * C743 +
                      (C490 * C1700 + C81012 * C2305) * C737 - C2330 * C744 -
                      C2331 * C738 + C2332 * C745 + C2333 * C80954) *
                         C81 +
                     (C2330 * C743 + C2331 * C737 - C2332 * C744 -
                      C2333 * C738 + (C490 * C1689 + C81012 * C2300) * C745 +
                      (C490 * C1705 + C81012 * C2308) * C80954) *
                         C82) *
                        C81011 * C80965) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81 +
                     (C520 * C4987 + C521 * C80998 - C522 * C4988 -
                      C523 * C80982 + C524 * C4989 + C525 * C80954) *
                         C82) *
                        C81011 * C80639 * C4984 +
                    ((C1390 * C4988 -
                      ((C490 * C757 + C81012 * C1365) * C80998 +
                       (C490 * C748 + C81012 * C1358) * C4987) +
                      C1391 * C80982 - C1392 * C4989 - C1393 * C80954) *
                         C81 +
                     (C1392 * C4988 - (C1391 * C80998 + C1390 * C4987) +
                      C1393 * C80982 - C3060 * C4989 - C3061 * C80954) *
                         C82) *
                        C81011 * C80639 * C4985 +
                    (((C490 * C750 + C81012 * C1361) * C4987 +
                      (C490 * C764 + C81012 * C1369) * C80998 - C1394 * C4988 -
                      C1395 * C80982 + C1396 * C4989 + C1397 * C80954) *
                         C81 +
                     (C1394 * C4987 + C1395 * C80998 - C1396 * C4988 -
                      C1397 * C80982 + (C490 * C753 + C81012 * C1364) * C4989 +
                      (C490 * C769 + C81012 * C1372) * C80954) *
                         C82) *
                        C81011 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81 +
                     (C520 * C5657 + C521 * C80588) * C82) *
                        C81011 * C80639 * C5652 -
                    ((C1391 * C80588 + C1390 * C5657) * C82 +
                     ((C490 * C757 + C81012 * C1365) * C80588 +
                      (C490 * C748 + C81012 * C1358) * C5657) *
                         C81) *
                        C81011 * C80639 * C5653 +
                    (((C490 * C750 + C81012 * C1361) * C5657 +
                      (C490 * C764 + C81012 * C1369) * C80588) *
                         C81 +
                     (C1394 * C5657 + C1395 * C80588) * C82) *
                        C81011 * C80639 * C5654 -
                    (((C490 * C5662 + C81012 * C5967) * C80588 +
                      (C490 * C5658 + C81012 * C5963) * C5657) *
                         C82 +
                     ((C490 * C5663 + C81012 * C5968) * C80588 +
                      (C490 * C5659 + C81012 * C5964) * C5657) *
                         C81) *
                        C81011 * C80639 * C5655 +
                    (((C490 * C5660 + C81012 * C5965) * C5657 +
                      (C490 * C5668 + C81012 * C5969) * C80588) *
                         C81 +
                     ((C490 * C5661 + C81012 * C5966) * C5657 +
                      (C490 * C5669 + C81012 * C5970) * C80588) *
                         C82) *
                        C81011 * C80639 * C5656)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81 +
                      (C520 * C5657 + C521 * C80588) * C82) *
                         C81011 * C81004 -
                     ((C2327 * C80588 + C2326 * C5657) * C82 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81) *
                         C81011 * C80990 +
                     (((C490 * C1686 + C81012 * C2297) * C5657 +
                       (C490 * C1700 + C81012 * C2305) * C80588) *
                          C81 +
                      (C2330 * C5657 + C2331 * C80588) * C82) *
                         C81011 * C80965) *
                        C4984 +
                    ((((C490 * C3979 + C81012 * C4655) * C5657 +
                       (C490 * C3985 + C81012 * C4659) * C80588) *
                          C81 +
                      (C4672 * C5657 + C4673 * C80588) * C82) *
                         C81011 * C80990 -
                     ((C1391 * C80588 + C1390 * C5657) * C82 +
                      ((C490 * C757 + C81012 * C1365) * C80588 +
                       (C490 * C748 + C81012 * C1358) * C5657) *
                          C81) *
                         C81011 * C81004 -
                     (((C490 * C6143 + C81012 * C6659) * C80588 +
                       (C490 * C6137 + C81012 * C6653) * C5657) *
                          C82 +
                      ((C490 * C6144 + C81012 * C6660) * C80588 +
                       (C490 * C6138 + C81012 * C6654) * C5657) *
                          C81) *
                         C81011 * C80965) *
                        C4985 +
                    ((((C490 * C750 + C81012 * C1361) * C5657 +
                       (C490 * C764 + C81012 * C1369) * C80588) *
                          C81 +
                      (C1394 * C5657 + C1395 * C80588) * C82) *
                         C81011 * C81004 -
                     (((C490 * C6147 + C81012 * C6661) * C80588 +
                       (C490 * C6139 + C81012 * C6655) * C5657) *
                          C82 +
                      ((C490 * C6148 + C81012 * C6662) * C80588 +
                       (C490 * C6140 + C81012 * C6656) * C5657) *
                          C81) *
                         C81011 * C80990 +
                     (((C490 * C6141 + C81012 * C6657) * C5657 +
                       (C490 * C6153 + C81012 * C6663) * C80588) *
                          C81 +
                      ((C490 * C6142 + C81012 * C6658) * C5657 +
                       (C490 * C6154 + C81012 * C6664) * C80588) *
                          C82) *
                         C81011 * C80965) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 -
            (C490 * C748 + C81012 * C1358) * C853 -
            (C490 * C856 + C81012 * C1471) * C80988 +
            (C490 * C750 + C81012 * C1361) * C854 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
              C81011 * C737 +
          ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81 +
           (C1488 - (C1489 + C1490) + C1502 - C1493 - C1503) * C82) *
              C81011 * C738 +
          ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81 +
           (C524 * C852 + C590 * C81003 -
            (C490 * C749 + C81012 * C1360) * C853 -
            (C490 * C861 + C81012 * C1477) * C80988 +
            (C490 * C753 + C81012 * C1364) * C854 +
            (C490 * C862 + C81012 * C1478) * C80962) *
               C82) *
              C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81 +
           (C576 + C592) * C82) *
              C81011 * C83 -
          ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C84 +
          ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C85 -
          ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C86 +
          ((C587 + C595) * C81 + ((C490 * C104 + C81012 * C496) * C165 +
                                  (C490 * C171 + C81012 * C574) * C80628) *
                                     C82) *
              C81011 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C737 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C738 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C80954) *
              C81004 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C738 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C737 -
           (((C490 * C1791 + C81012 * C2410) * C80628 +
             (C490 * C1685 + C81012 * C2296) * C165) *
                C82 +
            (C2433 + C2419) * C81) *
               C81011 * C80954) *
              C80990 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81 +
            (C2422 + C2434) * C82) *
               C81011 * C737 -
           ((C2435 + C2427) * C82 + (C2434 + C2422) * C81) * C81011 * C738 +
           ((C2427 + C2435) * C81 + ((C490 * C1689 + C81012 * C2300) * C165 +
                                     (C490 * C1795 + C81012 * C2414) * C80628) *
                                        C82) *
               C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 -
            (C490 * C748 + C81012 * C1358) * C5065 -
            (C490 * C856 + C81012 * C1471) * C4985 +
            (C490 * C750 + C81012 * C1361) * C5066 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
              C81011 * C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C82) *
              C81011 * C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81 +
           (C524 * C5064 + C590 * C4984 - C3060 * C5065 - C3142 * C4985 +
            (C490 * C753 + C81012 * C1364) * C5066 +
            (C490 * C862 + C81012 * C1478) * C80962) *
               C82) *
              C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 -
           (C490 * C748 + C81012 * C1358) * C5717 -
           (C490 * C856 + C81012 * C1471) * C5653 +
           (C490 * C750 + C81012 * C1361) * C5718 +
           (C490 * C857 + C81012 * C1472) * C5654 -
           (C490 * C5659 + C81012 * C5964) * C5719 -
           (C490 * C5722 + C81012 * C6013) * C5655 +
           (C490 * C5660 + C81012 * C5965) * C5720 +
           (C490 * C5723 + C81012 * C6014) * C5656) *
              C81 +
          (C520 * C5716 + C588 * C5652 - C1390 * C5717 - C1496 * C5653 +
           C1394 * C5718 + C1497 * C5654 -
           (C490 * C5658 + C81012 * C5963) * C5719 -
           (C490 * C5721 + C81012 * C6015) * C5655 +
           (C490 * C5661 + C81012 * C5966) * C5720 +
           (C490 * C5724 + C81012 * C6016) * C5656) *
              C82) *
         C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 -
            (C490 * C748 + C81012 * C1358) * C5065 -
            (C490 * C856 + C81012 * C1471) * C4985 +
            (C490 * C750 + C81012 * C1361) * C5066 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
              C81011 * C80588 * C81004 +
          (((C490 * C3979 + C81012 * C4655) * C5065 -
            ((C490 * C1790 + C81012 * C2409) * C4984 +
             (C490 * C1684 + C81012 * C2294) * C5064) +
            (C490 * C4093 + C81012 * C4773) * C4985 -
            (C490 * C6140 + C81012 * C6656) * C5066 -
            (C490 * C6236 + C81012 * C6739) * C80962) *
               C81 +
           (C4672 * C5065 - (C2428 * C4984 + C2326 * C5064) + C4788 * C4985 -
            (C490 * C6139 + C81012 * C6655) * C5066 -
            (C490 * C6235 + C81012 * C6740) * C80962) *
               C82) *
              C81011 * C80588 * C80990 +
          (((C490 * C1686 + C81012 * C2297) * C5064 +
            (C490 * C1792 + C81012 * C2411) * C4984 -
            (C490 * C6138 + C81012 * C6654) * C5065 -
            (C490 * C6238 + C81012 * C6741) * C4985 +
            (C490 * C6141 + C81012 * C6657) * C5066 +
            (C490 * C6239 + C81012 * C6742) * C80962) *
               C81 +
           (C2330 * C5064 + C2430 * C4984 -
            (C490 * C6137 + C81012 * C6653) * C5065 -
            (C490 * C6237 + C81012 * C6743) * C4985 +
            (C490 * C6142 + C81012 * C6658) * C5066 +
            (C490 * C6240 + C81012 * C6744) * C80962) *
               C82) *
              C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C81003 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80988 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80962) *
              C737 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80988 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C81003 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80962) *
              C738 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C81003 -
           (((C490 * C951 + C81012 * C1583) * C80639 +
             (C490 * C749 + C81012 * C1360) * C220) *
                C82 +
            (C1604 + C1592) * C81) *
               C81011 * C80988 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81 +
           (C644 + C660) * C82) *
              C81011 * C80628 * C83 -
          ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C80628 * C84 +
          ((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C80628 * C85 -
          ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C80628 * C86 +
          ((C655 + C663) * C81 + ((C490 * C104 + C81012 * C496) * C220 +
                                  (C490 * C226 + C81012 * C642) * C80639) *
                                     C82) *
              C81011 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C2518 + C2519 - C2520 - C2538 + C2523 + C2539) * C82) *
              C81011 * C80628 * C737 +
          ((C2520 - (C2519 + C2518) + C2538 - C2523 - C2539) * C81 +
           (C2526 - (C2527 + C2528) + C2540 - C2531 - C2541) * C82) *
              C81011 * C80628 * C738 +
          ((C2528 + C2527 - C2526 - C2540 + C2531 + C2541) * C81 +
           (C524 * C1878 + C658 * C81004 -
            (C490 * C1685 + C81012 * C2296) * C1879 -
            (C490 * C1887 + C81012 * C2515) * C80990 +
            (C490 * C1689 + C81012 * C2300) * C1880 +
            (C490 * C1888 + C81012 * C2516) * C80965) *
               C82) *
              C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C4984 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C4985 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80962) *
              C80998 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C4985 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C4984 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80962) *
              C80982 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C4984 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C4985 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81 +
           (C644 + C660) * C82) *
              C81011 * C5652 -
          ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                    (C490 * C748 + C81012 * C1358) * C220) *
                                       C81) *
              C81011 * C5653 +
          (((C490 * C750 + C81012 * C1361) * C220 +
            (C490 * C947 + C81012 * C1579) * C80639) *
               C81 +
           (C1589 + C1603) * C82) *
              C81011 * C5654 -
          (((C490 * C5771 + C81012 * C6059) * C80639 +
            (C490 * C5658 + C81012 * C5963) * C220) *
               C82 +
           ((C490 * C5772 + C81012 * C6060) * C80639 +
            (C490 * C5659 + C81012 * C5964) * C220) *
               C81) *
              C81011 * C5655 +
          (((C490 * C5660 + C81012 * C5965) * C220 +
            (C490 * C5773 + C81012 * C6061) * C80639) *
               C81 +
           ((C490 * C5661 + C81012 * C5966) * C220 +
            (C490 * C5774 + C81012 * C6062) * C80639) *
               C82) *
              C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81 +
           (C2518 + C2519 - C2520 - C2538 + C2523 + C2539) * C82) *
              C81011 * C4984 +
          (((C490 * C3979 + C81012 * C4655) * C1879 -
            ((C490 * C946 + C81012 * C1578) * C81004 +
             (C490 * C748 + C81012 * C1358) * C1878) +
            (C490 * C4199 + C81012 * C4889) * C80990 -
            (C490 * C6138 + C81012 * C6654) * C1880 -
            (C490 * C6322 + C81012 * C6819) * C80965) *
               C81 +
           (C4672 * C1879 - (C1598 * C81004 + C1390 * C1878) + C4904 * C80990 -
            (C490 * C6137 + C81012 * C6653) * C1880 -
            (C490 * C6321 + C81012 * C6820) * C80965) *
               C82) *
              C81011 * C4985 +
          (((C490 * C750 + C81012 * C1361) * C1878 +
            (C490 * C947 + C81012 * C1579) * C81004 -
            (C490 * C6140 + C81012 * C6656) * C1879 -
            (C490 * C6324 + C81012 * C6821) * C80990 +
            (C490 * C6141 + C81012 * C6657) * C1880 +
            (C490 * C6325 + C81012 * C6822) * C80965) *
               C81 +
           (C1394 * C1878 + C1599 * C81004 -
            (C490 * C6139 + C81012 * C6655) * C1879 -
            (C490 * C6323 + C81012 * C6823) * C80990 +
            (C490 * C6142 + C81012 * C6658) * C1880 +
            (C490 * C6326 + C81012 * C6824) * C80965) *
               C82) *
              C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C2613 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C2607 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C2614 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C2608 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C2615 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C2609 -
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C2616 -
           (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C80966) *
              C81011 * C81012 * C80933 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C2614 -
           ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C2607 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C2613) +
           (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C2608 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C2615 -
           (C93 * C1697 + C82 * C1709 + C92 * C1695 + C81 * C1708) * C2609 +
           (C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C2616 +
           (C92 * C1697 + C81 * C1709 + C93 * C3285 + C82 * C3286) * C80966) *
              C81011 * C81012 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C78279 +
            (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80916 -
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C78260 -
            (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C78260 -
            ((C93 * C1692 + C82 * C1706 + C92 * C1693 + C81 * C1707) * C80916 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C78279) +
            (C92 * C1692 + C81 * C1706 + C93 * C1695 + C82 * C1708) * C80598) *
               C81011 * C81012 * C80726) *
              C4984 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C78260 -
            ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80916 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C78279) +
            (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C78279 +
            (C92 * C3985 + C81 * C3991 + C93 * C3986 + C82 * C3992) * C80916 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C78260 -
            (C93 * C3988 + C82 * C3993 + C92 * C3986 + C81 * C3992) * C80598) *
               C81011 * C81012 * C80726) *
              C4985 +
          (((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C78279 +
            (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80916 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C78260 -
            (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80598) *
               C81011 * C81012 * C80933 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C78260 -
            ((C93 * C6147 + C82 * C6157 + C92 * C6148 + C81 * C6158) * C80916 +
             (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C78279) +
            (C92 * C6147 + C81 * C6157 + C93 * C7591 + C82 * C7592) * C80598) *
               C81011 * C81012 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
               C81011 * C81012 * C2607 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
               C81011 * C81012 * C2608 +
           ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
            (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
               C81011 * C81012 * C2609 -
           ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
               C81011 * C81012 * C80966) *
              C80933 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C165 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C80628) *
               C81011 * C81012 * C2608 -
           ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C80628 +
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C165) *
               C81011 * C81012 * C2607 -
           ((C93 * C1791 + C82 * C1799 + C92 * C1789 + C81 * C1797) * C80628 +
            (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C165) *
               C81011 * C81012 * C2609 +
           ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C165 +
            (C92 * C1791 + C81 * C1799 + C93 * C3353 + C82 * C3354) * C80628) *
               C81011 * C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
            (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
            (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
            (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
            (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
               C81011 * C81012 * C80916 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C5065 -
            ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C4984 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C5064) +
            (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C4985 -
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C5066 -
            (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
               C81011 * C81012 * C80598) *
              C80933 +
          (((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C5065 -
            ((C93 * C1788 + C82 * C1796 + C92 * C1790 + C81 * C1798) * C4984 +
             (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C5064) +
            (C92 * C4093 + C81 * C4097 + C93 * C4094 + C82 * C4098) * C4985 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C5066 -
            (C93 * C6235 + C82 * C6241 + C92 * C6236 + C81 * C6242) * C80962) *
               C81011 * C81012 * C80916 +
           ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C5064 +
            (C92 * C1788 + C81 * C1796 + C93 * C1789 + C82 * C1797) * C4984 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C5065 -
            (C93 * C4095 + C82 * C4099 + C92 * C4094 + C81 * C4098) * C4985 +
            (C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C5066 +
            (C92 * C6235 + C81 * C6241 + C93 * C7691 + C82 * C7692) * C80962) *
               C81011 * C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
           (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
           (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
              C81011 * C81012 * C80628 * C2607 +
          ((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
           (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C2608 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C3421 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80933 -
           (C93 * C1685 + C82 * C1696 + C92 * C1683 + C81 * C1691) * C3422 -
           (C93 * C1887 + C82 * C1895 + C92 * C1885 + C81 * C1893) * C80726) *
              C81011 * C81012 * C80628 * C2609 +
          ((C92 * C1685 + C81 * C1696 + C93 * C3283 + C82 * C3284) * C3422 -
           ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80933 +
            (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C3421) +
           (C92 * C1887 + C81 * C1895 + C93 * C3423 + C82 * C3424) * C80726) *
              C81011 * C81012 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C3421 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80933 -
            (C93 * C1682 + C82 * C1690 + C92 * C1684 + C81 * C1694) * C3422 -
            (C93 * C1881 + C82 * C1889 + C92 * C1882 + C81 * C1890) * C80726) *
               C81011 * C81012 * C4984 +
           ((C92 * C3979 + C81 * C3983 + C93 * C3980 + C82 * C3984) * C3422 -
            ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80933 +
             (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C3421) +
            (C92 * C4199 + C81 * C4203 + C93 * C4200 + C82 * C4204) * C80726) *
               C81011 * C81012 * C4985 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C3421 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80933 -
            (C93 * C6139 + C82 * C6149 + C92 * C6140 + C81 * C6150) * C3422 -
            (C93 * C6323 + C82 * C6329 + C92 * C6324 + C81 * C6330) * C80726) *
               C81011 * C81012 * C80962) *
              C80916 +
          (((C92 * C1682 + C81 * C1690 + C93 * C1683 + C82 * C1691) * C3422 -
            ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80933 +
             (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C3421) +
            (C92 * C1881 + C81 * C1889 + C93 * C1885 + C82 * C1893) * C80726) *
               C81011 * C81012 * C4984 +
           ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C3421 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80933 -
            (C93 * C3981 + C82 * C3987 + C92 * C3980 + C81 * C3984) * C3422 -
            (C93 * C4201 + C82 * C4205 + C92 * C4200 + C81 * C4204) * C80726) *
               C81011 * C81012 * C4985 +
           ((C92 * C6139 + C81 * C6149 + C93 * C7589 + C82 * C7590) * C3422 -
            ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80933 +
             (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C3421) +
            (C92 * C6323 + C81 * C6329 + C93 * C7791 + C82 * C7792) * C80726) *
               C81011 * C81012 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2613 +
            (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
            C306 * C2608 + C307 * C2615 + C308 * C2609 - C309 * C2616 -
            C310 * C80966) *
               C81012 * C81 +
           (C305 * C2613 + C306 * C2607 - C307 * C2614 - C308 * C2608 +
            C309 * C2615 + C310 * C2609 - C311 * C2616 - C312 * C80966) *
               C81012 * C82) *
              C80933 +
          ((C2004 * C2614 -
            ((C275 * C1693 + C81011 * C1979) * C2607 +
             (C275 * C1684 + C81011 * C1972) * C2613) +
            C2005 * C2608 - C2006 * C2615 - C2007 * C2609 + C3498 * C2616 +
            C3499 * C80966) *
               C81012 * C81 +
           (C2006 * C2614 - (C2005 * C2607 + C2004 * C2613) + C2007 * C2608 -
            C3498 * C2615 - C3499 * C2609 +
            (C275 * C3283 + C81011 * C3491) * C2616 +
            (C275 * C3285 + C81011 * C3492) * C80966) *
               C81012 * C82) *
              C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78279 +
             (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
             C306 * C80598) *
                C81012 * C81 +
            (C305 * C78279 + C306 * C80916 - C307 * C78260 - C308 * C80598) *
                C81012 * C82) *
               C80933 +
           ((C2004 * C78260 -
             ((C275 * C1693 + C81011 * C1979) * C80916 +
              (C275 * C1684 + C81011 * C1972) * C78279) +
             C2005 * C80598) *
                C81012 * C81 +
            (C2006 * C78260 - (C2005 * C80916 + C2004 * C78279) +
             C2007 * C80598) *
                C81012 * C82) *
               C80726) *
              C4984 +
          (((C1068 * C78260 -
             ((C275 * C757 + C81011 * C1043) * C80916 +
              (C275 * C748 + C81011 * C1036) * C78279) +
             C1069 * C80598) *
                C81012 * C81 +
            (C1070 * C78260 - (C1069 * C80916 + C1068 * C78279) +
             C1071 * C80598) *
                C81012 * C82) *
               C80933 +
           (((C275 * C3979 + C81011 * C4305) * C78279 +
             (C275 * C3985 + C81011 * C4309) * C80916 - C4322 * C78260 -
             C4323 * C80598) *
                C81012 * C81 +
            (C4322 * C78279 + C4323 * C80916 - C4324 * C78260 -
             C4325 * C80598) *
                C81012 * C82) *
               C80726) *
              C4985 +
          ((((C275 * C750 + C81011 * C1039) * C78279 +
             (C275 * C764 + C81011 * C1047) * C80916 - C1072 * C78260 -
             C1073 * C80598) *
                C81012 * C81 +
            (C1072 * C78279 + C1073 * C80916 - C1074 * C78260 -
             C1075 * C80598) *
                C81012 * C82) *
               C80933 +
           ((C7898 * C78260 -
             ((C275 * C6148 + C81011 * C6416) * C80916 +
              (C275 * C6140 + C81011 * C6410) * C78279) +
             C7899 * C80598) *
                C81012 * C81 +
            ((C275 * C7589 + C81011 * C7891) * C78260 -
             (C7899 * C80916 + C7898 * C78279) +
             (C275 * C7591 + C81011 * C7892) * C80598) *
                C81012 * C82) *
               C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C81012 * C81 +
            (C361 + C377) * C81012 * C82) *
               C2607 -
           ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) *
               C2608 +
           ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) *
               C2609 -
           ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) *
               C80966) *
              C80933 +
          (((C2094 + C2110) * C81012 * C81 + (C2097 + C2111) * C81012 * C82) *
               C2608 -
           ((C2110 + C2094) * C81012 * C82 +
            ((C275 * C1790 + C81011 * C2087) * C80628 +
             (C275 * C1684 + C81011 * C1972) * C165) *
                C81012 * C81) *
               C2607 -
           ((C3571 + C3569) * C81012 * C82 + (C2111 + C2097) * C81012 * C81) *
               C2609 +
           ((C3569 + C3571) * C81012 * C81 +
            ((C275 * C3283 + C81011 * C3491) * C165 +
             (C275 * C3353 + C81011 * C3565) * C80628) *
                C81012 * C82) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5064 +
             (C275 * C166 + C81011 * C354) * C4984 -
             (C275 * C748 + C81011 * C1036) * C5065 -
             (C275 * C856 + C81011 * C1149) * C4985 +
             (C275 * C750 + C81011 * C1039) * C5066 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C81012 * C81 +
            (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
               C80916 +
           ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C81012 * C81 +
            (C5296 - (C5297 + C5298) + C5299 - C5300 - C5301) * C81012 * C82) *
               C80598) *
              C80933 +
          ((((C275 * C3979 + C81011 * C4305) * C5065 -
             ((C275 * C1790 + C81011 * C2087) * C4984 +
              (C275 * C1684 + C81011 * C1972) * C5064) +
             (C275 * C4093 + C81011 * C4423) * C4985 -
             (C275 * C6140 + C81011 * C6410) * C5066 -
             (C275 * C6236 + C81011 * C6493) * C80962) *
                C81012 * C81 +
            (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C81012 * C82) *
               C80916 +
           ((C8001 + C8000 - C7999 - C8002 + C8003 + C8007) * C81012 * C81 +
            (C2006 * C5064 + C2107 * C4984 - C4324 * C5065 - C4439 * C4985 +
             (C275 * C7589 + C81011 * C7891) * C5066 +
             (C275 * C7691 + C81011 * C7997) * C80962) *
                C81012 * C82) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C3421 +
                      (C275 * C221 + C81011 * C422) * C80933 -
                      (C275 * C1684 + C81011 * C1972) * C3422 -
                      (C275 * C1882 + C81011 * C2187) * C80726) *
                         C81012 * C81 +
                     (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                        C80628 * C2607 +
                    ((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                     (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                        C80628 * C2608 +
                    ((C3645 + C3644 - C3643 - C3646) * C81012 * C81 +
                     (C3647 + C3648 - C3649 - C3653) * C81012 * C82) *
                        C80628 * C2609 +
                    ((C3649 - (C3648 + C3647) + C3653) * C81012 * C81 +
                     ((C275 * C3283 + C81011 * C3491) * C3422 -
                      (C444 * C80933 + C311 * C3421) +
                      (C275 * C3423 + C81011 * C3637) * C80726) *
                         C81012 * C82) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C3421 +
                       (C275 * C221 + C81011 * C422) * C80933 -
                       (C275 * C1684 + C81011 * C1972) * C3422 -
                       (C275 * C1882 + C81011 * C2187) * C80726) *
                          C81012 * C81 +
                      (C3639 + C3640 - C3641 - C3642) * C81012 * C82) *
                         C4984 +
                     (((C275 * C3979 + C81011 * C4305) * C3422 -
                       ((C275 * C946 + C81011 * C1256) * C80933 +
                        (C275 * C748 + C81011 * C1036) * C3421) +
                       (C275 * C4199 + C81011 * C4539) * C80726) *
                          C81012 * C81 +
                      (C4544 - (C4545 + C4546) + C4556) * C81012 * C82) *
                         C4985 +
                     (((C275 * C750 + C81011 * C1039) * C3421 +
                       (C275 * C947 + C81011 * C1257) * C80933 -
                       (C275 * C6140 + C81011 * C6410) * C3422 -
                       (C275 * C6324 + C81011 * C6575) * C80726) *
                          C81012 * C81 +
                      (C8107 + C8108 - C8109 - C8113) * C81012 * C82) *
                         C80962) *
                        C80916 +
                    (((C3641 - (C3640 + C3639) + C3642) * C81012 * C81 +
                      (C3643 - (C3644 + C3645) + C3646) * C81012 * C82) *
                         C4984 +
                     ((C4546 + C4545 - C4544 - C4556) * C81012 * C81 +
                      (C4549 + C4550 - C4551 - C4557) * C81012 * C82) *
                         C4985 +
                     ((C8109 - (C8108 + C8107) + C8113) * C81012 * C81 +
                      ((C275 * C7589 + C81011 * C7891) * C3422 -
                       (C1279 * C80933 + C1074 * C3421) +
                       (C275 * C7791 + C81011 * C8105) * C80726) *
                          C81012 * C82) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2613 +
            (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
            C521 * C2608 + C522 * C2615 + C523 * C2609 - C524 * C2616 -
            C525 * C80966) *
               C81 +
           (C520 * C2613 + C521 * C2607 - C522 * C2614 - C523 * C2608 +
            C524 * C2615 + C525 * C2609 - C526 * C2616 - C527 * C80966) *
               C82) *
              C81011 * C80933 +
          ((C2326 * C2614 -
            ((C490 * C1693 + C81012 * C2301) * C2607 +
             (C490 * C1684 + C81012 * C2294) * C2613) +
            C2327 * C2608 - C2328 * C2615 - C2329 * C2609 + C3726 * C2616 +
            C3727 * C80966) *
               C81 +
           (C2328 * C2614 - (C2327 * C2607 + C2326 * C2613) + C2329 * C2608 -
            C3726 * C2615 - C3727 * C2609 +
            (C490 * C3283 + C81012 * C3719) * C2616 +
            (C490 * C3285 + C81012 * C3720) * C80966) *
               C82) *
              C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78279 +
             (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
             C521 * C80598) *
                C81 +
            (C520 * C78279 + C521 * C80916 - C522 * C78260 - C523 * C80598) *
                C82) *
               C81011 * C80933 +
           ((C2326 * C78260 -
             ((C490 * C1693 + C81012 * C2301) * C80916 +
              (C490 * C1684 + C81012 * C2294) * C78279) +
             C2327 * C80598) *
                C81 +
            (C2328 * C78260 - (C2327 * C80916 + C2326 * C78279) +
             C2329 * C80598) *
                C82) *
               C81011 * C80726) *
              C4984 +
          (((C1390 * C78260 -
             ((C490 * C757 + C81012 * C1365) * C80916 +
              (C490 * C748 + C81012 * C1358) * C78279) +
             C1391 * C80598) *
                C81 +
            (C1392 * C78260 - (C1391 * C80916 + C1390 * C78279) +
             C1393 * C80598) *
                C82) *
               C81011 * C80933 +
           (((C490 * C3979 + C81012 * C4655) * C78279 +
             (C490 * C3985 + C81012 * C4659) * C80916 - C4672 * C78260 -
             C4673 * C80598) *
                C81 +
            (C4672 * C78279 + C4673 * C80916 - C4674 * C78260 -
             C4675 * C80598) *
                C82) *
               C81011 * C80726) *
              C4985 +
          ((((C490 * C750 + C81012 * C1361) * C78279 +
             (C490 * C764 + C81012 * C1369) * C80916 - C1394 * C78260 -
             C1395 * C80598) *
                C81 +
            (C1394 * C78279 + C1395 * C80916 - C1396 * C78260 -
             C1397 * C80598) *
                C82) *
               C81011 * C80933 +
           ((C8218 * C78260 -
             ((C490 * C6148 + C81012 * C6662) * C80916 +
              (C490 * C6140 + C81012 * C6656) * C78279) +
             C8219 * C80598) *
                C81 +
            ((C490 * C7589 + C81012 * C8211) * C78260 -
             (C8219 * C80916 + C8218 * C78279) +
             (C490 * C7591 + C81012 * C8212) * C80598) *
                C82) *
               C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81 +
            (C576 + C592) * C82) *
               C81011 * C2607 -
           ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C2608 +
           ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C2609 -
           ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C80966) *
              C80933 +
          (((C2416 + C2432) * C81 + (C2419 + C2433) * C82) * C81011 * C2608 -
           ((C2432 + C2416) * C82 + ((C490 * C1790 + C81012 * C2409) * C80628 +
                                     (C490 * C1684 + C81012 * C2294) * C165) *
                                        C81) *
               C81011 * C2607 -
           ((C3799 + C3797) * C82 + (C2433 + C2419) * C81) * C81011 * C2609 +
           ((C3797 + C3799) * C81 + ((C490 * C3283 + C81012 * C3719) * C165 +
                                     (C490 * C3353 + C81012 * C3793) * C80628) *
                                        C82) *
               C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5064 +
             (C490 * C166 + C81012 * C569) * C4984 -
             (C490 * C748 + C81012 * C1358) * C5065 -
             (C490 * C856 + C81012 * C1471) * C4985 +
             (C490 * C750 + C81012 * C1361) * C5066 +
             (C490 * C857 + C81012 * C1472) * C80962) *
                C81 +
            (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
               C81011 * C80916 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81 +
            (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C82) *
               C81011 * C80598) *
              C80933 +
          ((((C490 * C3979 + C81012 * C4655) * C5065 -
             ((C490 * C1790 + C81012 * C2409) * C4984 +
              (C490 * C1684 + C81012 * C2294) * C5064) +
             (C490 * C4093 + C81012 * C4773) * C4985 -
             (C490 * C6140 + C81012 * C6656) * C5066 -
             (C490 * C6236 + C81012 * C6739) * C80962) *
                C81 +
            (C8319 - (C8320 + C8321) + C8322 - C8323 - C8327) * C82) *
               C81011 * C80916 +
           ((C8321 + C8320 - C8319 - C8322 + C8323 + C8327) * C81 +
            (C2328 * C5064 + C2429 * C4984 - C4674 * C5065 - C4789 * C4985 +
             (C490 * C7589 + C81012 * C8211) * C5066 +
             (C490 * C7691 + C81012 * C8317) * C80962) *
                C82) *
               C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81 +
                     (C3867 + C3868 - C3869 - C3870) * C82) *
                        C81011 * C80628 * C2607 +
                    ((C3869 - (C3868 + C3867) + C3870) * C81 +
                     (C3871 - (C3872 + C3873) + C3874) * C82) *
                        C81011 * C80628 * C2608 +
                    ((C3873 + C3872 - C3871 - C3874) * C81 +
                     (C3875 + C3876 - C3877 - C3881) * C82) *
                        C81011 * C80628 * C2609 +
                    ((C3877 - (C3876 + C3875) + C3881) * C81 +
                     ((C490 * C3283 + C81012 * C3719) * C3422 -
                      (C659 * C80933 + C526 * C3421) +
                      (C490 * C3423 + C81012 * C3865) * C80726) *
                         C82) *
                        C81011 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81 +
                      (C3867 + C3868 - C3869 - C3870) * C82) *
                         C81011 * C4984 +
                     (((C490 * C3979 + C81012 * C4655) * C3422 -
                       ((C490 * C946 + C81012 * C1578) * C80933 +
                        (C490 * C748 + C81012 * C1358) * C3421) +
                       (C490 * C4199 + C81012 * C4889) * C80726) *
                          C81 +
                      (C4894 - (C4895 + C4896) + C4906) * C82) *
                         C81011 * C4985 +
                     (((C490 * C750 + C81012 * C1361) * C3421 +
                       (C490 * C947 + C81012 * C1579) * C80933 -
                       (C490 * C6140 + C81012 * C6656) * C3422 -
                       (C490 * C6324 + C81012 * C6821) * C80726) *
                          C81 +
                      (C8427 + C8428 - C8429 - C8433) * C82) *
                         C81011 * C80962) *
                        C80916 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81 +
                      (C3871 - (C3872 + C3873) + C3874) * C82) *
                         C81011 * C4984 +
                     ((C4896 + C4895 - C4894 - C4906) * C81 +
                      (C4899 + C4900 - C4901 - C4907) * C82) *
                         C81011 * C4985 +
                     ((C8429 - (C8428 + C8427) + C8433) * C81 +
                      ((C490 * C7589 + C81012 * C8211) * C3422 -
                       (C1601 * C80933 + C1396 * C3421) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C82) *
                         C81011 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C94 +
          (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C83 -
          (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C95 -
          (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C84 +
          (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C96 +
          (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C85 -
          (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C97 -
          (C93 * C114 + C82 * C121 + C92 * C112 + C81 * C120) * C86 +
          (C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C98 +
          (C92 * C114 + C81 * C121 + C93 * C116 + C82 * C122) * C87) *
         C81011 * C81012 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C743 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C737 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C744 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C738 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C745 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C80639 * C81003 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C744 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C737 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C743) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C738 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C745 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
              C81011 * C81012 * C80639 * C80988 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C743 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C737 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C744 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C738 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C745 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
              C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C4987 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80998 -
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C4988 -
           (C93 * C110 + C82 * C119 + C92 * C108 + C81 * C118) * C80982 +
           (C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C4989 +
           (C92 * C110 + C81 * C119 + C93 * C112 + C82 * C120) * C80954) *
              C81011 * C81012 * C80639 * C4984 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C4988 -
           ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80998 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C4987) +
           (C92 * C756 + C81 * C770 + C93 * C759 + C82 * C772) * C80982 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C4989 -
           (C93 * C761 + C82 * C773 + C92 * C759 + C81 * C772) * C80954) *
              C81011 * C81012 * C80639 * C4985 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C4987 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80998 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C4988 -
           (C93 * C767 + C82 * C776 + C92 * C765 + C81 * C775) * C80982 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C4989 +
           (C92 * C767 + C81 * C776 + C93 * C769 + C82 * C777) * C80954) *
              C81011 * C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5657 +
           (C92 * C107 + C81 * C117 + C93 * C108 + C82 * C118) * C80588) *
              C81011 * C81012 * C80639 * C5652 -
          ((C93 * C756 + C82 * C770 + C92 * C757 + C81 * C771) * C80588 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5657) *
              C81011 * C81012 * C80639 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5657 +
           (C92 * C764 + C81 * C774 + C93 * C765 + C82 * C775) * C80588) *
              C81011 * C81012 * C80639 * C5654 -
          ((C93 * C5662 + C82 * C5670 + C92 * C5663 + C81 * C5671) * C80588 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5657) *
              C81011 * C81012 * C80639 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5657 +
           (C92 * C5668 + C81 * C5672 + C93 * C5669 + C82 * C5673) * C80588) *
              C81011 * C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C165 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C80628) *
              C81011 * C81012 * C83 -
          ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C80628 +
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C165) *
              C81011 * C81012 * C84 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C165 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C80628) *
              C81011 * C81012 * C85 -
          ((C93 * C170 + C82 * C176 + C92 * C169 + C81 * C175) * C80628 +
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C165) *
              C81011 * C81012 * C86 +
          ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C165 +
           (C92 * C170 + C81 * C176 + C93 * C171 + C82 * C177) * C80628) *
              C81011 * C81012 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C852 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C81003 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C853 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C80988 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C854 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C737 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C853 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C81003 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C852) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C80988 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C854 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
              C81011 * C81012 * C738 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C852 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C81003 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C853 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C80988 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C854 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
              C81011 * C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5064 +
           (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C4984 -
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5065 -
           (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C4985 +
           (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5066 +
           (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C80962) *
              C81011 * C81012 * C80998 +
          ((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C5065 -
           ((C93 * C168 + C82 * C174 + C92 * C167 + C81 * C173) * C4984 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C5064) +
           (C92 * C855 + C81 * C863 + C93 * C859 + C82 * C867) * C4985 -
           (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C5066 -
           (C93 * C860 + C82 * C868 + C92 * C858 + C81 * C866) * C80962) *
              C81011 * C81012 * C80982 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C5064 +
           (C92 * C168 + C81 * C174 + C93 * C169 + C82 * C175) * C4984 -
           (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C5065 -
           (C93 * C861 + C82 * C869 + C92 * C859 + C81 * C867) * C4985 +
           (C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C5066 +
           (C92 * C860 + C81 * C868 + C93 * C862 + C82 * C870) * C80962) *
              C81011 * C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C5716 +
          (C92 * C166 + C81 * C172 + C93 * C167 + C82 * C173) * C5652 -
          (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C5717 -
          (C93 * C855 + C82 * C863 + C92 * C856 + C81 * C864) * C5653 +
          (C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C5718 +
          (C92 * C857 + C81 * C865 + C93 * C858 + C82 * C866) * C5654 -
          (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C5719 -
          (C93 * C5721 + C82 * C5725 + C92 * C5722 + C81 * C5726) * C5655 +
          (C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C5720 +
          (C92 * C5723 + C81 * C5727 + C93 * C5724 + C82 * C5728) * C5656) *
         C81011 * C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
              C81011 * C81012 * C80628 * C83 -
          ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
           (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
              C81011 * C81012 * C80628 * C84 +
          ((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
           (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
              C81011 * C81012 * C80628 * C85 -
          ((C93 * C225 + C82 * C231 + C92 * C224 + C81 * C230) * C80639 +
           (C93 * C103 + C82 * C113 + C92 * C102 + C81 * C111) * C220) *
              C81011 * C81012 * C80628 * C86 +
          ((C92 * C103 + C81 * C113 + C93 * C104 + C82 * C115) * C220 +
           (C92 * C225 + C81 * C231 + C93 * C226 + C82 * C232) * C80639) *
              C81011 * C81012 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C81003 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C80988 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80962) *
              C737 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C80988 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C81003 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80962) *
              C738 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C81003 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C80988 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
            (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
            (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
            (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
               C81011 * C81012 * C80962) *
              C80998 +
          (((C92 * C746 + C81 * C754 + C93 * C747 + C82 * C755) * C220 +
            (C92 * C945 + C81 * C953 + C93 * C949 + C82 * C957) * C80639) *
               C81011 * C81012 * C4985 -
           ((C93 * C223 + C82 * C229 + C92 * C222 + C81 * C228) * C80639 +
            (C93 * C101 + C82 * C109 + C92 * C100 + C81 * C106) * C220) *
               C81011 * C81012 * C4984 -
           ((C93 * C950 + C82 * C958 + C92 * C948 + C81 * C956) * C80639 +
            (C93 * C752 + C82 * C766 + C92 * C751 + C81 * C763) * C220) *
               C81011 * C81012 * C80962) *
              C80982 +
          (((C92 * C101 + C81 * C109 + C93 * C102 + C82 * C111) * C220 +
            (C92 * C223 + C81 * C229 + C93 * C224 + C82 * C230) * C80639) *
               C81011 * C81012 * C4984 -
           ((C93 * C951 + C82 * C959 + C92 * C949 + C81 * C957) * C80639 +
            (C93 * C749 + C82 * C760 + C92 * C747 + C81 * C755) * C220) *
               C81011 * C81012 * C4985 +
           ((C92 * C752 + C81 * C766 + C93 * C753 + C82 * C768) * C220 +
            (C92 * C950 + C81 * C958 + C93 * C952 + C82 * C960) * C80639) *
               C81011 * C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C99 + C81 * C105 + C93 * C100 + C82 * C106) * C220 +
           (C92 * C221 + C81 * C227 + C93 * C222 + C82 * C228) * C80639) *
              C81011 * C81012 * C5652 -
          ((C93 * C945 + C82 * C953 + C92 * C946 + C81 * C954) * C80639 +
           (C93 * C746 + C82 * C754 + C92 * C748 + C81 * C758) * C220) *
              C81011 * C81012 * C5653 +
          ((C92 * C750 + C81 * C762 + C93 * C751 + C82 * C763) * C220 +
           (C92 * C947 + C81 * C955 + C93 * C948 + C82 * C956) * C80639) *
              C81011 * C81012 * C5654 -
          ((C93 * C5771 + C82 * C5775 + C92 * C5772 + C81 * C5776) * C80639 +
           (C93 * C5658 + C82 * C5664 + C92 * C5659 + C81 * C5665) * C220) *
              C81011 * C81012 * C5655 +
          ((C92 * C5660 + C81 * C5666 + C93 * C5661 + C82 * C5667) * C220 +
           (C92 * C5773 + C81 * C5777 + C93 * C5774 + C82 * C5778) * C80639) *
              C81011 * C81012 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C275 * C99 + C81011 * C276) * C94 +
                     (C275 * C107 + C81011 * C282) * C83 - C305 * C95 -
                     C306 * C84 + C307 * C96 + C308 * C85 - C309 * C97 -
                     C310 * C86 + C311 * C98 + C312 * C87) *
                        C81012 * C81 +
                    (C305 * C94 + C306 * C83 - C307 * C95 - C308 * C84 +
                     C309 * C96 + C310 * C85 - C311 * C97 - C312 * C86 +
                     (C275 * C104 + C81011 * C281) * C98 +
                     (C275 * C116 + C81011 * C287) * C87) *
                        C81012 * C82) *
                   C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C743 +
                      (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                      C306 * C738 + C307 * C745 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C743 + C306 * C737 - C307 * C744 - C308 * C738 +
                      C309 * C745 + C310 * C80954) *
                         C81012 * C82) *
                        C80639 * C81003 +
                    ((C1068 * C744 -
                      ((C275 * C757 + C81011 * C1043) * C737 +
                       (C275 * C748 + C81011 * C1036) * C743) +
                      C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C744 - (C1069 * C737 + C1068 * C743) +
                      C1071 * C738 - (C275 * C749 + C81011 * C1038) * C745 -
                      (C275 * C761 + C81011 * C1046) * C80954) *
                         C81012 * C82) *
                        C80639 * C80988 +
                    (((C275 * C750 + C81011 * C1039) * C743 +
                      (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
                      C1073 * C738 + C1074 * C745 + C1075 * C80954) *
                         C81012 * C81 +
                     (C1072 * C743 + C1073 * C737 - C1074 * C744 -
                      C1075 * C738 + (C275 * C753 + C81011 * C1042) * C745 +
                      (C275 * C769 + C81011 * C1050) * C80954) *
                         C81012 * C82) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C81012 * C81 +
                     (C305 * C4987 + C306 * C80998 - C307 * C4988 -
                      C308 * C80982 + C309 * C4989 + C310 * C80954) *
                         C81012 * C82) *
                        C80639 * C4984 +
                    ((C1068 * C4988 -
                      ((C275 * C757 + C81011 * C1043) * C80998 +
                       (C275 * C748 + C81011 * C1036) * C4987) +
                      C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                         C81012 * C81 +
                     (C1070 * C4988 - (C1069 * C80998 + C1068 * C4987) +
                      C1071 * C80982 - C2832 * C4989 - C2833 * C80954) *
                         C81012 * C82) *
                        C80639 * C4985 +
                    (((C275 * C750 + C81011 * C1039) * C4987 +
                      (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
                      C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
                         C81012 * C81 +
                     (C1072 * C4987 + C1073 * C80998 - C1074 * C4988 -
                      C1075 * C80982 + (C275 * C753 + C81011 * C1042) * C4989 +
                      (C275 * C769 + C81011 * C1050) * C80954) *
                         C81012 * C82) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C81012 * C81 +
                     (C305 * C5657 + C306 * C80588) * C81012 * C82) *
                        C80639 * C5652 -
                    ((C1069 * C80588 + C1068 * C5657) * C81012 * C82 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C81012 * C81) *
                        C80639 * C5653 +
                    (((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C81012 * C81 +
                     (C1072 * C5657 + C1073 * C80588) * C81012 * C82) *
                        C80639 * C5654 -
                    (((C275 * C5662 + C81011 * C5825) * C80588 +
                      (C275 * C5658 + C81011 * C5821) * C5657) *
                         C81012 * C82 +
                     ((C275 * C5663 + C81011 * C5826) * C80588 +
                      (C275 * C5659 + C81011 * C5822) * C5657) *
                         C81012 * C81) *
                        C80639 * C5655 +
                    (((C275 * C5660 + C81011 * C5823) * C5657 +
                      (C275 * C5668 + C81011 * C5827) * C80588) *
                         C81012 * C81 +
                     ((C275 * C5661 + C81011 * C5824) * C5657 +
                      (C275 * C5669 + C81011 * C5828) * C80588) *
                         C81012 * C82) *
                        C80639 * C5656)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C81012 * C81 +
           (C361 + C377) * C81012 * C82) *
              C83 -
          ((C378 + C366) * C81012 * C82 + (C377 + C361) * C81012 * C81) * C84 +
          ((C366 + C378) * C81012 * C81 + (C367 + C379) * C81012 * C82) * C85 -
          ((C380 + C372) * C81012 * C82 + (C379 + C367) * C81012 * C81) * C86 +
          ((C372 + C380) * C81012 * C81 +
           ((C275 * C104 + C81011 * C281) * C165 +
            (C275 * C171 + C81011 * C359) * C80628) *
               C81012 * C82) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C1158 + C1159 - C1160 - C1178 + C1163 + C1179) * C81012 * C82) *
              C737 +
          ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C81012 * C81 +
           (C1166 - (C1167 + C1168) + C1180 - C1171 - C1181) * C81012 * C82) *
              C738 +
          ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C81012 * C81 +
           (C309 * C852 + C375 * C81003 -
            (C275 * C749 + C81011 * C1038) * C853 -
            (C275 * C861 + C81011 * C1155) * C80988 +
            (C275 * C753 + C81011 * C1042) * C854 +
            (C275 * C862 + C81011 * C1156) * C80962) *
               C81012 * C82) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C81012 * C81 +
           (C5290 + C5291 - C5292 - C5293 + C5294 + C5295) * C81012 * C82) *
              C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C81012 * C81 +
           (C5296 - (C5297 + C5298) + C5299 - C5300 - C5301) * C81012 * C82) *
              C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C81012 * C81 +
           (C309 * C5064 + C375 * C4984 - C2832 * C5065 - C2914 * C4985 +
            (C275 * C753 + C81011 * C1042) * C5066 +
            (C275 * C862 + C81011 * C1156) * C80962) *
               C81012 * C82) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C81012 * C81 +
          (C305 * C5716 + C373 * C5652 - C1068 * C5717 - C1174 * C5653 +
           C1072 * C5718 + C1175 * C5654 -
           (C275 * C5658 + C81011 * C5821) * C5719 -
           (C275 * C5721 + C81011 * C5873) * C5655 +
           (C275 * C5661 + C81011 * C5824) * C5720 +
           (C275 * C5724 + C81011 * C5874) * C5656) *
              C81012 * C82) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C81012 * C81 +
           (C429 + C445) * C81012 * C82) *
              C80628 * C83 -
          ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
              C80628 * C84 +
          ((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
              C80628 * C85 -
          ((C448 + C440) * C81012 * C82 + (C447 + C435) * C81012 * C81) *
              C80628 * C86 +
          ((C440 + C448) * C81012 * C81 +
           ((C275 * C104 + C81011 * C281) * C220 +
            (C275 * C226 + C81011 * C427) * C80639) *
               C81012 * C82) *
              C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C81003 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C80988 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80962) *
              C737 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C80988 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C81003 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80962) *
              C738 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C81003 -
           (((C275 * C951 + C81011 * C1261) * C80639 +
             (C275 * C749 + C81011 * C1038) * C220) *
                C81012 * C82 +
            (C1282 + C1270) * C81012 * C81) *
               C80988 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C81012 * C81 +
            (C429 + C445) * C81012 * C82) *
               C4984 -
           ((C1280 + C1266) * C81012 * C82 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C81012 * C81) *
               C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C81012 * C81 +
            (C1267 + C1281) * C81012 * C82) *
               C80962) *
              C80998 +
          (((C1266 + C1280) * C81012 * C81 + (C1270 + C1282) * C81012 * C82) *
               C4985 -
           ((C446 + C434) * C81012 * C82 + (C445 + C429) * C81012 * C81) *
               C4984 -
           ((C1283 + C1275) * C81012 * C82 + (C1281 + C1267) * C81012 * C81) *
               C80962) *
              C80982 +
          (((C434 + C446) * C81012 * C81 + (C435 + C447) * C81012 * C82) *
               C4984 -
           ((C2987 + C2985) * C81012 * C82 + (C1282 + C1270) * C81012 * C81) *
               C4985 +
           ((C1275 + C1283) * C81012 * C81 +
            ((C275 * C753 + C81011 * C1042) * C220 +
             (C275 * C952 + C81011 * C1262) * C80639) *
                C81012 * C82) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C81012 * C81 +
           (C429 + C445) * C81012 * C82) *
              C5652 -
          ((C1280 + C1266) * C81012 * C82 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C81012 * C81) *
              C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C81012 * C81 +
           (C1267 + C1281) * C81012 * C82) *
              C5654 -
          (((C275 * C5771 + C81011 * C5917) * C80639 +
            (C275 * C5658 + C81011 * C5821) * C220) *
               C81012 * C82 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C81012 * C81) *
              C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C81012 * C81 +
           ((C275 * C5661 + C81011 * C5824) * C220 +
            (C275 * C5774 + C81011 * C5920) * C80639) *
               C81012 * C82) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C490 * C99 + C81012 * C491) * C94 +
                     (C490 * C107 + C81012 * C497) * C83 - C520 * C95 -
                     C521 * C84 + C522 * C96 + C523 * C85 - C524 * C97 -
                     C525 * C86 + C526 * C98 + C527 * C87) *
                        C81 +
                    (C520 * C94 + C521 * C83 - C522 * C95 - C523 * C84 +
                     C524 * C96 + C525 * C85 - C526 * C97 - C527 * C86 +
                     (C490 * C104 + C81012 * C496) * C98 +
                     (C490 * C116 + C81012 * C502) * C87) *
                        C82) *
                   C81011 * C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C743 +
                      (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                      C521 * C738 + C522 * C745 + C523 * C80954) *
                         C81 +
                     (C520 * C743 + C521 * C737 - C522 * C744 - C523 * C738 +
                      C524 * C745 + C525 * C80954) *
                         C82) *
                        C81011 * C80639 * C81003 +
                    ((C1390 * C744 -
                      ((C490 * C757 + C81012 * C1365) * C737 +
                       (C490 * C748 + C81012 * C1358) * C743) +
                      C1391 * C738 - C1392 * C745 - C1393 * C80954) *
                         C81 +
                     (C1392 * C744 - (C1391 * C737 + C1390 * C743) +
                      C1393 * C738 - (C490 * C749 + C81012 * C1360) * C745 -
                      (C490 * C761 + C81012 * C1368) * C80954) *
                         C82) *
                        C81011 * C80639 * C80988 +
                    (((C490 * C750 + C81012 * C1361) * C743 +
                      (C490 * C764 + C81012 * C1369) * C737 - C1394 * C744 -
                      C1395 * C738 + C1396 * C745 + C1397 * C80954) *
                         C81 +
                     (C1394 * C743 + C1395 * C737 - C1396 * C744 -
                      C1397 * C738 + (C490 * C753 + C81012 * C1364) * C745 +
                      (C490 * C769 + C81012 * C1372) * C80954) *
                         C82) *
                        C81011 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81 +
                     (C520 * C4987 + C521 * C80998 - C522 * C4988 -
                      C523 * C80982 + C524 * C4989 + C525 * C80954) *
                         C82) *
                        C81011 * C80639 * C4984 +
                    ((C1390 * C4988 -
                      ((C490 * C757 + C81012 * C1365) * C80998 +
                       (C490 * C748 + C81012 * C1358) * C4987) +
                      C1391 * C80982 - C1392 * C4989 - C1393 * C80954) *
                         C81 +
                     (C1392 * C4988 - (C1391 * C80998 + C1390 * C4987) +
                      C1393 * C80982 - C3060 * C4989 - C3061 * C80954) *
                         C82) *
                        C81011 * C80639 * C4985 +
                    (((C490 * C750 + C81012 * C1361) * C4987 +
                      (C490 * C764 + C81012 * C1369) * C80998 - C1394 * C4988 -
                      C1395 * C80982 + C1396 * C4989 + C1397 * C80954) *
                         C81 +
                     (C1394 * C4987 + C1395 * C80998 - C1396 * C4988 -
                      C1397 * C80982 + (C490 * C753 + C81012 * C1364) * C4989 +
                      (C490 * C769 + C81012 * C1372) * C80954) *
                         C82) *
                        C81011 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81 +
                     (C520 * C5657 + C521 * C80588) * C82) *
                        C81011 * C80639 * C5652 -
                    ((C1391 * C80588 + C1390 * C5657) * C82 +
                     ((C490 * C757 + C81012 * C1365) * C80588 +
                      (C490 * C748 + C81012 * C1358) * C5657) *
                         C81) *
                        C81011 * C80639 * C5653 +
                    (((C490 * C750 + C81012 * C1361) * C5657 +
                      (C490 * C764 + C81012 * C1369) * C80588) *
                         C81 +
                     (C1394 * C5657 + C1395 * C80588) * C82) *
                        C81011 * C80639 * C5654 -
                    (((C490 * C5662 + C81012 * C5967) * C80588 +
                      (C490 * C5658 + C81012 * C5963) * C5657) *
                         C82 +
                     ((C490 * C5663 + C81012 * C5968) * C80588 +
                      (C490 * C5659 + C81012 * C5964) * C5657) *
                         C81) *
                        C81011 * C80639 * C5655 +
                    (((C490 * C5660 + C81012 * C5965) * C5657 +
                      (C490 * C5668 + C81012 * C5969) * C80588) *
                         C81 +
                     ((C490 * C5661 + C81012 * C5966) * C5657 +
                      (C490 * C5669 + C81012 * C5970) * C80588) *
                         C82) *
                        C81011 * C80639 * C5656)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81 +
           (C576 + C592) * C82) *
              C81011 * C83 -
          ((C593 + C581) * C82 + (C592 + C576) * C81) * C81011 * C84 +
          ((C581 + C593) * C81 + (C582 + C594) * C82) * C81011 * C85 -
          ((C595 + C587) * C82 + (C594 + C582) * C81) * C81011 * C86 +
          ((C587 + C595) * C81 + ((C490 * C104 + C81012 * C496) * C165 +
                                  (C490 * C171 + C81012 * C574) * C80628) *
                                     C82) *
              C81011 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 -
            (C490 * C748 + C81012 * C1358) * C853 -
            (C490 * C856 + C81012 * C1471) * C80988 +
            (C490 * C750 + C81012 * C1361) * C854 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C1480 + C1481 - C1482 - C1500 + C1485 + C1501) * C82) *
              C81011 * C737 +
          ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81 +
           (C1488 - (C1489 + C1490) + C1502 - C1493 - C1503) * C82) *
              C81011 * C738 +
          ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81 +
           (C524 * C852 + C590 * C81003 -
            (C490 * C749 + C81012 * C1360) * C853 -
            (C490 * C861 + C81012 * C1477) * C80988 +
            (C490 * C753 + C81012 * C1364) * C854 +
            (C490 * C862 + C81012 * C1478) * C80962) *
               C82) *
              C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 -
            (C490 * C748 + C81012 * C1358) * C5065 -
            (C490 * C856 + C81012 * C1471) * C4985 +
            (C490 * C750 + C81012 * C1361) * C5066 +
            (C490 * C857 + C81012 * C1472) * C80962) *
               C81 +
           (C5524 + C5525 - C5526 - C5527 + C5528 + C5529) * C82) *
              C81011 * C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C82) *
              C81011 * C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81 +
           (C524 * C5064 + C590 * C4984 - C3060 * C5065 - C3142 * C4985 +
            (C490 * C753 + C81012 * C1364) * C5066 +
            (C490 * C862 + C81012 * C1478) * C80962) *
               C82) *
              C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 -
           (C490 * C748 + C81012 * C1358) * C5717 -
           (C490 * C856 + C81012 * C1471) * C5653 +
           (C490 * C750 + C81012 * C1361) * C5718 +
           (C490 * C857 + C81012 * C1472) * C5654 -
           (C490 * C5659 + C81012 * C5964) * C5719 -
           (C490 * C5722 + C81012 * C6013) * C5655 +
           (C490 * C5660 + C81012 * C5965) * C5720 +
           (C490 * C5723 + C81012 * C6014) * C5656) *
              C81 +
          (C520 * C5716 + C588 * C5652 - C1390 * C5717 - C1496 * C5653 +
           C1394 * C5718 + C1497 * C5654 -
           (C490 * C5658 + C81012 * C5963) * C5719 -
           (C490 * C5721 + C81012 * C6015) * C5655 +
           (C490 * C5661 + C81012 * C5966) * C5720 +
           (C490 * C5724 + C81012 * C6016) * C5656) *
              C82) *
         C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81 +
           (C644 + C660) * C82) *
              C81011 * C80628 * C83 -
          ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C80628 * C84 +
          ((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C80628 * C85 -
          ((C663 + C655) * C82 + (C662 + C650) * C81) * C81011 * C80628 * C86 +
          ((C655 + C663) * C81 + ((C490 * C104 + C81012 * C496) * C220 +
                                  (C490 * C226 + C81012 * C642) * C80639) *
                                     C82) *
              C81011 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C81003 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C80988 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80962) *
              C737 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C80988 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C81003 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80962) *
              C738 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C81003 -
           (((C490 * C951 + C81012 * C1583) * C80639 +
             (C490 * C749 + C81012 * C1360) * C220) *
                C82 +
            (C1604 + C1592) * C81) *
               C81011 * C80988 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81 +
            (C644 + C660) * C82) *
               C81011 * C4984 -
           ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                     (C490 * C748 + C81012 * C1358) * C220) *
                                        C81) *
               C81011 * C4985 +
           (((C490 * C750 + C81012 * C1361) * C220 +
             (C490 * C947 + C81012 * C1579) * C80639) *
                C81 +
            (C1589 + C1603) * C82) *
               C81011 * C80962) *
              C80998 +
          (((C1588 + C1602) * C81 + (C1592 + C1604) * C82) * C81011 * C4985 -
           ((C661 + C649) * C82 + (C660 + C644) * C81) * C81011 * C4984 -
           ((C1605 + C1597) * C82 + (C1603 + C1589) * C81) * C81011 * C80962) *
              C80982 +
          (((C649 + C661) * C81 + (C650 + C662) * C82) * C81011 * C4984 -
           ((C3215 + C3213) * C82 + (C1604 + C1592) * C81) * C81011 * C4985 +
           ((C1597 + C1605) * C81 + ((C490 * C753 + C81012 * C1364) * C220 +
                                     (C490 * C952 + C81012 * C1584) * C80639) *
                                        C82) *
               C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81 +
           (C644 + C660) * C82) *
              C81011 * C5652 -
          ((C1602 + C1588) * C82 + ((C490 * C946 + C81012 * C1578) * C80639 +
                                    (C490 * C748 + C81012 * C1358) * C220) *
                                       C81) *
              C81011 * C5653 +
          (((C490 * C750 + C81012 * C1361) * C220 +
            (C490 * C947 + C81012 * C1579) * C80639) *
               C81 +
           (C1589 + C1603) * C82) *
              C81011 * C5654 -
          (((C490 * C5771 + C81012 * C6059) * C80639 +
            (C490 * C5658 + C81012 * C5963) * C220) *
               C82 +
           ((C490 * C5772 + C81012 * C6060) * C80639 +
            (C490 * C5659 + C81012 * C5964) * C220) *
               C81) *
              C81011 * C5655 +
          (((C490 * C5660 + C81012 * C5965) * C220 +
            (C490 * C5773 + C81012 * C6061) * C80639) *
               C81 +
           ((C490 * C5661 + C81012 * C5966) * C220 +
            (C490 * C5774 + C81012 * C6062) * C80639) *
               C82) *
              C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78289 +
            (C26926 * C107 + C81009 * C117) * C80593 -
            (C26926 * C100 + C81009 * C106) * C78285 -
            (C26926 * C108 + C81009 * C118) * C80601 +
            (C26926 * C101 + C81009 * C109) * C78295 +
            (C26926 * C110 + C81009 * C119) * C15341) *
               C26924 +
           (C41172 + C41173 - C41174 - C41175 + C41176 + C41177) * C26925) *
              C81012 * C80639 * C80682 +
          ((C41174 - (C41173 + C41172) + C41175 - C41176 - C41177) * C26924 +
           (C41178 - (C41179 + C41180) + C41181 - C41182 - C41183) * C26925) *
              C81012 * C80639 * C80689 +
          ((C41180 + C41179 - C41178 - C41181 + C41182 + C41183) * C26924 +
           (C31658 * C78289 + C31659 * C80593 - C32940 * C78285 -
            C32941 * C80601 + (C26926 * C6899 + C81009 * C6900) * C78295 +
            (C26926 * C6901 + C81009 * C6902) * C15341) *
               C26925) *
              C81012 * C80639 * C15344)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78437 +
            (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
            C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
               C26924 +
           (C27364 * C78437 + C27474 * C80682 - C27372 * C78429 -
            C27475 * C80689 + C31658 * C78443 + C31714 * C15344) *
               C26925) *
              C81012 * C80593 +
          ((C27366 * C78429 -
            ((C26926 * C167 + C81009 * C173) * C80682 +
             (C26926 * C100 + C81009 * C106) * C78437) +
            C27476 * C80689 - C27370 * C78443 - C27477 * C15344) *
               C26924 +
           (C27370 * C78429 - (C27476 * C80682 + C27366 * C78437) +
            C27477 * C80689 - C32940 * C78443 - C33012 * C15344) *
               C26925) *
              C81012 * C80601 +
          (((C26926 * C101 + C81009 * C109) * C78437 +
            (C26926 * C168 + C81009 * C174) * C80682 - C27368 * C78429 -
            C27478 * C80689 + C27374 * C78443 + C27479 * C15344) *
               C26924 +
           (C27368 * C78437 + C27478 * C80682 - C27374 * C78429 -
            C27479 * C80689 + (C26926 * C6899 + C81009 * C6900) * C78443 +
            (C26926 * C6973 + C81009 * C6974) * C15344) *
               C26925) *
              C81012 * C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C26924 +
                      (C27554 + C27578) * C26925) *
                         C81012 * C80682 -
                     ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                         C81012 * C80689 +
                     ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) *
                         C81012 * C15344) *
                        C80593 +
                    (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                         C81012 * C80689 -
                     ((C27580 + C27560) * C26925 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C26924) *
                         C81012 * C80682 -
                     ((C33083 + C33081) * C26925 + (C27581 + C27563) * C26924) *
                         C81012 * C15344) *
                        C80601 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C26924 +
                      (C27566 + C27582) * C26925) *
                         C81012 * C80682 -
                     ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) *
                         C81012 * C80689 +
                     ((C27571 + C27583) * C26924 +
                      ((C26926 * C6899 + C81009 * C6900) * C220 +
                       (C26926 * C7041 + C81009 * C7042) * C80639) *
                          C26925) *
                         C81012 * C15344) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78289 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80593 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C78285 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80601 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C78295 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C15341) *
              C81012 * C81009 * C80639 * C80682 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C78285 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80593 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C78289) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80601 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C78295 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C15341) *
              C81012 * C81009 * C80639 * C80689 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C78289 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80593 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C78285 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80601 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C78295 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C15341) *
              C81012 * C81009 * C80639 * C15344)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78437 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80682 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C78429 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80689 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C78443 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C15344) *
              C81012 * C81009 * C80593 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C78429 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80682 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78437) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80689 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C78443 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C15344) *
              C81012 * C81009 * C80601 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C78437 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C80682 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C78429 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80689 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C78443 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C15344) *
              C81012 * C81009 * C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C80682 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80689 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C15344) *
              C80593 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80689 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C80682 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C15344) *
              C80601 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C80682 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80689 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C15344) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78289 +
            (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
            C521 * C80601 + C522 * C78295 + C523 * C15341) *
               C81009 * C26924 +
           (C41628 + C41629 - C41630 - C41631 + C41632 + C41633) * C81009 *
               C26925) *
              C80639 * C80682 +
          ((C41630 - (C41629 + C41628) + C41631 - C41632 - C41633) * C81009 *
               C26924 +
           (C41634 - (C41635 + C41636) + C41637 - C41638 - C41639) * C81009 *
               C26925) *
              C80639 * C80689 +
          ((C41636 + C41635 - C41634 - C41637 + C41638 + C41639) * C81009 *
               C26924 +
           (C31956 * C78289 + C31957 * C80593 - C7340 * C78285 -
            C7341 * C80601 + (C490 * C6899 + C81012 * C7333) * C78295 +
            (C490 * C6901 + C81012 * C7334) * C15341) *
               C81009 * C26925) *
              C80639 * C15344)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78437 +
            (C490 * C166 + C81012 * C569) * C80682 - C27896 * C78429 -
            C27982 * C80689 + C27899 * C78443 + C27983 * C15344) *
               C81009 * C26924 +
           (C27896 * C78437 + C27982 * C80682 - C27899 * C78429 -
            C27983 * C80689 + C31956 * C78443 + C32011 * C15344) *
               C81009 * C26925) *
              C80593 +
          ((C15884 - (C15883 + C15882) + C15885 - C15886 - C15887) * C81009 *
               C26924 +
           (C1394 * C78429 - (C1496 * C80682 + C1390 * C78437) +
            C1497 * C80689 - C7340 * C78443 - C7418 * C15344) *
               C81009 * C26925) *
              C80601 +
          ((C15890 + C15889 - C15888 - C15891 + C15892 + C15893) * C81009 *
               C26924 +
           (C1392 * C78437 + C1498 * C80682 - C1396 * C78429 - C1499 * C80689 +
            (C490 * C6899 + C81012 * C7333) * C78443 +
            (C490 * C6973 + C81012 * C7407) * C15344) *
               C81009 * C26925) *
              C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C80682 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C80689 +
                     ((C28063 + C28067) * C81009 * C26924 +
                      (C32056 + C32064) * C81009 * C26925) *
                         C15344) *
                        C80593 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C80689 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C80682 -
                     ((C7491 + C7489) * C81009 * C26925 +
                      (C1603 + C1589) * C81009 * C26924) *
                         C15344) *
                        C80601 +
                    (((C649 + C661) * C81009 * C26924 +
                      (C1592 + C1604) * C81009 * C26925) *
                         C80682 -
                     ((C1605 + C1597) * C81009 * C26925 +
                      (C1604 + C1592) * C81009 * C26924) *
                         C80689 +
                     ((C1597 + C1605) * C81009 * C26924 +
                      ((C490 * C6899 + C81012 * C7333) * C220 +
                       (C490 * C7041 + C81012 * C7485) * C80639) *
                          C81009 * C26925) *
                         C15344) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C39642 + C39643 - C39644 - C39645) * C26925) *
                         C81012 * C80933 +
                     (((C26926 * C1682 + C81009 * C1690) * C13806 -
                       ((C26926 * C1693 + C81009 * C1707) * C13799 +
                        (C26926 * C1684 + C81009 * C1694) * C13805) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C40292 - (C40293 + C40294) + C40295) * C26925) *
                         C81012 * C80726) *
                        C80682 +
                    (((C39644 - (C39643 + C39642) + C39645) * C26924 +
                      (C39646 - (C39647 + C39648) + C39649) * C26925) *
                         C81012 * C80933 +
                     ((C40294 + C40293 - C40292 - C40295) * C26924 +
                      (C42780 + C42781 - C42782 - C42783) * C26925) *
                         C81012 * C80726) *
                        C80689 +
                    (((C39648 + C39647 - C39646 - C39649) * C26924 +
                      (C39650 + C39651 - C39652 - C39653) * C26925) *
                         C81012 * C80933 +
                     ((C42782 - (C42781 + C42780) + C42783) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C13806 -
                       (C34488 * C13799 + C34489 * C13805) +
                       (C26926 * C8504 + C81009 * C8506) * C80598) *
                          C26925) *
                         C81012 * C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78437 +
             (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
             C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
                C26924 +
            (C27364 * C78437 + C27474 * C80682 - C27372 * C78429 -
             C27475 * C80689 + C31658 * C78443 + C31714 * C15344) *
                C26925) *
               C81012 * C13799 +
           ((C27366 * C78429 -
             ((C26926 * C167 + C81009 * C173) * C80682 +
              (C26926 * C100 + C81009 * C106) * C78437) +
             C27476 * C80689 - C27370 * C78443 - C27477 * C15344) *
                C26924 +
            (C27370 * C78429 - (C27476 * C80682 + C27366 * C78437) +
             C27477 * C80689 - C32940 * C78443 - C33012 * C15344) *
                C26925) *
               C81012 * C80598) *
              C80933 +
          (((C30064 * C78429 -
             ((C26926 * C1790 + C81009 * C1798) * C80682 +
              (C26926 * C1684 + C81009 * C1694) * C78437) +
             C30178 * C80689 - C32160 * C78443 - C32252 * C15344) *
                C26924 +
            (C32160 * C78429 - (C30178 * C80682 + C30064 * C78437) +
             C32252 * C80689 - C34489 * C78443 - C34562 * C15344) *
                C26925) *
               C81012 * C13799 +
           (((C26926 * C1682 + C81009 * C1690) * C78437 +
             (C26926 * C1788 + C81009 * C1796) * C80682 - C30062 * C78429 -
             C30179 * C80689 + C33600 * C78443 + C33704 * C15344) *
                C26924 +
            (C30062 * C78437 + C30179 * C80682 - C33600 * C78429 -
             C33704 * C80689 + (C26926 * C8500 + C81009 * C8502) * C78443 +
             (C26926 * C8574 + C81009 * C8576) * C15344) *
                C26925) *
               C81012 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       (C26926 * C1684 + C81009 * C1694) * C3422 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C30279 + C30280 - C30281 - C30297) * C26925) *
                         C81012 * C80682 +
                     ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                      (C33803 - (C33804 + C33805) + C33806) * C26925) *
                         C81012 * C80689 +
                     ((C33805 + C33804 - C33803 - C33806) * C26924 +
                      (C34631 + C34632 - C34633 - C34637) * C26925) *
                         C81012 * C15344) *
                        C13799 +
                    ((((C26926 * C1682 + C81009 * C1690) * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C30284 - (C30285 + C30286) + C30298) * C26925) *
                         C81012 * C80682 +
                     ((C30286 + C30285 - C30284 - C30298) * C26924 +
                      (C33807 + C33808 - C33809 - C33813) * C26925) *
                         C81012 * C80689 +
                     ((C33809 - (C33808 + C33807) + C33813) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C3422 -
                       (C33082 * C80933 + C32940 * C3421) +
                       (C26926 * C8644 + C81009 * C8646) * C80726) *
                          C26925) *
                         C81012 * C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13805 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C13799 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13806 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13806 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C13799 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13805) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80682 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13806 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C13799 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C13805) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13805 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C13799 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13806 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80689 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C13805 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C13799 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C13806 -
            (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C13806 -
            ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
              C26924 * C6416) *
                 C13799 +
             (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
              C26924 * C6410) *
                 C13805) +
            (C27053 * C6147 + C26924 * C6415 + C27054 * C8504 +
             C26925 * C8716) *
                C80598) *
               C81012 * C81009 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78437 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80682 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C78429 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80689 +
            (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C78443 +
            (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
                C15344) *
               C81012 * C81009 * C13799 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78429 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C80682 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C78437) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80689 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C78443 -
            (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
                C15344) *
               C81012 * C81009 * C80598) *
              C80933 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78429 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C80682 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78437) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80689 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C78443 -
            (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 +
             C26924 * C6493) *
                C15344) *
               C81012 * C81009 * C13799 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78437 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80682 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78429 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80689 +
            (C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C78443 +
            (C27053 * C6235 + C26924 * C6494 + C27054 * C8574 +
             C26925 * C8784) *
                C15344) *
               C81012 * C81009 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C3421 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80933 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C3422 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C80682 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C3422 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80933 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C3421) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80689 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C3421 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80933 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C3422 -
            (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 +
             C26924 * C6575) *
                C80726) *
               C81012 * C81009 * C15344) *
              C13799 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C3422 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80933 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C3421) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C80682 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C3421 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80933 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C3422 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80689 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C3422 -
            ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 +
              C26924 * C1258) *
                 C80933 +
             (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
              C26924 * C1040) *
                 C3421) +
            (C27053 * C6323 + C26924 * C6577 + C27054 * C8644 +
             C26925 * C8852) *
                C80726) *
               C81012 * C81009 * C15344) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13805 +
                       (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                         C80933 +
                     ((C2326 * C13806 -
                       ((C490 * C1693 + C81012 * C2301) * C13799 +
                        (C490 * C1684 + C81012 * C2294) * C13805) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C40894 - (C40895 + C40896) + C40897) * C81009 * C26925) *
                         C80726) *
                        C80682 +
                    (((C40052 - (C40051 + C40050) + C40053) * C81009 * C26924 +
                      (C40054 - (C40055 + C40056) + C40057) * C81009 * C26925) *
                         C80933 +
                     ((C40896 + C40895 - C40894 - C40897) * C81009 * C26924 +
                      (C43372 + C43373 - C43374 - C43375) * C81009 * C26925) *
                         C80726) *
                        C80689 +
                    (((C40056 + C40055 - C40054 - C40057) * C81009 * C26924 +
                      (C40058 + C40059 - C40060 - C40061) * C81009 * C26925) *
                         C80933 +
                     ((C43374 - (C43373 + C43372) + C43375) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C13806 -
                       (C34912 * C13799 + C34913 * C13805) +
                       (C490 * C8504 + C81012 * C8922) * C80598) *
                          C81009 * C26925) *
                         C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78437 +
             (C490 * C166 + C81012 * C569) * C80682 - C27896 * C78429 -
             C27982 * C80689 + C27899 * C78443 + C27983 * C15344) *
                C81009 * C26924 +
            (C27896 * C78437 + C27982 * C80682 - C27899 * C78429 -
             C27983 * C80689 + C31956 * C78443 + C32011 * C15344) *
                C81009 * C26925) *
               C13799 +
           ((C15884 - (C15883 + C15882) + C15885 - C15886 - C15887) * C81009 *
                C26924 +
            (C1394 * C78429 - (C1496 * C80682 + C1390 * C78437) +
             C1497 * C80689 - C7340 * C78443 - C7418 * C15344) *
                C81009 * C26925) *
               C80598) *
              C80933 +
          (((C30701 * C78429 -
             ((C490 * C1790 + C81012 * C2409) * C80682 +
              (C490 * C1684 + C81012 * C2294) * C78437) +
             C30804 * C80689 - C32670 * C78443 - C32761 * C15344) *
                C81009 * C26924 +
            (C32670 * C78429 - (C30804 * C80682 + C30701 * C78437) +
             C32761 * C80689 - C34913 * C78443 - C34985 * C15344) *
                C81009 * C26925) *
               C13799 +
           ((C17650 + C17649 - C17648 - C17651 + C17652 + C17653) * C81009 *
                C26924 +
            (C4672 * C78437 + C4788 * C80682 - C8218 * C78429 - C8326 * C80689 +
             (C490 * C8500 + C81012 * C8920) * C78443 +
             (C490 * C8574 + C81012 * C8990) * C15344) *
                C81009 * C26925) *
               C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                         C80682 +
                     ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                      (C34410 - (C34411 + C34412) + C34413) * C81009 * C26925) *
                         C80689 +
                     ((C34412 + C34411 - C34410 - C34413) * C81009 * C26924 +
                      (C35053 + C35054 - C35055 - C35059) * C81009 * C26925) *
                         C15344) *
                        C13799 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                      (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                         C80682 +
                     ((C4896 + C4895 - C4894 - C4906) * C81009 * C26924 +
                      (C8427 + C8428 - C8429 - C8433) * C81009 * C26925) *
                         C80689 +
                     ((C8429 - (C8428 + C8427) + C8433) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C3422 -
                       (C7490 * C80933 + C7340 * C3421) +
                       (C490 * C8644 + C81012 * C9058) * C80726) *
                          C81009 * C26925) *
                         C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[27] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13805 +
                      (C26926 * C107 + C81009 * C117) * C13799 -
                      (C26926 * C100 + C81009 * C106) * C13806 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C26924 +
                     (C39642 + C39643 - C39644 - C39645) * C26925) *
                        C81012 * C80639 * C81013 +
                    ((C39644 - (C39643 + C39642) + C39645) * C26924 +
                     (C39646 - (C39647 + C39648) + C39649) * C26925) *
                        C81012 * C80639 * C81006 +
                    ((C39648 + C39647 - C39646 - C39649) * C26924 +
                     (C39650 + C39651 - C39652 - C39653) * C26925) *
                        C81012 * C80639 * C80993 +
                    ((C39652 - (C39651 + C39650) + C39653) * C26924 +
                     ((C26926 * C5661 + C81009 * C5667) * C13806 -
                      (C31660 * C13799 + C31661 * C13805) +
                      (C26926 * C5669 + C81009 * C5673) * C80598) *
                         C26925) *
                        C81012 * C80639 * C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C39032 + C39033 - C39034 - C39035 + C39036 + C39037 -
                      C39038 - C39039) *
                         C26925) *
                        C81012 * C80639 * C13173 +
                    ((C39034 - (C39033 + C39032) + C39035 - C39036 - C39037 +
                      C39038 + C39039) *
                         C26924 +
                     (C27370 * C13176 - (C27371 * C81010 + C27372 * C13175) +
                      C27373 * C81000 - C27374 * C13177 - C27375 * C80984 +
                      (C26926 * C753 + C81009 * C768) * C13178 +
                      (C26926 * C769 + C81009 * C777) * C80966) *
                         C26925) *
                        C81012 * C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C39642 + C39643 - C39644 - C39645) * C26925) *
                         C81012 * C81004 +
                     (((C26926 * C1682 + C81009 * C1690) * C13806 -
                       ((C26926 * C1693 + C81009 * C1707) * C13799 +
                        (C26926 * C1684 + C81009 * C1694) * C13805) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C40292 - (C40293 + C40294) + C40295) * C26925) *
                         C81012 * C80990 +
                     (((C26926 * C1686 + C81009 * C1698) * C13805 +
                       (C26926 * C1700 + C81009 * C1710) * C13799 -
                       (C26926 * C1687 + C81009 * C1699) * C13806 -
                       (C26926 * C1701 + C81009 * C1711) * C80598) *
                          C26924 +
                      (C40296 + C40297 - C40298 - C40299) * C26925) *
                         C81012 * C80965) *
                        C13173 +
                    (((C39644 - (C39643 + C39642) + C39645) * C26924 +
                      (C39646 - (C39647 + C39648) + C39649) * C26925) *
                         C81012 * C81004 +
                     ((C40294 + C40293 - C40292 - C40295) * C26924 +
                      (C32160 * C13805 + C32161 * C13799 - C33600 * C13806 -
                       C33601 * C80598) *
                          C26925) *
                         C81012 * C80990 +
                     ((C40298 - (C40297 + C40296) + C40299) * C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C13806 -
                       (C32162 * C13799 + C32163 * C13805) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C26925) *
                         C81012 * C80965) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[27] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C13873 + C27474 * C81013 - C27372 * C13874 -
                      C27475 * C81006 + C31658 * C13875 + C31714 * C80993 -
                      C31661 * C13876 - C31715 * C80972) *
                         C26925) *
                        C81012 * C13799 +
                    ((C27366 * C13874 -
                      ((C26926 * C167 + C81009 * C173) * C81013 +
                       (C26926 * C100 + C81009 * C106) * C13873) +
                      C27476 * C81006 - C27370 * C13875 - C27477 * C80993 +
                      C32940 * C13876 + C33012 * C80972) *
                         C26924 +
                     (C27370 * C13874 - (C27476 * C81013 + C27366 * C13873) +
                      C27477 * C81006 - C32940 * C13875 - C33012 * C80993 +
                      (C26926 * C5661 + C81009 * C5667) * C13876 +
                      (C26926 * C5724 + C81009 * C5728) * C80972) *
                         C26925) *
                        C81012 * C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13245 +
                      (C26926 * C166 + C81009 * C172) * C13173 -
                      C27364 * C13246 - C27474 * C80686) *
                         C26924 +
                     (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                      C27475 * C80686) *
                         C26925) *
                        C81012 * C81010 +
                    ((C27366 * C13246 -
                      ((C26926 * C167 + C81009 * C173) * C13173 +
                       (C26926 * C100 + C81009 * C106) * C13245) +
                      C27476 * C80686) *
                         C26924 +
                     (C27370 * C13246 - (C27476 * C13173 + C27366 * C13245) +
                      C27477 * C80686) *
                         C26925) *
                        C81012 * C81000 +
                    (((C26926 * C101 + C81009 * C109) * C13245 +
                      (C26926 * C168 + C81009 * C174) * C13173 -
                      C27368 * C13246 - C27478 * C80686) *
                         C26924 +
                     (C27368 * C13245 + C27478 * C13173 - C27374 * C13246 -
                      C27479 * C80686) *
                         C26925) *
                        C81012 * C80984 +
                    ((C28810 * C13246 -
                      ((C26926 * C169 + C81009 * C175) * C13173 +
                       (C26926 * C102 + C81009 * C111) * C13245) +
                      C28882 * C80686) *
                         C26924 +
                     ((C26926 * C753 + C81009 * C768) * C13246 -
                      (C28882 * C13173 + C28810 * C13245) +
                      (C26926 * C862 + C81009 * C870) * C80686) *
                         C26925) *
                        C81012 * C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C13799 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C13246 - (C27476 * C13173 + C27366 * C13245) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C81004 +
                    (((C30064 * C13246 -
                       ((C26926 * C1790 + C81009 * C1798) * C13173 +
                        (C26926 * C1684 + C81009 * C1694) * C13245) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C13246 - (C30178 * C13173 + C30064 * C13245) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C13799 +
                     (((C26926 * C1682 + C81009 * C1690) * C13245 +
                       (C26926 * C1788 + C81009 * C1796) * C13173 -
                       C30062 * C13246 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C13245 + C30179 * C13173 - C33600 * C13246 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C80990 +
                    ((((C26926 * C1686 + C81009 * C1698) * C13245 +
                       (C26926 * C1792 + C81009 * C1800) * C13173 -
                       C32158 * C13246 - C32253 * C80686) *
                          C26924 +
                      (C32158 * C13245 + C32253 * C13173 - C32163 * C13246 -
                       C32254 * C80686) *
                          C26925) *
                         C81012 * C13799 +
                     ((C36914 * C13246 -
                       ((C26926 * C1793 + C81009 * C1801) * C13173 +
                        (C26926 * C1687 + C81009 * C1699) * C13245) +
                       C37018 * C80686) *
                          C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C13246 -
                       (C37018 * C13173 + C36914 * C13245) +
                       (C26926 * C6240 + C81009 * C6246) * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C80965)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C81013 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C81006 +
           ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) * C81012 *
               C80993 -
           ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) * C81012 *
               C80972) *
              C13799 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C81006 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C81013 -
           ((C33083 + C33081) * C26925 + (C27581 + C27563) * C26924) * C81012 *
               C80993 +
           ((C33081 + C33083) * C26924 +
            ((C26926 * C5661 + C81009 * C5667) * C220 +
             (C26926 * C5774 + C81009 * C5778) * C80639) *
                C26925) *
               C81012 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C13173 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C80686) *
              C81010 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C80686 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C13173) *
              C81000 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C26924 +
            (C27566 + C27582) * C26925) *
               C81012 * C13173 -
           ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) * C81012 *
               C80686) *
              C80984 +
          (((C28949 + C28953) * C26924 +
            ((C26926 * C753 + C81009 * C768) * C220 +
             (C26926 * C952 + C81009 * C960) * C80639) *
                C26925) *
               C81012 * C80686 -
           ((C28953 + C28949) * C26925 +
            ((C26926 * C224 + C81009 * C230) * C80639 +
             (C26926 * C102 + C81009 * C111) * C220) *
                C26924) *
               C81012 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C1878 +
             (C26926 * C221 + C81009 * C227) * C81004 -
             (C26926 * C1684 + C81009 * C1694) * C1879 -
             (C26926 * C1882 + C81009 * C1890) * C80990 +
             (C26926 * C1686 + C81009 * C1698) * C1880 +
             (C26926 * C1883 + C81009 * C1891) * C80965) *
                C26924 +
            (C32331 + C32332 - C32333 - C32334 + C32335 + C32349) * C26925) *
               C81012 * C13173 +
           ((C32333 - (C32332 + C32331) + C32334 - C32335 - C32349) * C26924 +
            (C32338 - (C32339 + C32340) + C32350 - C32343 - C32351) * C26925) *
               C81012 * C80686) *
              C13799 +
          ((((C26926 * C1682 + C81009 * C1690) * C1879 -
             ((C26926 * C222 + C81009 * C228) * C81004 +
              (C26926 * C100 + C81009 * C106) * C1878) +
             (C26926 * C1881 + C81009 * C1889) * C80990 -
             (C26926 * C1687 + C81009 * C1699) * C1880 -
             (C26926 * C1884 + C81009 * C1892) * C80965) *
                C26924 +
            (C40496 - (C40497 + C40498) + C40499 - C40500 - C40501) * C26925) *
               C81012 * C13173 +
           ((C40498 + C40497 - C40496 - C40499 + C40500 + C40501) * C26924 +
            (C27370 * C1878 + C27575 * C81004 - C33600 * C1879 -
             C33812 * C80990 + (C26926 * C6142 + C81009 * C6152) * C1880 +
             (C26926 * C6326 + C81009 * C6332) * C80965) *
                C26925) *
               C81012 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13805 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C13799 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C13806 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80598) *
              C81012 * C81009 * C80639 * C81013 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13806 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C13799 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13805) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C81006 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C13805 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C13799 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C13806 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C80993 +
          ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C13806 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C13799 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C13805) +
           (C27053 * C5662 + C26924 * C5825 + C27054 * C5669 + C26925 * C5828) *
               C80598) *
              C81012 * C81009 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13175 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C81010 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C13176 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C81000 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C13177 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80984 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C13178 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C80639 * C13173 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13176 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C81010 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13175) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C81000 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C13177 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80984 +
           (C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C13178 +
           (C27053 * C761 + C26924 * C1046 + C27054 * C769 + C26925 * C1050) *
               C80966) *
              C81012 * C81009 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13805 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C13799 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13806 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C81004 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13806 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C13799 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13805) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80990 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C13805 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C13799 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C13806 -
            (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 +
             C26924 * C1984) *
                C80598) *
               C81012 * C81009 * C80965) *
              C13173 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13806 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C13799 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C13805) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C81004 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13805 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C13799 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13806 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80990 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C13806 -
            ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
              C26924 * C6414) *
                 C13799 +
             (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
              C26924 * C6408) *
                 C13805) +
            (C27053 * C6143 + C26924 * C6413 + C27054 * C6154 +
             C26925 * C6418) *
                C80598) *
               C81012 * C81009 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13873 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81013 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C13874 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C81006 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C13875 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80993 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C13876 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C13799 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13874 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C81013 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13873) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C81006 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C13875 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80993 +
           (C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C13876 +
           (C27053 * C5721 + C26924 * C5873 + C27054 * C5724 + C26925 * C5874) *
               C80972) *
              C81012 * C81009 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13245 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C13173 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C13246 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80686) *
              C81012 * C81009 * C81010 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13246 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C13173 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13245) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80686) *
              C81012 * C81009 * C81000 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C13245 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C13173 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C13246 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80686) *
              C81012 * C81009 * C80984 +
          ((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C13246 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C13173 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C13245) +
           (C27053 * C861 + C26924 * C1155 + C27054 * C862 + C26925 * C1156) *
               C80686) *
              C81012 * C81009 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13245 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C13173 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13246 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C13799 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13246 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C13173 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C13245) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80598) *
              C81004 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13246 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C13173 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13245) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C13799 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13245 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C13173 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13246 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80598) *
              C80990 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C13245 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C13173 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C13246 -
            (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 +
             C26924 * C6495) *
                C80686) *
               C81012 * C81009 * C13799 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C13246 -
            ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
              C26924 * C2090) *
                 C13173 +
             (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
              C26924 * C1976) *
                 C13245) +
            (C27053 * C6237 + C26924 * C6497 + C27054 * C6240 +
             C26925 * C6498) *
                C80686) *
               C81012 * C81009 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C81013 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C81006 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80993 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C80639 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C220) *
               C81012 * C81009 * C80972) *
              C13799 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C81006 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C81013 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80993 +
           ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 +
             C26925 * C5824) *
                C220 +
            (C27053 * C5771 + C26924 * C5917 + C27054 * C5774 +
             C26925 * C5920) *
                C80639) *
               C81012 * C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C13173 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80686) *
              C81010 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C13173) *
              C81000 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C13173 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80686) *
              C80984 +
          (((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
                C220 +
            (C27053 * C951 + C26924 * C1261 + C27054 * C952 + C26925 * C1262) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C80639 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C220) *
               C81012 * C81009 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C1878 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C81004 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C1879 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80990 +
            (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C1880 +
            (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 +
             C26925 * C6573) *
                C80965) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C1879 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C81004 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C1878) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80990 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C1880 -
            (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 +
             C26924 * C6573) *
                C80965) *
               C81012 * C81009 * C80686) *
              C13799 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C1879 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C81004 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C1878) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80990 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C1880 -
            (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 +
             C26924 * C2190) *
                C80965) *
               C81012 * C81009 * C13173 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C1878 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C81004 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C1879 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80990 +
            (C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C1880 +
            (C27053 * C6321 + C26924 * C6574 + C27054 * C6326 +
             C26925 * C6578) *
                C80965) *
               C81012 * C81009 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13805 +
                      (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                      C521 * C80598) *
                         C81009 * C26924 +
                     (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                        C80639 * C81013 +
                    ((C40052 - (C40051 + C40050) + C40053) * C81009 * C26924 +
                     (C40054 - (C40055 + C40056) + C40057) * C81009 * C26925) *
                        C80639 * C81006 +
                    ((C40056 + C40055 - C40054 - C40057) * C81009 * C26924 +
                     (C40058 + C40059 - C40060 - C40061) * C81009 * C26925) *
                        C80639 * C80993 +
                    ((C40060 - (C40059 + C40058) + C40061) * C81009 * C26924 +
                     ((C490 * C5661 + C81012 * C5966) * C13806 -
                      (C31958 * C13799 + C31959 * C13805) +
                      (C490 * C5669 + C81012 * C5970) * C80598) *
                         C81009 * C26925) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13175 +
                      (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
                      C521 * C81000 + C522 * C13177 + C523 * C80984 -
                      C524 * C13178 - C525 * C80966) *
                         C81009 * C26924 +
                     (C39436 + C39437 - C39438 - C39439 + C39440 + C39441 -
                      C39442 - C39443) *
                         C81009 * C26925) *
                        C80639 * C13173 +
                    ((C39438 - (C39437 + C39436) + C39439 - C39440 - C39441 +
                      C39442 + C39443) *
                         C81009 * C26924 +
                     (C1394 * C13176 - (C27898 * C81010 + C27899 * C13175) +
                      C1395 * C81000 - C1396 * C13177 - C1397 * C80984 +
                      (C490 * C753 + C81012 * C1364) * C13178 +
                      (C490 * C769 + C81012 * C1372) * C80966) *
                         C81009 * C26925) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13805 +
                       (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                         C81004 +
                     ((C2326 * C13806 -
                       ((C490 * C1693 + C81012 * C2301) * C13799 +
                        (C490 * C1684 + C81012 * C2294) * C13805) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C40894 - (C40895 + C40896) + C40897) * C81009 * C26925) *
                         C80990 +
                     (((C490 * C1686 + C81012 * C2297) * C13805 +
                       (C490 * C1700 + C81012 * C2305) * C13799 -
                       C2330 * C13806 - C2331 * C80598) *
                          C81009 * C26924 +
                      (C40898 + C40899 - C40900 - C40901) * C81009 * C26925) *
                         C80965) *
                        C13173 +
                    (((C40052 - (C40051 + C40050) + C40053) * C81009 * C26924 +
                      (C40054 - (C40055 + C40056) + C40057) * C81009 * C26925) *
                         C81004 +
                     ((C40896 + C40895 - C40894 - C40897) * C81009 * C26924 +
                      (C32670 * C13805 + C32671 * C13799 - C8218 * C13806 -
                       C8219 * C80598) *
                          C81009 * C26925) *
                         C80990 +
                     ((C40900 - (C40899 + C40898) + C40901) * C81009 * C26924 +
                      ((C490 * C6142 + C81012 * C6658) * C13806 -
                       (C32672 * C13799 + C32673 * C13805) +
                       (C490 * C6154 + C81012 * C6664) * C80598) *
                          C81009 * C26925) *
                         C80965) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13873 +
            (C490 * C166 + C81012 * C569) * C81013 - C27896 * C13874 -
            C27982 * C81006 + C27899 * C13875 + C27983 * C80993 -
            C31956 * C13876 - C32011 * C80972) *
               C81009 * C26924 +
           (C27896 * C13873 + C27982 * C81013 - C27899 * C13874 -
            C27983 * C81006 + C31956 * C13875 + C32011 * C80993 -
            C31959 * C13876 - C32012 * C80972) *
               C81009 * C26925) *
              C13799 +
          ((C14284 - (C14283 + C14282) + C14285 - C14286 - C14287 + C14288 +
            C14289) *
               C81009 * C26924 +
           (C1394 * C13874 - (C1496 * C81013 + C1390 * C13873) +
            C1497 * C81006 - C7340 * C13875 - C7418 * C80993 +
            (C490 * C5661 + C81012 * C5966) * C13876 +
            (C490 * C5724 + C81012 * C6016) * C80972) *
               C81009 * C26925) *
              C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13245 +
            (C490 * C166 + C81012 * C569) * C13173 - C27896 * C13246 -
            C27982 * C80686) *
               C81009 * C26924 +
           (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
            C27983 * C80686) *
               C81009 * C26925) *
              C81010 +
          ((C13658 - (C13657 + C13656) + C13659) * C81009 * C26924 +
           (C1394 * C13246 - (C1496 * C13173 + C1390 * C13245) +
            C1497 * C80686) *
               C81009 * C26925) *
              C81000 +
          ((C13662 + C13661 - C13660 - C13663) * C81009 * C26924 +
           (C1392 * C13245 + C1498 * C13173 - C1396 * C13246 - C1499 * C80686) *
               C81009 * C26925) *
              C80984 +
          ((C13666 - (C13665 + C13664) + C13667) * C81009 * C26924 +
           ((C490 * C753 + C81012 * C1364) * C13246 -
            (C3142 * C13173 + C3060 * C13245) +
            (C490 * C862 + C81012 * C1478) * C80686) *
               C81009 * C26925) *
              C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C13245 +
             (C490 * C166 + C81012 * C569) * C13173 - C27896 * C13246 -
             C27982 * C80686) *
                C81009 * C26924 +
            (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
             C27983 * C80686) *
                C81009 * C26925) *
               C13799 +
           ((C13658 - (C13657 + C13656) + C13659) * C81009 * C26924 +
            (C1394 * C13246 - (C1496 * C13173 + C1390 * C13245) +
             C1497 * C80686) *
                C81009 * C26925) *
               C80598) *
              C81004 +
          (((C30701 * C13246 -
             ((C490 * C1790 + C81012 * C2409) * C13173 +
              (C490 * C1684 + C81012 * C2294) * C13245) +
             C30804 * C80686) *
                C81009 * C26924 +
            (C32670 * C13246 - (C30804 * C13173 + C30701 * C13245) +
             C32761 * C80686) *
                C81009 * C26925) *
               C13799 +
           ((C15156 + C15155 - C15154 - C15157) * C81009 * C26924 +
            (C4672 * C13245 + C4788 * C13173 - C8218 * C13246 -
             C8326 * C80686) *
                C81009 * C26925) *
               C80598) *
              C80990 +
          ((((C490 * C1686 + C81012 * C2297) * C13245 +
             (C490 * C1792 + C81012 * C2411) * C13173 - C32668 * C13246 -
             C32762 * C80686) *
                C81009 * C26924 +
            (C32668 * C13245 + C32762 * C13173 - C32673 * C13246 -
             C32763 * C80686) *
                C81009 * C26925) *
               C13799 +
           ((C15160 - (C15159 + C15158) + C15161) * C81009 * C26924 +
            ((C490 * C6142 + C81012 * C6658) * C13246 -
             (C11706 * C13173 + C11600 * C13245) +
             (C490 * C6240 + C81012 * C6744) * C80686) *
                C81009 * C26925) *
               C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81009 * C26924 +
            (C28058 + C28066) * C81009 * C26925) *
               C81013 -
           ((C28067 + C28063) * C81009 * C26925 +
            (C28066 + C28058) * C81009 * C26924) *
               C81006 +
           ((C28063 + C28067) * C81009 * C26924 +
            (C32056 + C32064) * C81009 * C26925) *
               C80993 -
           ((C32065 + C32061) * C81009 * C26925 +
            (C32064 + C32056) * C81009 * C26924) *
               C80972) *
              C13799 +
          (((C1588 + C1602) * C81009 * C26924 +
            (C1589 + C1603) * C81009 * C26925) *
               C81006 -
           ((C1602 + C1588) * C81009 * C26925 +
            (C660 + C644) * C81009 * C26924) *
               C81013 -
           ((C7491 + C7489) * C81009 * C26925 +
            (C1603 + C1589) * C81009 * C26924) *
               C80993 +
           ((C7489 + C7491) * C81009 * C26924 +
            ((C490 * C5661 + C81012 * C5966) * C220 +
             (C490 * C5774 + C81012 * C6062) * C80639) *
                C81009 * C26925) *
               C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81009 * C26924 +
            (C28058 + C28066) * C81009 * C26925) *
               C13173 -
           ((C28067 + C28063) * C81009 * C26925 +
            (C28066 + C28058) * C81009 * C26924) *
               C80686) *
              C81010 +
          (((C1588 + C1602) * C81009 * C26924 +
            (C1589 + C1603) * C81009 * C26925) *
               C80686 -
           ((C1602 + C1588) * C81009 * C26925 +
            (C660 + C644) * C81009 * C26924) *
               C13173) *
              C81000 +
          (((C649 + C661) * C81009 * C26924 +
            (C1592 + C1604) * C81009 * C26925) *
               C13173 -
           ((C1605 + C1597) * C81009 * C26925 +
            (C1604 + C1592) * C81009 * C26924) *
               C80686) *
              C80984 +
          (((C3213 + C3215) * C81009 * C26924 +
            ((C490 * C753 + C81012 * C1364) * C220 +
             (C490 * C952 + C81012 * C1584) * C80639) *
                C81009 * C26925) *
               C80686 -
           ((C3215 + C3213) * C81009 * C26925 +
            (C662 + C650) * C81009 * C26924) *
               C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C1878 +
             (C490 * C221 + C81012 * C637) * C81004 -
             (C490 * C1684 + C81012 * C2294) * C1879 -
             (C490 * C1882 + C81012 * C2509) * C80990 +
             (C490 * C1686 + C81012 * C2297) * C1880 +
             (C490 * C1883 + C81012 * C2510) * C80965) *
                C81009 * C26924 +
            (C32839 + C32840 - C32841 - C32842 + C32843 + C32857) * C81009 *
                C26925) *
               C13173 +
           ((C32841 - (C32840 + C32839) + C32842 - C32843 - C32857) * C81009 *
                C26924 +
            (C32846 - (C32847 + C32848) + C32858 - C32851 - C32859) * C81009 *
                C26925) *
               C80686) *
              C13799 +
          (((C2520 - (C2519 + C2518) + C2538 - C2523 - C2539) * C81009 *
                C26924 +
            (C15260 - (C15261 + C15262) + C15263 - C15264 - C15265) * C81009 *
                C26925) *
               C13173 +
           ((C15262 + C15261 - C15260 - C15263 + C15264 + C15265) * C81009 *
                C26924 +
            (C1394 * C1878 + C1599 * C81004 - C8218 * C1879 - C8432 * C80990 +
             (C490 * C6142 + C81012 * C6658) * C1880 +
             (C490 * C6326 + C81012 * C6824) * C80965) *
                C81009 * C26925) *
               C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78289 +
             (C26926 * C107 + C81009 * C117) * C80593 -
             (C26926 * C100 + C81009 * C106) * C78285 -
             (C26926 * C108 + C81009 * C118) * C80601 +
             (C26926 * C101 + C81009 * C109) * C78295 +
             (C26926 * C110 + C81009 * C119) * C15341) *
                C26924 +
            (C41172 + C41173 - C41174 - C41175 + C41176 + C41177) * C26925) *
               C81012 * C80933 +
           (((C26926 * C1682 + C81009 * C1690) * C78285 -
             ((C26926 * C1693 + C81009 * C1707) * C80593 +
              (C26926 * C1684 + C81009 * C1694) * C78289) +
             (C26926 * C1692 + C81009 * C1706) * C80601 -
             (C26926 * C1683 + C81009 * C1691) * C78295 -
             (C26926 * C1695 + C81009 * C1708) * C15341) *
                C26924 +
            (C41886 - (C41887 + C41888) + C41889 - C41890 - C41891) * C26925) *
               C81012 * C80726) *
              C13173 +
          (((C41174 - (C41173 + C41172) + C41175 - C41176 - C41177) * C26924 +
            (C41178 - (C41179 + C41180) + C41181 - C41182 - C41183) * C26925) *
               C81012 * C80933 +
           ((C41888 + C41887 - C41886 - C41889 + C41890 + C41891) * C26924 +
            (C32160 * C78289 + C32161 * C80593 - C33600 * C78285 -
             C33601 * C80601 + (C26926 * C7589 + C81009 * C7590) * C78295 +
             (C26926 * C7591 + C81009 * C7592) * C15341) *
                C26925) *
               C81012 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C80593 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C13246 - (C27476 * C13173 + C27366 * C13245) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80601 +
                     (((C26926 * C101 + C81009 * C109) * C13245 +
                       (C26926 * C168 + C81009 * C174) * C13173 -
                       C27368 * C13246 - C27478 * C80686) *
                          C26924 +
                      (C27368 * C13245 + C27478 * C13173 - C27374 * C13246 -
                       C27479 * C80686) *
                          C26925) *
                         C81012 * C15341) *
                        C80933 +
                    (((C30064 * C13246 -
                       ((C26926 * C1790 + C81009 * C1798) * C13173 +
                        (C26926 * C1684 + C81009 * C1694) * C13245) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C13246 - (C30178 * C13173 + C30064 * C13245) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C80593 +
                     (((C26926 * C1682 + C81009 * C1690) * C13245 +
                       (C26926 * C1788 + C81009 * C1796) * C13173 -
                       C30062 * C13246 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C13245 + C30179 * C13173 - C33600 * C13246 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80601 +
                     ((C30066 * C13246 -
                       ((C26926 * C1789 + C81009 * C1797) * C13173 +
                        (C26926 * C1683 + C81009 * C1691) * C13245) +
                       C30180 * C80686) *
                          C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C13246 -
                       (C30180 * C13173 + C30066 * C13245) +
                       (C26926 * C7691 + C81009 * C7692) * C80686) *
                          C26925) *
                         C81012 * C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       (C26926 * C1684 + C81009 * C1694) * C3422 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C30279 + C30280 - C30281 - C30297) * C26925) *
                         C81012 * C13173 +
                     ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                      (C33803 - (C33804 + C33805) + C33806) * C26925) *
                         C81012 * C80686) *
                        C80593 +
                    ((((C26926 * C1682 + C81009 * C1690) * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C30284 - (C30285 + C30286) + C30298) * C26925) *
                         C81012 * C13173 +
                     ((C30286 + C30285 - C30284 - C30298) * C26924 +
                      (C33807 + C33808 - C33809 - C33813) * C26925) *
                         C81012 * C80686) *
                        C80601 +
                    ((((C26926 * C101 + C81009 * C109) * C3421 +
                       (C26926 * C223 + C81009 * C229) * C80933 -
                       (C26926 * C1683 + C81009 * C1691) * C3422 -
                       (C26926 * C1885 + C81009 * C1893) * C80726) *
                          C26924 +
                      (C30289 + C30290 - C30291 - C30299) * C26925) *
                         C81012 * C13173 +
                     ((C30291 - (C30290 + C30289) + C30299) * C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C3422 -
                       (C27577 * C80933 + C27374 * C3421) +
                       (C26926 * C7791 + C81009 * C7792) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78289 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80593 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78285 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80601 +
            (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C78295 +
            (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
                C15341) *
               C81012 * C81009 * C80933 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78285 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80593 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78289) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80601 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C78295 -
            (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 +
             C26924 * C1981) *
                C15341) *
               C81012 * C81009 * C80726) *
              C13173 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78285 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80593 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78289) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80601 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C78295 -
            (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
                C15341) *
               C81012 * C81009 * C80933 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78289 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80593 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78285 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80601 +
            (C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C78295 +
            (C27053 * C3988 + C26924 * C4311 + C27054 * C7591 +
             C26925 * C7892) *
                C15341) *
               C81012 * C81009 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13245 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C13173 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13246 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C80593 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13246 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C13173 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C13245) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80601 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C13245 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C13173 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C13246 -
            (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
                C80686) *
               C81012 * C81009 * C15341) *
              C80933 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13246 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C13173 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13245) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C80593 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13245 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C13173 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13246 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80601 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C13246 -
            ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
              C26924 * C2086) *
                 C13173 +
             (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
              C26924 * C1973) *
                 C13245) +
            (C27053 * C4095 + C26924 * C4425 + C27054 * C7691 +
             C26925 * C7997) *
                C80686) *
               C81012 * C81009 * C15341) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C3421 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80933 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C3422 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C3422 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80933 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C3421) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80593 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C3422 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80933 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C3421) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C3421 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80933 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C3422 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80601 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C3421 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80933 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C3422 -
            (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 +
             C26924 * C2191) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C3422 -
            ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                 C80933 +
             (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                 C3421) +
            (C27053 * C4201 + C26924 * C4541 + C27054 * C7791 +
             C26925 * C8105) *
                C80726) *
               C81012 * C81009 * C80686) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78289 +
             (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
             C521 * C80601 + C522 * C78295 + C523 * C15341) *
                C81009 * C26924 +
            (C41628 + C41629 - C41630 - C41631 + C41632 + C41633) * C81009 *
                C26925) *
               C80933 +
           ((C2326 * C78285 -
             ((C490 * C1693 + C81012 * C2301) * C80593 +
              (C490 * C1684 + C81012 * C2294) * C78289) +
             C2327 * C80601 - C2328 * C78295 - C2329 * C15341) *
                C81009 * C26924 +
            (C42480 - (C42481 + C42482) + C42483 - C42484 - C42485) * C81009 *
                C26925) *
               C80726) *
              C13173 +
          (((C41630 - (C41629 + C41628) + C41631 - C41632 - C41633) * C81009 *
                C26924 +
            (C41634 - (C41635 + C41636) + C41637 - C41638 - C41639) * C81009 *
                C26925) *
               C80933 +
           ((C42482 + C42481 - C42480 - C42483 + C42484 + C42485) * C81009 *
                C26924 +
            (C32670 * C78289 + C32671 * C80593 - C8218 * C78285 -
             C8219 * C80601 + (C490 * C7589 + C81012 * C8211) * C78295 +
             (C490 * C7591 + C81012 * C8212) * C15341) *
                C81009 * C26925) *
               C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13245 +
                       (C490 * C166 + C81012 * C569) * C13173 -
                       C27896 * C13246 - C27982 * C80686) *
                          C81009 * C26924 +
                      (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
                       C27983 * C80686) *
                          C81009 * C26925) *
                         C80593 +
                     ((C13658 - (C13657 + C13656) + C13659) * C81009 * C26924 +
                      (C1394 * C13246 - (C1496 * C13173 + C1390 * C13245) +
                       C1497 * C80686) *
                          C81009 * C26925) *
                         C80601 +
                     ((C13662 + C13661 - C13660 - C13663) * C81009 * C26924 +
                      (C1392 * C13245 + C1498 * C13173 - C1396 * C13246 -
                       C1499 * C80686) *
                          C81009 * C26925) *
                         C15341) *
                        C80933 +
                    (((C30701 * C13246 -
                       ((C490 * C1790 + C81012 * C2409) * C13173 +
                        (C490 * C1684 + C81012 * C2294) * C13245) +
                       C30804 * C80686) *
                          C81009 * C26924 +
                      (C32670 * C13246 - (C30804 * C13173 + C30701 * C13245) +
                       C32761 * C80686) *
                          C81009 * C26925) *
                         C80593 +
                     ((C15156 + C15155 - C15154 - C15157) * C81009 * C26924 +
                      (C4672 * C13245 + C4788 * C13173 - C8218 * C13246 -
                       C8326 * C80686) *
                          C81009 * C26925) *
                         C80601 +
                     ((C16758 - (C16757 + C16756) + C16759) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C13246 -
                       (C4789 * C13173 + C4674 * C13245) +
                       (C490 * C7691 + C81012 * C8317) * C80686) *
                          C81009 * C26925) *
                         C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                         C13173 +
                     ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                      (C34410 - (C34411 + C34412) + C34413) * C81009 * C26925) *
                         C80686) *
                        C80593 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                      (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                         C13173 +
                     ((C4896 + C4895 - C4894 - C4906) * C81009 * C26924 +
                      (C8427 + C8428 - C8429 - C8433) * C81009 * C26925) *
                         C80686) *
                        C80601 +
                    (((C3873 + C3872 - C3871 - C3874) * C81009 * C26924 +
                      (C4899 + C4900 - C4901 - C4907) * C81009 * C26925) *
                         C13173 +
                     ((C4901 - (C4900 + C4899) + C4907) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C3422 -
                       (C1601 * C80933 + C1396 * C3421) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C39032 + C39033 - C39034 - C39035 + C39036 + C39037 -
                      C39038 - C39039) *
                         C26925) *
                        C81012 * C80639 * C13173 +
                    ((C39034 - (C39033 + C39032) + C39035 - C39036 - C39037 +
                      C39038 + C39039) *
                         C26924 +
                     (C27370 * C13176 - (C27371 * C81010 + C27372 * C13175) +
                      C27373 * C81000 - C27374 * C13177 - C27375 * C80984 +
                      (C26926 * C753 + C81009 * C768) * C13178 +
                      (C26926 * C769 + C81009 * C777) * C80966) *
                         C26925) *
                        C81012 * C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13805 +
                      (C26926 * C107 + C81009 * C117) * C13799 -
                      (C26926 * C100 + C81009 * C106) * C13806 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C26924 +
                     (C39642 + C39643 - C39644 - C39645) * C26925) *
                        C81012 * C80639 * C81013 +
                    ((C39644 - (C39643 + C39642) + C39645) * C26924 +
                     (C39646 - (C39647 + C39648) + C39649) * C26925) *
                        C81012 * C80639 * C81006 +
                    ((C39648 + C39647 - C39646 - C39649) * C26924 +
                     (C39650 + C39651 - C39652 - C39653) * C26925) *
                        C81012 * C80639 * C80993 +
                    ((C39652 - (C39651 + C39650) + C39653) * C26924 +
                     ((C26926 * C5661 + C81009 * C5667) * C13806 -
                      (C31660 * C13799 + C31661 * C13805) +
                      (C26926 * C5669 + C81009 * C5673) * C80598) *
                         C26925) *
                        C81012 * C80639 * C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13245 +
                      (C26926 * C166 + C81009 * C172) * C13173 -
                      C27364 * C13246 - C27474 * C80686) *
                         C26924 +
                     (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                      C27475 * C80686) *
                         C26925) *
                        C81012 * C81010 +
                    ((C27366 * C13246 -
                      ((C26926 * C167 + C81009 * C173) * C13173 +
                       (C26926 * C100 + C81009 * C106) * C13245) +
                      C27476 * C80686) *
                         C26924 +
                     (C27370 * C13246 - (C27476 * C13173 + C27366 * C13245) +
                      C27477 * C80686) *
                         C26925) *
                        C81012 * C81000 +
                    (((C26926 * C101 + C81009 * C109) * C13245 +
                      (C26926 * C168 + C81009 * C174) * C13173 -
                      C27368 * C13246 - C27478 * C80686) *
                         C26924 +
                     (C27368 * C13245 + C27478 * C13173 - C27374 * C13246 -
                      C27479 * C80686) *
                         C26925) *
                        C81012 * C80984 +
                    ((C28810 * C13246 -
                      ((C26926 * C169 + C81009 * C175) * C13173 +
                       (C26926 * C102 + C81009 * C111) * C13245) +
                      C28882 * C80686) *
                         C26924 +
                     ((C26926 * C753 + C81009 * C768) * C13246 -
                      (C28882 * C13173 + C28810 * C13245) +
                      (C26926 * C862 + C81009 * C870) * C80686) *
                         C26925) *
                        C81012 * C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C13873 + C27474 * C81013 - C27372 * C13874 -
                      C27475 * C81006 + C31658 * C13875 + C31714 * C80993 -
                      C31661 * C13876 - C31715 * C80972) *
                         C26925) *
                        C81012 * C13799 +
                    ((C27366 * C13874 -
                      ((C26926 * C167 + C81009 * C173) * C81013 +
                       (C26926 * C100 + C81009 * C106) * C13873) +
                      C27476 * C81006 - C27370 * C13875 - C27477 * C80993 +
                      C32940 * C13876 + C33012 * C80972) *
                         C26924 +
                     (C27370 * C13874 - (C27476 * C81013 + C27366 * C13873) +
                      C27477 * C81006 - C32940 * C13875 - C33012 * C80993 +
                      (C26926 * C5661 + C81009 * C5667) * C13876 +
                      (C26926 * C5724 + C81009 * C5728) * C80972) *
                         C26925) *
                        C81012 * C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q));
    d2eexz[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C26924 +
                      (C27554 + C27578) * C26925) *
                         C81012 * C13173 -
                     ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                         C81012 * C80686) *
                        C81010 +
                    (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                         C81012 * C80686 -
                     ((C27580 + C27560) * C26925 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C26924) *
                         C81012 * C13173) *
                        C81000 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C26924 +
                      (C27566 + C27582) * C26925) *
                         C81012 * C13173 -
                     ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) *
                         C81012 * C80686) *
                        C80984 +
                    (((C28949 + C28953) * C26924 +
                      ((C26926 * C753 + C81009 * C768) * C220 +
                       (C26926 * C952 + C81009 * C960) * C80639) *
                          C26925) *
                         C81012 * C80686 -
                     ((C28953 + C28949) * C26925 +
                      ((C26926 * C224 + C81009 * C230) * C80639 +
                       (C26926 * C102 + C81009 * C111) * C220) *
                          C26924) *
                         C81012 * C13173) *
                        C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C26924 +
                      (C27554 + C27578) * C26925) *
                         C81012 * C81013 -
                     ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                         C81012 * C81006 +
                     ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) *
                         C81012 * C80993 -
                     ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) *
                         C81012 * C80972) *
                        C13799 +
                    (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                         C81012 * C81006 -
                     ((C27580 + C27560) * C26925 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C26924) *
                         C81012 * C81013 -
                     ((C33083 + C33081) * C26925 + (C27581 + C27563) * C26924) *
                         C81012 * C80993 +
                     ((C33081 + C33083) * C26924 +
                      ((C26926 * C5661 + C81009 * C5667) * C220 +
                       (C26926 * C5774 + C81009 * C5778) * C80639) *
                          C26925) *
                         C81012 * C80972) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13175 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C81010 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C13176 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C81000 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C13177 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80984 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C13178 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C80639 * C13173 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13176 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C81010 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13175) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C81000 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C13177 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80984 +
           (C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C13178 +
           (C27053 * C761 + C26924 * C1046 + C27054 * C769 + C26925 * C1050) *
               C80966) *
              C81012 * C81009 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13805 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C13799 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C13806 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80598) *
              C81012 * C81009 * C80639 * C81013 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13806 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C13799 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13805) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C81006 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C13805 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C13799 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C13806 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C80993 +
          ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C13806 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C13799 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C13805) +
           (C27053 * C5662 + C26924 * C5825 + C27054 * C5669 + C26925 * C5828) *
               C80598) *
              C81012 * C81009 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13245 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C13173 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C13246 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80686) *
              C81012 * C81009 * C81010 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13246 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C13173 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13245) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80686) *
              C81012 * C81009 * C81000 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C13245 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C13173 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C13246 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80686) *
              C81012 * C81009 * C80984 +
          ((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C13246 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C13173 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C13245) +
           (C27053 * C861 + C26924 * C1155 + C27054 * C862 + C26925 * C1156) *
               C80686) *
              C81012 * C81009 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13873 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81013 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C13874 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C81006 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C13875 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80993 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C13876 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C13799 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C13874 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C81013 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13873) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C81006 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C13875 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80993 +
           (C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C13876 +
           (C27053 * C5721 + C26924 * C5873 + C27054 * C5724 + C26925 * C5874) *
               C80972) *
              C81012 * C81009 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C13173 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80686) *
              C81010 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C13173) *
              C81000 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C13173 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80686) *
              C80984 +
          (((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
                C220 +
            (C27053 * C951 + C26924 * C1261 + C27054 * C952 + C26925 * C1262) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C80639 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C220) *
               C81012 * C81009 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C81013 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C81006 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80993 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C80639 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C220) *
               C81012 * C81009 * C80972) *
              C13799 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C81006 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C81013 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80993 +
           ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 +
             C26925 * C5824) *
                C220 +
            (C27053 * C5771 + C26924 * C5917 + C27054 * C5774 +
             C26925 * C5920) *
                C80639) *
               C81012 * C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13175 +
                      (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
                      C521 * C81000 + C522 * C13177 + C523 * C80984 -
                      C524 * C13178 - C525 * C80966) *
                         C81009 * C26924 +
                     (C39436 + C39437 - C39438 - C39439 + C39440 + C39441 -
                      C39442 - C39443) *
                         C81009 * C26925) *
                        C80639 * C13173 +
                    ((C39438 - (C39437 + C39436) + C39439 - C39440 - C39441 +
                      C39442 + C39443) *
                         C81009 * C26924 +
                     (C1394 * C13176 - (C27898 * C81010 + C27899 * C13175) +
                      C1395 * C81000 - C1396 * C13177 - C1397 * C80984 +
                      (C490 * C753 + C81012 * C1364) * C13178 +
                      (C490 * C769 + C81012 * C1372) * C80966) *
                         C81009 * C26925) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13805 +
                      (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                      C521 * C80598) *
                         C81009 * C26924 +
                     (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                        C80639 * C81013 +
                    ((C40052 - (C40051 + C40050) + C40053) * C81009 * C26924 +
                     (C40054 - (C40055 + C40056) + C40057) * C81009 * C26925) *
                        C80639 * C81006 +
                    ((C40056 + C40055 - C40054 - C40057) * C81009 * C26924 +
                     (C40058 + C40059 - C40060 - C40061) * C81009 * C26925) *
                        C80639 * C80993 +
                    ((C40060 - (C40059 + C40058) + C40061) * C81009 * C26924 +
                     ((C490 * C5661 + C81012 * C5966) * C13806 -
                      (C31958 * C13799 + C31959 * C13805) +
                      (C490 * C5669 + C81012 * C5970) * C80598) *
                         C81009 * C26925) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13245 +
            (C490 * C166 + C81012 * C569) * C13173 - C27896 * C13246 -
            C27982 * C80686) *
               C81009 * C26924 +
           (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
            C27983 * C80686) *
               C81009 * C26925) *
              C81010 +
          ((C13658 - (C13657 + C13656) + C13659) * C81009 * C26924 +
           (C1394 * C13246 - (C1496 * C13173 + C1390 * C13245) +
            C1497 * C80686) *
               C81009 * C26925) *
              C81000 +
          ((C13662 + C13661 - C13660 - C13663) * C81009 * C26924 +
           (C1392 * C13245 + C1498 * C13173 - C1396 * C13246 - C1499 * C80686) *
               C81009 * C26925) *
              C80984 +
          ((C13666 - (C13665 + C13664) + C13667) * C81009 * C26924 +
           ((C490 * C753 + C81012 * C1364) * C13246 -
            (C3142 * C13173 + C3060 * C13245) +
            (C490 * C862 + C81012 * C1478) * C80686) *
               C81009 * C26925) *
              C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C13873 +
            (C490 * C166 + C81012 * C569) * C81013 - C27896 * C13874 -
            C27982 * C81006 + C27899 * C13875 + C27983 * C80993 -
            C31956 * C13876 - C32011 * C80972) *
               C81009 * C26924 +
           (C27896 * C13873 + C27982 * C81013 - C27899 * C13874 -
            C27983 * C81006 + C31956 * C13875 + C32011 * C80993 -
            C31959 * C13876 - C32012 * C80972) *
               C81009 * C26925) *
              C13799 +
          ((C14284 - (C14283 + C14282) + C14285 - C14286 - C14287 + C14288 +
            C14289) *
               C81009 * C26924 +
           (C1394 * C13874 - (C1496 * C81013 + C1390 * C13873) +
            C1497 * C81006 - C7340 * C13875 - C7418 * C80993 +
            (C490 * C5661 + C81012 * C5966) * C13876 +
            (C490 * C5724 + C81012 * C6016) * C80972) *
               C81009 * C26925) *
              C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C13173 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C80686) *
                        C81010 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C80686 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C13173) *
                        C81000 +
                    (((C649 + C661) * C81009 * C26924 +
                      (C1592 + C1604) * C81009 * C26925) *
                         C13173 -
                     ((C1605 + C1597) * C81009 * C26925 +
                      (C1604 + C1592) * C81009 * C26924) *
                         C80686) *
                        C80984 +
                    (((C3213 + C3215) * C81009 * C26924 +
                      ((C490 * C753 + C81012 * C1364) * C220 +
                       (C490 * C952 + C81012 * C1584) * C80639) *
                          C81009 * C26925) *
                         C80686 -
                     ((C3215 + C3213) * C81009 * C26925 +
                      (C662 + C650) * C81009 * C26924) *
                         C13173) *
                        C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C81013 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C81006 +
                     ((C28063 + C28067) * C81009 * C26924 +
                      (C32056 + C32064) * C81009 * C26925) *
                         C80993 -
                     ((C32065 + C32061) * C81009 * C26925 +
                      (C32064 + C32056) * C81009 * C26924) *
                         C80972) *
                        C13799 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C81006 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C81013 -
                     ((C7491 + C7489) * C81009 * C26925 +
                      (C1603 + C1589) * C81009 * C26924) *
                         C80993 +
                     ((C7489 + C7491) * C81009 * C26924 +
                      ((C490 * C5661 + C81012 * C5966) * C220 +
                       (C490 * C5774 + C81012 * C6062) * C80639) *
                          C81009 * C26925) *
                         C80972) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C32926 + C32927 - C32928 - C32929) * C26925) *
                         C81012 * C17817 +
                     (((C26926 * C1682 + C81009 * C1690) * C78260 -
                       ((C26926 * C1693 + C81009 * C1707) * C80916 +
                        (C26926 * C1684 + C81009 * C1694) * C78279) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C33590 - (C33591 + C33592) + C33593) * C26925) *
                         C81012 * C80726) *
                        C80682 +
                    (((C32928 - (C32927 + C32926) + C32929) * C26924 +
                      (C32930 - (C32931 + C32932) + C32933) * C26925) *
                         C81012 * C17817 +
                     ((C33592 + C33591 - C33590 - C33593) * C26924 +
                      (C33594 + C33595 - C33602 - C33603) * C26925) *
                         C81012 * C80726) *
                        C80689 +
                    (((C32932 + C32931 - C32930 - C32933) * C26924 +
                      (C32934 + C32935 - C32942 - C32943) * C26925) *
                         C81012 * C17817 +
                     ((C33602 - (C33595 + C33594) + C33603) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C78260 -
                       (C34488 * C80916 + C34489 * C78279) +
                       (C26926 * C8504 + C81009 * C8506) * C80598) *
                          C26925) *
                         C81012 * C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78437 +
             (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
             C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
                C26924 +
            (C27364 * C78437 + C27474 * C80682 - C27372 * C78429 -
             C27475 * C80689 + C31658 * C78443 + C31714 * C15344) *
                C26925) *
               C81012 * C80916 +
           ((C27366 * C78429 -
             ((C26926 * C167 + C81009 * C173) * C80682 +
              (C26926 * C100 + C81009 * C106) * C78437) +
             C27476 * C80689 - C27370 * C78443 - C27477 * C15344) *
                C26924 +
            (C27370 * C78429 - (C27476 * C80682 + C27366 * C78437) +
             C27477 * C80689 - C32940 * C78443 - C33012 * C15344) *
                C26925) *
               C81012 * C80598) *
              C17817 +
          (((C30064 * C78429 -
             ((C26926 * C1790 + C81009 * C1798) * C80682 +
              (C26926 * C1684 + C81009 * C1694) * C78437) +
             C30178 * C80689 - C32160 * C78443 - C32252 * C15344) *
                C26924 +
            (C32160 * C78429 - (C30178 * C80682 + C30064 * C78437) +
             C32252 * C80689 - C34489 * C78443 - C34562 * C15344) *
                C26925) *
               C81012 * C80916 +
           (((C26926 * C1682 + C81009 * C1690) * C78437 +
             (C26926 * C1788 + C81009 * C1796) * C80682 - C30062 * C78429 -
             C30179 * C80689 + C33600 * C78443 + C33704 * C15344) *
                C26924 +
            (C30062 * C78437 + C30179 * C80682 - C33600 * C78429 -
             C33704 * C80689 + (C26926 * C8500 + C81009 * C8502) * C78443 +
             (C26926 * C8574 + C81009 * C8576) * C15344) *
                C26925) *
               C81012 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       (C26926 * C1684 + C81009 * C1694) * C17952 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C44460 + C44461 - C44462 - C44463) * C26925) *
                         C81012 * C80682 +
                     ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                      (C44464 - (C44465 + C44466) + C44467) * C26925) *
                         C81012 * C80689 +
                     ((C44466 + C44465 - C44464 - C44467) * C26924 +
                      (C49210 + C49211 - C49212 - C49213) * C26925) *
                         C81012 * C15344) *
                        C80916 +
                    ((((C26926 * C1682 + C81009 * C1690) * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C44468 - (C44469 + C44470) + C44471) * C26925) *
                         C81012 * C80682 +
                     ((C44470 + C44469 - C44468 - C44471) * C26924 +
                      (C44472 + C44473 - C44474 - C44475) * C26925) *
                         C81012 * C80689 +
                     ((C44474 - (C44473 + C44472) + C44475) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C17952 -
                       (C33082 * C17817 + C32940 * C17951) +
                       (C26926 * C8644 + C81009 * C8646) * C80726) *
                          C26925) *
                         C81012 * C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78279 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80916 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78260 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78260 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80916 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78279) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80682 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78260 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80916 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78279) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78279 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80916 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78260 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80689 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C78279 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80916 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C78260 -
            (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C78260 -
            ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
              C26924 * C6416) *
                 C80916 +
             (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
              C26924 * C6410) *
                 C78279) +
            (C27053 * C6147 + C26924 * C6415 + C27054 * C8504 +
             C26925 * C8716) *
                C80598) *
               C81012 * C81009 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78437 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80682 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C78429 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80689 +
            (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C78443 +
            (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
                C15344) *
               C81012 * C81009 * C80916 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78429 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C80682 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C78437) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80689 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C78443 -
            (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
                C15344) *
               C81012 * C81009 * C80598) *
              C17817 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78429 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C80682 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78437) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80689 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C78443 -
            (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 +
             C26924 * C6493) *
                C15344) *
               C81012 * C81009 * C80916 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78437 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80682 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78429 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80689 +
            (C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C78443 +
            (C27053 * C6235 + C26924 * C6494 + C27054 * C8574 +
             C26925 * C8784) *
                C15344) *
               C81012 * C81009 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C17951 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C17817 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C17952 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C80682 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C17952 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C17817 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C17951) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80689 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C17951 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C17817 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C17952 -
            (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 +
             C26924 * C6575) *
                C80726) *
               C81012 * C81009 * C15344) *
              C80916 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C17952 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C17817 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C17951) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C80682 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C17951 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C17817 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C17952 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80689 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C17952 -
            ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 +
              C26924 * C1258) *
                 C17817 +
             (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
              C26924 * C1040) *
                 C17951) +
            (C27053 * C6323 + C26924 * C6577 + C27054 * C8644 +
             C26925 * C8852) *
                C80726) *
               C81012 * C81009 * C15344) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C78279 +
                       (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                         C17817 +
                     ((C2326 * C78260 -
                       ((C490 * C1693 + C81012 * C2301) * C80916 +
                        (C490 * C1684 + C81012 * C2294) * C78279) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C34206 - (C34207 + C34208) + C34209) * C81009 * C26925) *
                         C80726) *
                        C80682 +
                    (((C33350 - (C33349 + C33348) + C33351) * C81009 * C26924 +
                      (C33352 - (C33353 + C33354) + C33355) * C81009 * C26925) *
                         C17817 +
                     ((C34208 + C34207 - C34206 - C34209) * C81009 * C26924 +
                      (C34210 + C34211 - C34212 - C34213) * C81009 * C26925) *
                         C80726) *
                        C80689 +
                    (((C33354 + C33353 - C33352 - C33355) * C81009 * C26924 +
                      (C33356 + C33357 - C33358 - C33359) * C81009 * C26925) *
                         C17817 +
                     ((C34212 - (C34211 + C34210) + C34213) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C78260 -
                       (C34912 * C80916 + C34913 * C78279) +
                       (C490 * C8504 + C81012 * C8922) * C80598) *
                          C81009 * C26925) *
                         C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78437 +
             (C490 * C166 + C81012 * C569) * C80682 - C27896 * C78429 -
             C27982 * C80689 + C27899 * C78443 + C27983 * C15344) *
                C81009 * C26924 +
            (C27896 * C78437 + C27982 * C80682 - C27899 * C78429 -
             C27983 * C80689 + C31956 * C78443 + C32011 * C15344) *
                C81009 * C26925) *
               C80916 +
           ((C15884 - (C15883 + C15882) + C15885 - C15886 - C15887) * C81009 *
                C26924 +
            (C1394 * C78429 - (C1496 * C80682 + C1390 * C78437) +
             C1497 * C80689 - C7340 * C78443 - C7418 * C15344) *
                C81009 * C26925) *
               C80598) *
              C17817 +
          (((C30701 * C78429 -
             ((C490 * C1790 + C81012 * C2409) * C80682 +
              (C490 * C1684 + C81012 * C2294) * C78437) +
             C30804 * C80689 - C32670 * C78443 - C32761 * C15344) *
                C81009 * C26924 +
            (C32670 * C78429 - (C30804 * C80682 + C30701 * C78437) +
             C32761 * C80689 - C34913 * C78443 - C34985 * C15344) *
                C81009 * C26925) *
               C80916 +
           ((C17650 + C17649 - C17648 - C17651 + C17652 + C17653) * C81009 *
                C26924 +
            (C4672 * C78437 + C4788 * C80682 - C8218 * C78429 - C8326 * C80689 +
             (C490 * C8500 + C81012 * C8920) * C78443 +
             (C490 * C8574 + C81012 * C8990) * C15344) *
                C81009 * C26925) *
               C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                         C80682 +
                     ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                      (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                         C80689 +
                     ((C45070 + C45069 - C45068 - C45071) * C81009 * C26924 +
                      (C49610 + C49611 - C49612 - C49613) * C81009 * C26925) *
                         C15344) *
                        C80916 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                      (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                         C80682 +
                     ((C19278 + C19277 - C19276 - C19279) * C81009 * C26924 +
                      (C19280 + C19281 - C19282 - C19283) * C81009 * C26925) *
                         C80689 +
                     ((C19282 - (C19281 + C19280) + C19283) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C17952 -
                       (C7490 * C17817 + C7340 * C17951) +
                       (C490 * C8644 + C81012 * C9058) * C80726) *
                          C81009 * C26925) *
                         C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C5657 +
                       (C26926 * C107 + C81009 * C117) * C80588) *
                          C26924 +
                      (C31646 + C31647) * C26925) *
                         C81012 * C80722 -
                     ((C32144 + C32145) * C26925 +
                      ((C26926 * C1693 + C81009 * C1707) * C80588 +
                       (C26926 * C1684 + C81009 * C1694) * C5657) *
                          C26924) *
                         C81012 * C80729 +
                     (((C26926 * C1686 + C81009 * C1698) * C5657 +
                       (C26926 * C1700 + C81009 * C1710) * C80588) *
                          C26924 +
                      (C32164 + C32165) * C26925) *
                         C81012 * C20867) *
                        C80682 +
                    (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) *
                         C81012 * C80729 -
                     ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) *
                         C81012 * C80722 -
                     ((C32168 + C32169) * C26925 + (C32165 + C32164) * C26924) *
                         C81012 * C20867) *
                        C80689 +
                    (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) *
                         C81012 * C80722 -
                     ((C34490 + C34491) * C26925 + (C32167 + C32166) * C26924) *
                         C81012 * C80729 +
                     ((C32169 + C32168) * C26924 +
                      ((C26926 * C32139 + C81009 * C32140) * C5657 +
                       (C26926 * C32141 + C81009 * C32142) * C80588) *
                          C26925) *
                         C81012 * C20867) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78437 +
            (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
            C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
               C26924 +
           (C27364 * C78437 + C27474 * C80682 - C27372 * C78429 -
            C27475 * C80689 + C31658 * C78443 + C31714 * C15344) *
               C26925) *
              C81012 * C80588 * C80722 +
          ((C30064 * C78429 -
            ((C26926 * C1790 + C81009 * C1798) * C80682 +
             (C26926 * C1684 + C81009 * C1694) * C78437) +
            C30178 * C80689 - C32160 * C78443 - C32252 * C15344) *
               C26924 +
           (C32160 * C78429 - (C30178 * C80682 + C30064 * C78437) +
            C32252 * C80689 - C34489 * C78443 - C34562 * C15344) *
               C26925) *
              C81012 * C80588 * C80729 +
          (((C26926 * C1686 + C81009 * C1698) * C78437 +
            (C26926 * C1792 + C81009 * C1800) * C80682 - C32158 * C78429 -
            C32253 * C80689 + C32163 * C78443 + C32254 * C15344) *
               C26924 +
           (C32158 * C78437 + C32253 * C80682 - C32163 * C78429 -
            C32254 * C80689 + (C26926 * C32139 + C81009 * C32140) * C78443 +
            (C26926 * C32243 + C81009 * C32244) * C15344) *
               C26925) *
              C81012 * C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78528 +
            (C26926 * C221 + C81009 * C227) * C80722 -
            (C26926 * C1684 + C81009 * C1694) * C78520 -
            (C26926 * C1882 + C81009 * C1890) * C80729 +
            (C26926 * C1686 + C81009 * C1698) * C78534 +
            (C26926 * C1883 + C81009 * C1891) * C20867) *
               C26924 +
           (C47512 + C47513 - C47514 - C47515 + C47516 + C47517) * C26925) *
              C81012 * C80682 +
          ((C47514 - (C47513 + C47512) + C47515 - C47516 - C47517) * C26924 +
           (C52210 - (C52211 + C52212) + C52213 - C52214 - C52215) * C26925) *
              C81012 * C80689 +
          ((C52212 + C52211 - C52210 - C52213 + C52214 + C52215) * C26924 +
           (C31658 * C78528 + C31766 * C80722 - C34489 * C78520 -
            C34636 * C80729 + (C26926 * C32139 + C81009 * C32140) * C78534 +
            (C26926 * C32328 + C81009 * C32329) * C20867) *
               C26925) *
              C81012 * C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C80722 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C80729 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C5657 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80588) *
               C81012 * C81009 * C20867) *
              C80682 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C80729 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C80722 -
           ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
             C26924 * C6414) *
                C80588 +
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C5657) *
               C81012 * C81009 * C20867) *
              C80689 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C80722 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C80729 +
           ((C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
             C26925 * C32425) *
                C5657 +
            (C27053 * C6153 + C26924 * C6417 + C27054 * C32141 +
             C26925 * C32426) *
                C80588) *
               C81012 * C81009 * C20867) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78437 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80682 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C78429 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80689 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C78443 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C15344) *
              C81012 * C81009 * C80588 * C80722 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C78429 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80682 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C78437) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C80689 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C78443 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C15344) *
              C81012 * C81009 * C80588 * C80729 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C78437 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C80682 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C78429 -
           (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 + C26924 * C6495) *
               C80689 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C78443 +
           (C27053 * C6239 + C26924 * C6496 + C27054 * C32243 +
            C26925 * C32501) *
               C15344) *
              C81012 * C81009 * C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78528 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80722 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C78520 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80729 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C78534 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C20867) *
              C81012 * C81009 * C80682 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C78520 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80722 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C78528) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C80729 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C78534 -
           (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 + C26924 * C6573) *
               C20867) *
              C81012 * C81009 * C80689 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C78528 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C80722 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C78520 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C80729 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C78534 +
           (C27053 * C6325 + C26924 * C6576 + C27054 * C32328 +
            C26925 * C32576) *
               C20867) *
              C81012 * C81009 * C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81009 * C26924 +
                      (C31944 + C31945) * C81009 * C26925) *
                         C80722 -
                     ((C32654 + C32655) * C81009 * C26925 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81009 * C26924) *
                         C80729 +
                     (((C490 * C1686 + C81012 * C2297) * C5657 +
                       (C490 * C1700 + C81012 * C2305) * C80588) *
                          C81009 * C26924 +
                      (C32674 + C32675) * C81009 * C26925) *
                         C20867) *
                        C80682 +
                    (((C32655 + C32654) * C81009 * C26924 +
                      (C32676 + C32677) * C81009 * C26925) *
                         C80729 -
                     ((C31946 + C31947) * C81009 * C26925 +
                      (C31945 + C31944) * C81009 * C26924) *
                         C80722 -
                     ((C32678 + C32679) * C81009 * C26925 +
                      (C32675 + C32674) * C81009 * C26924) *
                         C20867) *
                        C80689 +
                    (((C31947 + C31946) * C81009 * C26924 +
                      (C31960 + C31961) * C81009 * C26925) *
                         C80722 -
                     ((C34914 + C34915) * C81009 * C26925 +
                      (C32677 + C32676) * C81009 * C26924) *
                         C80729 +
                     ((C32679 + C32678) * C81009 * C26924 +
                      ((C490 * C32139 + C81012 * C32651) * C5657 +
                       (C490 * C32141 + C81012 * C32652) * C80588) *
                          C81009 * C26925) *
                         C20867) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78437 +
            (C490 * C166 + C81012 * C569) * C80682 - C27896 * C78429 -
            C27982 * C80689 + C27899 * C78443 + C27983 * C15344) *
               C81009 * C26924 +
           (C27896 * C78437 + C27982 * C80682 - C27899 * C78429 -
            C27983 * C80689 + C31956 * C78443 + C32011 * C15344) *
               C81009 * C26925) *
              C80588 * C80722 +
          ((C30701 * C78429 -
            ((C490 * C1790 + C81012 * C2409) * C80682 +
             (C490 * C1684 + C81012 * C2294) * C78437) +
            C30804 * C80689 - C32670 * C78443 - C32761 * C15344) *
               C81009 * C26924 +
           (C32670 * C78429 - (C30804 * C80682 + C30701 * C78437) +
            C32761 * C80689 - C34913 * C78443 - C34985 * C15344) *
               C81009 * C26925) *
              C80588 * C80729 +
          (((C490 * C1686 + C81012 * C2297) * C78437 +
            (C490 * C1792 + C81012 * C2411) * C80682 - C32668 * C78429 -
            C32762 * C80689 + C32673 * C78443 + C32763 * C15344) *
               C81009 * C26924 +
           (C32668 * C78437 + C32762 * C80682 - C32673 * C78429 -
            C32763 * C80689 + (C490 * C32139 + C81012 * C32651) * C78443 +
            (C490 * C32243 + C81012 * C32753) * C15344) *
               C81009 * C26925) *
              C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78528 +
            (C490 * C221 + C81012 * C637) * C80722 -
            (C490 * C1684 + C81012 * C2294) * C78520 -
            (C490 * C1882 + C81012 * C2509) * C80729 +
            (C490 * C1686 + C81012 * C2297) * C78534 +
            (C490 * C1883 + C81012 * C2510) * C20867) *
               C81009 * C26924 +
           (C48112 + C48113 - C48114 - C48115 + C48116 + C48117) * C81009 *
               C26925) *
              C80682 +
          ((C48114 - (C48113 + C48112) + C48115 - C48116 - C48117) * C81009 *
               C26924 +
           (C52660 - (C52661 + C52662) + C52663 - C52664 - C52665) * C81009 *
               C26925) *
              C80689 +
          ((C52662 + C52661 - C52660 - C52663 + C52664 + C52665) * C81009 *
               C26924 +
           (C31956 * C78528 + C32062 * C80722 - C34913 * C78520 -
            C35058 * C80729 + (C490 * C32139 + C81012 * C32651) * C78534 +
            (C490 * C32328 + C81012 * C32837) * C20867) *
               C81009 * C26925) *
              C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C17817 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C80726) *
              C81013 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C80726 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C17817) *
              C81006 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C17817 -
           ((C34490 + C34491) * C26925 + (C32167 + C32166) * C26924) * C81012 *
               C80726) *
              C80993 +
          (((C34491 + C34490) * C26924 +
            ((C26926 * C34479 + C81009 * C34480) * C5657 +
             (C26926 * C34481 + C81009 * C34482) * C80588) *
                C26925) *
               C81012 * C80726 -
           ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
               C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C4987 +
             (C26926 * C107 + C81009 * C117) * C80998 -
             (C26926 * C100 + C81009 * C106) * C4988 -
             (C26926 * C108 + C81009 * C118) * C80982 +
             (C26926 * C101 + C81009 * C109) * C4989 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C26924 +
            (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
               C81012 * C17817 +
           (((C26926 * C1682 + C81009 * C1690) * C4988 -
             ((C26926 * C1693 + C81009 * C1707) * C80998 +
              (C26926 * C1684 + C81009 * C1694) * C4987) +
             (C26926 * C1692 + C81009 * C1706) * C80982 -
             (C26926 * C1683 + C81009 * C1691) * C4989 -
             (C26926 * C1695 + C81009 * C1708) * C80954) *
                C26924 +
            (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C26925) *
               C81012 * C80726) *
              C13173 +
          (((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C26924 +
            (C30990 - (C30991 + C30992) + C30993 - C30994 - C30995) * C26925) *
               C81012 * C17817 +
           ((C48218 + C48217 - C48216 - C48219 + C48220 + C48221) * C26924 +
            (C32160 * C4987 + C32161 * C80998 - C33600 * C4988 -
             C33601 * C80982 + (C26926 * C7589 + C81009 * C7590) * C4989 +
             (C26926 * C7591 + C81009 * C7592) * C80954) *
                C26925) *
               C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C81014 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C81008 +
           (((C26926 * C1686 + C81009 * C1698) * C5657 +
             (C26926 * C1700 + C81009 * C1710) * C80588) *
                C26924 +
            (C32164 + C32165) * C26925) *
               C81012 * C80996 -
           ((C38388 + C38389) * C26925 +
            ((C26926 * C10473 + C81009 * C10481) * C80588 +
             (C26926 * C10469 + C81009 * C10475) * C5657) *
                C26924) *
               C81012 * C80978) *
              C13173 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C81008 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C81014 -
           ((C32168 + C32169) * C26925 + (C32165 + C32164) * C26924) * C81012 *
               C80996 +
           ((C38389 + C38388) * C26924 +
            ((C26926 * C38377 + C81009 * C38378) * C5657 +
             (C26926 * C38379 + C81009 * C38380) * C80588) *
                C26925) *
               C81012 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C13873 + C27474 * C81013 - C27372 * C13874 -
                      C27475 * C81006 + C31658 * C13875 + C31714 * C80993 -
                      C31661 * C13876 - C31715 * C80972) *
                         C26925) *
                        C81012 * C80588 * C17817 +
                    ((C30064 * C13874 -
                      ((C26926 * C1790 + C81009 * C1798) * C81013 +
                       (C26926 * C1684 + C81009 * C1694) * C13873) +
                      C30178 * C81006 - C32160 * C13875 - C32252 * C80993 +
                      C34489 * C13876 + C34562 * C80972) *
                         C26924 +
                     (C32160 * C13874 - (C30178 * C81013 + C30064 * C13873) +
                      C32252 * C81006 - C34489 * C13875 - C34562 * C80993 +
                      (C26926 * C34479 + C81009 * C34480) * C13876 +
                      (C26926 * C34557 + C81009 * C34558) * C80972) *
                         C26925) *
                        C81012 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C80998 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C13246 - (C27476 * C13173 + C27366 * C13245) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80982 +
                     (((C26926 * C101 + C81009 * C109) * C13245 +
                       (C26926 * C168 + C81009 * C174) * C13173 -
                       C27368 * C13246 - C27478 * C80686) *
                          C26924 +
                      (C27368 * C13245 + C27478 * C13173 - C27374 * C13246 -
                       C27479 * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C17817 +
                    (((C30064 * C13246 -
                       ((C26926 * C1790 + C81009 * C1798) * C13173 +
                        (C26926 * C1684 + C81009 * C1694) * C13245) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C13246 - (C30178 * C13173 + C30064 * C13245) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C80998 +
                     (((C26926 * C1682 + C81009 * C1690) * C13245 +
                       (C26926 * C1788 + C81009 * C1796) * C13173 -
                       C30062 * C13246 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C13245 + C30179 * C13173 - C33600 * C13246 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80982 +
                     ((C30066 * C13246 -
                       ((C26926 * C1789 + C81009 * C1797) * C13173 +
                        (C26926 * C1683 + C81009 * C1691) * C13245) +
                       C30180 * C80686) *
                          C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C13246 -
                       (C30180 * C13173 + C30066 * C13245) +
                       (C26926 * C7691 + C81009 * C7692) * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13245 +
                      (C26926 * C166 + C81009 * C172) * C13173 -
                      C27364 * C13246 - C27474 * C80686) *
                         C26924 +
                     (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                      C27475 * C80686) *
                         C26925) *
                        C81012 * C80588 * C81014 +
                    ((C30064 * C13246 -
                      ((C26926 * C1790 + C81009 * C1798) * C13173 +
                       (C26926 * C1684 + C81009 * C1694) * C13245) +
                      C30178 * C80686) *
                         C26924 +
                     (C32160 * C13246 - (C30178 * C13173 + C30064 * C13245) +
                      C32252 * C80686) *
                         C26925) *
                        C81012 * C80588 * C81008 +
                    (((C26926 * C1686 + C81009 * C1698) * C13245 +
                      (C26926 * C1792 + C81009 * C1800) * C13173 -
                      C32158 * C13246 - C32253 * C80686) *
                         C26924 +
                     (C32158 * C13245 + C32253 * C13173 - C32163 * C13246 -
                      C32254 * C80686) *
                         C26925) *
                        C81012 * C80588 * C80996 +
                    ((C38387 * C13246 -
                      ((C26926 * C10527 + C81009 * C10531) * C13173 +
                       (C26926 * C10469 + C81009 * C10475) * C13245) +
                      C38460 * C80686) *
                         C26924 +
                     ((C26926 * C38377 + C81009 * C38378) * C13246 -
                      (C38460 * C13173 + C38387 * C13245) +
                      (C26926 * C38455 + C81009 * C38456) * C80686) *
                         C26925) *
                        C81012 * C80588 * C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      (C26926 * C1684 + C81009 * C1694) * C17952 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C44460 + C44461 - C44462 - C44463) * C26925) *
                        C81012 * C81013 +
                    ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                     (C44464 - (C44465 + C44466) + C44467) * C26925) *
                        C81012 * C81006 +
                    ((C44466 + C44465 - C44464 - C44467) * C26924 +
                     (C49210 + C49211 - C49212 - C49213) * C26925) *
                        C81012 * C80993 +
                    ((C49212 - (C49211 + C49210) + C49213) * C26924 +
                     ((C26926 * C34479 + C81009 * C34480) * C17952 -
                      (C31767 * C17817 + C31661 * C17951) +
                      (C26926 * C34628 + C81009 * C34629) * C80726) *
                         C26925) *
                        C81012 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       (C26926 * C1684 + C81009 * C1694) * C17952 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C44460 + C44461 - C44462 - C44463) * C26925) *
                         C81012 * C13173 +
                     ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                      (C44464 - (C44465 + C44466) + C44467) * C26925) *
                         C81012 * C80686) *
                        C80998 +
                    ((((C26926 * C1682 + C81009 * C1690) * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C44468 - (C44469 + C44470) + C44471) * C26925) *
                         C81012 * C13173 +
                     ((C44470 + C44469 - C44468 - C44471) * C26924 +
                      (C44472 + C44473 - C44474 - C44475) * C26925) *
                         C81012 * C80686) *
                        C80982 +
                    ((((C26926 * C101 + C81009 * C109) * C17951 +
                       (C26926 * C223 + C81009 * C229) * C17817 -
                       (C26926 * C1683 + C81009 * C1691) * C17952 -
                       (C26926 * C1885 + C81009 * C1893) * C80726) *
                          C26924 +
                      (C45960 + C45961 - C45962 - C45963) * C26925) *
                         C81012 * C13173 +
                     ((C45962 - (C45961 + C45960) + C45963) * C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C17952 -
                       (C27577 * C17817 + C27374 * C17951) +
                       (C26926 * C7791 + C81009 * C7792) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C19485 +
                      (C26926 * C221 + C81009 * C227) * C81014 -
                      (C26926 * C1684 + C81009 * C1694) * C19486 -
                      (C26926 * C1882 + C81009 * C1890) * C81008 +
                      (C26926 * C1686 + C81009 * C1698) * C19487 +
                      (C26926 * C1883 + C81009 * C1891) * C80996 -
                      (C26926 * C10469 + C81009 * C10475) * C19488 -
                      (C26926 * C10582 + C81009 * C10586) * C80978) *
                         C26924 +
                     (C49812 + C49813 - C49814 - C49815 + C49816 + C49817 -
                      C49818 - C49819) *
                         C26925) *
                        C81012 * C13173 +
                    ((C49814 - (C49813 + C49812) + C49815 - C49816 - C49817 +
                      C49818 + C49819) *
                         C26924 +
                     (C32160 * C19486 - (C27573 * C81014 + C27372 * C19485) +
                      C32347 * C81008 - C32163 * C19487 - C32348 * C80996 +
                      (C26926 * C38377 + C81009 * C38378) * C19488 +
                      (C26926 * C38526 + C81009 * C38527) * C80978) *
                         C26925) *
                        C81012 * C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C17817 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C80726) *
              C81013 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C17817) *
              C81006 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C17817 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C80726) *
              C80993 +
          (((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
             C26925 * C34703) *
                C5657 +
            (C27053 * C8503 + C26924 * C8715 + C27054 * C34481 +
             C26925 * C34704) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C80588 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C5657) *
               C81012 * C81009 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C4987 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80998 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C4988 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80982 +
            (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C4989 +
            (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
                C80954) *
               C81012 * C81009 * C17817 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C4988 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80998 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C4987) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80982 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C4989 -
            (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 +
             C26924 * C1981) *
                C80954) *
               C81012 * C81009 * C80726) *
              C13173 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C4988 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80998 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C4987) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80982 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C4989 -
            (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
                C80954) *
               C81012 * C81009 * C17817 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C4987 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80998 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C4988 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80982 +
            (C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C4989 +
            (C27053 * C3988 + C26924 * C4311 + C27054 * C7591 +
             C26925 * C7892) *
                C80954) *
               C81012 * C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C81014 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C81008 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C5657 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80588) *
               C81012 * C81009 * C80996 -
           ((C27054 * C12547 + C26925 * C12759 + C27053 * C10473 +
             C26924 * C10636) *
                C80588 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C5657) *
               C81012 * C81009 * C80978) *
              C13173 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C81008 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C81014 -
           ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
             C26924 * C6414) *
                C80588 +
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C5657) *
               C81012 * C81009 * C80996 +
           ((C27053 * C12543 + C26924 * C12757 + C27054 * C38377 +
             C26925 * C38605) *
                C5657 +
            (C27053 * C12547 + C26924 * C12759 + C27054 * C38379 +
             C26925 * C38606) *
                C80588) *
               C81012 * C81009 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13873 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81013 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C13874 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C81006 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C13875 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80993 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C13876 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C80588 * C17817 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C13874 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C81013 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C13873) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C81006 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C13875 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C80993 +
           (C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C13876 +
           (C27053 * C8573 + C26924 * C8783 + C27054 * C34557 +
            C26925 * C34771) *
               C80972) *
              C81012 * C81009 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13245 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C13173 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13246 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C80998 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13246 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C13173 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C13245) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80982 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C13245 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C13173 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C13246 -
            (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
                C80686) *
               C81012 * C81009 * C80954) *
              C17817 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13246 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C13173 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13245) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C80998 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13245 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C13173 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13246 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80982 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C13246 -
            ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
              C26924 * C2086) *
                 C13173 +
             (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
              C26924 * C1973) *
                 C13245) +
            (C27053 * C4095 + C26924 * C4425 + C27054 * C7691 +
             C26925 * C7997) *
                C80686) *
               C81012 * C81009 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13245 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C13173 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C13246 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80686) *
              C81012 * C81009 * C80588 * C81014 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C13246 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C13173 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C13245) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C80686) *
              C81012 * C81009 * C80588 * C81008 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C13245 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C13173 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C13246 -
           (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 + C26924 * C6495) *
               C80686) *
              C81012 * C81009 * C80588 * C80996 +
          ((C27053 * C12543 + C26924 * C12757 + C27054 * C38377 +
            C26925 * C38605) *
               C13246 -
           ((C27054 * C12617 + C26925 * C12827 + C27053 * C10527 +
             C26924 * C10682) *
                C13173 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C13245) +
           (C27053 * C12617 + C26924 * C12827 + C27054 * C38455 +
            C26925 * C38673) *
               C80686) *
              C81012 * C81009 * C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C17951 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C17817 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C17952 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C81013 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C17952 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C17817 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C17951) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C80726) *
              C81012 * C81009 * C81006 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C17951 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C17817 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C17952 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C80726) *
              C81012 * C81009 * C80993 +
          ((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C17952 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C17817 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C17951) +
           (C27053 * C8643 + C26924 * C8851 + C27054 * C34628 +
            C26925 * C34838) *
               C80726) *
              C81012 * C81009 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C17951 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C17817 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C17952 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C17952 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C17817 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C17951) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80998 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C17952 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C17817 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C17951) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C17951 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C17817 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C17952 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80982 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C17951 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C17817 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C17952 -
            (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 +
             C26924 * C2191) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C17952 -
            ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                 C17817 +
             (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                 C17951) +
            (C27053 * C4201 + C26924 * C4541 + C27054 * C7791 +
             C26925 * C8105) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C19485 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C81014 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C19486 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C81008 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C19487 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80996 -
           (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
            C26924 * C10632) *
               C19488 -
           (C27054 * C12687 + C26925 * C12895 + C27053 * C10582 +
            C26924 * C10727) *
               C80978) *
              C81012 * C81009 * C13173 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C19486 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C81014 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C19485) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C81008 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C19487 -
           (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 + C26924 * C6573) *
               C80996 +
           (C27053 * C12543 + C26924 * C12757 + C27054 * C38377 +
            C26925 * C38605) *
               C19488 +
           (C27053 * C12687 + C26924 * C12895 + C27054 * C38526 +
            C26925 * C38740) *
               C80978) *
              C81012 * C81009 * C80686) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5657 +
             (C490 * C107 + C81012 * C497) * C80588) *
                C81009 * C26924 +
            (C31944 + C31945) * C81009 * C26925) *
               C17817 -
           ((C32654 + C32655) * C81009 * C26925 +
            ((C490 * C1693 + C81012 * C2301) * C80588 +
             (C490 * C1684 + C81012 * C2294) * C5657) *
                C81009 * C26924) *
               C80726) *
              C81013 +
          (((C32655 + C32654) * C81009 * C26924 +
            (C32676 + C32677) * C81009 * C26925) *
               C80726 -
           ((C31946 + C31947) * C81009 * C26925 +
            (C31945 + C31944) * C81009 * C26924) *
               C17817) *
              C81006 +
          (((C31947 + C31946) * C81009 * C26924 +
            (C31960 + C31961) * C81009 * C26925) *
               C17817 -
           ((C34914 + C34915) * C81009 * C26925 +
            (C32677 + C32676) * C81009 * C26924) *
               C80726) *
              C80993 +
          (((C34915 + C34914) * C81009 * C26924 +
            ((C490 * C34479 + C81012 * C34905) * C5657 +
             (C490 * C34481 + C81012 * C34906) * C80588) *
                C81009 * C26925) *
               C80726 -
           ((C31962 + C31963) * C81009 * C26925 +
            (C31961 + C31960) * C81009 * C26924) *
               C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C4987 +
             (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
             C521 * C80982 + C522 * C4989 + C523 * C80954) *
                C81009 * C26924 +
            (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) * C81009 *
                C26925) *
               C17817 +
           ((C2326 * C4988 -
             ((C490 * C1693 + C81012 * C2301) * C80998 +
              (C490 * C1684 + C81012 * C2294) * C4987) +
             C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
                C81009 * C26924 +
            (C48810 - (C48811 + C48812) + C48813 - C48814 - C48815) * C81009 *
                C26925) *
               C80726) *
              C13173 +
          (((C31442 - (C31441 + C31440) + C31443 - C31444 - C31445) * C81009 *
                C26924 +
            (C31446 - (C31447 + C31448) + C31449 - C31450 - C31451) * C81009 *
                C26925) *
               C17817 +
           ((C48812 + C48811 - C48810 - C48813 + C48814 + C48815) * C81009 *
                C26924 +
            (C32670 * C4987 + C32671 * C80998 - C8218 * C4988 - C8219 * C80982 +
             (C490 * C7589 + C81012 * C8211) * C4989 +
             (C490 * C7591 + C81012 * C8212) * C80954) *
                C81009 * C26925) *
               C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5657 +
             (C490 * C107 + C81012 * C497) * C80588) *
                C81009 * C26924 +
            (C31944 + C31945) * C81009 * C26925) *
               C81014 -
           ((C32654 + C32655) * C81009 * C26925 +
            ((C490 * C1693 + C81012 * C2301) * C80588 +
             (C490 * C1684 + C81012 * C2294) * C5657) *
                C81009 * C26924) *
               C81008 +
           (((C490 * C1686 + C81012 * C2297) * C5657 +
             (C490 * C1700 + C81012 * C2305) * C80588) *
                C81009 * C26924 +
            (C32674 + C32675) * C81009 * C26925) *
               C80996 -
           ((C38816 + C38817) * C81009 * C26925 +
            ((C490 * C10473 + C81012 * C10778) * C80588 +
             (C490 * C10469 + C81012 * C10774) * C5657) *
                C81009 * C26924) *
               C80978) *
              C13173 +
          (((C32655 + C32654) * C81009 * C26924 +
            (C32676 + C32677) * C81009 * C26925) *
               C81008 -
           ((C31946 + C31947) * C81009 * C26925 +
            (C31945 + C31944) * C81009 * C26924) *
               C81014 -
           ((C32678 + C32679) * C81009 * C26925 +
            (C32675 + C32674) * C81009 * C26924) *
               C80996 +
           ((C38817 + C38816) * C81009 * C26924 +
            ((C490 * C38377 + C81012 * C38807) * C5657 +
             (C490 * C38379 + C81012 * C38808) * C80588) *
                C81009 * C26925) *
               C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13873 +
                      (C490 * C166 + C81012 * C569) * C81013 - C27896 * C13874 -
                      C27982 * C81006 + C27899 * C13875 + C27983 * C80993 -
                      C31956 * C13876 - C32011 * C80972) *
                         C81009 * C26924 +
                     (C27896 * C13873 + C27982 * C81013 - C27899 * C13874 -
                      C27983 * C81006 + C31956 * C13875 + C32011 * C80993 -
                      C31959 * C13876 - C32012 * C80972) *
                         C81009 * C26925) *
                        C80588 * C17817 +
                    ((C30701 * C13874 -
                      ((C490 * C1790 + C81012 * C2409) * C81013 +
                       (C490 * C1684 + C81012 * C2294) * C13873) +
                      C30804 * C81006 - C32670 * C13875 - C32761 * C80993 +
                      C34913 * C13876 + C34985 * C80972) *
                         C81009 * C26924 +
                     (C32670 * C13874 - (C30804 * C81013 + C30701 * C13873) +
                      C32761 * C81006 - C34913 * C13875 - C34985 * C80993 +
                      (C490 * C34479 + C81012 * C34905) * C13876 +
                      (C490 * C34557 + C81012 * C34981) * C80972) *
                         C81009 * C26925) *
                        C80588 * C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13245 +
                       (C490 * C166 + C81012 * C569) * C13173 -
                       C27896 * C13246 - C27982 * C80686) *
                          C81009 * C26924 +
                      (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
                       C27983 * C80686) *
                          C81009 * C26925) *
                         C80998 +
                     ((C13658 - (C13657 + C13656) + C13659) * C81009 * C26924 +
                      (C1394 * C13246 - (C1496 * C13173 + C1390 * C13245) +
                       C1497 * C80686) *
                          C81009 * C26925) *
                         C80982 +
                     ((C13662 + C13661 - C13660 - C13663) * C81009 * C26924 +
                      (C1392 * C13245 + C1498 * C13173 - C1396 * C13246 -
                       C1499 * C80686) *
                          C81009 * C26925) *
                         C80954) *
                        C17817 +
                    (((C30701 * C13246 -
                       ((C490 * C1790 + C81012 * C2409) * C13173 +
                        (C490 * C1684 + C81012 * C2294) * C13245) +
                       C30804 * C80686) *
                          C81009 * C26924 +
                      (C32670 * C13246 - (C30804 * C13173 + C30701 * C13245) +
                       C32761 * C80686) *
                          C81009 * C26925) *
                         C80998 +
                     ((C15156 + C15155 - C15154 - C15157) * C81009 * C26924 +
                      (C4672 * C13245 + C4788 * C13173 - C8218 * C13246 -
                       C8326 * C80686) *
                          C81009 * C26925) *
                         C80982 +
                     ((C16758 - (C16757 + C16756) + C16759) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C13246 -
                       (C4789 * C13173 + C4674 * C13245) +
                       (C490 * C7691 + C81012 * C8317) * C80686) *
                          C81009 * C26925) *
                         C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13245 +
                      (C490 * C166 + C81012 * C569) * C13173 - C27896 * C13246 -
                      C27982 * C80686) *
                         C81009 * C26924 +
                     (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
                      C27983 * C80686) *
                         C81009 * C26925) *
                        C80588 * C81014 +
                    ((C30701 * C13246 -
                      ((C490 * C1790 + C81012 * C2409) * C13173 +
                       (C490 * C1684 + C81012 * C2294) * C13245) +
                      C30804 * C80686) *
                         C81009 * C26924 +
                     (C32670 * C13246 - (C30804 * C13173 + C30701 * C13245) +
                      C32761 * C80686) *
                         C81009 * C26925) *
                        C80588 * C81008 +
                    (((C490 * C1686 + C81012 * C2297) * C13245 +
                      (C490 * C1792 + C81012 * C2411) * C13173 -
                      C32668 * C13246 - C32762 * C80686) *
                         C81009 * C26924 +
                     (C32668 * C13245 + C32762 * C13173 - C32673 * C13246 -
                      C32763 * C80686) *
                         C81009 * C26925) *
                        C80588 * C80996 +
                    ((C38815 * C13246 -
                      ((C490 * C10527 + C81012 * C10824) * C13173 +
                       (C490 * C10469 + C81012 * C10774) * C13245) +
                      C38887 * C80686) *
                         C81009 * C26924 +
                     ((C490 * C38377 + C81012 * C38807) * C13246 -
                      (C38887 * C13173 + C38815 * C13245) +
                      (C490 * C38455 + C81012 * C38883) * C80686) *
                         C81009 * C26925) *
                        C80588 * C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                        C81013 +
                    ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                     (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                        C81006 +
                    ((C45070 + C45069 - C45068 - C45071) * C81009 * C26924 +
                     (C49610 + C49611 - C49612 - C49613) * C81009 * C26925) *
                        C80993 +
                    ((C49612 - (C49611 + C49610) + C49613) * C81009 * C26924 +
                     ((C490 * C34479 + C81012 * C34905) * C17952 -
                      (C32063 * C17817 + C31959 * C17951) +
                      (C490 * C34628 + C81012 * C35051) * C80726) *
                         C81009 * C26925) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                         C13173 +
                     ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                      (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                         C80686) *
                        C80998 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                      (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                         C13173 +
                     ((C19278 + C19277 - C19276 - C19279) * C81009 * C26924 +
                      (C19280 + C19281 - C19282 - C19283) * C81009 * C26925) *
                         C80686) *
                        C80982 +
                    (((C18368 + C18367 - C18366 - C18369) * C81009 * C26924 +
                      (C20788 + C20789 - C20790 - C20791) * C81009 * C26925) *
                         C13173 +
                     ((C20790 - (C20789 + C20788) + C20791) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C17952 -
                       (C1601 * C17817 + C1396 * C17951) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C19485 +
                      (C490 * C221 + C81012 * C637) * C81014 -
                      (C490 * C1684 + C81012 * C2294) * C19486 -
                      (C490 * C1882 + C81012 * C2509) * C81008 +
                      (C490 * C1686 + C81012 * C2297) * C19487 +
                      (C490 * C1883 + C81012 * C2510) * C80996 -
                      (C490 * C10469 + C81012 * C10774) * C19488 -
                      (C490 * C10582 + C81012 * C10869) * C80978) *
                         C81009 * C26924 +
                     (C50216 + C50217 - C50218 - C50219 + C50220 + C50221 -
                      C50222 - C50223) *
                         C81009 * C26925) *
                        C13173 +
                    ((C50218 - (C50217 + C50216) + C50219 - C50220 - C50221 +
                      C50222 + C50223) *
                         C81009 * C26924 +
                     (C32670 * C19486 - (C28065 * C81014 + C27899 * C19485) +
                      C32855 * C81008 - C32673 * C19487 - C32856 * C80996 +
                      (C490 * C38377 + C81012 * C38807) * C19488 +
                      (C490 * C38526 + C81012 * C38953) * C80978) *
                         C81009 * C26925) *
                        C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eexx[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C32926 + C32927 - C32928 - C32929) * C26925) *
                         C81012 * C80722 +
                     (((C26926 * C1682 + C81009 * C1690) * C78260 -
                       ((C26926 * C1693 + C81009 * C1707) * C80916 +
                        (C26926 * C1684 + C81009 * C1694) * C78279) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C33590 - (C33591 + C33592) + C33593) * C26925) *
                         C81012 * C80729 +
                     (((C26926 * C1686 + C81009 * C1698) * C78279 +
                       (C26926 * C1700 + C81009 * C1710) * C80916 -
                       (C26926 * C1687 + C81009 * C1699) * C78260 -
                       (C26926 * C1701 + C81009 * C1711) * C80598) *
                          C26924 +
                      (C36908 + C36909 - C36916 - C36917) * C26925) *
                         C81012 * C20867) *
                        C13173 +
                    (((C32928 - (C32927 + C32926) + C32929) * C26924 +
                      (C32930 - (C32931 + C32932) + C32933) * C26925) *
                         C81012 * C80722 +
                     ((C33592 + C33591 - C33590 - C33593) * C26924 +
                      (C33594 + C33595 - C33602 - C33603) * C26925) *
                         C81012 * C80729 +
                     ((C36916 - (C36909 + C36908) + C36917) * C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C78260 -
                       (C32162 * C80916 + C32163 * C78279) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C26925) *
                         C81012 * C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C80916 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C13246 - (C27476 * C13173 + C27366 * C13245) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C80722 +
                    (((C30064 * C13246 -
                       ((C26926 * C1790 + C81009 * C1798) * C13173 +
                        (C26926 * C1684 + C81009 * C1694) * C13245) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C13246 - (C30178 * C13173 + C30064 * C13245) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C80916 +
                     (((C26926 * C1682 + C81009 * C1690) * C13245 +
                       (C26926 * C1788 + C81009 * C1796) * C13173 -
                       C30062 * C13246 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C13245 + C30179 * C13173 - C33600 * C13246 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C80729 +
                    ((((C26926 * C1686 + C81009 * C1698) * C13245 +
                       (C26926 * C1792 + C81009 * C1800) * C13173 -
                       C32158 * C13246 - C32253 * C80686) *
                          C26924 +
                      (C32158 * C13245 + C32253 * C13173 - C32163 * C13246 -
                       C32254 * C80686) *
                          C26925) *
                         C81012 * C80916 +
                     ((C36914 * C13246 -
                       ((C26926 * C1793 + C81009 * C1801) * C13173 +
                        (C26926 * C1687 + C81009 * C1699) * C13245) +
                       C37018 * C80686) *
                          C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C13246 -
                       (C37018 * C13173 + C36914 * C13245) +
                       (C26926 * C6240 + C81009 * C6246) * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78528 +
             (C26926 * C221 + C81009 * C227) * C80722 -
             (C26926 * C1684 + C81009 * C1694) * C78520 -
             (C26926 * C1882 + C81009 * C1890) * C80729 +
             (C26926 * C1686 + C81009 * C1698) * C78534 +
             (C26926 * C1883 + C81009 * C1891) * C20867) *
                C26924 +
            (C47512 + C47513 - C47514 - C47515 + C47516 + C47517) * C26925) *
               C81012 * C13173 +
           ((C47514 - (C47513 + C47512) + C47515 - C47516 - C47517) * C26924 +
            (C32160 * C78520 - (C27573 * C80722 + C27372 * C78528) +
             C32347 * C80729 - C32163 * C78534 - C32348 * C20867) *
                C26925) *
               C81012 * C80686) *
              C80916 +
          ((((C26926 * C1682 + C81009 * C1690) * C78520 -
             ((C26926 * C222 + C81009 * C228) * C80722 +
              (C26926 * C100 + C81009 * C106) * C78528) +
             (C26926 * C1881 + C81009 * C1889) * C80729 -
             (C26926 * C1687 + C81009 * C1699) * C78534 -
             (C26926 * C1884 + C81009 * C1892) * C20867) *
                C26924 +
            (C47518 - (C47519 + C47520) + C47521 - C47522 - C47523) * C26925) *
               C81012 * C13173 +
           ((C47520 + C47519 - C47518 - C47521 + C47522 + C47523) * C26924 +
            (C27370 * C78528 + C27575 * C80722 - C33600 * C78520 -
             C33812 * C80729 + (C26926 * C6142 + C81009 * C6152) * C78534 +
             (C26926 * C6326 + C81009 * C6332) * C20867) *
                C26925) *
               C81012 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78279 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80916 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78260 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C80722 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78260 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80916 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78279) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80729 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C78279 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80916 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C78260 -
            (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 +
             C26924 * C1984) *
                C80598) *
               C81012 * C81009 * C20867) *
              C13173 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78260 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80916 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78279) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C80722 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78279 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80916 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78260 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80729 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C78260 -
            ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
              C26924 * C6414) *
                 C80916 +
             (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
              C26924 * C6408) *
                 C78279) +
            (C27053 * C6143 + C26924 * C6413 + C27054 * C6154 +
             C26925 * C6418) *
                C80598) *
               C81012 * C81009 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13245 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C13173 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13246 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C80916 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13246 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C13173 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C13245) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80598) *
              C80722 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13246 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C13173 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13245) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C80916 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13245 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C13173 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13246 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80598) *
              C80729 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C13245 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C13173 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C13246 -
            (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 +
             C26924 * C6495) *
                C80686) *
               C81012 * C81009 * C80916 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C13246 -
            ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
              C26924 * C2090) *
                 C13173 +
             (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
              C26924 * C1976) *
                 C13245) +
            (C27053 * C6237 + C26924 * C6497 + C27054 * C6240 +
             C26925 * C6498) *
                C80686) *
               C81012 * C81009 * C80598) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78528 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80722 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C78520 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80729 +
            (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C78534 +
            (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 +
             C26925 * C6573) *
                C20867) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78520 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80722 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78528) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80729 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C78534 -
            (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 +
             C26924 * C6573) *
                C20867) *
               C81012 * C81009 * C80686) *
              C80916 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78520 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80722 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C78528) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80729 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C78534 -
            (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 +
             C26924 * C2190) *
                C20867) *
               C81012 * C81009 * C13173 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78528 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80722 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78520 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80729 +
            (C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C78534 +
            (C27053 * C6321 + C26924 * C6574 + C27054 * C6326 +
             C26925 * C6578) *
                C20867) *
               C81012 * C81009 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C78279 +
                       (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                         C80722 +
                     ((C2326 * C78260 -
                       ((C490 * C1693 + C81012 * C2301) * C80916 +
                        (C490 * C1684 + C81012 * C2294) * C78279) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C34206 - (C34207 + C34208) + C34209) * C81009 * C26925) *
                         C80729 +
                     (((C490 * C1686 + C81012 * C2297) * C78279 +
                       (C490 * C1700 + C81012 * C2305) * C80916 -
                       C2330 * C78260 - C2331 * C80598) *
                          C81009 * C26924 +
                      (C37518 + C37519 - C37520 - C37521) * C81009 * C26925) *
                         C20867) *
                        C13173 +
                    (((C33350 - (C33349 + C33348) + C33351) * C81009 * C26924 +
                      (C33352 - (C33353 + C33354) + C33355) * C81009 * C26925) *
                         C80722 +
                     ((C34208 + C34207 - C34206 - C34209) * C81009 * C26924 +
                      (C34210 + C34211 - C34212 - C34213) * C81009 * C26925) *
                         C80729 +
                     ((C37520 - (C37519 + C37518) + C37521) * C81009 * C26924 +
                      ((C490 * C6142 + C81012 * C6658) * C78260 -
                       (C32672 * C80916 + C32673 * C78279) +
                       (C490 * C6154 + C81012 * C6664) * C80598) *
                          C81009 * C26925) *
                         C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13245 +
                       (C490 * C166 + C81012 * C569) * C13173 -
                       C27896 * C13246 - C27982 * C80686) *
                          C81009 * C26924 +
                      (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
                       C27983 * C80686) *
                          C81009 * C26925) *
                         C80916 +
                     ((C13658 - (C13657 + C13656) + C13659) * C81009 * C26924 +
                      (C1394 * C13246 - (C1496 * C13173 + C1390 * C13245) +
                       C1497 * C80686) *
                          C81009 * C26925) *
                         C80598) *
                        C80722 +
                    (((C30701 * C13246 -
                       ((C490 * C1790 + C81012 * C2409) * C13173 +
                        (C490 * C1684 + C81012 * C2294) * C13245) +
                       C30804 * C80686) *
                          C81009 * C26924 +
                      (C32670 * C13246 - (C30804 * C13173 + C30701 * C13245) +
                       C32761 * C80686) *
                          C81009 * C26925) *
                         C80916 +
                     ((C15156 + C15155 - C15154 - C15157) * C81009 * C26924 +
                      (C4672 * C13245 + C4788 * C13173 - C8218 * C13246 -
                       C8326 * C80686) *
                          C81009 * C26925) *
                         C80598) *
                        C80729 +
                    ((((C490 * C1686 + C81012 * C2297) * C13245 +
                       (C490 * C1792 + C81012 * C2411) * C13173 -
                       C32668 * C13246 - C32762 * C80686) *
                          C81009 * C26924 +
                      (C32668 * C13245 + C32762 * C13173 - C32673 * C13246 -
                       C32763 * C80686) *
                          C81009 * C26925) *
                         C80916 +
                     ((C15160 - (C15159 + C15158) + C15161) * C81009 * C26924 +
                      ((C490 * C6142 + C81012 * C6658) * C13246 -
                       (C11706 * C13173 + C11600 * C13245) +
                       (C490 * C6240 + C81012 * C6744) * C80686) *
                          C81009 * C26925) *
                         C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78528 +
             (C490 * C221 + C81012 * C637) * C80722 -
             (C490 * C1684 + C81012 * C2294) * C78520 -
             (C490 * C1882 + C81012 * C2509) * C80729 +
             (C490 * C1686 + C81012 * C2297) * C78534 +
             (C490 * C1883 + C81012 * C2510) * C20867) *
                C81009 * C26924 +
            (C48112 + C48113 - C48114 - C48115 + C48116 + C48117) * C81009 *
                C26925) *
               C13173 +
           ((C48114 - (C48113 + C48112) + C48115 - C48116 - C48117) * C81009 *
                C26924 +
            (C32670 * C78520 - (C28065 * C80722 + C27899 * C78528) +
             C32855 * C80729 - C32673 * C78534 - C32856 * C20867) *
                C81009 * C26925) *
               C80686) *
              C80916 +
          (((C21478 - (C21477 + C21476) + C21479 - C21480 - C21481) * C81009 *
                C26924 +
            (C22376 - (C22377 + C22378) + C22379 - C22380 - C22381) * C81009 *
                C26925) *
               C13173 +
           ((C22378 + C22377 - C22376 - C22379 + C22380 + C22381) * C81009 *
                C26924 +
            (C1394 * C78528 + C1599 * C80722 - C8218 * C78520 - C8432 * C80729 +
             (C490 * C6142 + C81012 * C6658) * C78534 +
             (C490 * C6326 + C81012 * C6824) * C20867) *
                C81009 * C26925) *
               C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C4987 +
             (C26926 * C107 + C81009 * C117) * C80998 -
             (C26926 * C100 + C81009 * C106) * C4988 -
             (C26926 * C108 + C81009 * C118) * C80982 +
             (C26926 * C101 + C81009 * C109) * C4989 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C26924 +
            (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
               C81012 * C17817 +
           (((C26926 * C1682 + C81009 * C1690) * C4988 -
             ((C26926 * C1693 + C81009 * C1707) * C80998 +
              (C26926 * C1684 + C81009 * C1694) * C4987) +
             (C26926 * C1692 + C81009 * C1706) * C80982 -
             (C26926 * C1683 + C81009 * C1691) * C4989 -
             (C26926 * C1695 + C81009 * C1708) * C80954) *
                C26924 +
            (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C26925) *
               C81012 * C80726) *
              C13173 +
          (((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C26924 +
            (C30990 - (C30991 + C30992) + C30993 - C30994 - C30995) * C26925) *
               C81012 * C17817 +
           ((C48218 + C48217 - C48216 - C48219 + C48220 + C48221) * C26924 +
            (C32160 * C4987 + C32161 * C80998 - C33600 * C4988 -
             C33601 * C80982 + (C26926 * C7589 + C81009 * C7590) * C4989 +
             (C26926 * C7591 + C81009 * C7592) * C80954) *
                C26925) *
               C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C17817 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C80726) *
              C81013 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C80726 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C17817) *
              C81006 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C17817 -
           ((C34490 + C34491) * C26925 + (C32167 + C32166) * C26924) * C81012 *
               C80726) *
              C80993 +
          (((C34491 + C34490) * C26924 +
            ((C26926 * C34479 + C81009 * C34480) * C5657 +
             (C26926 * C34481 + C81009 * C34482) * C80588) *
                C26925) *
               C81012 * C80726 -
           ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
               C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C13245 + C27474 * C13173 - C27372 * C13246 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C80998 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C13246 - (C27476 * C13173 + C27366 * C13245) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80982 +
                     (((C26926 * C101 + C81009 * C109) * C13245 +
                       (C26926 * C168 + C81009 * C174) * C13173 -
                       C27368 * C13246 - C27478 * C80686) *
                          C26924 +
                      (C27368 * C13245 + C27478 * C13173 - C27374 * C13246 -
                       C27479 * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C17817 +
                    (((C30064 * C13246 -
                       ((C26926 * C1790 + C81009 * C1798) * C13173 +
                        (C26926 * C1684 + C81009 * C1694) * C13245) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C13246 - (C30178 * C13173 + C30064 * C13245) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C80998 +
                     (((C26926 * C1682 + C81009 * C1690) * C13245 +
                       (C26926 * C1788 + C81009 * C1796) * C13173 -
                       C30062 * C13246 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C13245 + C30179 * C13173 - C33600 * C13246 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80982 +
                     ((C30066 * C13246 -
                       ((C26926 * C1789 + C81009 * C1797) * C13173 +
                        (C26926 * C1683 + C81009 * C1691) * C13245) +
                       C30180 * C80686) *
                          C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C13246 -
                       (C30180 * C13173 + C30066 * C13245) +
                       (C26926 * C7691 + C81009 * C7692) * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C13873 + C27474 * C81013 - C27372 * C13874 -
                      C27475 * C81006 + C31658 * C13875 + C31714 * C80993 -
                      C31661 * C13876 - C31715 * C80972) *
                         C26925) *
                        C81012 * C80588 * C17817 +
                    ((C30064 * C13874 -
                      ((C26926 * C1790 + C81009 * C1798) * C81013 +
                       (C26926 * C1684 + C81009 * C1694) * C13873) +
                      C30178 * C81006 - C32160 * C13875 - C32252 * C80993 +
                      C34489 * C13876 + C34562 * C80972) *
                         C26924 +
                     (C32160 * C13874 - (C30178 * C81013 + C30064 * C13873) +
                      C32252 * C81006 - C34489 * C13875 - C34562 * C80993 +
                      (C26926 * C34479 + C81009 * C34480) * C13876 +
                      (C26926 * C34557 + C81009 * C34558) * C80972) *
                         C26925) *
                        C81012 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[34] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       (C26926 * C1684 + C81009 * C1694) * C17952 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C44460 + C44461 - C44462 - C44463) * C26925) *
                         C81012 * C13173 +
                     ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                      (C44464 - (C44465 + C44466) + C44467) * C26925) *
                         C81012 * C80686) *
                        C80998 +
                    ((((C26926 * C1682 + C81009 * C1690) * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C44468 - (C44469 + C44470) + C44471) * C26925) *
                         C81012 * C13173 +
                     ((C44470 + C44469 - C44468 - C44471) * C26924 +
                      (C44472 + C44473 - C44474 - C44475) * C26925) *
                         C81012 * C80686) *
                        C80982 +
                    ((((C26926 * C101 + C81009 * C109) * C17951 +
                       (C26926 * C223 + C81009 * C229) * C17817 -
                       (C26926 * C1683 + C81009 * C1691) * C17952 -
                       (C26926 * C1885 + C81009 * C1893) * C80726) *
                          C26924 +
                      (C45960 + C45961 - C45962 - C45963) * C26925) *
                         C81012 * C13173 +
                     ((C45962 - (C45961 + C45960) + C45963) * C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C17952 -
                       (C27577 * C17817 + C27374 * C17951) +
                       (C26926 * C7791 + C81009 * C7792) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      (C26926 * C1684 + C81009 * C1694) * C17952 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C44460 + C44461 - C44462 - C44463) * C26925) *
                        C81012 * C81013 +
                    ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                     (C44464 - (C44465 + C44466) + C44467) * C26925) *
                        C81012 * C81006 +
                    ((C44466 + C44465 - C44464 - C44467) * C26924 +
                     (C49210 + C49211 - C49212 - C49213) * C26925) *
                        C81012 * C80993 +
                    ((C49212 - (C49211 + C49210) + C49213) * C26924 +
                     ((C26926 * C34479 + C81009 * C34480) * C17952 -
                      (C31767 * C17817 + C31661 * C17951) +
                      (C26926 * C34628 + C81009 * C34629) * C80726) *
                         C26925) *
                        C81012 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C4987 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80998 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C4988 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80982 +
            (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C4989 +
            (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
                C80954) *
               C81012 * C81009 * C17817 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C4988 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80998 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C4987) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80982 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C4989 -
            (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 +
             C26924 * C1981) *
                C80954) *
               C81012 * C81009 * C80726) *
              C13173 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C4988 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80998 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C4987) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80982 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C4989 -
            (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
                C80954) *
               C81012 * C81009 * C17817 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C4987 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80998 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C4988 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80982 +
            (C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C4989 +
            (C27053 * C3988 + C26924 * C4311 + C27054 * C7591 +
             C26925 * C7892) *
                C80954) *
               C81012 * C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C17817 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C80726) *
              C81013 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C17817) *
              C81006 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C17817 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C80726) *
              C80993 +
          (((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
             C26925 * C34703) *
                C5657 +
            (C27053 * C8503 + C26924 * C8715 + C27054 * C34481 +
             C26925 * C34704) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C80588 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C5657) *
               C81012 * C81009 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13245 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C13173 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C13246 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C80998 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13246 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C13173 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C13245) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80982 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C13245 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C13173 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C13246 -
            (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
                C80686) *
               C81012 * C81009 * C80954) *
              C17817 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13246 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C13173 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13245) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C80998 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13245 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C13173 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13246 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80982 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C13246 -
            ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
              C26924 * C2086) *
                 C13173 +
             (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
              C26924 * C1973) *
                 C13245) +
            (C27053 * C4095 + C26924 * C4425 + C27054 * C7691 +
             C26925 * C7997) *
                C80686) *
               C81012 * C81009 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13873 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81013 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C13874 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C81006 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C13875 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80993 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C13876 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C80588 * C17817 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C13874 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C81013 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C13873) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C81006 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C13875 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C80993 +
           (C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C13876 +
           (C27053 * C8573 + C26924 * C8783 + C27054 * C34557 +
            C26925 * C34771) *
               C80972) *
              C81012 * C81009 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C17951 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C17817 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C17952 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C17952 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C17817 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C17951) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80998 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C17952 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C17817 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C17951) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C17951 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C17817 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C17952 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80982 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C17951 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C17817 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C17952 -
            (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 +
             C26924 * C2191) *
                C80726) *
               C81012 * C81009 * C13173 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C17952 -
            ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                 C17817 +
             (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                 C17951) +
            (C27053 * C4201 + C26924 * C4541 + C27054 * C7791 +
             C26925 * C8105) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C17951 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C17817 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C17952 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C81013 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C17952 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C17817 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C17951) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C80726) *
              C81012 * C81009 * C81006 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C17951 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C17817 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C17952 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C80726) *
              C81012 * C81009 * C80993 +
          ((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C17952 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C17817 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C17951) +
           (C27053 * C8643 + C26924 * C8851 + C27054 * C34628 +
            C26925 * C34838) *
               C80726) *
              C81012 * C81009 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C4987 +
             (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
             C521 * C80982 + C522 * C4989 + C523 * C80954) *
                C81009 * C26924 +
            (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) * C81009 *
                C26925) *
               C17817 +
           ((C2326 * C4988 -
             ((C490 * C1693 + C81012 * C2301) * C80998 +
              (C490 * C1684 + C81012 * C2294) * C4987) +
             C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
                C81009 * C26924 +
            (C48810 - (C48811 + C48812) + C48813 - C48814 - C48815) * C81009 *
                C26925) *
               C80726) *
              C13173 +
          (((C31442 - (C31441 + C31440) + C31443 - C31444 - C31445) * C81009 *
                C26924 +
            (C31446 - (C31447 + C31448) + C31449 - C31450 - C31451) * C81009 *
                C26925) *
               C17817 +
           ((C48812 + C48811 - C48810 - C48813 + C48814 + C48815) * C81009 *
                C26924 +
            (C32670 * C4987 + C32671 * C80998 - C8218 * C4988 - C8219 * C80982 +
             (C490 * C7589 + C81012 * C8211) * C4989 +
             (C490 * C7591 + C81012 * C8212) * C80954) *
                C81009 * C26925) *
               C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5657 +
             (C490 * C107 + C81012 * C497) * C80588) *
                C81009 * C26924 +
            (C31944 + C31945) * C81009 * C26925) *
               C17817 -
           ((C32654 + C32655) * C81009 * C26925 +
            ((C490 * C1693 + C81012 * C2301) * C80588 +
             (C490 * C1684 + C81012 * C2294) * C5657) *
                C81009 * C26924) *
               C80726) *
              C81013 +
          (((C32655 + C32654) * C81009 * C26924 +
            (C32676 + C32677) * C81009 * C26925) *
               C80726 -
           ((C31946 + C31947) * C81009 * C26925 +
            (C31945 + C31944) * C81009 * C26924) *
               C17817) *
              C81006 +
          (((C31947 + C31946) * C81009 * C26924 +
            (C31960 + C31961) * C81009 * C26925) *
               C17817 -
           ((C34914 + C34915) * C81009 * C26925 +
            (C32677 + C32676) * C81009 * C26924) *
               C80726) *
              C80993 +
          (((C34915 + C34914) * C81009 * C26924 +
            ((C490 * C34479 + C81012 * C34905) * C5657 +
             (C490 * C34481 + C81012 * C34906) * C80588) *
                C81009 * C26925) *
               C80726 -
           ((C31962 + C31963) * C81009 * C26925 +
            (C31961 + C31960) * C81009 * C26924) *
               C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13245 +
                       (C490 * C166 + C81012 * C569) * C13173 -
                       C27896 * C13246 - C27982 * C80686) *
                          C81009 * C26924 +
                      (C27896 * C13245 + C27982 * C13173 - C27899 * C13246 -
                       C27983 * C80686) *
                          C81009 * C26925) *
                         C80998 +
                     ((C13658 - (C13657 + C13656) + C13659) * C81009 * C26924 +
                      (C1394 * C13246 - (C1496 * C13173 + C1390 * C13245) +
                       C1497 * C80686) *
                          C81009 * C26925) *
                         C80982 +
                     ((C13662 + C13661 - C13660 - C13663) * C81009 * C26924 +
                      (C1392 * C13245 + C1498 * C13173 - C1396 * C13246 -
                       C1499 * C80686) *
                          C81009 * C26925) *
                         C80954) *
                        C17817 +
                    (((C30701 * C13246 -
                       ((C490 * C1790 + C81012 * C2409) * C13173 +
                        (C490 * C1684 + C81012 * C2294) * C13245) +
                       C30804 * C80686) *
                          C81009 * C26924 +
                      (C32670 * C13246 - (C30804 * C13173 + C30701 * C13245) +
                       C32761 * C80686) *
                          C81009 * C26925) *
                         C80998 +
                     ((C15156 + C15155 - C15154 - C15157) * C81009 * C26924 +
                      (C4672 * C13245 + C4788 * C13173 - C8218 * C13246 -
                       C8326 * C80686) *
                          C81009 * C26925) *
                         C80982 +
                     ((C16758 - (C16757 + C16756) + C16759) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C13246 -
                       (C4789 * C13173 + C4674 * C13245) +
                       (C490 * C7691 + C81012 * C8317) * C80686) *
                          C81009 * C26925) *
                         C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13873 +
                      (C490 * C166 + C81012 * C569) * C81013 - C27896 * C13874 -
                      C27982 * C81006 + C27899 * C13875 + C27983 * C80993 -
                      C31956 * C13876 - C32011 * C80972) *
                         C81009 * C26924 +
                     (C27896 * C13873 + C27982 * C81013 - C27899 * C13874 -
                      C27983 * C81006 + C31956 * C13875 + C32011 * C80993 -
                      C31959 * C13876 - C32012 * C80972) *
                         C81009 * C26925) *
                        C80588 * C17817 +
                    ((C30701 * C13874 -
                      ((C490 * C1790 + C81012 * C2409) * C81013 +
                       (C490 * C1684 + C81012 * C2294) * C13873) +
                      C30804 * C81006 - C32670 * C13875 - C32761 * C80993 +
                      C34913 * C13876 + C34985 * C80972) *
                         C81009 * C26924 +
                     (C32670 * C13874 - (C30804 * C81013 + C30701 * C13873) +
                      C32761 * C81006 - C34913 * C13875 - C34985 * C80993 +
                      (C490 * C34479 + C81012 * C34905) * C13876 +
                      (C490 * C34557 + C81012 * C34981) * C80972) *
                         C81009 * C26925) *
                        C80588 * C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[34] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                         C13173 +
                     ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                      (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                         C80686) *
                        C80998 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                      (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                         C13173 +
                     ((C19278 + C19277 - C19276 - C19279) * C81009 * C26924 +
                      (C19280 + C19281 - C19282 - C19283) * C81009 * C26925) *
                         C80686) *
                        C80982 +
                    (((C18368 + C18367 - C18366 - C18369) * C81009 * C26924 +
                      (C20788 + C20789 - C20790 - C20791) * C81009 * C26925) *
                         C13173 +
                     ((C20790 - (C20789 + C20788) + C20791) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C17952 -
                       (C1601 * C17817 + C1396 * C17951) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                        C81013 +
                    ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                     (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                        C81006 +
                    ((C45070 + C45069 - C45068 - C45071) * C81009 * C26924 +
                     (C49610 + C49611 - C49612 - C49613) * C81009 * C26925) *
                        C80993 +
                    ((C49612 - (C49611 + C49610) + C49613) * C81009 * C26924 +
                     ((C490 * C34479 + C81012 * C34905) * C17952 -
                      (C32063 * C17817 + C31959 * C17951) +
                      (C490 * C34628 + C81012 * C35051) * C80726) *
                         C81009 * C26925) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eexx[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C78279 +
                      (C26926 * C107 + C81009 * C117) * C80916 -
                      (C26926 * C100 + C81009 * C106) * C78260 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C26924 +
                     (C32926 + C32927 - C32928 - C32929) * C26925) *
                        C81012 * C80639 * C6893 +
                    ((C32928 - (C32927 + C32926) + C32929) * C26924 +
                     (C32930 - (C32931 + C32932) + C32933) * C26925) *
                        C81012 * C80639 * C6894 +
                    ((C32932 + C32931 - C32930 - C32933) * C26924 +
                     (C32934 + C32935 - C32942 - C32943) * C26925) *
                        C81012 * C80639 * C6895 +
                    ((C32942 - (C32935 + C32934) + C32943) * C26924 +
                     ((C26926 * C5661 + C81009 * C5667) * C78260 -
                      (C31660 * C80916 + C31661 * C78279) +
                      (C26926 * C5669 + C81009 * C5673) * C80598) *
                         C26925) *
                        C81012 * C80639 * C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C28800 + C28801 - C28802 - C28803 + C28804 + C28805 -
                      C28812 - C28813) *
                         C26925) *
                        C81012 * C80639 * C80932 +
                    ((C28802 - (C28801 + C28800) + C28803 - C28804 - C28805 +
                      C28812 + C28813) *
                         C26924 +
                     (C27370 * C2614 - (C27371 * C2607 + C27372 * C2613) +
                      C27373 * C2608 - C27374 * C2615 - C27375 * C2609 +
                      (C26926 * C753 + C81009 * C768) * C2616 +
                      (C26926 * C769 + C81009 * C777) * C80966) *
                         C26925) *
                        C81012 * C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C32926 + C32927 - C32928 - C32929) * C26925) *
                         C81012 * C9133 +
                     (((C26926 * C1682 + C81009 * C1690) * C78260 -
                       ((C26926 * C1693 + C81009 * C1707) * C80916 +
                        (C26926 * C1684 + C81009 * C1694) * C78279) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C33590 - (C33591 + C33592) + C33593) * C26925) *
                         C81012 * C9134 +
                     (((C26926 * C1686 + C81009 * C1698) * C78279 +
                       (C26926 * C1700 + C81009 * C1710) * C80916 -
                       (C26926 * C1687 + C81009 * C1699) * C78260 -
                       (C26926 * C1701 + C81009 * C1711) * C80598) *
                          C26924 +
                      (C36908 + C36909 - C36916 - C36917) * C26925) *
                         C81012 * C80965) *
                        C80932 +
                    (((C32928 - (C32927 + C32926) + C32929) * C26924 +
                      (C32930 - (C32931 + C32932) + C32933) * C26925) *
                         C81012 * C9133 +
                     ((C33592 + C33591 - C33590 - C33593) * C26924 +
                      (C33594 + C33595 - C33602 - C33603) * C26925) *
                         C81012 * C9134 +
                     ((C36916 - (C36909 + C36908) + C36917) * C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C78260 -
                       (C32162 * C80916 + C32163 * C78279) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C26925) *
                         C81012 * C80965) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C6969 + C27474 * C6893 - C27372 * C6970 -
                      C27475 * C6894 + C31658 * C6971 + C31714 * C6895 -
                      C31661 * C6972 - C31715 * C80972) *
                         C26925) *
                        C81012 * C80916 +
                    ((C27366 * C6970 -
                      ((C26926 * C167 + C81009 * C173) * C6893 +
                       (C26926 * C100 + C81009 * C106) * C6969) +
                      C27476 * C6894 - C27370 * C6971 - C27477 * C6895 +
                      C32940 * C6972 + C33012 * C80972) *
                         C26924 +
                     (C27370 * C6970 - (C27476 * C6893 + C27366 * C6969) +
                      C27477 * C6894 - C32940 * C6971 - C33012 * C6895 +
                      (C26926 * C5661 + C81009 * C5667) * C6972 +
                      (C26926 * C5724 + C81009 * C5728) * C80972) *
                         C26925) *
                        C81012 * C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2687 +
                      (C26926 * C166 + C81009 * C172) * C80932 -
                      C27364 * C2688 - C27474 * C80686) *
                         C26924 +
                     (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                      C27475 * C80686) *
                         C26925) *
                        C81012 * C2607 +
                    ((C27366 * C2688 -
                      ((C26926 * C167 + C81009 * C173) * C80932 +
                       (C26926 * C100 + C81009 * C106) * C2687) +
                      C27476 * C80686) *
                         C26924 +
                     (C27370 * C2688 - (C27476 * C80932 + C27366 * C2687) +
                      C27477 * C80686) *
                         C26925) *
                        C81012 * C2608 +
                    (((C26926 * C101 + C81009 * C109) * C2687 +
                      (C26926 * C168 + C81009 * C174) * C80932 -
                      C27368 * C2688 - C27478 * C80686) *
                         C26924 +
                     (C27368 * C2687 + C27478 * C80932 - C27374 * C2688 -
                      C27479 * C80686) *
                         C26925) *
                        C81012 * C2609 +
                    ((C28810 * C2688 -
                      ((C26926 * C169 + C81009 * C175) * C80932 +
                       (C26926 * C102 + C81009 * C111) * C2687) +
                      C28882 * C80686) *
                         C26924 +
                     ((C26926 * C753 + C81009 * C768) * C2688 -
                      (C28882 * C80932 + C28810 * C2687) +
                      (C26926 * C862 + C81009 * C870) * C80686) *
                         C26925) *
                        C81012 * C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C80916 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C2688 - (C27476 * C80932 + C27366 * C2687) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C9133 +
                    (((C30064 * C2688 -
                       ((C26926 * C1790 + C81009 * C1798) * C80932 +
                        (C26926 * C1684 + C81009 * C1694) * C2687) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C2688 - (C30178 * C80932 + C30064 * C2687) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C80916 +
                     (((C26926 * C1682 + C81009 * C1690) * C2687 +
                       (C26926 * C1788 + C81009 * C1796) * C80932 -
                       C30062 * C2688 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C2687 + C30179 * C80932 - C33600 * C2688 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C9134 +
                    ((((C26926 * C1686 + C81009 * C1698) * C2687 +
                       (C26926 * C1792 + C81009 * C1800) * C80932 -
                       C32158 * C2688 - C32253 * C80686) *
                          C26924 +
                      (C32158 * C2687 + C32253 * C80932 - C32163 * C2688 -
                       C32254 * C80686) *
                          C26925) *
                         C81012 * C80916 +
                     ((C36914 * C2688 -
                       ((C26926 * C1793 + C81009 * C1801) * C80932 +
                        (C26926 * C1687 + C81009 * C1699) * C2687) +
                       C37018 * C80686) *
                          C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C2688 -
                       (C37018 * C80932 + C36914 * C2687) +
                       (C26926 * C6240 + C81009 * C6246) * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C80965)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C6893 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C6894 +
           ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) * C81012 *
               C6895 -
           ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) * C81012 *
               C80972) *
              C80916 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C6894 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C6893 -
           ((C33083 + C33081) * C26925 + (C27581 + C27563) * C26924) * C81012 *
               C6895 +
           ((C33081 + C33083) * C26924 +
            ((C26926 * C5661 + C81009 * C5667) * C220 +
             (C26926 * C5774 + C81009 * C5778) * C80639) *
                C26925) *
               C81012 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C80932 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C80686) *
              C2607 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C80686 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C80932) *
              C2608 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C26924 +
            (C27566 + C27582) * C26925) *
               C81012 * C80932 -
           ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) * C81012 *
               C80686) *
              C2609 +
          (((C28949 + C28953) * C26924 +
            ((C26926 * C753 + C81009 * C768) * C220 +
             (C26926 * C952 + C81009 * C960) * C80639) *
                C26925) *
               C81012 * C80686 -
           ((C28953 + C28949) * C26925 +
            ((C26926 * C224 + C81009 * C230) * C80639 +
             (C26926 * C102 + C81009 * C111) * C220) *
                C26924) *
               C81012 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C9284 +
             (C26926 * C221 + C81009 * C227) * C9133 -
             (C26926 * C1684 + C81009 * C1694) * C9285 -
             (C26926 * C1882 + C81009 * C1890) * C9134 +
             (C26926 * C1686 + C81009 * C1698) * C9286 +
             (C26926 * C1883 + C81009 * C1891) * C80965) *
                C26924 +
            (C35948 + C35949 - C35950 - C35951 + C35952 + C35953) * C26925) *
               C81012 * C80932 +
           ((C35950 - (C35949 + C35948) + C35951 - C35952 - C35953) * C26924 +
            (C35954 - (C35955 + C35956) + C35957 - C35958 - C35959) * C26925) *
               C81012 * C80686) *
              C80916 +
          ((((C26926 * C1682 + C81009 * C1690) * C9285 -
             ((C26926 * C222 + C81009 * C228) * C9133 +
              (C26926 * C100 + C81009 * C106) * C9284) +
             (C26926 * C1881 + C81009 * C1889) * C9134 -
             (C26926 * C1687 + C81009 * C1699) * C9286 -
             (C26926 * C1884 + C81009 * C1892) * C80965) *
                C26924 +
            (C37117 - (C37118 + C37119) + C37120 - C37121 - C37125) * C26925) *
               C81012 * C80932 +
           ((C37119 + C37118 - C37117 - C37120 + C37121 + C37125) * C26924 +
            (C27370 * C9284 + C27575 * C9133 - C33600 * C9285 - C33812 * C9134 +
             (C26926 * C6142 + C81009 * C6152) * C9286 +
             (C26926 * C6326 + C81009 * C6332) * C80965) *
                C26925) *
               C81012 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78279 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80916 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C78260 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80598) *
              C81012 * C81009 * C80639 * C6893 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C78260 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80916 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C78279) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C6894 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C78279 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80916 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C78260 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C6895 +
          ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C78260 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C80916 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C78279) +
           (C27053 * C5662 + C26924 * C5825 + C27054 * C5669 + C26925 * C5828) *
               C80598) *
              C81012 * C81009 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C2613 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C2607 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C2614 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C2608 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C2615 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C2609 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C2616 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C80639 * C80932 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C2614 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C2607 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C2613) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C2608 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C2615 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C2609 +
           (C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C2616 +
           (C27053 * C761 + C26924 * C1046 + C27054 * C769 + C26925 * C1050) *
               C80966) *
              C81012 * C81009 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78279 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80916 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78260 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C9133 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78260 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80916 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78279) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C9134 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C78279 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80916 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C78260 -
            (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 +
             C26924 * C1984) *
                C80598) *
               C81012 * C81009 * C80965) *
              C80932 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78260 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80916 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78279) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C9133 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78279 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80916 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78260 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C9134 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C78260 -
            ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
              C26924 * C6414) *
                 C80916 +
             (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
              C26924 * C6408) *
                 C78279) +
            (C27053 * C6143 + C26924 * C6413 + C27054 * C6154 +
             C26925 * C6418) *
                C80598) *
               C81012 * C81009 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C6969 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C6893 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C6970 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C6894 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C6971 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C6895 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C6972 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C80916 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C6970 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C6893 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C6969) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C6894 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C6971 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C6895 +
           (C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C6972 +
           (C27053 * C5721 + C26924 * C5873 + C27054 * C5724 + C26925 * C5874) *
               C80972) *
              C81012 * C81009 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C2687 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80932 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C2688 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80686) *
              C81012 * C81009 * C2607 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C2688 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80932 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C2687) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80686) *
              C81012 * C81009 * C2608 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C2687 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C80932 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C2688 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80686) *
              C81012 * C81009 * C2609 +
          ((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C2688 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C80932 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C2687) +
           (C27053 * C861 + C26924 * C1155 + C27054 * C862 + C26925 * C1156) *
               C80686) *
              C81012 * C81009 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C2687 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80932 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C2688 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C80916 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C2688 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C80932 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C2687) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80598) *
              C9133 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C2688 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C80932 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C2687) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C80916 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C2687 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80932 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C2688 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80598) *
              C9134 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C2687 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80932 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C2688 -
            (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 +
             C26924 * C6495) *
                C80686) *
               C81012 * C81009 * C80916 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C2688 -
            ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
              C26924 * C2090) *
                 C80932 +
             (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
              C26924 * C1976) *
                 C2687) +
            (C27053 * C6237 + C26924 * C6497 + C27054 * C6240 +
             C26925 * C6498) *
                C80686) *
               C81012 * C81009 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C6893 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C6894 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C6895 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C80639 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C220) *
               C81012 * C81009 * C80972) *
              C80916 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C6894 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C6893 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C6895 +
           ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 +
             C26925 * C5824) *
                C220 +
            (C27053 * C5771 + C26924 * C5917 + C27054 * C5774 +
             C26925 * C5920) *
                C80639) *
               C81012 * C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C80932 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80686) *
              C2607 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C80932) *
              C2608 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C80932 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80686) *
              C2609 +
          (((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
                C220 +
            (C27053 * C951 + C26924 * C1261 + C27054 * C952 + C26925 * C1262) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C80639 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C220) *
               C81012 * C81009 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C9284 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C9133 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C9285 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C9134 +
            (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C9286 +
            (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 +
             C26925 * C6573) *
                C80965) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C9285 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C9133 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C9284) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C9134 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C9286 -
            (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 +
             C26924 * C6573) *
                C80965) *
               C81012 * C81009 * C80686) *
              C80916 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C9285 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C9133 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C9284) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C9134 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C9286 -
            (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 +
             C26924 * C2190) *
                C80965) *
               C81012 * C81009 * C80932 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C9284 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C9133 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C9285 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C9134 +
            (C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C9286 +
            (C27053 * C6321 + C26924 * C6574 + C27054 * C6326 +
             C26925 * C6578) *
                C80965) *
               C81012 * C81009 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C78279 +
                      (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                      C521 * C80598) *
                         C81009 * C26924 +
                     (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                        C80639 * C6893 +
                    ((C33350 - (C33349 + C33348) + C33351) * C81009 * C26924 +
                     (C33352 - (C33353 + C33354) + C33355) * C81009 * C26925) *
                        C80639 * C6894 +
                    ((C33354 + C33353 - C33352 - C33355) * C81009 * C26924 +
                     (C33356 + C33357 - C33358 - C33359) * C81009 * C26925) *
                        C80639 * C6895 +
                    ((C33358 - (C33357 + C33356) + C33359) * C81009 * C26924 +
                     ((C490 * C5661 + C81012 * C5966) * C78260 -
                      (C31958 * C80916 + C31959 * C78279) +
                      (C490 * C5669 + C81012 * C5970) * C80598) *
                         C81009 * C26925) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C2613 +
                      (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
                      C521 * C2608 + C522 * C2615 + C523 * C2609 -
                      C524 * C2616 - C525 * C80966) *
                         C81009 * C26924 +
                     (C29218 + C29219 - C29220 - C29221 + C29222 + C29223 -
                      C29224 - C29225) *
                         C81009 * C26925) *
                        C80639 * C80932 +
                    ((C29220 - (C29219 + C29218) + C29221 - C29222 - C29223 +
                      C29224 + C29225) *
                         C81009 * C26924 +
                     (C1394 * C2614 - (C27898 * C2607 + C27899 * C2613) +
                      C1395 * C2608 - C1396 * C2615 - C1397 * C2609 +
                      (C490 * C753 + C81012 * C1364) * C2616 +
                      (C490 * C769 + C81012 * C1372) * C80966) *
                         C81009 * C26925) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C78279 +
                       (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                         C9133 +
                     ((C2326 * C78260 -
                       ((C490 * C1693 + C81012 * C2301) * C80916 +
                        (C490 * C1684 + C81012 * C2294) * C78279) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C34206 - (C34207 + C34208) + C34209) * C81009 * C26925) *
                         C9134 +
                     (((C490 * C1686 + C81012 * C2297) * C78279 +
                       (C490 * C1700 + C81012 * C2305) * C80916 -
                       C2330 * C78260 - C2331 * C80598) *
                          C81009 * C26924 +
                      (C37518 + C37519 - C37520 - C37521) * C81009 * C26925) *
                         C80965) *
                        C80932 +
                    (((C33350 - (C33349 + C33348) + C33351) * C81009 * C26924 +
                      (C33352 - (C33353 + C33354) + C33355) * C81009 * C26925) *
                         C9133 +
                     ((C34208 + C34207 - C34206 - C34209) * C81009 * C26924 +
                      (C34210 + C34211 - C34212 - C34213) * C81009 * C26925) *
                         C9134 +
                     ((C37520 - (C37519 + C37518) + C37521) * C81009 * C26924 +
                      ((C490 * C6142 + C81012 * C6658) * C78260 -
                       (C32672 * C80916 + C32673 * C78279) +
                       (C490 * C6154 + C81012 * C6664) * C80598) *
                          C81009 * C26925) *
                         C80965) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 - C27896 * C6970 -
            C27982 * C6894 + C27899 * C6971 + C27983 * C6895 - C31956 * C6972 -
            C32011 * C80972) *
               C81009 * C26924 +
           (C27896 * C6969 + C27982 * C6893 - C27899 * C6970 - C27983 * C6894 +
            C31956 * C6971 + C32011 * C6895 - C31959 * C6972 -
            C32012 * C80972) *
               C81009 * C26925) *
              C80916 +
          ((C7411 - (C7410 + C7409) + C7412 - C7413 - C7414 + C7415 + C7419) *
               C81009 * C26924 +
           (C1394 * C6970 - (C1496 * C6893 + C1390 * C6969) + C1497 * C6894 -
            C7340 * C6971 - C7418 * C6895 +
            (C490 * C5661 + C81012 * C5966) * C6972 +
            (C490 * C5724 + C81012 * C6016) * C80972) *
               C81009 * C26925) *
              C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2687 +
            (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
            C27982 * C80686) *
               C81009 * C26924 +
           (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
            C27983 * C80686) *
               C81009 * C26925) *
              C2607 +
          ((C3131 - (C3130 + C3129) + C3132) * C81009 * C26924 +
           (C1394 * C2688 - (C1496 * C80932 + C1390 * C2687) + C1497 * C80686) *
               C81009 * C26925) *
              C2608 +
          ((C3135 + C3134 - C3133 - C3136) * C81009 * C26924 +
           (C1392 * C2687 + C1498 * C80932 - C1396 * C2688 - C1499 * C80686) *
               C81009 * C26925) *
              C2609 +
          ((C3139 - (C3138 + C3137) + C3143) * C81009 * C26924 +
           ((C490 * C753 + C81012 * C1364) * C2688 -
            (C3142 * C80932 + C3060 * C2687) +
            (C490 * C862 + C81012 * C1478) * C80686) *
               C81009 * C26925) *
              C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
             C27982 * C80686) *
                C81009 * C26924 +
            (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
             C27983 * C80686) *
                C81009 * C26925) *
               C80916 +
           ((C3131 - (C3130 + C3129) + C3132) * C81009 * C26924 +
            (C1394 * C2688 - (C1496 * C80932 + C1390 * C2687) +
             C1497 * C80686) *
                C81009 * C26925) *
               C80598) *
              C9133 +
          (((C30701 * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             C30804 * C80686) *
                C81009 * C26924 +
            (C32670 * C2688 - (C30804 * C80932 + C30701 * C2687) +
             C32761 * C80686) *
                C81009 * C26925) *
               C80916 +
           ((C4780 + C4779 - C4778 - C4790) * C81009 * C26924 +
            (C4672 * C2687 + C4788 * C80932 - C8218 * C2688 - C8326 * C80686) *
                C81009 * C26925) *
               C80598) *
              C9134 +
          ((((C490 * C1686 + C81012 * C2297) * C2687 +
             (C490 * C1792 + C81012 * C2411) * C80932 - C32668 * C2688 -
             C32762 * C80686) *
                C81009 * C26924 +
            (C32668 * C2687 + C32762 * C80932 - C32673 * C2688 -
             C32763 * C80686) *
                C81009 * C26925) *
               C80916 +
           ((C11703 - (C11702 + C11701) + C11707) * C81009 * C26924 +
            ((C490 * C6142 + C81012 * C6658) * C2688 -
             (C11706 * C80932 + C11600 * C2687) +
             (C490 * C6240 + C81012 * C6744) * C80686) *
                C81009 * C26925) *
               C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C6893 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C6894 +
                     ((C28063 + C28067) * C81009 * C26924 +
                      (C32056 + C32064) * C81009 * C26925) *
                         C6895 -
                     ((C32065 + C32061) * C81009 * C26925 +
                      (C32064 + C32056) * C81009 * C26924) *
                         C80972) *
                        C80916 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C6894 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C6893 -
                     ((C7491 + C7489) * C81009 * C26925 +
                      (C1603 + C1589) * C81009 * C26924) *
                         C6895 +
                     ((C7489 + C7491) * C81009 * C26924 +
                      ((C490 * C5661 + C81012 * C5966) * C220 +
                       (C490 * C5774 + C81012 * C6062) * C80639) *
                          C81009 * C26925) *
                         C80972) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C80932 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C80686) *
                        C2607 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C80686 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C80932) *
                        C2608 +
                    (((C649 + C661) * C81009 * C26924 +
                      (C1592 + C1604) * C81009 * C26925) *
                         C80932 -
                     ((C1605 + C1597) * C81009 * C26925 +
                      (C1604 + C1592) * C81009 * C26924) *
                         C80686) *
                        C2609 +
                    (((C3213 + C3215) * C81009 * C26924 +
                      ((C490 * C753 + C81012 * C1364) * C220 +
                       (C490 * C952 + C81012 * C1584) * C80639) *
                          C81009 * C26925) *
                         C80686 -
                     ((C3215 + C3213) * C81009 * C26925 +
                      (C662 + C650) * C81009 * C26924) *
                         C80932) *
                        C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C9284 +
                       (C490 * C221 + C81012 * C637) * C9133 -
                       (C490 * C1684 + C81012 * C2294) * C9285 -
                       (C490 * C1882 + C81012 * C2509) * C9134 +
                       (C490 * C1686 + C81012 * C2297) * C9286 +
                       (C490 * C1883 + C81012 * C2510) * C80965) *
                          C81009 * C26924 +
                      (C36404 + C36405 - C36406 - C36407 + C36408 + C36409) *
                          C81009 * C26925) *
                         C80932 +
                     ((C36406 - (C36405 + C36404) + C36407 - C36408 - C36409) *
                          C81009 * C26924 +
                      (C36410 - (C36411 + C36412) + C36413 - C36414 - C36415) *
                          C81009 * C26925) *
                         C80686) *
                        C80916 +
                    (((C9746 - (C9745 + C9744) + C9747 - C9748 - C9749) *
                          C81009 * C26924 +
                      (C11807 - (C11808 + C11809) + C11810 - C11811 - C11815) *
                          C81009 * C26925) *
                         C80932 +
                     ((C11809 + C11808 - C11807 - C11810 + C11811 + C11815) *
                          C81009 * C26924 +
                      (C1394 * C9284 + C1599 * C9133 - C8218 * C9285 -
                       C8432 * C9134 + (C490 * C6142 + C81012 * C6658) * C9286 +
                       (C490 * C6326 + C81012 * C6824) * C80965) *
                          C81009 * C26925) *
                         C80686) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C80933 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C80726) *
              C6893 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C80726 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C80933) *
              C6894 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C80933 -
           ((C34490 + C34491) * C26925 + (C32167 + C32166) * C26924) * C81012 *
               C80726) *
              C6895 +
          (((C34491 + C34490) * C26924 +
            ((C26926 * C34479 + C81009 * C34480) * C5657 +
             (C26926 * C34481 + C81009 * C34482) * C80588) *
                C26925) *
               C81012 * C80726 -
           ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
               C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C743 +
             (C26926 * C107 + C81009 * C117) * C737 -
             (C26926 * C100 + C81009 * C106) * C744 -
             (C26926 * C108 + C81009 * C118) * C738 +
             (C26926 * C101 + C81009 * C109) * C745 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C26924 +
            (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
               C81012 * C80933 +
           (((C26926 * C1682 + C81009 * C1690) * C744 -
             ((C26926 * C1693 + C81009 * C1707) * C737 +
              (C26926 * C1684 + C81009 * C1694) * C743) +
             (C26926 * C1692 + C81009 * C1706) * C738 -
             (C26926 * C1683 + C81009 * C1691) * C745 -
             (C26926 * C1695 + C81009 * C1708) * C80954) *
                C26924 +
            (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) * C26925) *
               C81012 * C80726) *
              C80932 +
          (((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C26924 +
            (C27382 - (C27383 + C27384) + C27385 - C27386 - C27387) * C26925) *
               C81012 * C80933 +
           ((C30070 + C30069 - C30068 - C30071 + C30072 + C30073) * C26924 +
            ((C26926 * C6140 + C81009 * C6150) * C743 +
             (C26926 * C6148 + C81009 * C6158) * C737 -
             (C26926 * C6139 + C81009 * C6149) * C744 -
             (C26926 * C6147 + C81009 * C6157) * C738 +
             (C26926 * C7589 + C81009 * C7590) * C745 +
             (C26926 * C7591 + C81009 * C7592) * C80954) *
                C26925) *
               C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C11881 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C11882 +
           (((C26926 * C1686 + C81009 * C1698) * C5657 +
             (C26926 * C1700 + C81009 * C1710) * C80588) *
                C26924 +
            (C32164 + C32165) * C26925) *
               C81012 * C11883 -
           ((C38388 + C38389) * C26925 +
            ((C26926 * C10473 + C81009 * C10481) * C80588 +
             (C26926 * C10469 + C81009 * C10475) * C5657) *
                C26924) *
               C81012 * C80978) *
              C80932 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C11882 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C11881 -
           ((C32168 + C32169) * C26925 + (C32165 + C32164) * C26924) * C81012 *
               C11883 +
           ((C38389 + C38388) * C26924 +
            ((C26926 * C38377 + C81009 * C38378) * C5657 +
             (C26926 * C38379 + C81009 * C38380) * C80588) *
                C26925) *
               C81012 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C6969 + C27474 * C6893 - C27372 * C6970 -
                      C27475 * C6894 + C31658 * C6971 + C31714 * C6895 -
                      C31661 * C6972 - C31715 * C80972) *
                         C26925) *
                        C81012 * C80588 * C80933 +
                    ((C30064 * C6970 -
                      ((C26926 * C1790 + C81009 * C1798) * C6893 +
                       (C26926 * C1684 + C81009 * C1694) * C6969) +
                      C30178 * C6894 - C32160 * C6971 - C32252 * C6895 +
                      C34489 * C6972 + C34562 * C80972) *
                         C26924 +
                     (C32160 * C6970 - (C30178 * C6893 + C30064 * C6969) +
                      C32252 * C6894 - C34489 * C6971 - C34562 * C6895 +
                      (C26926 * C34479 + C81009 * C34480) * C6972 +
                      (C26926 * C34557 + C81009 * C34558) * C80972) *
                         C26925) *
                        C81012 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C737 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C2688 - (C27476 * C80932 + C27366 * C2687) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C738 +
                     (((C26926 * C101 + C81009 * C109) * C2687 +
                       (C26926 * C168 + C81009 * C174) * C80932 -
                       C27368 * C2688 - C27478 * C80686) *
                          C26924 +
                      (C27368 * C2687 + C27478 * C80932 - C27374 * C2688 -
                       C27479 * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C80933 +
                    (((C30064 * C2688 -
                       ((C26926 * C1790 + C81009 * C1798) * C80932 +
                        (C26926 * C1684 + C81009 * C1694) * C2687) +
                       C30178 * C80686) *
                          C26924 +
                      ((C26926 * C6140 + C81009 * C6150) * C2688 -
                       (C30178 * C80932 + C30064 * C2687) +
                       (C26926 * C6236 + C81009 * C6242) * C80686) *
                          C26925) *
                         C81012 * C737 +
                     (((C26926 * C1682 + C81009 * C1690) * C2687 +
                       (C26926 * C1788 + C81009 * C1796) * C80932 -
                       C30062 * C2688 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C2687 + C30179 * C80932 -
                       (C26926 * C6139 + C81009 * C6149) * C2688 -
                       (C26926 * C6235 + C81009 * C6241) * C80686) *
                          C26925) *
                         C81012 * C738 +
                     ((C30066 * C2688 -
                       ((C26926 * C1789 + C81009 * C1797) * C80932 +
                        (C26926 * C1683 + C81009 * C1691) * C2687) +
                       C30180 * C80686) *
                          C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C2688 -
                       (C30180 * C80932 + C30066 * C2687) +
                       (C26926 * C7691 + C81009 * C7692) * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2687 +
                      (C26926 * C166 + C81009 * C172) * C80932 -
                      C27364 * C2688 - C27474 * C80686) *
                         C26924 +
                     (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                      C27475 * C80686) *
                         C26925) *
                        C81012 * C80588 * C11881 +
                    ((C30064 * C2688 -
                      ((C26926 * C1790 + C81009 * C1798) * C80932 +
                       (C26926 * C1684 + C81009 * C1694) * C2687) +
                      C30178 * C80686) *
                         C26924 +
                     (C32160 * C2688 - (C30178 * C80932 + C30064 * C2687) +
                      C32252 * C80686) *
                         C26925) *
                        C81012 * C80588 * C11882 +
                    (((C26926 * C1686 + C81009 * C1698) * C2687 +
                      (C26926 * C1792 + C81009 * C1800) * C80932 -
                      C32158 * C2688 - C32253 * C80686) *
                         C26924 +
                     (C32158 * C2687 + C32253 * C80932 - C32163 * C2688 -
                      C32254 * C80686) *
                         C26925) *
                        C81012 * C80588 * C11883 +
                    ((C38387 * C2688 -
                      ((C26926 * C10527 + C81009 * C10531) * C80932 +
                       (C26926 * C10469 + C81009 * C10475) * C2687) +
                      C38460 * C80686) *
                         C26924 +
                     ((C26926 * C38377 + C81009 * C38378) * C2688 -
                      (C38460 * C80932 + C38387 * C2687) +
                      (C26926 * C38455 + C81009 * C38456) * C80686) *
                         C26925) *
                        C81012 * C80588 * C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      (C26926 * C1684 + C81009 * C1694) * C3422 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C30279 + C30280 - C30281 - C30297) * C26925) *
                        C81012 * C6893 +
                    ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                     (C33803 - (C33804 + C33805) + C33806) * C26925) *
                        C81012 * C6894 +
                    ((C33805 + C33804 - C33803 - C33806) * C26924 +
                     (C34631 + C34632 - C34633 - C34637) * C26925) *
                        C81012 * C6895 +
                    ((C34633 - (C34632 + C34631) + C34637) * C26924 +
                     ((C26926 * C34479 + C81009 * C34480) * C3422 -
                      (C31767 * C80933 + C31661 * C3421) +
                      (C26926 * C34628 + C81009 * C34629) * C80726) *
                         C26925) *
                        C81012 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       (C26926 * C1684 + C81009 * C1694) * C3422 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C30279 + C30280 - C30281 - C30297) * C26925) *
                         C81012 * C80932 +
                     ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                      ((C26926 * C6140 + C81009 * C6150) * C3422 -
                       (C27573 * C80933 + C27372 * C3421) +
                       (C26926 * C6324 + C81009 * C6330) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C737 +
                    ((((C26926 * C1682 + C81009 * C1690) * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C30284 - (C30285 + C30286) + C30298) * C26925) *
                         C81012 * C80932 +
                     ((C30286 + C30285 - C30284 - C30298) * C26924 +
                      (C27370 * C3421 + C27575 * C80933 -
                       (C26926 * C6139 + C81009 * C6149) * C3422 -
                       (C26926 * C6323 + C81009 * C6329) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C738 +
                    ((((C26926 * C101 + C81009 * C109) * C3421 +
                       (C26926 * C223 + C81009 * C229) * C80933 -
                       (C26926 * C1683 + C81009 * C1691) * C3422 -
                       (C26926 * C1885 + C81009 * C1893) * C80726) *
                          C26924 +
                      (C30289 + C30290 - C30291 - C30299) * C26925) *
                         C81012 * C80932 +
                     ((C30291 - (C30290 + C30289) + C30299) * C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C3422 -
                       (C27577 * C80933 + C27374 * C3421) +
                       (C26926 * C7791 + C81009 * C7792) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C12023 +
                      (C26926 * C221 + C81009 * C227) * C11881 -
                      (C26926 * C1684 + C81009 * C1694) * C12024 -
                      (C26926 * C1882 + C81009 * C1890) * C11882 +
                      (C26926 * C1686 + C81009 * C1698) * C12025 +
                      (C26926 * C1883 + C81009 * C1891) * C11883 -
                      (C26926 * C10469 + C81009 * C10475) * C12026 -
                      (C26926 * C10582 + C81009 * C10586) * C80978) *
                         C26924 +
                     (C38529 + C38530 - C38531 - C38532 + C38533 + C38534 -
                      C38535 - C38539) *
                         C26925) *
                        C81012 * C80932 +
                    ((C38531 - (C38530 + C38529) + C38532 - C38533 - C38534 +
                      C38535 + C38539) *
                         C26924 +
                     (C32160 * C12024 - (C27573 * C11881 + C27372 * C12023) +
                      C32347 * C11882 - C32163 * C12025 - C32348 * C11883 +
                      (C26926 * C38377 + C81009 * C38378) * C12026 +
                      (C26926 * C38526 + C81009 * C38527) * C80978) *
                         C26925) *
                        C81012 * C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C80933 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C80726) *
              C6893 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C80933) *
              C6894 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C80933 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C80726) *
              C6895 +
          (((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
             C26925 * C34703) *
                C5657 +
            (C27053 * C8503 + C26924 * C8715 + C27054 * C34481 +
             C26925 * C34704) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C80588 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C5657) *
               C81012 * C81009 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C743 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C737 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C744 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C738 +
            (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C745 +
            (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
                C80954) *
               C81012 * C81009 * C80933 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C744 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C737 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C743) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C738 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C745 -
            (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 +
             C26924 * C1981) *
                C80954) *
               C81012 * C81009 * C80726) *
              C80932 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C744 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C737 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C743) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C738 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C745 -
            (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
                C80954) *
               C81012 * C81009 * C80933 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C743 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C737 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C744 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C738 +
            (C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C745 +
            (C27053 * C3988 + C26924 * C4311 + C27054 * C7591 +
             C26925 * C7892) *
                C80954) *
               C81012 * C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C11881 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C11882 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C5657 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80588) *
               C81012 * C81009 * C11883 -
           ((C27054 * C12547 + C26925 * C12759 + C27053 * C10473 +
             C26924 * C10636) *
                C80588 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C5657) *
               C81012 * C81009 * C80978) *
              C80932 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C11882 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C11881 -
           ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
             C26924 * C6414) *
                C80588 +
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C5657) *
               C81012 * C81009 * C11883 +
           ((C27053 * C12543 + C26924 * C12757 + C27054 * C38377 +
             C26925 * C38605) *
                C5657 +
            (C27053 * C12547 + C26924 * C12759 + C27054 * C38379 +
             C26925 * C38606) *
                C80588) *
               C81012 * C81009 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C6969 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C6893 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C6970 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C6894 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C6971 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C6895 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C6972 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C80588 * C80933 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C6970 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C6893 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C6969) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C6894 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C6971 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C6895 +
           (C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C6972 +
           (C27053 * C8573 + C26924 * C8783 + C27054 * C34557 +
            C26925 * C34771) *
               C80972) *
              C81012 * C81009 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C2687 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80932 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C2688 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C737 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C2688 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C80932 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C2687) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C738 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C2687 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80932 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C2688 -
            (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
                C80686) *
               C81012 * C81009 * C80954) *
              C80933 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C2688 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C80932 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C2687) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C737 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C2687 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80932 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C2688 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C738 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C2688 -
            ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
              C26924 * C2086) *
                 C80932 +
             (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
              C26924 * C1973) *
                 C2687) +
            (C27053 * C4095 + C26924 * C4425 + C27054 * C7691 +
             C26925 * C7997) *
                C80686) *
               C81012 * C81009 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C2687 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80932 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C2688 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80686) *
              C81012 * C81009 * C80588 * C11881 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C2688 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80932 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C2687) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C80686) *
              C81012 * C81009 * C80588 * C11882 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C2687 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C80932 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C2688 -
           (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 + C26924 * C6495) *
               C80686) *
              C81012 * C81009 * C80588 * C11883 +
          ((C27053 * C12543 + C26924 * C12757 + C27054 * C38377 +
            C26925 * C38605) *
               C2688 -
           ((C27054 * C12617 + C26925 * C12827 + C27053 * C10527 +
             C26924 * C10682) *
                C80932 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C2687) +
           (C27053 * C12617 + C26924 * C12827 + C27054 * C38455 +
            C26925 * C38673) *
               C80686) *
              C81012 * C81009 * C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C3421 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80933 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C3422 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C6893 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C3422 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80933 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C3421) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C80726) *
              C81012 * C81009 * C6894 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C3421 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C80933 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C3422 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C80726) *
              C81012 * C81009 * C6895 +
          ((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C3422 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C80933 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C3421) +
           (C27053 * C8643 + C26924 * C8851 + C27054 * C34628 +
            C26925 * C34838) *
               C80726) *
              C81012 * C81009 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C3421 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80933 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C3422 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C3422 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80933 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C3421) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80686) *
              C737 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C3422 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80933 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C3421) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C3421 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80933 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C3422 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80686) *
              C738 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C3421 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80933 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C3422 -
            (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 +
             C26924 * C2191) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C3422 -
            ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                 C80933 +
             (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                 C3421) +
            (C27053 * C4201 + C26924 * C4541 + C27054 * C7791 +
             C26925 * C8105) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C12023 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C11881 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C12024 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C11882 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C12025 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C11883 -
           (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
            C26924 * C10632) *
               C12026 -
           (C27054 * C12687 + C26925 * C12895 + C27053 * C10582 +
            C26924 * C10727) *
               C80978) *
              C81012 * C81009 * C80932 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C12024 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C11881 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C12023) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C11882 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C12025 -
           (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 + C26924 * C6573) *
               C11883 +
           (C27053 * C12543 + C26924 * C12757 + C27054 * C38377 +
            C26925 * C38605) *
               C12026 +
           (C27053 * C12687 + C26924 * C12895 + C27054 * C38526 +
            C26925 * C38740) *
               C80978) *
              C81012 * C81009 * C80686) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81009 * C26924 +
                      (C31944 + C31945) * C81009 * C26925) *
                         C80933 -
                     ((C32654 + C32655) * C81009 * C26925 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81009 * C26924) *
                         C80726) *
                        C6893 +
                    (((C32655 + C32654) * C81009 * C26924 +
                      (C32676 + C32677) * C81009 * C26925) *
                         C80726 -
                     ((C31946 + C31947) * C81009 * C26925 +
                      (C31945 + C31944) * C81009 * C26924) *
                         C80933) *
                        C6894 +
                    (((C31947 + C31946) * C81009 * C26924 +
                      (C31960 + C31961) * C81009 * C26925) *
                         C80933 -
                     ((C34914 + C34915) * C81009 * C26925 +
                      (C32677 + C32676) * C81009 * C26924) *
                         C80726) *
                        C6895 +
                    (((C34915 + C34914) * C81009 * C26924 +
                      ((C490 * C34479 + C81012 * C34905) * C5657 +
                       (C490 * C34481 + C81012 * C34906) * C80588) *
                          C81009 * C26925) *
                         C80726 -
                     ((C31962 + C31963) * C81009 * C26925 +
                      (C31961 + C31960) * C81009 * C26924) *
                         C80933) *
                        C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C743 +
                       (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                       C521 * C738 + C522 * C745 + C523 * C80954) *
                          C81009 * C26924 +
                      (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) *
                          C81009 * C26925) *
                         C80933 +
                     ((C2326 * C744 -
                       ((C490 * C1693 + C81012 * C2301) * C737 +
                        (C490 * C1684 + C81012 * C2294) * C743) +
                       C2327 * C738 - C2328 * C745 - C2329 * C80954) *
                          C81009 * C26924 +
                      (C30692 - (C30702 + C30703) + C30697 - C30698 - C30699) *
                          C81009 * C26925) *
                         C80726) *
                        C80932 +
                    (((C27884 - (C27901 + C27900) + C27885 - C27886 - C27887) *
                          C81009 * C26924 +
                      (C27888 - (C27902 + C27903) + C27893 - C27894 - C27895) *
                          C81009 * C26925) *
                         C80933 +
                     ((C30703 + C30702 - C30692 - C30697 + C30698 + C30699) *
                          C81009 * C26924 +
                      ((C490 * C6140 + C81012 * C6656) * C743 +
                       (C490 * C6148 + C81012 * C6662) * C737 - C8218 * C744 -
                       C8219 * C738 + (C490 * C7589 + C81012 * C8211) * C745 +
                       (C490 * C7591 + C81012 * C8212) * C80954) *
                          C81009 * C26925) *
                         C80726) *
                        C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81009 * C26924 +
                      (C31944 + C31945) * C81009 * C26925) *
                         C11881 -
                     ((C32654 + C32655) * C81009 * C26925 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81009 * C26924) *
                         C11882 +
                     (((C490 * C1686 + C81012 * C2297) * C5657 +
                       (C490 * C1700 + C81012 * C2305) * C80588) *
                          C81009 * C26924 +
                      (C32674 + C32675) * C81009 * C26925) *
                         C11883 -
                     ((C38816 + C38817) * C81009 * C26925 +
                      ((C490 * C10473 + C81012 * C10778) * C80588 +
                       (C490 * C10469 + C81012 * C10774) * C5657) *
                          C81009 * C26924) *
                         C80978) *
                        C80932 +
                    (((C32655 + C32654) * C81009 * C26924 +
                      (C32676 + C32677) * C81009 * C26925) *
                         C11882 -
                     ((C31946 + C31947) * C81009 * C26925 +
                      (C31945 + C31944) * C81009 * C26924) *
                         C11881 -
                     ((C32678 + C32679) * C81009 * C26925 +
                      (C32675 + C32674) * C81009 * C26924) *
                         C11883 +
                     ((C38817 + C38816) * C81009 * C26924 +
                      ((C490 * C38377 + C81012 * C38807) * C5657 +
                       (C490 * C38379 + C81012 * C38808) * C80588) *
                          C81009 * C26925) *
                         C80978) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 - C27896 * C6970 -
            C27982 * C6894 + C27899 * C6971 + C27983 * C6895 - C31956 * C6972 -
            C32011 * C80972) *
               C81009 * C26924 +
           (C27896 * C6969 + C27982 * C6893 - C27899 * C6970 - C27983 * C6894 +
            C31956 * C6971 + C32011 * C6895 - C31959 * C6972 -
            C32012 * C80972) *
               C81009 * C26925) *
              C80588 * C80933 +
          ((C30701 * C6970 -
            ((C490 * C1790 + C81012 * C2409) * C6893 +
             (C490 * C1684 + C81012 * C2294) * C6969) +
            C30804 * C6894 - C32670 * C6971 - C32761 * C6895 + C34913 * C6972 +
            C34985 * C80972) *
               C81009 * C26924 +
           (C32670 * C6970 - (C30804 * C6893 + C30701 * C6969) +
            C32761 * C6894 - C34913 * C6971 - C34985 * C6895 +
            (C490 * C34479 + C81012 * C34905) * C6972 +
            (C490 * C34557 + C81012 * C34981) * C80972) *
               C81009 * C26925) *
              C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
             C27982 * C80686) *
                C81009 * C26924 +
            (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
             C27983 * C80686) *
                C81009 * C26925) *
               C737 +
           ((C3131 - (C3130 + C3129) + C3132) * C81009 * C26924 +
            (C1394 * C2688 - (C1496 * C80932 + C1390 * C2687) +
             C1497 * C80686) *
                C81009 * C26925) *
               C738 +
           ((C3135 + C3134 - C3133 - C3136) * C81009 * C26924 +
            (C1392 * C2687 + C1498 * C80932 - C1396 * C2688 - C1499 * C80686) *
                C81009 * C26925) *
               C80954) *
              C80933 +
          (((C30701 * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             C30804 * C80686) *
                C81009 * C26924 +
            ((C490 * C6140 + C81012 * C6656) * C2688 -
             (C30804 * C80932 + C30701 * C2687) +
             (C490 * C6236 + C81012 * C6739) * C80686) *
                C81009 * C26925) *
               C737 +
           ((C4780 + C4779 - C4778 - C4790) * C81009 * C26924 +
            (C4672 * C2687 + C4788 * C80932 - C8218 * C2688 - C8326 * C80686) *
                C81009 * C26925) *
               C738 +
           ((C4785 - (C4784 + C4783) + C4791) * C81009 * C26924 +
            ((C490 * C7589 + C81012 * C8211) * C2688 -
             (C4789 * C80932 + C4674 * C2687) +
             (C490 * C7691 + C81012 * C8317) * C80686) *
                C81009 * C26925) *
               C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2687 +
            (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
            C27982 * C80686) *
               C81009 * C26924 +
           (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
            C27983 * C80686) *
               C81009 * C26925) *
              C80588 * C11881 +
          ((C30701 * C2688 -
            ((C490 * C1790 + C81012 * C2409) * C80932 +
             (C490 * C1684 + C81012 * C2294) * C2687) +
            C30804 * C80686) *
               C81009 * C26924 +
           (C32670 * C2688 - (C30804 * C80932 + C30701 * C2687) +
            C32761 * C80686) *
               C81009 * C26925) *
              C80588 * C11882 +
          (((C490 * C1686 + C81012 * C2297) * C2687 +
            (C490 * C1792 + C81012 * C2411) * C80932 - C32668 * C2688 -
            C32762 * C80686) *
               C81009 * C26924 +
           (C32668 * C2687 + C32762 * C80932 - C32673 * C2688 -
            C32763 * C80686) *
               C81009 * C26925) *
              C80588 * C11883 +
          ((C38815 * C2688 -
            ((C490 * C10527 + C81012 * C10824) * C80932 +
             (C490 * C10469 + C81012 * C10774) * C2687) +
            C38887 * C80686) *
               C81009 * C26924 +
           ((C490 * C38377 + C81012 * C38807) * C2688 -
            (C38887 * C80932 + C38815 * C2687) +
            (C490 * C38455 + C81012 * C38883) * C80686) *
               C81009 * C26925) *
              C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                        C6893 +
                    ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                     (C34410 - (C34411 + C34412) + C34413) * C81009 * C26925) *
                        C6894 +
                    ((C34412 + C34411 - C34410 - C34413) * C81009 * C26924 +
                     (C35053 + C35054 - C35055 - C35059) * C81009 * C26925) *
                        C6895 +
                    ((C35055 - (C35054 + C35053) + C35059) * C81009 * C26924 +
                     ((C490 * C34479 + C81012 * C34905) * C3422 -
                      (C32063 * C80933 + C31959 * C3421) +
                      (C490 * C34628 + C81012 * C35051) * C80726) *
                         C81009 * C26925) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                         C80932 +
                     ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                      ((C490 * C6140 + C81012 * C6656) * C3422 -
                       (C28065 * C80933 + C27899 * C3421) +
                       (C490 * C6324 + C81012 * C6821) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C737 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                      (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                         C80932 +
                     ((C4896 + C4895 - C4894 - C4906) * C81009 * C26924 +
                      (C8427 + C8428 - C8429 - C8433) * C81009 * C26925) *
                         C80686) *
                        C738 +
                    (((C3873 + C3872 - C3871 - C3874) * C81009 * C26924 +
                      (C4899 + C4900 - C4901 - C4907) * C81009 * C26925) *
                         C80932 +
                     ((C4901 - (C4900 + C4899) + C4907) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C3422 -
                       (C1601 * C80933 + C1396 * C3421) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C12023 +
                      (C490 * C221 + C81012 * C637) * C11881 -
                      (C490 * C1684 + C81012 * C2294) * C12024 -
                      (C490 * C1882 + C81012 * C2509) * C11882 +
                      (C490 * C1686 + C81012 * C2297) * C12025 +
                      (C490 * C1883 + C81012 * C2510) * C11883 -
                      (C490 * C10469 + C81012 * C10774) * C12026 -
                      (C490 * C10582 + C81012 * C10869) * C80978) *
                         C81009 * C26924 +
                     (C38955 + C38956 - C38957 - C38958 + C38959 + C38960 -
                      C38961 - C38965) *
                         C81009 * C26925) *
                        C80932 +
                    ((C38957 - (C38956 + C38955) + C38958 - C38959 - C38960 +
                      C38961 + C38965) *
                         C81009 * C26924 +
                     (C32670 * C12024 - (C28065 * C11881 + C27899 * C12023) +
                      C32855 * C11882 - C32673 * C12025 - C32856 * C11883 +
                      (C490 * C38377 + C81012 * C38807) * C12026 +
                      (C490 * C38526 + C81012 * C38953) * C80978) *
                         C81009 * C26925) *
                        C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C26926 * C99 + C81009 * C105) * C94 +
               (C26926 * C107 + C81009 * C117) * C83 -
               (C26926 * C100 + C81009 * C106) * C95 -
               (C26926 * C108 + C81009 * C118) * C84 +
               (C26926 * C101 + C81009 * C109) * C96 +
               (C26926 * C110 + C81009 * C119) * C85 -
               (C26926 * C102 + C81009 * C111) * C97 -
               (C26926 * C112 + C81009 * C120) * C86 +
               (C26926 * C103 + C81009 * C113) * C98 +
               (C26926 * C114 + C81009 * C121) * C87) *
                  C26924 +
              ((C26926 * C748 + C81009 * C758) * C94 +
               (C26926 * C757 + C81009 * C771) * C83 -
               (C26926 * C746 + C81009 * C754) * C95 -
               (C26926 * C756 + C81009 * C770) * C84 +
               (C26926 * C747 + C81009 * C755) * C96 +
               (C26926 * C759 + C81009 * C772) * C85 -
               (C26926 * C749 + C81009 * C760) * C97 -
               (C26926 * C761 + C81009 * C773) * C86 +
               (C26926 * C2617 + C81009 * C2618) * C98 +
               (C26926 * C2619 + C81009 * C2620) * C87) *
                  C26925) *
             C81012 * C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C743 +
                (C26926 * C107 + C81009 * C117) * C737 -
                (C26926 * C100 + C81009 * C106) * C744 -
                (C26926 * C108 + C81009 * C118) * C738 +
                (C26926 * C101 + C81009 * C109) * C745 +
                (C26926 * C110 + C81009 * C119) * C80954) *
                   C26924 +
               (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
                  C81012 * C80639 * C81003 +
              ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) *
                   C26924 +
               (C27382 - (C27383 + C27384) + C27385 - C27386 - C27387) *
                   C26925) *
                  C81012 * C80639 * C80988 +
              ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C26924 +
               ((C26926 * C5659 + C81009 * C5665) * C743 +
                (C26926 * C5663 + C81009 * C5671) * C737 -
                (C26926 * C5658 + C81009 * C5664) * C744 -
                (C26926 * C5662 + C81009 * C5670) * C738 +
                (C26926 * C6899 + C81009 * C6900) * C745 +
                (C26926 * C6901 + C81009 * C6902) * C80954) *
                   C26925) *
                  C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
              C81012 * C81004 +
          (((C26926 * C1682 + C81009 * C1690) * C744 -
            ((C26926 * C1693 + C81009 * C1707) * C737 +
             (C26926 * C1684 + C81009 * C1694) * C743) +
            (C26926 * C1692 + C81009 * C1706) * C738 -
            (C26926 * C1683 + C81009 * C1691) * C745 -
            (C26926 * C1695 + C81009 * C1708) * C80954) *
               C26924 +
           ((C26926 * C3980 + C81009 * C3984) * C744 -
            ((C26926 * C3985 + C81009 * C3991) * C737 +
             (C26926 * C3979 + C81009 * C3983) * C743) +
            (C26926 * C3986 + C81009 * C3992) * C738 -
            (C26926 * C3981 + C81009 * C3987) * C745 -
            (C26926 * C3988 + C81009 * C3993) * C80954) *
               C26925) *
              C81012 * C80990 +
          (((C26926 * C1686 + C81009 * C1698) * C743 +
            (C26926 * C1700 + C81009 * C1710) * C737 -
            (C26926 * C1687 + C81009 * C1699) * C744 -
            (C26926 * C1701 + C81009 * C1711) * C738 +
            (C26926 * C1688 + C81009 * C1702) * C745 +
            (C26926 * C1703 + C81009 * C1712) * C80954) *
               C26924 +
           ((C26926 * C6138 + C81009 * C6146) * C743 +
            (C26926 * C6144 + C81009 * C6156) * C737 -
            (C26926 * C6137 + C81009 * C6145) * C744 -
            (C26926 * C6143 + C81009 * C6155) * C738 +
            (C26926 * C10971 + C81009 * C10972) * C745 +
            (C26926 * C10973 + C81009 * C10974) * C80954) *
               C26925) *
              C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
              C81012 * C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C26924 +
           (C30990 - (C30991 + C30992) + C30993 - C30994 - C30995) * C26925) *
              C81012 * C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C26924 +
           ((C26926 * C5659 + C81009 * C5665) * C4987 +
            (C26926 * C5663 + C81009 * C5671) * C80998 -
            (C26926 * C5658 + C81009 * C5664) * C4988 -
            (C26926 * C5662 + C81009 * C5670) * C80982 +
            (C26926 * C6899 + C81009 * C6900) * C4989 +
            (C26926 * C6901 + C81009 * C6902) * C80954) *
               C26925) *
              C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C26924 +
           (C31646 + C31647) * C26925) *
              C81012 * C80639 * C5652 -
          ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
              C80639 * C5653 +
          ((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
              C80639 * C5654 -
          ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
              C80639 * C5655 +
          ((C31665 + C31664) * C26924 +
           ((C26926 * C31641 + C81009 * C31642) * C5657 +
            (C26926 * C31643 + C81009 * C31644) * C80588) *
               C26925) *
              C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C81004 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C80990 +
           (((C26926 * C1686 + C81009 * C1698) * C5657 +
             (C26926 * C1700 + C81009 * C1710) * C80588) *
                C26924 +
            (C32164 + C32165) * C26925) *
               C81012 * C80965) *
              C4984 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C80990 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C81004 -
           ((C32168 + C32169) * C26925 + (C32165 + C32164) * C26924) * C81012 *
               C80965) *
              C4985 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C81004 -
           (((C26926 * C8503 + C81009 * C8505) * C80588 +
             (C26926 * C8499 + C81009 * C8501) * C5657) *
                C26925 +
            (C32167 + C32166) * C26924) *
               C81012 * C80990 +
           ((C32169 + C32168) * C26924 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C26925) *
               C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
              C81012 * C9133 +
          (((C26926 * C1682 + C81009 * C1690) * C4988 -
            ((C26926 * C1693 + C81009 * C1707) * C80998 +
             (C26926 * C1684 + C81009 * C1694) * C4987) +
            (C26926 * C1692 + C81009 * C1706) * C80982 -
            (C26926 * C1683 + C81009 * C1691) * C4989 -
            (C26926 * C1695 + C81009 * C1708) * C80954) *
               C26924 +
           (C30062 * C4988 - (C30063 * C80998 + C30064 * C4987) +
            C30065 * C80982 - C30066 * C4989 - C30067 * C80954) *
               C26925) *
              C81012 * C9134 +
          (((C26926 * C1686 + C81009 * C1698) * C4987 +
            (C26926 * C1700 + C81009 * C1710) * C80998 -
            (C26926 * C1687 + C81009 * C1699) * C4988 -
            (C26926 * C1701 + C81009 * C1711) * C80982 +
            (C26926 * C1688 + C81009 * C1702) * C4989 +
            (C26926 * C1703 + C81009 * C1712) * C80954) *
               C26924 +
           (C32158 * C4987 + C32159 * C80998 -
            (C26926 * C6137 + C81009 * C6145) * C4988 -
            (C26926 * C6143 + C81009 * C6155) * C80982 +
            (C26926 * C10971 + C81009 * C10972) * C4989 +
            (C26926 * C10973 + C81009 * C10974) * C80954) *
               C26925) *
              C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C9133 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C9134 +
           (((C26926 * C1686 + C81009 * C1698) * C5657 +
             (C26926 * C1700 + C81009 * C1710) * C80588) *
                C26924 +
            (C32164 + C32165) * C26925) *
               C81012 * C80965) *
              C81003 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C9134 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C9133 -
           ((C32168 + C32169) * C26925 + (C32165 + C32164) * C26924) * C81012 *
               C80965) *
              C80988 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C9133 -
           ((C34490 + C34491) * C26925 + (C32167 + C32166) * C26924) * C81012 *
               C9134 +
           ((C32169 + C32168) * C26924 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C26925) *
               C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C26924 +
           (C31646 + C31647) * C26925) *
              C81012 * C10463 -
          ((C32144 + C32145) * C26925 +
           ((C26926 * C1693 + C81009 * C1707) * C80588 +
            (C26926 * C1684 + C81009 * C1694) * C5657) *
               C26924) *
              C81012 * C10464 +
          (((C26926 * C1686 + C81009 * C1698) * C5657 +
            (C26926 * C1700 + C81009 * C1710) * C80588) *
               C26924 +
           (C32164 + C32165) * C26925) *
              C81012 * C10465 -
          (((C26926 * C12547 + C81009 * C12549) * C80588 +
            (C26926 * C12543 + C81009 * C12545) * C5657) *
               C26925 +
           ((C26926 * C10473 + C81009 * C10481) * C80588 +
            (C26926 * C10469 + C81009 * C10475) * C5657) *
               C26924) *
              C81012 * C10466 +
          (((C26926 * C10470 + C81009 * C10476) * C5657 +
            (C26926 * C10478 + C81009 * C10482) * C80588) *
               C26924 +
           ((C26926 * C36457 + C81009 * C36458) * C5657 +
            (C26926 * C36459 + C81009 * C36460) * C80588) *
               C26925) *
              C81012 * C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C165 +
                (C26926 * C166 + C81009 * C172) * C80628) *
                   C26924 +
               ((C26926 * C748 + C81009 * C758) * C165 +
                (C26926 * C856 + C81009 * C864) * C80628) *
                   C26925) *
                  C81012 * C83 -
              (((C26926 * C855 + C81009 * C863) * C80628 +
                (C26926 * C746 + C81009 * C754) * C165) *
                   C26925 +
               ((C26926 * C167 + C81009 * C173) * C80628 +
                (C26926 * C100 + C81009 * C106) * C165) *
                   C26924) *
                  C81012 * C84 +
              (((C26926 * C101 + C81009 * C109) * C165 +
                (C26926 * C168 + C81009 * C174) * C80628) *
                   C26924 +
               ((C26926 * C747 + C81009 * C755) * C165 +
                (C26926 * C859 + C81009 * C867) * C80628) *
                   C26925) *
                  C81012 * C85 -
              (((C26926 * C861 + C81009 * C869) * C80628 +
                (C26926 * C749 + C81009 * C760) * C165) *
                   C26925 +
               ((C26926 * C169 + C81009 * C175) * C80628 +
                (C26926 * C102 + C81009 * C111) * C165) *
                   C26924) *
                  C81012 * C86 +
              (((C26926 * C103 + C81009 * C113) * C165 +
                (C26926 * C170 + C81009 * C176) * C80628) *
                   C26924 +
               ((C26926 * C2617 + C81009 * C2618) * C165 +
                (C26926 * C2689 + C81009 * C2690) * C80628) *
                   C26925) *
                  C81012 * C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C852 +
                (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
                C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
                   C26924 +
               (C27364 * C852 + C27474 * C81003 - C27372 * C853 -
                C27475 * C80988 + (C26926 * C5659 + C81009 * C5665) * C854 +
                (C26926 * C5722 + C81009 * C5726) * C80962) *
                   C26925) *
                  C81012 * C737 +
              ((C27366 * C853 -
                ((C26926 * C167 + C81009 * C173) * C81003 +
                 (C26926 * C100 + C81009 * C106) * C852) +
                C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
                   C26924 +
               (C27370 * C853 - (C27476 * C81003 + C27366 * C852) +
                C27477 * C80988 - (C26926 * C5658 + C81009 * C5664) * C854 -
                (C26926 * C5721 + C81009 * C5725) * C80962) *
                   C26925) *
                  C81012 * C738 +
              (((C26926 * C101 + C81009 * C109) * C852 +
                (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
                C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
                   C26924 +
               (C27368 * C852 + C27478 * C81003 - C27374 * C853 -
                C27479 * C80988 + (C26926 * C6899 + C81009 * C6900) * C854 +
                (C26926 * C6973 + C81009 * C6974) * C80962) *
                   C26925) *
                  C81012 * C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C26926 * C99 + C81009 * C105) * C165 +
                                 (C26926 * C166 + C81009 * C172) * C80628) *
                                    C26924 +
                                (C27364 * C165 + C27474 * C80628) * C26925) *
                                   C81012 * C737 -
                               ((C27476 * C80628 + C27366 * C165) * C26925 +
                                ((C26926 * C167 + C81009 * C173) * C80628 +
                                 (C26926 * C100 + C81009 * C106) * C165) *
                                    C26924) *
                                   C81012 * C738 +
                               (((C26926 * C101 + C81009 * C109) * C165 +
                                 (C26926 * C168 + C81009 * C174) * C80628) *
                                    C26924 +
                                (C27368 * C165 + C27478 * C80628) * C26925) *
                                   C81012 * C80954) *
                                  C81004 +
                              ((((C26926 * C1682 + C81009 * C1690) * C165 +
                                 (C26926 * C1788 + C81009 * C1796) * C80628) *
                                    C26924 +
                                ((C26926 * C3980 + C81009 * C3984) * C165 +
                                 (C26926 * C4094 + C81009 * C4098) * C80628) *
                                    C26925) *
                                   C81012 * C738 -
                               (((C26926 * C4093 + C81009 * C4097) * C80628 +
                                 (C26926 * C3979 + C81009 * C3983) * C165) *
                                    C26925 +
                                ((C26926 * C1790 + C81009 * C1798) * C80628 +
                                 (C26926 * C1684 + C81009 * C1694) * C165) *
                                    C26924) *
                                   C81012 * C737 -
                               (((C26926 * C4095 + C81009 * C4099) * C80628 +
                                 (C26926 * C3981 + C81009 * C3987) * C165) *
                                    C26925 +
                                ((C26926 * C1789 + C81009 * C1797) * C80628 +
                                 (C26926 * C1683 + C81009 * C1691) * C165) *
                                    C26924) *
                                   C81012 * C80954) *
                                  C80990 +
                              ((((C26926 * C1686 + C81009 * C1698) * C165 +
                                 (C26926 * C1792 + C81009 * C1800) * C80628) *
                                    C26924 +
                                ((C26926 * C6138 + C81009 * C6146) * C165 +
                                 (C26926 * C6238 + C81009 * C6244) * C80628) *
                                    C26925) *
                                   C81012 * C737 -
                               (((C26926 * C6237 + C81009 * C6243) * C80628 +
                                 (C26926 * C6137 + C81009 * C6145) * C165) *
                                    C26925 +
                                ((C26926 * C1793 + C81009 * C1801) * C80628 +
                                 (C26926 * C1687 + C81009 * C1699) * C165) *
                                    C26924) *
                                   C81012 * C738 +
                               (((C26926 * C1688 + C81009 * C1702) * C165 +
                                 (C26926 * C1794 + C81009 * C1802) * C80628) *
                                    C26924 +
                                ((C26926 * C10971 + C81009 * C10972) * C165 +
                                 (C26926 * C11073 + C81009 * C11074) * C80628) *
                                    C26925) *
                                   C81012 * C80954) *
                                  C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C26924 +
           (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
            (C26926 * C5659 + C81009 * C5665) * C5066 +
            (C26926 * C5722 + C81009 * C5726) * C80962) *
               C26925) *
              C81012 * C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C26924 +
           (C27370 * C5065 - (C27476 * C4984 + C27366 * C5064) +
            C27477 * C4985 - (C26926 * C5658 + C81009 * C5664) * C5066 -
            (C26926 * C5721 + C81009 * C5725) * C80962) *
               C26925) *
              C81012 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C26924 +
           (C27368 * C5064 + C27478 * C4984 - C27374 * C5065 - C27479 * C4985 +
            (C26926 * C6899 + C81009 * C6900) * C5066 +
            (C26926 * C6973 + C81009 * C6974) * C80962) *
               C26925) *
              C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C26924 +
          (C27364 * C5716 + C27474 * C5652 - C27372 * C5717 - C27475 * C5653 +
           C31658 * C5718 + C31714 * C5654 - C31661 * C5719 - C31715 * C5655 +
           (C26926 * C31641 + C81009 * C31642) * C5720 +
           (C26926 * C31707 + C81009 * C31708) * C5656) *
              C26925) *
         C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C26924 +
           (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
            C31658 * C5066 + C31714 * C80962) *
               C26925) *
              C81012 * C80588 * C81004 +
          ((C30064 * C5065 -
            ((C26926 * C1790 + C81009 * C1798) * C4984 +
             (C26926 * C1684 + C81009 * C1694) * C5064) +
            C30178 * C4985 - C32160 * C5066 - C32252 * C80962) *
               C26924 +
           (C32160 * C5065 - (C30178 * C4984 + C30064 * C5064) +
            C32252 * C4985 - (C26926 * C8499 + C81009 * C8501) * C5066 -
            (C26926 * C8573 + C81009 * C8575) * C80962) *
               C26925) *
              C81012 * C80588 * C80990 +
          (((C26926 * C1686 + C81009 * C1698) * C5064 +
            (C26926 * C1792 + C81009 * C1800) * C4984 - C32158 * C5065 -
            C32253 * C4985 + C32163 * C5066 + C32254 * C80962) *
               C26924 +
           (C32158 * C5064 + C32253 * C4984 - C32163 * C5065 - C32254 * C4985 +
            (C26926 * C32139 + C81009 * C32140) * C5066 +
            (C26926 * C32243 + C81009 * C32244) * C80962) *
               C26925) *
              C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C26926 * C99 + C81009 * C105) * C165 +
                                 (C26926 * C166 + C81009 * C172) * C80628) *
                                    C26924 +
                                (C27364 * C165 + C27474 * C80628) * C26925) *
                                   C81012 * C80998 -
                               ((C27476 * C80628 + C27366 * C165) * C26925 +
                                ((C26926 * C167 + C81009 * C173) * C80628 +
                                 (C26926 * C100 + C81009 * C106) * C165) *
                                    C26924) *
                                   C81012 * C80982 +
                               (((C26926 * C101 + C81009 * C109) * C165 +
                                 (C26926 * C168 + C81009 * C174) * C80628) *
                                    C26924 +
                                (C27368 * C165 + C27478 * C80628) * C26925) *
                                   C81012 * C80954) *
                                  C9133 +
                              ((((C26926 * C1682 + C81009 * C1690) * C165 +
                                 (C26926 * C1788 + C81009 * C1796) * C80628) *
                                    C26924 +
                                (C30062 * C165 + C30179 * C80628) * C26925) *
                                   C81012 * C80982 -
                               ((C30178 * C80628 + C30064 * C165) * C26925 +
                                ((C26926 * C1790 + C81009 * C1798) * C80628 +
                                 (C26926 * C1684 + C81009 * C1694) * C165) *
                                    C26924) *
                                   C81012 * C80998 -
                               ((C30180 * C80628 + C30066 * C165) * C26925 +
                                ((C26926 * C1789 + C81009 * C1797) * C80628 +
                                 (C26926 * C1683 + C81009 * C1691) * C165) *
                                    C26924) *
                                   C81012 * C80954) *
                                  C9134 +
                              ((((C26926 * C1686 + C81009 * C1698) * C165 +
                                 (C26926 * C1792 + C81009 * C1800) * C80628) *
                                    C26924 +
                                (C32158 * C165 + C32253 * C80628) * C26925) *
                                   C81012 * C80998 -
                               (((C26926 * C6237 + C81009 * C6243) * C80628 +
                                 (C26926 * C6137 + C81009 * C6145) * C165) *
                                    C26925 +
                                ((C26926 * C1793 + C81009 * C1801) * C80628 +
                                 (C26926 * C1687 + C81009 * C1699) * C165) *
                                    C26924) *
                                   C81012 * C80982 +
                               (((C26926 * C1688 + C81009 * C1702) * C165 +
                                 (C26926 * C1794 + C81009 * C1802) * C80628) *
                                    C26924 +
                                ((C26926 * C10971 + C81009 * C10972) * C165 +
                                 (C26926 * C11073 + C81009 * C11074) * C80628) *
                                    C26925) *
                                   C81012 * C80954) *
                                  C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C26924 +
           (C27364 * C852 + C27474 * C81003 - C27372 * C853 - C27475 * C80988 +
            C31658 * C854 + C31714 * C80962) *
               C26925) *
              C81012 * C80588 * C9133 +
          ((C30064 * C853 -
            ((C26926 * C1790 + C81009 * C1798) * C81003 +
             (C26926 * C1684 + C81009 * C1694) * C852) +
            C30178 * C80988 - C32160 * C854 - C32252 * C80962) *
               C26924 +
           (C32160 * C853 - (C30178 * C81003 + C30064 * C852) +
            C32252 * C80988 - C34489 * C854 - C34562 * C80962) *
               C26925) *
              C81012 * C80588 * C9134 +
          (((C26926 * C1686 + C81009 * C1698) * C852 +
            (C26926 * C1792 + C81009 * C1800) * C81003 - C32158 * C853 -
            C32253 * C80988 + C32163 * C854 + C32254 * C80962) *
               C26924 +
           (C32158 * C852 + C32253 * C81003 - C32163 * C853 - C32254 * C80988 +
            (C26926 * C32139 + C81009 * C32140) * C854 +
            (C26926 * C32243 + C81009 * C32244) * C80962) *
               C26925) *
              C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C26924 +
           (C27364 * C165 + C27474 * C80628) * C26925) *
              C81012 * C80588 * C10463 -
          ((C30178 * C80628 + C30064 * C165) * C26925 +
           ((C26926 * C1790 + C81009 * C1798) * C80628 +
            (C26926 * C1684 + C81009 * C1694) * C165) *
               C26924) *
              C81012 * C80588 * C10464 +
          (((C26926 * C1686 + C81009 * C1698) * C165 +
            (C26926 * C1792 + C81009 * C1800) * C80628) *
               C26924 +
           (C32158 * C165 + C32253 * C80628) * C26925) *
              C81012 * C80588 * C10465 -
          (((C26926 * C12617 + C81009 * C12619) * C80628 +
            (C26926 * C12543 + C81009 * C12545) * C165) *
               C26925 +
           ((C26926 * C10527 + C81009 * C10531) * C80628 +
            (C26926 * C10469 + C81009 * C10475) * C165) *
               C26924) *
              C81012 * C80588 * C10466 +
          (((C26926 * C10470 + C81009 * C10476) * C165 +
            (C26926 * C10528 + C81009 * C10532) * C80628) *
               C26924 +
           ((C26926 * C36457 + C81009 * C36458) * C165 +
            (C26926 * C36503 + C81009 * C36504) * C80628) *
               C26925) *
              C81012 * C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C220 +
                (C26926 * C221 + C81009 * C227) * C80639) *
                   C26924 +
               ((C26926 * C748 + C81009 * C758) * C220 +
                (C26926 * C946 + C81009 * C954) * C80639) *
                   C26925) *
                  C81012 * C80628 * C83 -
              (((C26926 * C945 + C81009 * C953) * C80639 +
                (C26926 * C746 + C81009 * C754) * C220) *
                   C26925 +
               ((C26926 * C222 + C81009 * C228) * C80639 +
                (C26926 * C100 + C81009 * C106) * C220) *
                   C26924) *
                  C81012 * C80628 * C84 +
              (((C26926 * C101 + C81009 * C109) * C220 +
                (C26926 * C223 + C81009 * C229) * C80639) *
                   C26924 +
               ((C26926 * C747 + C81009 * C755) * C220 +
                (C26926 * C949 + C81009 * C957) * C80639) *
                   C26925) *
                  C81012 * C80628 * C85 -
              (((C26926 * C951 + C81009 * C959) * C80639 +
                (C26926 * C749 + C81009 * C760) * C220) *
                   C26925 +
               ((C26926 * C224 + C81009 * C230) * C80639 +
                (C26926 * C102 + C81009 * C111) * C220) *
                   C26924) *
                  C81012 * C80628 * C86 +
              (((C26926 * C103 + C81009 * C113) * C220 +
                (C26926 * C225 + C81009 * C231) * C80639) *
                   C26924 +
               ((C26926 * C2617 + C81009 * C2618) * C220 +
                (C26926 * C2757 + C81009 * C2758) * C80639) *
                   C26925) *
                  C81012 * C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C26926 * C99 + C81009 * C105) * C220 +
                 (C26926 * C221 + C81009 * C227) * C80639) *
                    C26924 +
                (C27554 + C27578) * C26925) *
                   C81012 * C81003 -
               ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                   C81012 * C80988 +
               ((C27559 + C27579) * C26924 +
                ((C26926 * C5659 + C81009 * C5665) * C220 +
                 (C26926 * C5772 + C81009 * C5776) * C80639) *
                    C26925) *
                   C81012 * C80962) *
                  C737 +
              (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                   C81012 * C80988 -
               ((C27580 + C27560) * C26925 +
                ((C26926 * C222 + C81009 * C228) * C80639 +
                 (C26926 * C100 + C81009 * C106) * C220) *
                    C26924) *
                   C81012 * C81003 -
               (((C26926 * C5771 + C81009 * C5775) * C80639 +
                 (C26926 * C5658 + C81009 * C5664) * C220) *
                    C26925 +
                (C27581 + C27563) * C26924) *
                   C81012 * C80962) *
                  C738 +
              ((((C26926 * C101 + C81009 * C109) * C220 +
                 (C26926 * C223 + C81009 * C229) * C80639) *
                    C26924 +
                (C27566 + C27582) * C26925) *
                   C81012 * C81003 -
               ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) *
                   C81012 * C80988 +
               ((C27571 + C27583) * C26924 +
                ((C26926 * C6899 + C81009 * C6900) * C220 +
                 (C26926 * C7041 + C81009 * C7042) * C80639) *
                    C26925) *
                   C81012 * C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C26926 * C99 + C81009 * C105) * C1878 +
                                (C26926 * C221 + C81009 * C227) * C81004 -
                                (C26926 * C1684 + C81009 * C1694) * C1879 -
                                (C26926 * C1882 + C81009 * C1890) * C80990 +
                                (C26926 * C1686 + C81009 * C1698) * C1880 +
                                (C26926 * C1883 + C81009 * C1891) * C80965) *
                                   C26924 +
                               (C27364 * C1878 + C27572 * C81004 -
                                (C26926 * C3979 + C81009 * C3983) * C1879 -
                                (C26926 * C4199 + C81009 * C4203) * C80990 +
                                (C26926 * C6138 + C81009 * C6146) * C1880 +
                                (C26926 * C6322 + C81009 * C6328) * C80965) *
                                   C26925) *
                                  C81012 * C80628 * C737 +
                              (((C26926 * C1682 + C81009 * C1690) * C1879 -
                                ((C26926 * C222 + C81009 * C228) * C81004 +
                                 (C26926 * C100 + C81009 * C106) * C1878) +
                                (C26926 * C1881 + C81009 * C1889) * C80990 -
                                (C26926 * C1687 + C81009 * C1699) * C1880 -
                                (C26926 * C1884 + C81009 * C1892) * C80965) *
                                   C26924 +
                               ((C26926 * C3980 + C81009 * C3984) * C1879 -
                                (C27574 * C81004 + C27366 * C1878) +
                                (C26926 * C4200 + C81009 * C4204) * C80990 -
                                (C26926 * C6137 + C81009 * C6145) * C1880 -
                                (C26926 * C6321 + C81009 * C6327) * C80965) *
                                   C26925) *
                                  C81012 * C80628 * C738 +
                              (((C26926 * C101 + C81009 * C109) * C1878 +
                                (C26926 * C223 + C81009 * C229) * C81004 -
                                (C26926 * C1683 + C81009 * C1691) * C1879 -
                                (C26926 * C1885 + C81009 * C1893) * C80990 +
                                (C26926 * C1688 + C81009 * C1702) * C1880 +
                                (C26926 * C1886 + C81009 * C1894) * C80965) *
                                   C26924 +
                               (C27368 * C1878 + C27576 * C81004 -
                                (C26926 * C3981 + C81009 * C3987) * C1879 -
                                (C26926 * C4201 + C81009 * C4205) * C80990 +
                                (C26926 * C10971 + C81009 * C10972) * C1880 +
                                (C26926 * C11173 + C81009 * C11174) * C80965) *
                                   C26925) *
                                  C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C4984 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C4985 +
           ((C27559 + C27579) * C26924 +
            ((C26926 * C5659 + C81009 * C5665) * C220 +
             (C26926 * C5772 + C81009 * C5776) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80998 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C4985 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C4984 -
           (((C26926 * C5771 + C81009 * C5775) * C80639 +
             (C26926 * C5658 + C81009 * C5664) * C220) *
                C26925 +
            (C27581 + C27563) * C26924) *
               C81012 * C80962) *
              C80982 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C26924 +
            (C27566 + C27582) * C26925) *
               C81012 * C4984 -
           ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) * C81012 *
               C4985 +
           ((C27571 + C27583) * C26924 +
            ((C26926 * C6899 + C81009 * C6900) * C220 +
             (C26926 * C7041 + C81009 * C7042) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C26924 +
           (C27554 + C27578) * C26925) *
              C81012 * C5652 -
          ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
              C5653 +
          ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) * C81012 *
              C5654 -
          ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) * C81012 *
              C5655 +
          ((C31765 + C31769) * C26924 +
           ((C26926 * C31641 + C81009 * C31642) * C220 +
            (C26926 * C31757 + C81009 * C31758) * C80639) *
               C26925) *
              C81012 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C1878 +
            (C26926 * C221 + C81009 * C227) * C81004 -
            (C26926 * C1684 + C81009 * C1694) * C1879 -
            (C26926 * C1882 + C81009 * C1890) * C80990 +
            (C26926 * C1686 + C81009 * C1698) * C1880 +
            (C26926 * C1883 + C81009 * C1891) * C80965) *
               C26924 +
           (C32331 + C32332 - C32333 - C32334 + C32335 + C32349) * C26925) *
              C81012 * C4984 +
          ((C32333 - (C32332 + C32331) + C32334 - C32335 - C32349) * C26924 +
           (C32338 - (C32339 + C32340) + C32350 - C32343 - C32351) * C26925) *
              C81012 * C4985 +
          ((C32340 + C32339 - C32338 - C32350 + C32343 + C32351) * C26924 +
           (C31658 * C1878 + C31766 * C81004 -
            (C26926 * C8499 + C81009 * C8501) * C1879 -
            (C26926 * C8643 + C81009 * C8645) * C80990 +
            (C26926 * C32139 + C81009 * C32140) * C1880 +
            (C26926 * C32328 + C81009 * C32329) * C80965) *
               C26925) *
              C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 -
            (C26926 * C1684 + C81009 * C1694) * C9285 -
            (C26926 * C1882 + C81009 * C1890) * C9134 +
            (C26926 * C1686 + C81009 * C1698) * C9286 +
            (C26926 * C1883 + C81009 * C1891) * C80965) *
               C26924 +
           (C27364 * C9284 + C27572 * C9133 - C30064 * C9285 - C30294 * C9134 +
            C32158 * C9286 + C32346 * C80965) *
               C26925) *
              C81012 * C80628 * C80998 +
          (((C26926 * C1682 + C81009 * C1690) * C9285 -
            ((C26926 * C222 + C81009 * C228) * C9133 +
             (C26926 * C100 + C81009 * C106) * C9284) +
            (C26926 * C1881 + C81009 * C1889) * C9134 -
            (C26926 * C1687 + C81009 * C1699) * C9286 -
            (C26926 * C1884 + C81009 * C1892) * C80965) *
               C26924 +
           (C30062 * C9285 - (C27574 * C9133 + C27366 * C9284) +
            C30295 * C9134 - (C26926 * C6137 + C81009 * C6145) * C9286 -
            (C26926 * C6321 + C81009 * C6327) * C80965) *
               C26925) *
              C81012 * C80628 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C9284 +
            (C26926 * C223 + C81009 * C229) * C9133 -
            (C26926 * C1683 + C81009 * C1691) * C9285 -
            (C26926 * C1885 + C81009 * C1893) * C9134 +
            (C26926 * C1688 + C81009 * C1702) * C9286 +
            (C26926 * C1886 + C81009 * C1894) * C80965) *
               C26924 +
           (C27368 * C9284 + C27576 * C9133 - C30066 * C9285 - C30296 * C9134 +
            (C26926 * C10971 + C81009 * C10972) * C9286 +
            (C26926 * C11173 + C81009 * C11174) * C80965) *
               C26925) *
              C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 -
            (C26926 * C1684 + C81009 * C1694) * C9285 -
            (C26926 * C1882 + C81009 * C1890) * C9134 +
            (C26926 * C1686 + C81009 * C1698) * C9286 +
            (C26926 * C1883 + C81009 * C1891) * C80965) *
               C26924 +
           (C35948 + C35949 - C35950 - C35951 + C35952 + C35953) * C26925) *
              C81012 * C81003 +
          ((C35950 - (C35949 + C35948) + C35951 - C35952 - C35953) * C26924 +
           (C35954 - (C35955 + C35956) + C35957 - C35958 - C35959) * C26925) *
              C81012 * C80988 +
          ((C35956 + C35955 - C35954 - C35957 + C35958 + C35959) * C26924 +
           (C31658 * C9284 + C31766 * C9133 - C34489 * C9285 - C34636 * C9134 +
            (C26926 * C32139 + C81009 * C32140) * C9286 +
            (C26926 * C32328 + C81009 * C32329) * C80965) *
               C26925) *
              C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C10576 +
           (C26926 * C221 + C81009 * C227) * C10463 -
           (C26926 * C1684 + C81009 * C1694) * C10577 -
           (C26926 * C1882 + C81009 * C1890) * C10464 +
           (C26926 * C1686 + C81009 * C1698) * C10578 +
           (C26926 * C1883 + C81009 * C1891) * C10465 -
           (C26926 * C10469 + C81009 * C10475) * C10579 -
           (C26926 * C10582 + C81009 * C10586) * C10466 +
           (C26926 * C10470 + C81009 * C10476) * C10580 +
           (C26926 * C10583 + C81009 * C10587) * C10467) *
              C26924 +
          (C27364 * C10576 + C27572 * C10463 - C30064 * C10577 -
           C30294 * C10464 + C32158 * C10578 + C32346 * C10465 -
           (C26926 * C12543 + C81009 * C12545) * C10579 -
           (C26926 * C12687 + C81009 * C12689) * C10466 +
           (C26926 * C36457 + C81009 * C36458) * C10580 +
           (C26926 * C36547 + C81009 * C36548) * C10467) *
              C26925) *
         C81012 * C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                  C94 +
              (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                  C83 -
              (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                  C95 -
              (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                  C84 +
              (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                  C96 +
              (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
                  C85 -
              (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                  C97 -
              (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
                  C86 +
              (C27053 * C103 + C26924 * C280 + C27054 * C2617 +
               C26925 * C2825) *
                  C98 +
              (C27053 * C114 + C26924 * C286 + C27054 * C2619 +
               C26925 * C2826) *
                  C87) *
             C81012 * C81009 * C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                   C743 +
               (C27053 * C107 + C26924 * C282 + C27054 * C757 +
                C26925 * C1043) *
                   C737 -
               (C27054 * C746 + C26925 * C1035 + C27053 * C100 +
                C26924 * C277) *
                   C744 -
               (C27054 * C756 + C26925 * C1044 + C27053 * C108 +
                C26924 * C283) *
                   C738 +
               (C27053 * C101 + C26924 * C278 + C27054 * C747 +
                C26925 * C1037) *
                   C745 +
               (C27053 * C110 + C26924 * C284 + C27054 * C759 +
                C26925 * C1045) *
                   C80954) *
                  C81012 * C81009 * C80639 * C81003 +
              ((C27053 * C746 + C26924 * C1035 + C27054 * C751 +
                C26925 * C1040) *
                   C744 -
               ((C27054 * C764 + C26925 * C1047 + C27053 * C757 +
                 C26924 * C1043) *
                    C737 +
                (C27054 * C750 + C26925 * C1039 + C27053 * C748 +
                 C26924 * C1036) *
                    C743) +
               (C27053 * C756 + C26924 * C1044 + C27054 * C765 +
                C26925 * C1048) *
                   C738 -
               (C27054 * C752 + C26925 * C1041 + C27053 * C747 +
                C26924 * C1037) *
                   C745 -
               (C27054 * C767 + C26925 * C1049 + C27053 * C759 +
                C26924 * C1045) *
                   C80954) *
                  C81012 * C81009 * C80639 * C80988 +
              ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 +
                C26925 * C5822) *
                   C743 +
               (C27053 * C764 + C26924 * C1047 + C27054 * C5663 +
                C26925 * C5826) *
                   C737 -
               (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
                C26924 * C1040) *
                   C744 -
               (C27054 * C5662 + C26925 * C5825 + C27053 * C765 +
                C26924 * C1048) *
                   C738 +
               (C27053 * C752 + C26924 * C1041 + C27054 * C6899 +
                C26925 * C7109) *
                   C745 +
               (C27053 * C767 + C26924 * C1049 + C27054 * C6901 +
                C26925 * C7110) *
                   C80954) *
                  C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C743 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C737 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C744 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C738 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C745 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C81004 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C744 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C737 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C743) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C738 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C745 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C80954) *
              C81012 * C81009 * C80990 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C743 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C737 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C744 -
           (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 + C26924 * C1984) *
               C738 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C745 +
           (C27053 * C1703 + C26924 * C1985 + C27054 * C10973 +
            C26925 * C11274) *
               C80954) *
              C81012 * C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C4987 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80998 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C4988 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80982 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C4989 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4984 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C4988 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80998 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C4987) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80982 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C4989 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4985 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C4987 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80998 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C4988 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80982 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C4989 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C80954) *
              C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5657 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80588) *
              C81012 * C81009 * C80639 * C5652 -
          ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
               C80588 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5657) *
              C81012 * C81009 * C80639 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5657 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80588) *
              C81012 * C81009 * C80639 * C5654 -
          ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 + C26924 * C5826) *
               C80588 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C5657) *
              C81012 * C81009 * C80639 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C5657 +
           (C27053 * C5668 + C26924 * C5827 + C27054 * C31643 +
            C26925 * C31812) *
               C80588) *
              C81012 * C81009 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C81004 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C80990 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C5657 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80588) *
               C81012 * C81009 * C80965) *
              C4984 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C80990 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C81004 -
           ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
             C26924 * C6414) *
                C80588 +
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C5657) *
               C81012 * C81009 * C80965) *
              C4985 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C81004 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C80990 +
           ((C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
             C26925 * C32425) *
                C5657 +
            (C27053 * C6153 + C26924 * C6417 + C27054 * C32141 +
             C26925 * C32426) *
                C80588) *
               C81012 * C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C4987 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80998 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C4988 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80982 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C4989 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C9133 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C4988 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80998 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C4987) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C80982 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C4989 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C80954) *
              C81012 * C81009 * C9134 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C4987 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C80998 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C4988 -
           (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 + C26924 * C1984) *
               C80982 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C4989 +
           (C27053 * C1703 + C26924 * C1985 + C27054 * C10973 +
            C26925 * C11274) *
               C80954) *
              C81012 * C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C9133 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C9134 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C5657 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80588) *
               C81012 * C81009 * C80965) *
              C81003 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C9134 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C9133 -
           ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
             C26924 * C6414) *
                C80588 +
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C5657) *
               C81012 * C81009 * C80965) *
              C80988 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C9133 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C9134 +
           ((C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
             C26925 * C32425) *
                C5657 +
            (C27053 * C6153 + C26924 * C6417 + C27054 * C32141 +
             C26925 * C32426) *
                C80588) *
               C81012 * C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5657 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80588) *
              C81012 * C81009 * C10463 -
          ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 + C26924 * C1979) *
               C80588 +
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C5657) *
              C81012 * C81009 * C10464 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C5657 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C80588) *
              C81012 * C81009 * C10465 -
          ((C27054 * C12547 + C26925 * C12759 + C27053 * C10473 +
            C26924 * C10636) *
               C80588 +
           (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
            C26924 * C10632) *
               C5657) *
              C81012 * C81009 * C10466 +
          ((C27053 * C10470 + C26924 * C10633 + C27054 * C36457 +
            C26925 * C36591) *
               C5657 +
           (C27053 * C10478 + C26924 * C10637 + C27054 * C36459 +
            C26925 * C36592) *
               C80588) *
              C81012 * C81009 * C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                   C165 +
               (C27053 * C166 + C26924 * C354 + C27054 * C856 +
                C26925 * C1149) *
                   C80628) *
                  C81012 * C81009 * C83 -
              ((C27054 * C855 + C26925 * C1151 + C27053 * C167 +
                C26924 * C355) *
                   C80628 +
               (C27054 * C746 + C26925 * C1035 + C27053 * C100 +
                C26924 * C277) *
                   C165) *
                  C81012 * C81009 * C84 +
              ((C27053 * C101 + C26924 * C278 + C27054 * C747 +
                C26925 * C1037) *
                   C165 +
               (C27053 * C168 + C26924 * C356 + C27054 * C859 +
                C26925 * C1153) *
                   C80628) *
                  C81012 * C81009 * C85 -
              ((C27054 * C861 + C26925 * C1155 + C27053 * C169 +
                C26924 * C357) *
                   C80628 +
               (C27054 * C749 + C26925 * C1038 + C27053 * C102 +
                C26924 * C279) *
                   C165) *
                  C81012 * C81009 * C86 +
              ((C27053 * C103 + C26924 * C280 + C27054 * C2617 +
                C26925 * C2825) *
                   C165 +
               (C27053 * C170 + C26924 * C358 + C27054 * C2689 +
                C26925 * C2899) *
                   C80628) *
                  C81012 * C81009 * C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                   C852 +
               (C27053 * C166 + C26924 * C354 + C27054 * C856 +
                C26925 * C1149) *
                   C81003 -
               (C27054 * C750 + C26925 * C1039 + C27053 * C748 +
                C26924 * C1036) *
                   C853 -
               (C27054 * C857 + C26925 * C1150 + C27053 * C856 +
                C26924 * C1149) *
                   C80988 +
               (C27053 * C750 + C26924 * C1039 + C27054 * C5659 +
                C26925 * C5822) *
                   C854 +
               (C27053 * C857 + C26924 * C1150 + C27054 * C5722 +
                C26925 * C5871) *
                   C80962) *
                  C81012 * C81009 * C737 +
              ((C27053 * C746 + C26924 * C1035 + C27054 * C751 +
                C26925 * C1040) *
                   C853 -
               ((C27054 * C855 + C26925 * C1151 + C27053 * C167 +
                 C26924 * C355) *
                    C81003 +
                (C27054 * C746 + C26925 * C1035 + C27053 * C100 +
                 C26924 * C277) *
                    C852) +
               (C27053 * C855 + C26924 * C1151 + C27054 * C858 +
                C26925 * C1152) *
                   C80988 -
               (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
                C26924 * C1040) *
                   C854 -
               (C27054 * C5721 + C26925 * C5873 + C27053 * C858 +
                C26924 * C1152) *
                   C80962) *
                  C81012 * C81009 * C738 +
              ((C27053 * C101 + C26924 * C278 + C27054 * C747 +
                C26925 * C1037) *
                   C852 +
               (C27053 * C168 + C26924 * C356 + C27054 * C859 +
                C26925 * C1153) *
                   C81003 -
               (C27054 * C752 + C26925 * C1041 + C27053 * C747 +
                C26924 * C1037) *
                   C853 -
               (C27054 * C860 + C26925 * C1154 + C27053 * C859 +
                C26924 * C1153) *
                   C80988 +
               (C27053 * C752 + C26924 * C1041 + C27054 * C6899 +
                C26925 * C7109) *
                   C854 +
               (C27053 * C860 + C26924 * C1154 + C27054 * C6973 +
                C26925 * C7183) *
                   C80962) *
                  C81012 * C81009 * C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C737 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C738 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C80954) *
              C81004 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C738 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C737 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C80954) *
              C80990 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C165 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80628) *
               C81012 * C81009 * C737 -
           ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
             C26924 * C2090) *
                C80628 +
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C165) *
               C81012 * C81009 * C738 +
           ((C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
             C26925 * C11273) *
                C165 +
            (C27053 * C1794 + C26924 * C2091 + C27054 * C11073 +
             C26925 * C11379) *
                C80628) *
               C81012 * C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5064 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C4984 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5065 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C4985 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5066 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80998 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C5065 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C4984 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C5064) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C4985 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C5066 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80962) *
              C81012 * C81009 * C80982 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C5064 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C4984 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C5065 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C4985 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C5066 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C80962) *
              C81012 * C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C5716 +
          (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
              C5652 -
          (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
              C5717 -
          (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
              C5653 +
          (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
              C5718 +
          (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
              C5654 -
          (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
              C5719 -
          (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
              C5655 +
          (C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
           C26925 * C31811) *
              C5720 +
          (C27053 * C5723 + C26924 * C5872 + C27054 * C31707 +
           C26925 * C31855) *
              C5656) *
         C81012 * C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5064 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C4984 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5065 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C4985 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5066 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80588 * C81004 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C5065 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C4984 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5064) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C4985 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C5066 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C80962) *
              C81012 * C81009 * C80588 * C80990 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C5064 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C4984 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C5065 -
           (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 + C26924 * C6495) *
               C4985 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C5066 +
           (C27053 * C6239 + C26924 * C6496 + C27054 * C32243 +
            C26925 * C32501) *
               C80962) *
              C81012 * C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C80998 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C80982 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C80954) *
              C9133 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C80982 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C80998 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C80954) *
              C9134 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C165 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80628) *
               C81012 * C81009 * C80998 -
           ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
             C26924 * C2090) *
                C80628 +
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C165) *
               C81012 * C81009 * C80982 +
           ((C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
             C26925 * C11273) *
                C165 +
            (C27053 * C1794 + C26924 * C2091 + C27054 * C11073 +
             C26925 * C11379) *
                C80628) *
               C81012 * C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C852 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81003 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C853 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80988 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C854 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80588 * C9133 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C853 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C81003 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C852) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C80988 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C854 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C80962) *
              C81012 * C81009 * C80588 * C9134 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C852 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C81003 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C853 -
           (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 + C26924 * C6495) *
               C80988 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C854 +
           (C27053 * C6239 + C26924 * C6496 + C27054 * C32243 +
            C26925 * C32501) *
               C80962) *
              C81012 * C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C165 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80628) *
              C81012 * C81009 * C80588 * C10463 -
          ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 + C26924 * C2087) *
               C80628 +
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C165) *
              C81012 * C81009 * C80588 * C10464 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C165 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C80628) *
              C81012 * C81009 * C80588 * C10465 -
          ((C27054 * C12617 + C26925 * C12827 + C27053 * C10527 +
            C26924 * C10682) *
               C80628 +
           (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
            C26924 * C10632) *
               C165) *
              C81012 * C81009 * C80588 * C10466 +
          ((C27053 * C10470 + C26924 * C10633 + C27054 * C36457 +
            C26925 * C36591) *
               C165 +
           (C27053 * C10528 + C26924 * C10683 + C27054 * C36503 +
            C26925 * C36635) *
               C80628) *
              C81012 * C81009 * C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                   C220 +
               (C27053 * C221 + C26924 * C422 + C27054 * C946 +
                C26925 * C1256) *
                   C80639) *
                  C81012 * C81009 * C80628 * C83 -
              ((C27054 * C945 + C26925 * C1255 + C27053 * C222 +
                C26924 * C423) *
                   C80639 +
               (C27054 * C746 + C26925 * C1035 + C27053 * C100 +
                C26924 * C277) *
                   C220) *
                  C81012 * C81009 * C80628 * C84 +
              ((C27053 * C101 + C26924 * C278 + C27054 * C747 +
                C26925 * C1037) *
                   C220 +
               (C27053 * C223 + C26924 * C424 + C27054 * C949 +
                C26925 * C1259) *
                   C80639) *
                  C81012 * C81009 * C80628 * C85 -
              ((C27054 * C951 + C26925 * C1261 + C27053 * C224 +
                C26924 * C425) *
                   C80639 +
               (C27054 * C749 + C26925 * C1038 + C27053 * C102 +
                C26924 * C279) *
                   C220) *
                  C81012 * C81009 * C80628 * C86 +
              ((C27053 * C103 + C26924 * C280 + C27054 * C2617 +
                C26925 * C2825) *
                   C220 +
               (C27053 * C225 + C26924 * C426 + C27054 * C2757 +
                C26925 * C2981) *
                   C80639) *
                  C81012 * C81009 * C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C27053 * C99 + C26924 * C276 + C27054 * C748 +
                 C26925 * C1036) *
                    C220 +
                (C27053 * C221 + C26924 * C422 + C27054 * C946 +
                 C26925 * C1256) *
                    C80639) *
                   C81012 * C81009 * C81003 -
               ((C27054 * C947 + C26925 * C1257 + C27053 * C946 +
                 C26924 * C1256) *
                    C80639 +
                (C27054 * C750 + C26925 * C1039 + C27053 * C748 +
                 C26924 * C1036) *
                    C220) *
                   C81012 * C81009 * C80988 +
               ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 +
                 C26925 * C5822) *
                    C220 +
                (C27053 * C947 + C26924 * C1257 + C27054 * C5772 +
                 C26925 * C5918) *
                    C80639) *
                   C81012 * C81009 * C80962) *
                  C737 +
              (((C27053 * C746 + C26924 * C1035 + C27054 * C751 +
                 C26925 * C1040) *
                    C220 +
                (C27053 * C945 + C26924 * C1255 + C27054 * C948 +
                 C26925 * C1258) *
                    C80639) *
                   C81012 * C81009 * C80988 -
               ((C27054 * C945 + C26925 * C1255 + C27053 * C222 +
                 C26924 * C423) *
                    C80639 +
                (C27054 * C746 + C26925 * C1035 + C27053 * C100 +
                 C26924 * C277) *
                    C220) *
                   C81012 * C81009 * C81003 -
               ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 +
                 C26924 * C1258) *
                    C80639 +
                (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
                 C26924 * C1040) *
                    C220) *
                   C81012 * C81009 * C80962) *
                  C738 +
              (((C27053 * C101 + C26924 * C278 + C27054 * C747 +
                 C26925 * C1037) *
                    C220 +
                (C27053 * C223 + C26924 * C424 + C27054 * C949 +
                 C26925 * C1259) *
                    C80639) *
                   C81012 * C81009 * C81003 -
               ((C27054 * C950 + C26925 * C1260 + C27053 * C949 +
                 C26924 * C1259) *
                    C80639 +
                (C27054 * C752 + C26925 * C1041 + C27053 * C747 +
                 C26924 * C1037) *
                    C220) *
                   C81012 * C81009 * C80988 +
               ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 +
                 C26925 * C7109) *
                    C220 +
                (C27053 * C950 + C26924 * C1260 + C27054 * C7041 +
                 C26925 * C7261) *
                    C80639) *
                   C81012 * C81009 * C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C1878 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C81004 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C1879 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80990 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C1880 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C80628 * C737 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C1879 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C81004 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C1878) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C80990 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C1880 -
           (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 + C26924 * C2190) *
               C80965) *
              C81012 * C81009 * C80628 * C738 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C1878 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C81004 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C1879 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C80990 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C1880 +
           (C27053 * C1886 + C26924 * C2192 + C27054 * C11173 +
            C26925 * C11485) *
               C80965) *
              C81012 * C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80998 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C4985 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C4984 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80962) *
              C80982 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C220 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80639) *
              C81012 * C81009 * C5652 -
          ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
               C80639 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C220) *
              C81012 * C81009 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C220 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C80639) *
              C81012 * C81009 * C5654 -
          ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 + C26924 * C5918) *
               C80639 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C220) *
              C81012 * C81009 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C220 +
           (C27053 * C5773 + C26924 * C5919 + C27054 * C31757 +
            C26925 * C31898) *
               C80639) *
              C81012 * C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C1878 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C81004 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C1879 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80990 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C1880 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C4984 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C1879 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C81004 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C1878) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C80990 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C1880 -
           (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 + C26924 * C6573) *
               C80965) *
              C81012 * C81009 * C4985 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C1878 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C81004 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C1879 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C80990 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C1880 +
           (C27053 * C6325 + C26924 * C6576 + C27054 * C32328 +
            C26925 * C32576) *
               C80965) *
              C81012 * C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C9284 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C9133 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C9285 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C9134 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C9286 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C80628 * C80998 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C9285 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C9133 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C9284) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C9134 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C9286 -
           (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 + C26924 * C2190) *
               C80965) *
              C81012 * C81009 * C80628 * C80982 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C9284 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C9133 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C9285 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C9134 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C9286 +
           (C27053 * C1886 + C26924 * C2192 + C27054 * C11173 +
            C26925 * C11485) *
               C80965) *
              C81012 * C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C9284 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C9133 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C9285 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C9134 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C9286 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C81003 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C9285 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C9133 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C9284) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C9134 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C9286 -
           (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 + C26924 * C6573) *
               C80965) *
              C81012 * C81009 * C80988 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C9284 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C9133 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C9285 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C9134 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C9286 +
           (C27053 * C6325 + C26924 * C6576 + C27054 * C32328 +
            C26925 * C32576) *
               C80965) *
              C81012 * C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C10576 +
          (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
              C10463 -
          (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
              C10577 -
          (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
              C10464 +
          (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
              C10578 +
          (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
              C10465 -
          (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
           C26924 * C10632) *
              C10579 -
          (C27054 * C12687 + C26925 * C12895 + C27053 * C10582 +
           C26924 * C10727) *
              C10466 +
          (C27053 * C10470 + C26924 * C10633 + C27054 * C36457 +
           C26925 * C36591) *
              C10580 +
          (C27053 * C10583 + C26924 * C10728 + C27054 * C36547 +
           C26925 * C36678) *
              C10467) *
         C81012 * C81009 * C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C490 * C99 + C81012 * C491) * C94 +
               (C490 * C107 + C81012 * C497) * C83 - C520 * C95 - C521 * C84 +
               C522 * C96 + C523 * C85 - C524 * C97 - C525 * C86 + C526 * C98 +
               C527 * C87) *
                  C81009 * C26924 +
              ((C490 * C748 + C81012 * C1358) * C94 +
               (C490 * C757 + C81012 * C1365) * C83 - C1390 * C95 -
               C1391 * C84 + C1392 * C96 + C1393 * C85 - C3060 * C97 -
               C3061 * C86 + (C490 * C2617 + C81012 * C3053) * C98 +
               (C490 * C2619 + C81012 * C3054) * C87) *
                  C81009 * C26925) *
             C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C743 +
                (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                C521 * C738 + C522 * C745 + C523 * C80954) *
                   C81009 * C26924 +
               (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) * C81009 *
                   C26925) *
                  C80639 * C81003 +
              ((C27884 - (C27901 + C27900) + C27885 - C27886 - C27887) *
                   C81009 * C26924 +
               (C27888 - (C27902 + C27903) + C27893 - C27894 - C27895) *
                   C81009 * C26925) *
                  C80639 * C80988 +
              ((C27903 + C27902 - C27888 - C27893 + C27894 + C27895) * C81009 *
                   C26924 +
               ((C490 * C5659 + C81012 * C5964) * C743 +
                (C490 * C5663 + C81012 * C5968) * C737 - C7340 * C744 -
                C7341 * C738 + (C490 * C6899 + C81012 * C7333) * C745 +
                (C490 * C6901 + C81012 * C7334) * C80954) *
                   C81009 * C26925) *
                  C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C743 +
            (C490 * C107 + C81012 * C497) * C737 - C520 * C744 - C521 * C738 +
            C522 * C745 + C523 * C80954) *
               C81009 * C26924 +
           (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) * C81009 *
               C26925) *
              C81004 +
          ((C2326 * C744 -
            ((C490 * C1693 + C81012 * C2301) * C737 +
             (C490 * C1684 + C81012 * C2294) * C743) +
            C2327 * C738 - C2328 * C745 - C2329 * C80954) *
               C81009 * C26924 +
           (C4672 * C744 -
            ((C490 * C3985 + C81012 * C4659) * C737 +
             (C490 * C3979 + C81012 * C4655) * C743) +
            C4673 * C738 - C4674 * C745 - C4675 * C80954) *
               C81009 * C26925) *
              C80990 +
          (((C490 * C1686 + C81012 * C2297) * C743 +
            (C490 * C1700 + C81012 * C2305) * C737 - C2330 * C744 -
            C2331 * C738 + C2332 * C745 + C2333 * C80954) *
               C81009 * C26924 +
           ((C490 * C6138 + C81012 * C6654) * C743 +
            (C490 * C6144 + C81012 * C6660) * C737 - C11600 * C744 -
            C11601 * C738 + (C490 * C10971 + C81012 * C11593) * C745 +
            (C490 * C10973 + C81012 * C11594) * C80954) *
               C81009 * C26925) *
              C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C4987 +
            (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
            C521 * C80982 + C522 * C4989 + C523 * C80954) *
               C81009 * C26924 +
           (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) * C81009 *
               C26925) *
              C80639 * C4984 +
          ((C31442 - (C31441 + C31440) + C31443 - C31444 - C31445) * C81009 *
               C26924 +
           (C31446 - (C31447 + C31448) + C31449 - C31450 - C31451) * C81009 *
               C26925) *
              C80639 * C4985 +
          ((C31448 + C31447 - C31446 - C31449 + C31450 + C31451) * C81009 *
               C26924 +
           ((C490 * C5659 + C81012 * C5964) * C4987 +
            (C490 * C5663 + C81012 * C5968) * C80998 - C7340 * C4988 -
            C7341 * C80982 + (C490 * C6899 + C81012 * C7333) * C4989 +
            (C490 * C6901 + C81012 * C7334) * C80954) *
               C81009 * C26925) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5657 +
            (C490 * C107 + C81012 * C497) * C80588) *
               C81009 * C26924 +
           (C31944 + C31945) * C81009 * C26925) *
              C80639 * C5652 -
          ((C31946 + C31947) * C81009 * C26925 +
           (C31945 + C31944) * C81009 * C26924) *
              C80639 * C5653 +
          ((C31947 + C31946) * C81009 * C26924 +
           (C31960 + C31961) * C81009 * C26925) *
              C80639 * C5654 -
          ((C31962 + C31963) * C81009 * C26925 +
           (C31961 + C31960) * C81009 * C26924) *
              C80639 * C5655 +
          ((C31963 + C31962) * C81009 * C26924 +
           ((C490 * C31641 + C81012 * C31941) * C5657 +
            (C490 * C31643 + C81012 * C31942) * C80588) *
               C81009 * C26925) *
              C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C490 * C99 + C81012 * C491) * C5657 +
                                 (C490 * C107 + C81012 * C497) * C80588) *
                                    C81009 * C26924 +
                                (C31944 + C31945) * C81009 * C26925) *
                                   C81004 -
                               ((C32654 + C32655) * C81009 * C26925 +
                                ((C490 * C1693 + C81012 * C2301) * C80588 +
                                 (C490 * C1684 + C81012 * C2294) * C5657) *
                                    C81009 * C26924) *
                                   C80990 +
                               (((C490 * C1686 + C81012 * C2297) * C5657 +
                                 (C490 * C1700 + C81012 * C2305) * C80588) *
                                    C81009 * C26924 +
                                (C32674 + C32675) * C81009 * C26925) *
                                   C80965) *
                                  C4984 +
                              (((C32655 + C32654) * C81009 * C26924 +
                                (C32676 + C32677) * C81009 * C26925) *
                                   C80990 -
                               ((C31946 + C31947) * C81009 * C26925 +
                                (C31945 + C31944) * C81009 * C26924) *
                                   C81004 -
                               ((C32678 + C32679) * C81009 * C26925 +
                                (C32675 + C32674) * C81009 * C26924) *
                                   C80965) *
                                  C4985 +
                              (((C31947 + C31946) * C81009 * C26924 +
                                (C31960 + C31961) * C81009 * C26925) *
                                   C81004 -
                               (((C490 * C8503 + C81012 * C8921) * C80588 +
                                 (C490 * C8499 + C81012 * C8919) * C5657) *
                                    C81009 * C26925 +
                                (C32677 + C32676) * C81009 * C26924) *
                                   C80990 +
                               ((C32679 + C32678) * C81009 * C26924 +
                                ((C490 * C32139 + C81012 * C32651) * C5657 +
                                 (C490 * C32141 + C81012 * C32652) * C80588) *
                                    C81009 * C26925) *
                                   C80965) *
                                  C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C4987 +
            (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
            C521 * C80982 + C522 * C4989 + C523 * C80954) *
               C81009 * C26924 +
           (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) * C81009 *
               C26925) *
              C9133 +
          ((C2326 * C4988 -
            ((C490 * C1693 + C81012 * C2301) * C80998 +
             (C490 * C1684 + C81012 * C2294) * C4987) +
            C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
               C81009 * C26924 +
           (C4672 * C4988 - (C30700 * C80998 + C30701 * C4987) +
            C4673 * C80982 - C4674 * C4989 - C4675 * C80954) *
               C81009 * C26925) *
              C9134 +
          (((C490 * C1686 + C81012 * C2297) * C4987 +
            (C490 * C1700 + C81012 * C2305) * C80998 - C2330 * C4988 -
            C2331 * C80982 + C2332 * C4989 + C2333 * C80954) *
               C81009 * C26924 +
           (C32668 * C4987 + C32669 * C80998 - C11600 * C4988 -
            C11601 * C80982 + (C490 * C10971 + C81012 * C11593) * C4989 +
            (C490 * C10973 + C81012 * C11594) * C80954) *
               C81009 * C26925) *
              C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C490 * C99 + C81012 * C491) * C5657 +
                                 (C490 * C107 + C81012 * C497) * C80588) *
                                    C81009 * C26924 +
                                (C31944 + C31945) * C81009 * C26925) *
                                   C9133 -
                               ((C32654 + C32655) * C81009 * C26925 +
                                ((C490 * C1693 + C81012 * C2301) * C80588 +
                                 (C490 * C1684 + C81012 * C2294) * C5657) *
                                    C81009 * C26924) *
                                   C9134 +
                               (((C490 * C1686 + C81012 * C2297) * C5657 +
                                 (C490 * C1700 + C81012 * C2305) * C80588) *
                                    C81009 * C26924 +
                                (C32674 + C32675) * C81009 * C26925) *
                                   C80965) *
                                  C81003 +
                              (((C32655 + C32654) * C81009 * C26924 +
                                (C32676 + C32677) * C81009 * C26925) *
                                   C9134 -
                               ((C31946 + C31947) * C81009 * C26925 +
                                (C31945 + C31944) * C81009 * C26924) *
                                   C9133 -
                               ((C32678 + C32679) * C81009 * C26925 +
                                (C32675 + C32674) * C81009 * C26924) *
                                   C80965) *
                                  C80988 +
                              (((C31947 + C31946) * C81009 * C26924 +
                                (C31960 + C31961) * C81009 * C26925) *
                                   C9133 -
                               ((C34914 + C34915) * C81009 * C26925 +
                                (C32677 + C32676) * C81009 * C26924) *
                                   C9134 +
                               ((C32679 + C32678) * C81009 * C26924 +
                                ((C490 * C32139 + C81012 * C32651) * C5657 +
                                 (C490 * C32141 + C81012 * C32652) * C80588) *
                                    C81009 * C26925) *
                                   C80965) *
                                  C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5657 +
            (C490 * C107 + C81012 * C497) * C80588) *
               C81009 * C26924 +
           (C31944 + C31945) * C81009 * C26925) *
              C10463 -
          ((C32654 + C32655) * C81009 * C26925 +
           ((C490 * C1693 + C81012 * C2301) * C80588 +
            (C490 * C1684 + C81012 * C2294) * C5657) *
               C81009 * C26924) *
              C10464 +
          (((C490 * C1686 + C81012 * C2297) * C5657 +
            (C490 * C1700 + C81012 * C2305) * C80588) *
               C81009 * C26924 +
           (C32674 + C32675) * C81009 * C26925) *
              C10465 -
          (((C490 * C12547 + C81012 * C12965) * C80588 +
            (C490 * C12543 + C81012 * C12963) * C5657) *
               C81009 * C26925 +
           ((C490 * C10473 + C81012 * C10778) * C80588 +
            (C490 * C10469 + C81012 * C10774) * C5657) *
               C81009 * C26924) *
              C10466 +
          (((C490 * C10470 + C81012 * C10775) * C5657 +
            (C490 * C10478 + C81012 * C10779) * C80588) *
               C81009 * C26924 +
           ((C490 * C36457 + C81012 * C36721) * C5657 +
            (C490 * C36459 + C81012 * C36722) * C80588) *
               C81009 * C26925) *
              C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C165 +
                (C490 * C166 + C81012 * C569) * C80628) *
                   C81009 * C26924 +
               ((C490 * C748 + C81012 * C1358) * C165 +
                (C490 * C856 + C81012 * C1471) * C80628) *
                   C81009 * C26925) *
                  C83 -
              ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
               (C592 + C576) * C81009 * C26924) *
                  C84 +
              ((C581 + C593) * C81009 * C26924 +
               (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
                  C85 -
              ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
               (C594 + C582) * C81009 * C26924) *
                  C86 +
              ((C587 + C595) * C81009 * C26924 +
               ((C490 * C2617 + C81012 * C3053) * C165 +
                (C490 * C2689 + C81012 * C3127) * C80628) *
                   C81009 * C26925) *
                  C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C852 +
                (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
                C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
                   C81009 * C26924 +
               (C27896 * C852 + C27982 * C81003 - C27899 * C853 -
                C27983 * C80988 + (C490 * C5659 + C81012 * C5964) * C854 +
                (C490 * C5722 + C81012 * C6013) * C80962) *
                   C81009 * C26925) *
                  C737 +
              ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81009 *
                   C26924 +
               (C1394 * C853 - (C1496 * C81003 + C1390 * C852) +
                C1497 * C80988 - C7340 * C854 - C7418 * C80962) *
                   C81009 * C26925) *
                  C738 +
              ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81009 *
                   C26924 +
               (C1392 * C852 + C1498 * C81003 - C1396 * C853 - C1499 * C80988 +
                (C490 * C6899 + C81012 * C7333) * C854 +
                (C490 * C6973 + C81012 * C7407) * C80962) *
                   C81009 * C26925) *
                  C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81009 * C26924 +
            (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
               C737 -
           ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
            (C592 + C576) * C81009 * C26924) *
               C738 +
           ((C581 + C593) * C81009 * C26924 +
            (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
               C80954) *
              C81004 +
          (((C2416 + C2432) * C81009 * C26924 +
            (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
               C738 -
           (((C490 * C4093 + C81012 * C4773) * C80628 +
             (C490 * C3979 + C81012 * C4655) * C165) *
                C81009 * C26925 +
            ((C490 * C1790 + C81012 * C2409) * C80628 +
             (C490 * C1684 + C81012 * C2294) * C165) *
                C81009 * C26924) *
               C737 -
           ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
            (C2433 + C2419) * C81009 * C26924) *
               C80954) *
              C80990 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81009 * C26924 +
            ((C490 * C6138 + C81012 * C6654) * C165 +
             (C490 * C6238 + C81012 * C6741) * C80628) *
                C81009 * C26925) *
               C737 -
           ((C11706 * C80628 + C11600 * C165) * C81009 * C26925 +
            (C2434 + C2422) * C81009 * C26924) *
               C738 +
           ((C2427 + C2435) * C81009 * C26924 +
            ((C490 * C10971 + C81012 * C11593) * C165 +
             (C490 * C11073 + C81012 * C11699) * C80628) *
                C81009 * C26925) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
            C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
            (C490 * C5659 + C81012 * C5964) * C5066 +
            (C490 * C5722 + C81012 * C6013) * C80962) *
               C81009 * C26925) *
              C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81009 * C26924 +
           (C1394 * C5065 - (C1496 * C4984 + C1390 * C5064) + C1497 * C4985 -
            C7340 * C5066 - C7418 * C80962) *
               C81009 * C26925) *
              C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81009 * C26924 +
           (C1392 * C5064 + C1498 * C4984 - C1396 * C5065 - C1499 * C4985 +
            (C490 * C6899 + C81012 * C7333) * C5066 +
            (C490 * C6973 + C81012 * C7407) * C80962) *
               C81009 * C26925) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 - C27896 * C5717 -
           C27982 * C5653 + C27899 * C5718 + C27983 * C5654 - C31956 * C5719 -
           C32011 * C5655 + C31959 * C5720 + C32012 * C5656) *
              C81009 * C26924 +
          (C27896 * C5716 + C27982 * C5652 - C27899 * C5717 - C27983 * C5653 +
           C31956 * C5718 + C32011 * C5654 - C31959 * C5719 - C32012 * C5655 +
           (C490 * C31641 + C81012 * C31941) * C5720 +
           (C490 * C31707 + C81012 * C32005) * C5656) *
              C81009 * C26925) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
            C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
            C31956 * C5066 + C32011 * C80962) *
               C81009 * C26925) *
              C80588 * C81004 +
          ((C30701 * C5065 -
            ((C490 * C1790 + C81012 * C2409) * C4984 +
             (C490 * C1684 + C81012 * C2294) * C5064) +
            C30804 * C4985 - C32670 * C5066 - C32761 * C80962) *
               C81009 * C26924 +
           (C32670 * C5065 - (C30804 * C4984 + C30701 * C5064) +
            C32761 * C4985 - (C490 * C8499 + C81012 * C8919) * C5066 -
            (C490 * C8573 + C81012 * C8989) * C80962) *
               C81009 * C26925) *
              C80588 * C80990 +
          (((C490 * C1686 + C81012 * C2297) * C5064 +
            (C490 * C1792 + C81012 * C2411) * C4984 - C32668 * C5065 -
            C32762 * C4985 + C32673 * C5066 + C32763 * C80962) *
               C81009 * C26924 +
           (C32668 * C5064 + C32762 * C4984 - C32673 * C5065 - C32763 * C4985 +
            (C490 * C32139 + C81012 * C32651) * C5066 +
            (C490 * C32243 + C81012 * C32753) * C80962) *
               C81009 * C26925) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81009 * C26924 +
            (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
               C80998 -
           ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
            (C592 + C576) * C81009 * C26924) *
               C80982 +
           ((C581 + C593) * C81009 * C26924 +
            (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
               C80954) *
              C9133 +
          (((C2416 + C2432) * C81009 * C26924 +
            (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
               C80982 -
           ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
            ((C490 * C1790 + C81012 * C2409) * C80628 +
             (C490 * C1684 + C81012 * C2294) * C165) *
                C81009 * C26924) *
               C80998 -
           ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
            (C2433 + C2419) * C81009 * C26924) *
               C80954) *
              C9134 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81009 * C26924 +
            (C32668 * C165 + C32762 * C80628) * C81009 * C26925) *
               C80998 -
           ((C11706 * C80628 + C11600 * C165) * C81009 * C26925 +
            (C2434 + C2422) * C81009 * C26924) *
               C80982 +
           ((C2427 + C2435) * C81009 * C26924 +
            ((C490 * C10971 + C81012 * C11593) * C165 +
             (C490 * C11073 + C81012 * C11699) * C80628) *
                C81009 * C26925) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
            C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C852 + C27982 * C81003 - C27899 * C853 - C27983 * C80988 +
            C31956 * C854 + C32011 * C80962) *
               C81009 * C26925) *
              C80588 * C9133 +
          ((C30701 * C853 -
            ((C490 * C1790 + C81012 * C2409) * C81003 +
             (C490 * C1684 + C81012 * C2294) * C852) +
            C30804 * C80988 - C32670 * C854 - C32761 * C80962) *
               C81009 * C26924 +
           (C32670 * C853 - (C30804 * C81003 + C30701 * C852) +
            C32761 * C80988 - C34913 * C854 - C34985 * C80962) *
               C81009 * C26925) *
              C80588 * C9134 +
          (((C490 * C1686 + C81012 * C2297) * C852 +
            (C490 * C1792 + C81012 * C2411) * C81003 - C32668 * C853 -
            C32762 * C80988 + C32673 * C854 + C32763 * C80962) *
               C81009 * C26924 +
           (C32668 * C852 + C32762 * C81003 - C32673 * C853 - C32763 * C80988 +
            (C490 * C32139 + C81012 * C32651) * C854 +
            (C490 * C32243 + C81012 * C32753) * C80962) *
               C81009 * C26925) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81009 * C26924 +
           (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
              C80588 * C10463 -
          ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
           ((C490 * C1790 + C81012 * C2409) * C80628 +
            (C490 * C1684 + C81012 * C2294) * C165) *
               C81009 * C26924) *
              C80588 * C10464 +
          (((C490 * C1686 + C81012 * C2297) * C165 +
            (C490 * C1792 + C81012 * C2411) * C80628) *
               C81009 * C26924 +
           (C32668 * C165 + C32762 * C80628) * C81009 * C26925) *
              C80588 * C10465 -
          (((C490 * C12617 + C81012 * C13033) * C80628 +
            (C490 * C12543 + C81012 * C12963) * C165) *
               C81009 * C26925 +
           ((C490 * C10527 + C81012 * C10824) * C80628 +
            (C490 * C10469 + C81012 * C10774) * C165) *
               C81009 * C26924) *
              C80588 * C10466 +
          (((C490 * C10470 + C81012 * C10775) * C165 +
            (C490 * C10528 + C81012 * C10825) * C80628) *
               C81009 * C26924 +
           ((C490 * C36457 + C81012 * C36721) * C165 +
            (C490 * C36503 + C81012 * C36765) * C80628) *
               C81009 * C26925) *
              C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C490 * C99 + C81012 * C491) * C220 +
                (C490 * C221 + C81012 * C637) * C80639) *
                   C81009 * C26924 +
               ((C490 * C748 + C81012 * C1358) * C220 +
                (C490 * C946 + C81012 * C1578) * C80639) *
                   C81009 * C26925) *
                  C80628 * C83 -
              ((C1602 + C1588) * C81009 * C26925 +
               (C660 + C644) * C81009 * C26924) *
                  C80628 * C84 +
              ((C649 + C661) * C81009 * C26924 +
               (C1592 + C1604) * C81009 * C26925) *
                  C80628 * C85 -
              ((C3215 + C3213) * C81009 * C26925 +
               (C662 + C650) * C81009 * C26924) *
                  C80628 * C86 +
              ((C655 + C663) * C81009 * C26924 +
               ((C490 * C2617 + C81012 * C3053) * C220 +
                (C490 * C2757 + C81012 * C3209) * C80639) *
                   C81009 * C26925) *
                  C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C490 * C99 + C81012 * C491) * C220 +
                 (C490 * C221 + C81012 * C637) * C80639) *
                    C81009 * C26924 +
                (C28058 + C28066) * C81009 * C26925) *
                   C81003 -
               ((C28067 + C28063) * C81009 * C26925 +
                (C28066 + C28058) * C81009 * C26924) *
                   C80988 +
               ((C28063 + C28067) * C81009 * C26924 +
                ((C490 * C5659 + C81012 * C5964) * C220 +
                 (C490 * C5772 + C81012 * C6060) * C80639) *
                    C81009 * C26925) *
                   C80962) *
                  C737 +
              (((C1588 + C1602) * C81009 * C26924 +
                (C1589 + C1603) * C81009 * C26925) *
                   C80988 -
               ((C1602 + C1588) * C81009 * C26925 +
                (C660 + C644) * C81009 * C26924) *
                   C81003 -
               ((C7491 + C7489) * C81009 * C26925 +
                (C1603 + C1589) * C81009 * C26924) *
                   C80962) *
                  C738 +
              (((C649 + C661) * C81009 * C26924 +
                (C1592 + C1604) * C81009 * C26925) *
                   C81003 -
               ((C1605 + C1597) * C81009 * C26925 +
                (C1604 + C1592) * C81009 * C26924) *
                   C80988 +
               ((C1597 + C1605) * C81009 * C26924 +
                ((C490 * C6899 + C81012 * C7333) * C220 +
                 (C490 * C7041 + C81012 * C7485) * C80639) *
                    C81009 * C26925) *
                   C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C27896 * C1878 + C28064 * C81004 -
            (C490 * C3979 + C81012 * C4655) * C1879 -
            (C490 * C4199 + C81012 * C4889) * C80990 +
            (C490 * C6138 + C81012 * C6654) * C1880 +
            (C490 * C6322 + C81012 * C6819) * C80965) *
               C81009 * C26925) *
              C80628 * C737 +
          ((C2520 - (C2519 + C2518) + C2538 - C2523 - C2539) * C81009 * C26924 +
           (C15260 - (C15261 + C15262) + C15263 - C15264 - C15265) * C81009 *
               C26925) *
              C80628 * C738 +
          ((C2528 + C2527 - C2526 - C2540 + C2531 + C2541) * C81009 * C26924 +
           (C1392 * C1878 + C1600 * C81004 - C4674 * C1879 - C4905 * C80990 +
            (C490 * C10971 + C81012 * C11593) * C1880 +
            (C490 * C11173 + C81012 * C11805) * C80965) *
               C81009 * C26925) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81009 * C26924 +
            (C28058 + C28066) * C81009 * C26925) *
               C4984 -
           ((C28067 + C28063) * C81009 * C26925 +
            (C28066 + C28058) * C81009 * C26924) *
               C4985 +
           ((C28063 + C28067) * C81009 * C26924 +
            ((C490 * C5659 + C81012 * C5964) * C220 +
             (C490 * C5772 + C81012 * C6060) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80998 +
          (((C1588 + C1602) * C81009 * C26924 +
            (C1589 + C1603) * C81009 * C26925) *
               C4985 -
           ((C1602 + C1588) * C81009 * C26925 +
            (C660 + C644) * C81009 * C26924) *
               C4984 -
           ((C7491 + C7489) * C81009 * C26925 +
            (C1603 + C1589) * C81009 * C26924) *
               C80962) *
              C80982 +
          (((C649 + C661) * C81009 * C26924 +
            (C1592 + C1604) * C81009 * C26925) *
               C4984 -
           ((C1605 + C1597) * C81009 * C26925 +
            (C1604 + C1592) * C81009 * C26924) *
               C4985 +
           ((C1597 + C1605) * C81009 * C26924 +
            ((C490 * C6899 + C81012 * C7333) * C220 +
             (C490 * C7041 + C81012 * C7485) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81009 * C26924 +
           (C28058 + C28066) * C81009 * C26925) *
              C5652 -
          ((C28067 + C28063) * C81009 * C26925 +
           (C28066 + C28058) * C81009 * C26924) *
              C5653 +
          ((C28063 + C28067) * C81009 * C26924 +
           (C32056 + C32064) * C81009 * C26925) *
              C5654 -
          ((C32065 + C32061) * C81009 * C26925 +
           (C32064 + C32056) * C81009 * C26924) *
              C5655 +
          ((C32061 + C32065) * C81009 * C26924 +
           ((C490 * C31641 + C81012 * C31941) * C220 +
            (C490 * C31757 + C81012 * C32054) * C80639) *
               C81009 * C26925) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C32839 + C32840 - C32841 - C32842 + C32843 + C32857) * C81009 *
               C26925) *
              C4984 +
          ((C32841 - (C32840 + C32839) + C32842 - C32843 - C32857) * C81009 *
               C26924 +
           (C32846 - (C32847 + C32848) + C32858 - C32851 - C32859) * C81009 *
               C26925) *
              C4985 +
          ((C32848 + C32847 - C32846 - C32858 + C32851 + C32859) * C81009 *
               C26924 +
           (C31956 * C1878 + C32062 * C81004 -
            (C490 * C8499 + C81012 * C8919) * C1879 -
            (C490 * C8643 + C81012 * C9057) * C80990 +
            (C490 * C32139 + C81012 * C32651) * C1880 +
            (C490 * C32328 + C81012 * C32837) * C80965) *
               C81009 * C26925) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C27896 * C9284 + C28064 * C9133 - C30701 * C9285 - C30908 * C9134 +
            C32668 * C9286 + C32854 * C80965) *
               C81009 * C26925) *
              C80628 * C80998 +
          ((C9746 - (C9745 + C9744) + C9747 - C9748 - C9749) * C81009 * C26924 +
           (C11807 - (C11808 + C11809) + C11810 - C11811 - C11815) * C81009 *
               C26925) *
              C80628 * C80982 +
          ((C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C81009 * C26924 +
           (C1392 * C9284 + C1600 * C9133 - C4674 * C9285 - C4905 * C9134 +
            (C490 * C10971 + C81012 * C11593) * C9286 +
            (C490 * C11173 + C81012 * C11805) * C80965) *
               C81009 * C26925) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C36404 + C36405 - C36406 - C36407 + C36408 + C36409) * C81009 *
               C26925) *
              C81003 +
          ((C36406 - (C36405 + C36404) + C36407 - C36408 - C36409) * C81009 *
               C26924 +
           (C36410 - (C36411 + C36412) + C36413 - C36414 - C36415) * C81009 *
               C26925) *
              C80988 +
          ((C36412 + C36411 - C36410 - C36413 + C36414 + C36415) * C81009 *
               C26924 +
           (C31956 * C9284 + C32062 * C9133 - C34913 * C9285 - C35058 * C9134 +
            (C490 * C32139 + C81012 * C32651) * C9286 +
            (C490 * C32328 + C81012 * C32837) * C80965) *
               C81009 * C26925) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C10576 +
           (C490 * C221 + C81012 * C637) * C10463 -
           (C490 * C1684 + C81012 * C2294) * C10577 -
           (C490 * C1882 + C81012 * C2509) * C10464 +
           (C490 * C1686 + C81012 * C2297) * C10578 +
           (C490 * C1883 + C81012 * C2510) * C10465 -
           (C490 * C10469 + C81012 * C10774) * C10579 -
           (C490 * C10582 + C81012 * C10869) * C10466 +
           (C490 * C10470 + C81012 * C10775) * C10580 +
           (C490 * C10583 + C81012 * C10870) * C10467) *
              C81009 * C26924 +
          (C27896 * C10576 + C28064 * C10463 - C30701 * C10577 -
           C30908 * C10464 + C32668 * C10578 + C32854 * C10465 -
           (C490 * C12543 + C81012 * C12963) * C10579 -
           (C490 * C12687 + C81012 * C13101) * C10466 +
           (C490 * C36457 + C81012 * C36721) * C10580 +
           (C490 * C36547 + C81012 * C36808) * C10467) *
              C81009 * C26925) *
         C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C32926 + C32927 - C32928 - C32929) * C26925) *
                         C81012 * C80933 +
                     (((C26926 * C1682 + C81009 * C1690) * C78260 -
                       ((C26926 * C1693 + C81009 * C1707) * C80916 +
                        (C26926 * C1684 + C81009 * C1694) * C78279) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C33590 - (C33591 + C33592) + C33593) * C26925) *
                         C81012 * C80726) *
                        C4984 +
                    (((C32928 - (C32927 + C32926) + C32929) * C26924 +
                      (C32930 - (C32931 + C32932) + C32933) * C26925) *
                         C81012 * C80933 +
                     ((C33592 + C33591 - C33590 - C33593) * C26924 +
                      (C33594 + C33595 - C33602 - C33603) * C26925) *
                         C81012 * C80726) *
                        C4985 +
                    (((C32932 + C32931 - C32930 - C32933) * C26924 +
                      (C32934 + C32935 - C32942 - C32943) * C26925) *
                         C81012 * C80933 +
                     ((C33602 - (C33595 + C33594) + C33603) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C78260 -
                       ((C26926 * C8503 + C81009 * C8505) * C80916 +
                        (C26926 * C8499 + C81009 * C8501) * C78279) +
                       (C26926 * C8504 + C81009 * C8506) * C80598) *
                          C26925) *
                         C81012 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C28800 + C28801 - C28802 - C28803 + C28804 + C28805 -
                      C28812 - C28813) *
                         C26925) *
                        C81012 * C80933 +
                    (((C26926 * C1682 + C81009 * C1690) * C2614 -
                      ((C26926 * C1693 + C81009 * C1707) * C2607 +
                       (C26926 * C1684 + C81009 * C1694) * C2613) +
                      (C26926 * C1692 + C81009 * C1706) * C2608 -
                      (C26926 * C1683 + C81009 * C1691) * C2615 -
                      (C26926 * C1695 + C81009 * C1708) * C2609 +
                      (C26926 * C1685 + C81009 * C1696) * C2616 +
                      (C26926 * C1697 + C81009 * C1709) * C80966) *
                         C26924 +
                     ((C26926 * C3980 + C81009 * C3984) * C2614 -
                      ((C26926 * C3985 + C81009 * C3991) * C2607 +
                       (C26926 * C3979 + C81009 * C3983) * C2613) +
                      (C26926 * C3986 + C81009 * C3992) * C2608 -
                      (C26926 * C3981 + C81009 * C3987) * C2615 -
                      (C26926 * C3988 + C81009 * C3993) * C2609 +
                      (C26926 * C3982 + C81009 * C3989) * C2616 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C26925) *
                        C81012 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C78279 +
                      (C26926 * C107 + C81009 * C117) * C80916 -
                      (C26926 * C100 + C81009 * C106) * C78260 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C26924 +
                     (C32926 + C32927 - C32928 - C32929) * C26925) *
                        C81012 * C11881 +
                    (((C26926 * C1682 + C81009 * C1690) * C78260 -
                      ((C26926 * C1693 + C81009 * C1707) * C80916 +
                       (C26926 * C1684 + C81009 * C1694) * C78279) +
                      (C26926 * C1692 + C81009 * C1706) * C80598) *
                         C26924 +
                     (C33590 - (C33591 + C33592) + C33593) * C26925) *
                        C81012 * C11882 +
                    (((C26926 * C1686 + C81009 * C1698) * C78279 +
                      (C26926 * C1700 + C81009 * C1710) * C80916 -
                      (C26926 * C1687 + C81009 * C1699) * C78260 -
                      (C26926 * C1701 + C81009 * C1711) * C80598) *
                         C26924 +
                     (C36908 + C36909 - C36916 - C36917) * C26925) *
                        C81012 * C11883 +
                    (((C26926 * C10468 + C81009 * C10474) * C78260 -
                      ((C26926 * C10473 + C81009 * C10481) * C80916 +
                       (C26926 * C10469 + C81009 * C10475) * C78279) +
                      (C26926 * C10472 + C81009 * C10480) * C80598) *
                         C26924 +
                     ((C26926 * C12544 + C81009 * C12546) * C78260 -
                      ((C26926 * C12547 + C81009 * C12549) * C80916 +
                       (C26926 * C12543 + C81009 * C12545) * C78279) +
                      (C26926 * C12548 + C81009 * C12550) * C80598) *
                         C26925) *
                        C81012 * C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5064 +
             (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
             C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
                C26924 +
            (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
             C31658 * C5066 + C31714 * C80962) *
                C26925) *
               C81012 * C80916 +
           ((C27366 * C5065 -
             ((C26926 * C167 + C81009 * C173) * C4984 +
              (C26926 * C100 + C81009 * C106) * C5064) +
             C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
                C26924 +
            (C27370 * C5065 - (C27476 * C4984 + C27366 * C5064) +
             C27477 * C4985 - C32940 * C5066 - C33012 * C80962) *
                C26925) *
               C81012 * C80598) *
              C80933 +
          (((C30064 * C5065 -
             ((C26926 * C1790 + C81009 * C1798) * C4984 +
              (C26926 * C1684 + C81009 * C1694) * C5064) +
             C30178 * C4985 - C32160 * C5066 - C32252 * C80962) *
                C26924 +
            (C32160 * C5065 - (C30178 * C4984 + C30064 * C5064) +
             C32252 * C4985 - (C26926 * C8499 + C81009 * C8501) * C5066 -
             (C26926 * C8573 + C81009 * C8575) * C80962) *
                C26925) *
               C81012 * C80916 +
           (((C26926 * C1682 + C81009 * C1690) * C5064 +
             (C26926 * C1788 + C81009 * C1796) * C4984 - C30062 * C5065 -
             C30179 * C4985 + C33600 * C5066 + C33704 * C80962) *
                C26924 +
            (C30062 * C5064 + C30179 * C4984 - C33600 * C5065 - C33704 * C4985 +
             (C26926 * C8500 + C81009 * C8502) * C5066 +
             (C26926 * C8574 + C81009 * C8576) * C80962) *
                C26925) *
               C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C2607 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C2608 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C26924 +
            (C27368 * C165 + C27478 * C80628) * C26925) *
               C81012 * C2609 -
           ((C28882 * C80628 + C28810 * C165) * C26925 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C26924) *
               C81012 * C80966) *
              C80933 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            ((C26926 * C3980 + C81009 * C3984) * C165 +
             (C26926 * C4094 + C81009 * C4098) * C80628) *
                C26925) *
               C81012 * C2608 -
           (((C26926 * C4093 + C81009 * C4097) * C80628 +
             (C26926 * C3979 + C81009 * C3983) * C165) *
                C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C2607 -
           (((C26926 * C4095 + C81009 * C4099) * C80628 +
             (C26926 * C3981 + C81009 * C3987) * C165) *
                C26925 +
            ((C26926 * C1789 + C81009 * C1797) * C80628 +
             (C26926 * C1683 + C81009 * C1691) * C165) *
                C26924) *
               C81012 * C2609 +
           (((C26926 * C1685 + C81009 * C1696) * C165 +
             (C26926 * C1791 + C81009 * C1799) * C80628) *
                C26924 +
            ((C26926 * C3982 + C81009 * C3989) * C165 +
             (C26926 * C4096 + C81009 * C4100) * C80628) *
                C26925) *
               C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C80916 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C80598) *
              C11881 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            (C30062 * C165 + C30179 * C80628) * C26925) *
               C81012 * C80598 -
           ((C30178 * C80628 + C30064 * C165) * C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C80916) *
              C11882 +
          ((((C26926 * C1686 + C81009 * C1698) * C165 +
             (C26926 * C1792 + C81009 * C1800) * C80628) *
                C26924 +
            (C32158 * C165 + C32253 * C80628) * C26925) *
               C81012 * C80916 -
           ((C37018 * C80628 + C36914 * C165) * C26925 +
            ((C26926 * C1793 + C81009 * C1801) * C80628 +
             (C26926 * C1687 + C81009 * C1699) * C165) *
                C26924) *
               C81012 * C80598) *
              C11883 +
          ((((C26926 * C10468 + C81009 * C10474) * C165 +
             (C26926 * C10526 + C81009 * C10530) * C80628) *
                C26924 +
            ((C26926 * C12544 + C81009 * C12546) * C165 +
             (C26926 * C12618 + C81009 * C12620) * C80628) *
                C26925) *
               C81012 * C80598 -
           (((C26926 * C12617 + C81009 * C12619) * C80628 +
             (C26926 * C12543 + C81009 * C12545) * C165) *
                C26925 +
            ((C26926 * C10527 + C81009 * C10531) * C80628 +
             (C26926 * C10469 + C81009 * C10475) * C165) *
                C26924) *
               C81012 * C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       (C26926 * C1684 + C81009 * C1694) * C3422 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C30279 + C30280 - C30281 - C30297) * C26925) *
                         C81012 * C4984 +
                     ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                      (C33803 - (C33804 + C33805) + C33806) * C26925) *
                         C81012 * C4985 +
                     ((C33805 + C33804 - C33803 - C33806) * C26924 +
                      (C31658 * C3421 + C31766 * C80933 -
                       (C26926 * C8499 + C81009 * C8501) * C3422 -
                       (C26926 * C8643 + C81009 * C8645) * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C80916 +
                    ((((C26926 * C1682 + C81009 * C1690) * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C30284 - (C30285 + C30286) + C30298) * C26925) *
                         C81012 * C4984 +
                     ((C30286 + C30285 - C30284 - C30298) * C26924 +
                      (C33807 + C33808 - C33809 - C33813) * C26925) *
                         C81012 * C4985 +
                     ((C33809 - (C33808 + C33807) + C33813) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C3422 -
                       (C33082 * C80933 + C32940 * C3421) +
                       (C26926 * C8644 + C81009 * C8646) * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      (C26926 * C1684 + C81009 * C1694) * C3422 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C27364 * C3421 + C27572 * C80933 -
                      (C26926 * C3979 + C81009 * C3983) * C3422 -
                      (C26926 * C4199 + C81009 * C4203) * C80726) *
                         C26925) *
                        C81012 * C80628 * C2607 +
                    (((C26926 * C1682 + C81009 * C1690) * C3422 -
                      ((C26926 * C222 + C81009 * C228) * C80933 +
                       (C26926 * C100 + C81009 * C106) * C3421) +
                      (C26926 * C1881 + C81009 * C1889) * C80726) *
                         C26924 +
                     ((C26926 * C3980 + C81009 * C3984) * C3422 -
                      (C27574 * C80933 + C27366 * C3421) +
                      (C26926 * C4200 + C81009 * C4204) * C80726) *
                         C26925) *
                        C81012 * C80628 * C2608 +
                    (((C26926 * C101 + C81009 * C109) * C3421 +
                      (C26926 * C223 + C81009 * C229) * C80933 -
                      (C26926 * C1683 + C81009 * C1691) * C3422 -
                      (C26926 * C1885 + C81009 * C1893) * C80726) *
                         C26924 +
                     (C27368 * C3421 + C27576 * C80933 -
                      (C26926 * C3981 + C81009 * C3987) * C3422 -
                      (C26926 * C4201 + C81009 * C4205) * C80726) *
                         C26925) *
                        C81012 * C80628 * C2609 +
                    (((C26926 * C1685 + C81009 * C1696) * C3422 -
                      ((C26926 * C224 + C81009 * C230) * C80933 +
                       (C26926 * C102 + C81009 * C111) * C3421) +
                      (C26926 * C1887 + C81009 * C1895) * C80726) *
                         C26924 +
                     ((C26926 * C3982 + C81009 * C3989) * C3422 -
                      (C28952 * C80933 + C28810 * C3421) +
                      (C26926 * C4202 + C81009 * C4206) * C80726) *
                         C26925) *
                        C81012 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C12023 +
                      (C26926 * C221 + C81009 * C227) * C11881 -
                      (C26926 * C1684 + C81009 * C1694) * C12024 -
                      (C26926 * C1882 + C81009 * C1890) * C11882 +
                      (C26926 * C1686 + C81009 * C1698) * C12025 +
                      (C26926 * C1883 + C81009 * C1891) * C11883 -
                      (C26926 * C10469 + C81009 * C10475) * C12026 -
                      (C26926 * C10582 + C81009 * C10586) * C80978) *
                         C26924 +
                     (C27364 * C12023 + C27572 * C11881 - C30064 * C12024 -
                      C30294 * C11882 + C32158 * C12025 + C32346 * C11883 -
                      (C26926 * C12543 + C81009 * C12545) * C12026 -
                      (C26926 * C12687 + C81009 * C12689) * C80978) *
                         C26925) *
                        C81012 * C80628 * C80916 +
                    (((C26926 * C1682 + C81009 * C1690) * C12024 -
                      ((C26926 * C222 + C81009 * C228) * C11881 +
                       (C26926 * C100 + C81009 * C106) * C12023) +
                      (C26926 * C1881 + C81009 * C1889) * C11882 -
                      (C26926 * C1687 + C81009 * C1699) * C12025 -
                      (C26926 * C1884 + C81009 * C1892) * C11883 +
                      (C26926 * C10468 + C81009 * C10474) * C12026 +
                      (C26926 * C10581 + C81009 * C10585) * C80978) *
                         C26924 +
                     (C30062 * C12024 - (C27574 * C11881 + C27366 * C12023) +
                      C30295 * C11882 - C36914 * C12025 - C37124 * C11883 +
                      (C26926 * C12544 + C81009 * C12546) * C12026 +
                      (C26926 * C12688 + C81009 * C12690) * C80978) *
                         C26925) *
                        C81012 * C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78279 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80916 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78260 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78260 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80916 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78279) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C4984 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78260 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80916 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78279) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78279 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80916 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78260 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C4985 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C78279 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80916 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C78260 -
            (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C78260 -
            ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
              C26924 * C6416) *
                 C80916 +
             (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
              C26924 * C6410) *
                 C78279) +
            (C27053 * C6147 + C26924 * C6415 + C27054 * C8504 +
             C26925 * C8716) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C2613 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C2607 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C2614 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C2608 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C2615 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C2609 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C2616 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C80933 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C2614 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C2607 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C2613) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C2608 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C2615 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C2609 +
           (C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C2616 +
           (C27053 * C1697 + C26924 * C1982 + C27054 * C3990 + C26925 * C4312) *
               C80966) *
              C81012 * C81009 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78279 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80916 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C78260 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80598) *
              C81012 * C81009 * C11881 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C78260 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80916 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C78279) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C80598) *
              C81012 * C81009 * C11882 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C78279 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C80916 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C78260 -
           (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 + C26924 * C1984) *
               C80598) *
              C81012 * C81009 * C11883 +
          ((C27053 * C10468 + C26924 * C10631 + C27054 * C12544 +
            C26925 * C12758) *
               C78260 -
           ((C27054 * C12547 + C26925 * C12759 + C27053 * C10473 +
             C26924 * C10636) *
                C80916 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C78279) +
           (C27053 * C10472 + C26924 * C10635 + C27054 * C12548 +
            C26925 * C12760) *
               C80598) *
              C81012 * C81009 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5064 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C4984 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5065 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C4985 +
            (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5066 +
            (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
                C80962) *
               C81012 * C81009 * C80916 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C5065 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C4984 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C5064) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C4985 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C5066 -
            (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
                C80962) *
               C81012 * C81009 * C80598) *
              C80933 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5065 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C4984 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C5064) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C4985 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5066 -
            (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 +
             C26924 * C6493) *
                C80962) *
               C81012 * C81009 * C80916 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C5064 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C4984 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C5065 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C4985 +
            (C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C5066 +
            (C27053 * C6235 + C26924 * C6494 + C27054 * C8574 +
             C26925 * C8784) *
                C80962) *
               C81012 * C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C2607 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C2608 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C2609 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C80628 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C165) *
               C81012 * C81009 * C80966) *
              C80933 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C2608 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C2607 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C2609 +
           ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 +
             C26925 * C4308) *
                C165 +
            (C27053 * C1791 + C26924 * C2088 + C27054 * C4096 +
             C26925 * C4426) *
                C80628) *
               C81012 * C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C80916 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C80598) *
              C11881 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C80598 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C80916) *
              C11882 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C165 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80628) *
               C81012 * C81009 * C80916 -
           ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
             C26924 * C2090) *
                C80628 +
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C165) *
               C81012 * C81009 * C80598) *
              C11883 +
          (((C27053 * C10468 + C26924 * C10631 + C27054 * C12544 +
             C26925 * C12758) *
                C165 +
            (C27053 * C10526 + C26924 * C10681 + C27054 * C12618 +
             C26925 * C12828) *
                C80628) *
               C81012 * C81009 * C80598 -
           ((C27054 * C12617 + C26925 * C12827 + C27053 * C10527 +
             C26924 * C10682) *
                C80628 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C165) *
               C81012 * C81009 * C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C3421 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80933 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C3422 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C4984 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C3422 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80933 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C3421) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C4985 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C3421 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80933 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C3422 -
            (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 +
             C26924 * C6575) *
                C80726) *
               C81012 * C81009 * C80962) *
              C80916 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C3422 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80933 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C3421) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C4984 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C3421 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80933 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C3422 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C4985 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C3422 -
            ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 +
              C26924 * C1258) *
                 C80933 +
             (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
              C26924 * C1040) *
                 C3421) +
            (C27053 * C6323 + C26924 * C6577 + C27054 * C8644 +
             C26925 * C8852) *
                C80726) *
               C81012 * C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C3421 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80933 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C3422 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C80628 * C2607 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C3422 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80933 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C3421) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C80726) *
              C81012 * C81009 * C80628 * C2608 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C3421 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C80933 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C3422 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C80726) *
              C81012 * C81009 * C80628 * C2609 +
          ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C3422 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C80933 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C3421) +
           (C27053 * C1887 + C26924 * C2193 + C27054 * C4202 + C26925 * C4542) *
               C80726) *
              C81012 * C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C12023 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C11881 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C12024 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C11882 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C12025 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C11883 -
           (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
            C26924 * C10632) *
               C12026 -
           (C27054 * C12687 + C26925 * C12895 + C27053 * C10582 +
            C26924 * C10727) *
               C80978) *
              C81012 * C81009 * C80628 * C80916 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C12024 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C11881 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C12023) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C11882 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C12025 -
           (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 + C26924 * C2190) *
               C11883 +
           (C27053 * C10468 + C26924 * C10631 + C27054 * C12544 +
            C26925 * C12758) *
               C12026 +
           (C27053 * C10581 + C26924 * C10729 + C27054 * C12688 +
            C26925 * C12896) *
               C80978) *
              C81012 * C81009 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C78279 +
                       (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                         C80933 +
                     ((C2326 * C78260 -
                       ((C490 * C1693 + C81012 * C2301) * C80916 +
                        (C490 * C1684 + C81012 * C2294) * C78279) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C34206 - (C34207 + C34208) + C34209) * C81009 * C26925) *
                         C80726) *
                        C4984 +
                    (((C33350 - (C33349 + C33348) + C33351) * C81009 * C26924 +
                      (C33352 - (C33353 + C33354) + C33355) * C81009 * C26925) *
                         C80933 +
                     ((C34208 + C34207 - C34206 - C34209) * C81009 * C26924 +
                      (C34210 + C34211 - C34212 - C34213) * C81009 * C26925) *
                         C80726) *
                        C4985 +
                    (((C33354 + C33353 - C33352 - C33355) * C81009 * C26924 +
                      (C33356 + C33357 - C33358 - C33359) * C81009 * C26925) *
                         C80933 +
                     ((C34212 - (C34211 + C34210) + C34213) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C78260 -
                       ((C490 * C8503 + C81012 * C8921) * C80916 +
                        (C490 * C8499 + C81012 * C8919) * C78279) +
                       (C490 * C8504 + C81012 * C8922) * C80598) *
                          C81009 * C26925) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C2613 +
                      (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
                      C521 * C2608 + C522 * C2615 + C523 * C2609 -
                      C524 * C2616 - C525 * C80966) *
                         C81009 * C26924 +
                     (C29218 + C29219 - C29220 - C29221 + C29222 + C29223 -
                      C29224 - C29225) *
                         C81009 * C26925) *
                        C80933 +
                    ((C2326 * C2614 -
                      ((C490 * C1693 + C81012 * C2301) * C2607 +
                       (C490 * C1684 + C81012 * C2294) * C2613) +
                      C2327 * C2608 - C2328 * C2615 - C2329 * C2609 +
                      C3726 * C2616 + C3727 * C80966) *
                         C81009 * C26924 +
                     (C4672 * C2614 -
                      ((C490 * C3985 + C81012 * C4659) * C2607 +
                       (C490 * C3979 + C81012 * C4655) * C2613) +
                      C4673 * C2608 - C4674 * C2615 - C4675 * C2609 +
                      (C490 * C3982 + C81012 * C4658) * C2616 +
                      (C490 * C3990 + C81012 * C4662) * C80966) *
                         C81009 * C26925) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C78279 +
                      (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                      C521 * C80598) *
                         C81009 * C26924 +
                     (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                        C11881 +
                    ((C2326 * C78260 -
                      ((C490 * C1693 + C81012 * C2301) * C80916 +
                       (C490 * C1684 + C81012 * C2294) * C78279) +
                      C2327 * C80598) *
                         C81009 * C26924 +
                     (C34206 - (C34207 + C34208) + C34209) * C81009 * C26925) *
                        C11882 +
                    (((C490 * C1686 + C81012 * C2297) * C78279 +
                      (C490 * C1700 + C81012 * C2305) * C80916 -
                      C2330 * C78260 - C2331 * C80598) *
                         C81009 * C26924 +
                     (C37518 + C37519 - C37520 - C37521) * C81009 * C26925) *
                        C11883 +
                    ((C12326 * C78260 -
                      ((C490 * C10473 + C81012 * C10778) * C80916 +
                       (C490 * C10469 + C81012 * C10774) * C78279) +
                      C12327 * C80598) *
                         C81009 * C26924 +
                     ((C490 * C12544 + C81012 * C12964) * C78260 -
                      ((C490 * C12547 + C81012 * C12965) * C80916 +
                       (C490 * C12543 + C81012 * C12963) * C78279) +
                      (C490 * C12548 + C81012 * C12966) * C80598) *
                         C81009 * C26925) *
                        C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5064 +
             (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
             C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
                C81009 * C26924 +
            (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
             C31956 * C5066 + C32011 * C80962) *
                C81009 * C26925) *
               C80916 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81009 *
                C26924 +
            (C1394 * C5065 - (C1496 * C4984 + C1390 * C5064) + C1497 * C4985 -
             C7340 * C5066 - C7418 * C80962) *
                C81009 * C26925) *
               C80598) *
              C80933 +
          (((C30701 * C5065 -
             ((C490 * C1790 + C81012 * C2409) * C4984 +
              (C490 * C1684 + C81012 * C2294) * C5064) +
             C30804 * C4985 - C32670 * C5066 - C32761 * C80962) *
                C81009 * C26924 +
            (C32670 * C5065 - (C30804 * C4984 + C30701 * C5064) +
             C32761 * C4985 - (C490 * C8499 + C81012 * C8919) * C5066 -
             (C490 * C8573 + C81012 * C8989) * C80962) *
                C81009 * C26925) *
               C80916 +
           ((C8321 + C8320 - C8319 - C8322 + C8323 + C8327) * C81009 * C26924 +
            (C4672 * C5064 + C4788 * C4984 - C8218 * C5065 - C8326 * C4985 +
             (C490 * C8500 + C81012 * C8920) * C5066 +
             (C490 * C8574 + C81012 * C8990) * C80962) *
                C81009 * C26925) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81009 * C26924 +
            (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
               C2607 -
           ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
            (C592 + C576) * C81009 * C26924) *
               C2608 +
           ((C581 + C593) * C81009 * C26924 +
            (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
               C2609 -
           ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
            (C594 + C582) * C81009 * C26924) *
               C80966) *
              C80933 +
          (((C2416 + C2432) * C81009 * C26924 +
            (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
               C2608 -
           (((C490 * C4093 + C81012 * C4773) * C80628 +
             (C490 * C3979 + C81012 * C4655) * C165) *
                C81009 * C26925 +
            ((C490 * C1790 + C81012 * C2409) * C80628 +
             (C490 * C1684 + C81012 * C2294) * C165) *
                C81009 * C26924) *
               C2607 -
           ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
            (C2433 + C2419) * C81009 * C26924) *
               C2609 +
           ((C3797 + C3799) * C81009 * C26924 +
            ((C490 * C3982 + C81012 * C4658) * C165 +
             (C490 * C4096 + C81012 * C4776) * C80628) *
                C81009 * C26925) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81009 * C26924 +
            (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
               C80916 -
           ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
            (C592 + C576) * C81009 * C26924) *
               C80598) *
              C11881 +
          (((C2416 + C2432) * C81009 * C26924 +
            (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
               C80598 -
           ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
            ((C490 * C1790 + C81012 * C2409) * C80628 +
             (C490 * C1684 + C81012 * C2294) * C165) *
                C81009 * C26924) *
               C80916) *
              C11882 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81009 * C26924 +
            (C32668 * C165 + C32762 * C80628) * C81009 * C26925) *
               C80916 -
           ((C11706 * C80628 + C11600 * C165) * C81009 * C26925 +
            (C2434 + C2422) * C81009 * C26924) *
               C80598) *
              C11883 +
          (((C12395 + C12399) * C81009 * C26924 +
            ((C490 * C12544 + C81012 * C12964) * C165 +
             (C490 * C12618 + C81012 * C13034) * C80628) *
                C81009 * C26925) *
               C80598 -
           (((C490 * C12617 + C81012 * C13033) * C80628 +
             (C490 * C12543 + C81012 * C12963) * C165) *
                C81009 * C26925 +
            ((C490 * C10527 + C81012 * C10824) * C80628 +
             (C490 * C10469 + C81012 * C10774) * C165) *
                C81009 * C26924) *
               C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                         C4984 +
                     ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                      (C34410 - (C34411 + C34412) + C34413) * C81009 * C26925) *
                         C4985 +
                     ((C34412 + C34411 - C34410 - C34413) * C81009 * C26924 +
                      (C31956 * C3421 + C32062 * C80933 -
                       (C490 * C8499 + C81012 * C8919) * C3422 -
                       (C490 * C8643 + C81012 * C9057) * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C80916 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                      (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                         C4984 +
                     ((C4896 + C4895 - C4894 - C4906) * C81009 * C26924 +
                      (C8427 + C8428 - C8429 - C8433) * C81009 * C26925) *
                         C4985 +
                     ((C8429 - (C8428 + C8427) + C8433) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C3422 -
                       (C7490 * C80933 + C7340 * C3421) +
                       (C490 * C8644 + C81012 * C9058) * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C27896 * C3421 + C28064 * C80933 -
                      (C490 * C3979 + C81012 * C4655) * C3422 -
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81009 * C26925) *
                        C80628 * C2607 +
                    ((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                     (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                        C80628 * C2608 +
                    ((C3873 + C3872 - C3871 - C3874) * C81009 * C26924 +
                     (C4899 + C4900 - C4901 - C4907) * C81009 * C26925) *
                        C80628 * C2609 +
                    ((C3877 - (C3876 + C3875) + C3881) * C81009 * C26924 +
                     ((C490 * C3982 + C81012 * C4658) * C3422 -
                      (C3214 * C80933 + C3060 * C3421) +
                      (C490 * C4202 + C81012 * C4892) * C80726) *
                         C81009 * C26925) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C12023 +
                      (C490 * C221 + C81012 * C637) * C11881 -
                      (C490 * C1684 + C81012 * C2294) * C12024 -
                      (C490 * C1882 + C81012 * C2509) * C11882 +
                      (C490 * C1686 + C81012 * C2297) * C12025 +
                      (C490 * C1883 + C81012 * C2510) * C11883 -
                      (C490 * C10469 + C81012 * C10774) * C12026 -
                      (C490 * C10582 + C81012 * C10869) * C80978) *
                         C81009 * C26924 +
                     (C27896 * C12023 + C28064 * C11881 - C30701 * C12024 -
                      C30908 * C11882 + C32668 * C12025 + C32854 * C11883 -
                      (C490 * C12543 + C81012 * C12963) * C12026 -
                      (C490 * C12687 + C81012 * C13101) * C80978) *
                         C81009 * C26925) *
                        C80628 * C80916 +
                    ((C12469 - (C12468 + C12467) + C12470 - C12471 - C12472 +
                      C12473 + C12477) *
                         C81009 * C26924 +
                     (C4672 * C12024 - (C1598 * C11881 + C1390 * C12023) +
                      C4904 * C11882 - C11600 * C12025 - C11814 * C11883 +
                      (C490 * C12544 + C81012 * C12964) * C12026 +
                      (C490 * C12688 + C81012 * C13102) * C80978) *
                         C81009 * C26925) *
                        C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
              C81012 * C80639 * C81003 +
          ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C26924 +
           (C27382 - (C27383 + C27384) + C27385 - C27386 - C27387) * C26925) *
              C81012 * C80639 * C80988 +
          ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C26924 +
           ((C26926 * C5659 + C81009 * C5665) * C743 +
            (C26926 * C5663 + C81009 * C5671) * C737 -
            (C26926 * C5658 + C81009 * C5664) * C744 -
            (C26926 * C5662 + C81009 * C5670) * C738 +
            (C26926 * C6899 + C81009 * C6900) * C745 +
            (C26926 * C6901 + C81009 * C6902) * C80954) *
               C26925) *
              C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C94 +
           (C26926 * C107 + C81009 * C117) * C83 -
           (C26926 * C100 + C81009 * C106) * C95 -
           (C26926 * C108 + C81009 * C118) * C84 +
           (C26926 * C101 + C81009 * C109) * C96 +
           (C26926 * C110 + C81009 * C119) * C85 -
           (C26926 * C102 + C81009 * C111) * C97 -
           (C26926 * C112 + C81009 * C120) * C86 +
           (C26926 * C103 + C81009 * C113) * C98 +
           (C26926 * C114 + C81009 * C121) * C87) *
              C26924 +
          ((C26926 * C748 + C81009 * C758) * C94 +
           (C26926 * C757 + C81009 * C771) * C83 -
           (C26926 * C746 + C81009 * C754) * C95 -
           (C26926 * C756 + C81009 * C770) * C84 +
           (C26926 * C747 + C81009 * C755) * C96 +
           (C26926 * C759 + C81009 * C772) * C85 -
           (C26926 * C749 + C81009 * C760) * C97 -
           (C26926 * C761 + C81009 * C773) * C86 +
           (C26926 * C2617 + C81009 * C2618) * C98 +
           (C26926 * C2619 + C81009 * C2620) * C87) *
              C26925) *
         C81012 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
              C81012 * C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C26924 +
           (C30990 - (C30991 + C30992) + C30993 - C30994 - C30995) * C26925) *
              C81012 * C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C26924 +
           ((C26926 * C5659 + C81009 * C5665) * C4987 +
            (C26926 * C5663 + C81009 * C5671) * C80998 -
            (C26926 * C5658 + C81009 * C5664) * C4988 -
            (C26926 * C5662 + C81009 * C5670) * C80982 +
            (C26926 * C6899 + C81009 * C6900) * C4989 +
            (C26926 * C6901 + C81009 * C6902) * C80954) *
               C26925) *
              C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C26924 +
           (C31646 + C31647) * C26925) *
              C81012 * C80639 * C5652 -
          ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
              C80639 * C5653 +
          ((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
              C80639 * C5654 -
          ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
              C80639 * C5655 +
          ((C31665 + C31664) * C26924 +
           ((C26926 * C31641 + C81009 * C31642) * C5657 +
            (C26926 * C31643 + C81009 * C31644) * C80588) *
               C26925) *
              C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
              C81012 * C9133 +
          (((C26926 * C1682 + C81009 * C1690) * C4988 -
            ((C26926 * C1693 + C81009 * C1707) * C80998 +
             (C26926 * C1684 + C81009 * C1694) * C4987) +
            (C26926 * C1692 + C81009 * C1706) * C80982 -
            (C26926 * C1683 + C81009 * C1691) * C4989 -
            (C26926 * C1695 + C81009 * C1708) * C80954) *
               C26924 +
           (C30062 * C4988 - (C30063 * C80998 + C30064 * C4987) +
            C30065 * C80982 - C30066 * C4989 - C30067 * C80954) *
               C26925) *
              C81012 * C9134 +
          (((C26926 * C1686 + C81009 * C1698) * C4987 +
            (C26926 * C1700 + C81009 * C1710) * C80998 -
            (C26926 * C1687 + C81009 * C1699) * C4988 -
            (C26926 * C1701 + C81009 * C1711) * C80982 +
            (C26926 * C1688 + C81009 * C1702) * C4989 +
            (C26926 * C1703 + C81009 * C1712) * C80954) *
               C26924 +
           (C32158 * C4987 + C32159 * C80998 -
            (C26926 * C6137 + C81009 * C6145) * C4988 -
            (C26926 * C6143 + C81009 * C6155) * C80982 +
            (C26926 * C10971 + C81009 * C10972) * C4989 +
            (C26926 * C10973 + C81009 * C10974) * C80954) *
               C26925) *
              C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C9133 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C9134 +
           (((C26926 * C1686 + C81009 * C1698) * C5657 +
             (C26926 * C1700 + C81009 * C1710) * C80588) *
                C26924 +
            (C32164 + C32165) * C26925) *
               C81012 * C80965) *
              C81003 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C9134 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C9133 -
           ((C32168 + C32169) * C26925 + (C32165 + C32164) * C26924) * C81012 *
               C80965) *
              C80988 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C9133 -
           ((C34490 + C34491) * C26925 + (C32167 + C32166) * C26924) * C81012 *
               C9134 +
           ((C32169 + C32168) * C26924 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C26925) *
               C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C26924 +
           (C27364 * C852 + C27474 * C81003 - C27372 * C853 - C27475 * C80988 +
            (C26926 * C5659 + C81009 * C5665) * C854 +
            (C26926 * C5722 + C81009 * C5726) * C80962) *
               C26925) *
              C81012 * C737 +
          ((C27366 * C853 -
            ((C26926 * C167 + C81009 * C173) * C81003 +
             (C26926 * C100 + C81009 * C106) * C852) +
            C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
               C26924 +
           (C27370 * C853 - (C27476 * C81003 + C27366 * C852) +
            C27477 * C80988 - (C26926 * C5658 + C81009 * C5664) * C854 -
            (C26926 * C5721 + C81009 * C5725) * C80962) *
               C26925) *
              C81012 * C738 +
          (((C26926 * C101 + C81009 * C109) * C852 +
            (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
            C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
               C26924 +
           (C27368 * C852 + C27478 * C81003 - C27374 * C853 - C27479 * C80988 +
            (C26926 * C6899 + C81009 * C6900) * C854 +
            (C26926 * C6973 + C81009 * C6974) * C80962) *
               C26925) *
              C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C26924 +
           ((C26926 * C748 + C81009 * C758) * C165 +
            (C26926 * C856 + C81009 * C864) * C80628) *
               C26925) *
              C81012 * C83 -
          (((C26926 * C855 + C81009 * C863) * C80628 +
            (C26926 * C746 + C81009 * C754) * C165) *
               C26925 +
           ((C26926 * C167 + C81009 * C173) * C80628 +
            (C26926 * C100 + C81009 * C106) * C165) *
               C26924) *
              C81012 * C84 +
          (((C26926 * C101 + C81009 * C109) * C165 +
            (C26926 * C168 + C81009 * C174) * C80628) *
               C26924 +
           ((C26926 * C747 + C81009 * C755) * C165 +
            (C26926 * C859 + C81009 * C867) * C80628) *
               C26925) *
              C81012 * C85 -
          (((C26926 * C861 + C81009 * C869) * C80628 +
            (C26926 * C749 + C81009 * C760) * C165) *
               C26925 +
           ((C26926 * C169 + C81009 * C175) * C80628 +
            (C26926 * C102 + C81009 * C111) * C165) *
               C26924) *
              C81012 * C86 +
          (((C26926 * C103 + C81009 * C113) * C165 +
            (C26926 * C170 + C81009 * C176) * C80628) *
               C26924 +
           ((C26926 * C2617 + C81009 * C2618) * C165 +
            (C26926 * C2689 + C81009 * C2690) * C80628) *
               C26925) *
              C81012 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C26924 +
           (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
            (C26926 * C5659 + C81009 * C5665) * C5066 +
            (C26926 * C5722 + C81009 * C5726) * C80962) *
               C26925) *
              C81012 * C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C26924 +
           (C27370 * C5065 - (C27476 * C4984 + C27366 * C5064) +
            C27477 * C4985 - (C26926 * C5658 + C81009 * C5664) * C5066 -
            (C26926 * C5721 + C81009 * C5725) * C80962) *
               C26925) *
              C81012 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C26924 +
           (C27368 * C5064 + C27478 * C4984 - C27374 * C5065 - C27479 * C4985 +
            (C26926 * C6899 + C81009 * C6900) * C5066 +
            (C26926 * C6973 + C81009 * C6974) * C80962) *
               C26925) *
              C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C26924 +
          (C27364 * C5716 + C27474 * C5652 - C27372 * C5717 - C27475 * C5653 +
           C31658 * C5718 + C31714 * C5654 - C31661 * C5719 - C31715 * C5655 +
           (C26926 * C31641 + C81009 * C31642) * C5720 +
           (C26926 * C31707 + C81009 * C31708) * C5656) *
              C26925) *
         C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C80998 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C80982 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C26924 +
            (C27368 * C165 + C27478 * C80628) * C26925) *
               C81012 * C80954) *
              C9133 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            (C30062 * C165 + C30179 * C80628) * C26925) *
               C81012 * C80982 -
           ((C30178 * C80628 + C30064 * C165) * C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C80998 -
           ((C30180 * C80628 + C30066 * C165) * C26925 +
            ((C26926 * C1789 + C81009 * C1797) * C80628 +
             (C26926 * C1683 + C81009 * C1691) * C165) *
                C26924) *
               C81012 * C80954) *
              C9134 +
          ((((C26926 * C1686 + C81009 * C1698) * C165 +
             (C26926 * C1792 + C81009 * C1800) * C80628) *
                C26924 +
            (C32158 * C165 + C32253 * C80628) * C26925) *
               C81012 * C80998 -
           (((C26926 * C6237 + C81009 * C6243) * C80628 +
             (C26926 * C6137 + C81009 * C6145) * C165) *
                C26925 +
            ((C26926 * C1793 + C81009 * C1801) * C80628 +
             (C26926 * C1687 + C81009 * C1699) * C165) *
                C26924) *
               C81012 * C80982 +
           (((C26926 * C1688 + C81009 * C1702) * C165 +
             (C26926 * C1794 + C81009 * C1802) * C80628) *
                C26924 +
            ((C26926 * C10971 + C81009 * C10972) * C165 +
             (C26926 * C11073 + C81009 * C11074) * C80628) *
                C26925) *
               C81012 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C26924 +
           (C27364 * C852 + C27474 * C81003 - C27372 * C853 - C27475 * C80988 +
            C31658 * C854 + C31714 * C80962) *
               C26925) *
              C81012 * C80588 * C9133 +
          ((C30064 * C853 -
            ((C26926 * C1790 + C81009 * C1798) * C81003 +
             (C26926 * C1684 + C81009 * C1694) * C852) +
            C30178 * C80988 - C32160 * C854 - C32252 * C80962) *
               C26924 +
           (C32160 * C853 - (C30178 * C81003 + C30064 * C852) +
            C32252 * C80988 - C34489 * C854 - C34562 * C80962) *
               C26925) *
              C81012 * C80588 * C9134 +
          (((C26926 * C1686 + C81009 * C1698) * C852 +
            (C26926 * C1792 + C81009 * C1800) * C81003 - C32158 * C853 -
            C32253 * C80988 + C32163 * C854 + C32254 * C80962) *
               C26924 +
           (C32158 * C852 + C32253 * C81003 - C32163 * C853 - C32254 * C80988 +
            (C26926 * C32139 + C81009 * C32140) * C854 +
            (C26926 * C32243 + C81009 * C32244) * C80962) *
               C26925) *
              C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C81003 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C80988 +
           ((C27559 + C27579) * C26924 +
            ((C26926 * C5659 + C81009 * C5665) * C220 +
             (C26926 * C5772 + C81009 * C5776) * C80639) *
                C26925) *
               C81012 * C80962) *
              C737 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C80988 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C81003 -
           (((C26926 * C5771 + C81009 * C5775) * C80639 +
             (C26926 * C5658 + C81009 * C5664) * C220) *
                C26925 +
            (C27581 + C27563) * C26924) *
               C81012 * C80962) *
              C738 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C26924 +
            (C27566 + C27582) * C26925) *
               C81012 * C81003 -
           ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) * C81012 *
               C80988 +
           ((C27571 + C27583) * C26924 +
            ((C26926 * C6899 + C81009 * C6900) * C220 +
             (C26926 * C7041 + C81009 * C7042) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C26924 +
           ((C26926 * C748 + C81009 * C758) * C220 +
            (C26926 * C946 + C81009 * C954) * C80639) *
               C26925) *
              C81012 * C80628 * C83 -
          (((C26926 * C945 + C81009 * C953) * C80639 +
            (C26926 * C746 + C81009 * C754) * C220) *
               C26925 +
           ((C26926 * C222 + C81009 * C228) * C80639 +
            (C26926 * C100 + C81009 * C106) * C220) *
               C26924) *
              C81012 * C80628 * C84 +
          (((C26926 * C101 + C81009 * C109) * C220 +
            (C26926 * C223 + C81009 * C229) * C80639) *
               C26924 +
           ((C26926 * C747 + C81009 * C755) * C220 +
            (C26926 * C949 + C81009 * C957) * C80639) *
               C26925) *
              C81012 * C80628 * C85 -
          (((C26926 * C951 + C81009 * C959) * C80639 +
            (C26926 * C749 + C81009 * C760) * C220) *
               C26925 +
           ((C26926 * C224 + C81009 * C230) * C80639 +
            (C26926 * C102 + C81009 * C111) * C220) *
               C26924) *
              C81012 * C80628 * C86 +
          (((C26926 * C103 + C81009 * C113) * C220 +
            (C26926 * C225 + C81009 * C231) * C80639) *
               C26924 +
           ((C26926 * C2617 + C81009 * C2618) * C220 +
            (C26926 * C2757 + C81009 * C2758) * C80639) *
               C26925) *
              C81012 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C4984 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C4985 +
           ((C27559 + C27579) * C26924 +
            ((C26926 * C5659 + C81009 * C5665) * C220 +
             (C26926 * C5772 + C81009 * C5776) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80998 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C4985 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C4984 -
           (((C26926 * C5771 + C81009 * C5775) * C80639 +
             (C26926 * C5658 + C81009 * C5664) * C220) *
                C26925 +
            (C27581 + C27563) * C26924) *
               C81012 * C80962) *
              C80982 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C26924 +
            (C27566 + C27582) * C26925) *
               C81012 * C4984 -
           ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) * C81012 *
               C4985 +
           ((C27571 + C27583) * C26924 +
            ((C26926 * C6899 + C81009 * C6900) * C220 +
             (C26926 * C7041 + C81009 * C7042) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C26924 +
           (C27554 + C27578) * C26925) *
              C81012 * C5652 -
          ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
              C5653 +
          ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) * C81012 *
              C5654 -
          ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) * C81012 *
              C5655 +
          ((C31765 + C31769) * C26924 +
           ((C26926 * C31641 + C81009 * C31642) * C220 +
            (C26926 * C31757 + C81009 * C31758) * C80639) *
               C26925) *
              C81012 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 -
            (C26926 * C1684 + C81009 * C1694) * C9285 -
            (C26926 * C1882 + C81009 * C1890) * C9134 +
            (C26926 * C1686 + C81009 * C1698) * C9286 +
            (C26926 * C1883 + C81009 * C1891) * C80965) *
               C26924 +
           (C27364 * C9284 + C27572 * C9133 - C30064 * C9285 - C30294 * C9134 +
            C32158 * C9286 + C32346 * C80965) *
               C26925) *
              C81012 * C80628 * C80998 +
          (((C26926 * C1682 + C81009 * C1690) * C9285 -
            ((C26926 * C222 + C81009 * C228) * C9133 +
             (C26926 * C100 + C81009 * C106) * C9284) +
            (C26926 * C1881 + C81009 * C1889) * C9134 -
            (C26926 * C1687 + C81009 * C1699) * C9286 -
            (C26926 * C1884 + C81009 * C1892) * C80965) *
               C26924 +
           (C30062 * C9285 - (C27574 * C9133 + C27366 * C9284) +
            C30295 * C9134 - (C26926 * C6137 + C81009 * C6145) * C9286 -
            (C26926 * C6321 + C81009 * C6327) * C80965) *
               C26925) *
              C81012 * C80628 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C9284 +
            (C26926 * C223 + C81009 * C229) * C9133 -
            (C26926 * C1683 + C81009 * C1691) * C9285 -
            (C26926 * C1885 + C81009 * C1893) * C9134 +
            (C26926 * C1688 + C81009 * C1702) * C9286 +
            (C26926 * C1886 + C81009 * C1894) * C80965) *
               C26924 +
           (C27368 * C9284 + C27576 * C9133 - C30066 * C9285 - C30296 * C9134 +
            (C26926 * C10971 + C81009 * C10972) * C9286 +
            (C26926 * C11173 + C81009 * C11174) * C80965) *
               C26925) *
              C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 -
            (C26926 * C1684 + C81009 * C1694) * C9285 -
            (C26926 * C1882 + C81009 * C1890) * C9134 +
            (C26926 * C1686 + C81009 * C1698) * C9286 +
            (C26926 * C1883 + C81009 * C1891) * C80965) *
               C26924 +
           (C35948 + C35949 - C35950 - C35951 + C35952 + C35953) * C26925) *
              C81012 * C81003 +
          ((C35950 - (C35949 + C35948) + C35951 - C35952 - C35953) * C26924 +
           (C35954 - (C35955 + C35956) + C35957 - C35958 - C35959) * C26925) *
              C81012 * C80988 +
          ((C35956 + C35955 - C35954 - C35957 + C35958 + C35959) * C26924 +
           (C31658 * C9284 + C31766 * C9133 - C34489 * C9285 - C34636 * C9134 +
            (C26926 * C32139 + C81009 * C32140) * C9286 +
            (C26926 * C32328 + C81009 * C32329) * C80965) *
               C26925) *
              C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C743 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C737 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C744 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C738 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C745 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C81003 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C744 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C737 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C743) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C738 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C745 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C80988 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C743 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C737 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C744 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C738 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C745 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C80954) *
              C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C94 +
          (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
              C83 -
          (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
              C95 -
          (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
              C84 +
          (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
              C96 +
          (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
              C85 -
          (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
              C97 -
          (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
              C86 +
          (C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
              C98 +
          (C27053 * C114 + C26924 * C286 + C27054 * C2619 + C26925 * C2826) *
              C87) *
         C81012 * C81009 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C4987 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80998 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C4988 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80982 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C4989 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4984 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C4988 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80998 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C4987) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80982 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C4989 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4985 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C4987 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80998 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C4988 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80982 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C4989 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C80954) *
              C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5657 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80588) *
              C81012 * C81009 * C80639 * C5652 -
          ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
               C80588 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5657) *
              C81012 * C81009 * C80639 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5657 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80588) *
              C81012 * C81009 * C80639 * C5654 -
          ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 + C26924 * C5826) *
               C80588 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C5657) *
              C81012 * C81009 * C80639 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C5657 +
           (C27053 * C5668 + C26924 * C5827 + C27054 * C31643 +
            C26925 * C31812) *
               C80588) *
              C81012 * C81009 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C4987 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80998 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C4988 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80982 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C4989 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C9133 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C4988 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80998 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C4987) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C80982 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C4989 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C80954) *
              C81012 * C81009 * C9134 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C4987 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C80998 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C4988 -
           (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 + C26924 * C1984) *
               C80982 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C4989 +
           (C27053 * C1703 + C26924 * C1985 + C27054 * C10973 +
            C26925 * C11274) *
               C80954) *
              C81012 * C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C9133 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C9134 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C5657 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80588) *
               C81012 * C81009 * C80965) *
              C81003 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C9134 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C9133 -
           ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
             C26924 * C6414) *
                C80588 +
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C5657) *
               C81012 * C81009 * C80965) *
              C80988 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C9133 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C9134 +
           ((C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
             C26925 * C32425) *
                C5657 +
            (C27053 * C6153 + C26924 * C6417 + C27054 * C32141 +
             C26925 * C32426) *
                C80588) *
               C81012 * C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C852 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81003 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C853 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80988 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C854 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C737 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C853 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C81003 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C852) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80988 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C854 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80962) *
              C81012 * C81009 * C738 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C852 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C81003 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C853 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80988 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C854 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C80962) *
              C81012 * C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C165 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80628) *
              C81012 * C81009 * C83 -
          ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
               C80628 +
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C165) *
              C81012 * C81009 * C84 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C165 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C80628) *
              C81012 * C81009 * C85 -
          ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
               C80628 +
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C165) *
              C81012 * C81009 * C86 +
          ((C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
               C165 +
           (C27053 * C170 + C26924 * C358 + C27054 * C2689 + C26925 * C2899) *
               C80628) *
              C81012 * C81009 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5064 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C4984 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5065 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C4985 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5066 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80998 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C5065 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C4984 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C5064) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C4985 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C5066 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80962) *
              C81012 * C81009 * C80982 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C5064 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C4984 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C5065 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C4985 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C5066 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C80962) *
              C81012 * C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C5716 +
          (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
              C5652 -
          (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
              C5717 -
          (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
              C5653 +
          (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
              C5718 +
          (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
              C5654 -
          (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
              C5719 -
          (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
              C5655 +
          (C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
           C26925 * C31811) *
              C5720 +
          (C27053 * C5723 + C26924 * C5872 + C27054 * C31707 +
           C26925 * C31855) *
              C5656) *
         C81012 * C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C80998 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C80982 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C80954) *
              C9133 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C80982 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C80998 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C80954) *
              C9134 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C165 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80628) *
               C81012 * C81009 * C80998 -
           ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
             C26924 * C2090) *
                C80628 +
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C165) *
               C81012 * C81009 * C80982 +
           ((C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
             C26925 * C11273) *
                C165 +
            (C27053 * C1794 + C26924 * C2091 + C27054 * C11073 +
             C26925 * C11379) *
                C80628) *
               C81012 * C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C852 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81003 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C853 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80988 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C854 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80588 * C9133 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C853 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C81003 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C852) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C80988 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C854 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C80962) *
              C81012 * C81009 * C80588 * C9134 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C852 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C81003 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C853 -
           (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 + C26924 * C6495) *
               C80988 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C854 +
           (C27053 * C6239 + C26924 * C6496 + C27054 * C32243 +
            C26925 * C32501) *
               C80962) *
              C81012 * C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C81003 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80988 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80962) *
              C737 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80988 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C81003 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80962) *
              C738 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C81003 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80988 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C220 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80639) *
              C81012 * C81009 * C80628 * C83 -
          ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
               C80639 +
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C220) *
              C81012 * C81009 * C80628 * C84 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C220 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C80639) *
              C81012 * C81009 * C80628 * C85 -
          ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
               C80639 +
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C220) *
              C81012 * C81009 * C80628 * C86 +
          ((C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
               C220 +
           (C27053 * C225 + C26924 * C426 + C27054 * C2757 + C26925 * C2981) *
               C80639) *
              C81012 * C81009 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80998 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C4985 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C4984 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80962) *
              C80982 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C220 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80639) *
              C81012 * C81009 * C5652 -
          ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
               C80639 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C220) *
              C81012 * C81009 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C220 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C80639) *
              C81012 * C81009 * C5654 -
          ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 + C26924 * C5918) *
               C80639 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C220) *
              C81012 * C81009 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C220 +
           (C27053 * C5773 + C26924 * C5919 + C27054 * C31757 +
            C26925 * C31898) *
               C80639) *
              C81012 * C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C9284 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C9133 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C9285 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C9134 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C9286 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C80628 * C80998 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C9285 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C9133 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C9284) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C9134 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C9286 -
           (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 + C26924 * C2190) *
               C80965) *
              C81012 * C81009 * C80628 * C80982 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C9284 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C9133 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C9285 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C9134 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C9286 +
           (C27053 * C1886 + C26924 * C2192 + C27054 * C11173 +
            C26925 * C11485) *
               C80965) *
              C81012 * C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C9284 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C9133 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C9285 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C9134 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C9286 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C81003 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C9285 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C9133 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C9284) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C9134 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C9286 -
           (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 + C26924 * C6573) *
               C80965) *
              C81012 * C81009 * C80988 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C9284 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C9133 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C9285 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C9134 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C9286 +
           (C27053 * C6325 + C26924 * C6576 + C27054 * C32328 +
            C26925 * C32576) *
               C80965) *
              C81012 * C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C743 +
            (C490 * C107 + C81012 * C497) * C737 - C520 * C744 - C521 * C738 +
            C522 * C745 + C523 * C80954) *
               C81009 * C26924 +
           (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) * C81009 *
               C26925) *
              C80639 * C81003 +
          ((C27884 - (C27901 + C27900) + C27885 - C27886 - C27887) * C81009 *
               C26924 +
           (C27888 - (C27902 + C27903) + C27893 - C27894 - C27895) * C81009 *
               C26925) *
              C80639 * C80988 +
          ((C27903 + C27902 - C27888 - C27893 + C27894 + C27895) * C81009 *
               C26924 +
           ((C490 * C5659 + C81012 * C5964) * C743 +
            (C490 * C5663 + C81012 * C5968) * C737 - C7340 * C744 -
            C7341 * C738 + (C490 * C6899 + C81012 * C7333) * C745 +
            (C490 * C6901 + C81012 * C7334) * C80954) *
               C81009 * C26925) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C94 +
           (C490 * C107 + C81012 * C497) * C83 - C520 * C95 - C521 * C84 +
           C522 * C96 + C523 * C85 - C524 * C97 - C525 * C86 + C526 * C98 +
           C527 * C87) *
              C81009 * C26924 +
          ((C490 * C748 + C81012 * C1358) * C94 +
           (C490 * C757 + C81012 * C1365) * C83 - C1390 * C95 - C1391 * C84 +
           C1392 * C96 + C1393 * C85 - C3060 * C97 - C3061 * C86 +
           (C490 * C2617 + C81012 * C3053) * C98 +
           (C490 * C2619 + C81012 * C3054) * C87) *
              C81009 * C26925) *
         C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C4987 +
            (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
            C521 * C80982 + C522 * C4989 + C523 * C80954) *
               C81009 * C26924 +
           (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) * C81009 *
               C26925) *
              C80639 * C4984 +
          ((C31442 - (C31441 + C31440) + C31443 - C31444 - C31445) * C81009 *
               C26924 +
           (C31446 - (C31447 + C31448) + C31449 - C31450 - C31451) * C81009 *
               C26925) *
              C80639 * C4985 +
          ((C31448 + C31447 - C31446 - C31449 + C31450 + C31451) * C81009 *
               C26924 +
           ((C490 * C5659 + C81012 * C5964) * C4987 +
            (C490 * C5663 + C81012 * C5968) * C80998 - C7340 * C4988 -
            C7341 * C80982 + (C490 * C6899 + C81012 * C7333) * C4989 +
            (C490 * C6901 + C81012 * C7334) * C80954) *
               C81009 * C26925) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5657 +
            (C490 * C107 + C81012 * C497) * C80588) *
               C81009 * C26924 +
           (C31944 + C31945) * C81009 * C26925) *
              C80639 * C5652 -
          ((C31946 + C31947) * C81009 * C26925 +
           (C31945 + C31944) * C81009 * C26924) *
              C80639 * C5653 +
          ((C31947 + C31946) * C81009 * C26924 +
           (C31960 + C31961) * C81009 * C26925) *
              C80639 * C5654 -
          ((C31962 + C31963) * C81009 * C26925 +
           (C31961 + C31960) * C81009 * C26924) *
              C80639 * C5655 +
          ((C31963 + C31962) * C81009 * C26924 +
           ((C490 * C31641 + C81012 * C31941) * C5657 +
            (C490 * C31643 + C81012 * C31942) * C80588) *
               C81009 * C26925) *
              C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C4987 +
            (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
            C521 * C80982 + C522 * C4989 + C523 * C80954) *
               C81009 * C26924 +
           (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) * C81009 *
               C26925) *
              C9133 +
          ((C2326 * C4988 -
            ((C490 * C1693 + C81012 * C2301) * C80998 +
             (C490 * C1684 + C81012 * C2294) * C4987) +
            C2327 * C80982 - C2328 * C4989 - C2329 * C80954) *
               C81009 * C26924 +
           (C4672 * C4988 - (C30700 * C80998 + C30701 * C4987) +
            C4673 * C80982 - C4674 * C4989 - C4675 * C80954) *
               C81009 * C26925) *
              C9134 +
          (((C490 * C1686 + C81012 * C2297) * C4987 +
            (C490 * C1700 + C81012 * C2305) * C80998 - C2330 * C4988 -
            C2331 * C80982 + C2332 * C4989 + C2333 * C80954) *
               C81009 * C26924 +
           (C32668 * C4987 + C32669 * C80998 - C11600 * C4988 -
            C11601 * C80982 + (C490 * C10971 + C81012 * C11593) * C4989 +
            (C490 * C10973 + C81012 * C11594) * C80954) *
               C81009 * C26925) *
              C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5657 +
             (C490 * C107 + C81012 * C497) * C80588) *
                C81009 * C26924 +
            (C31944 + C31945) * C81009 * C26925) *
               C9133 -
           ((C32654 + C32655) * C81009 * C26925 +
            ((C490 * C1693 + C81012 * C2301) * C80588 +
             (C490 * C1684 + C81012 * C2294) * C5657) *
                C81009 * C26924) *
               C9134 +
           (((C490 * C1686 + C81012 * C2297) * C5657 +
             (C490 * C1700 + C81012 * C2305) * C80588) *
                C81009 * C26924 +
            (C32674 + C32675) * C81009 * C26925) *
               C80965) *
              C81003 +
          (((C32655 + C32654) * C81009 * C26924 +
            (C32676 + C32677) * C81009 * C26925) *
               C9134 -
           ((C31946 + C31947) * C81009 * C26925 +
            (C31945 + C31944) * C81009 * C26924) *
               C9133 -
           ((C32678 + C32679) * C81009 * C26925 +
            (C32675 + C32674) * C81009 * C26924) *
               C80965) *
              C80988 +
          (((C31947 + C31946) * C81009 * C26924 +
            (C31960 + C31961) * C81009 * C26925) *
               C9133 -
           ((C34914 + C34915) * C81009 * C26925 +
            (C32677 + C32676) * C81009 * C26924) *
               C9134 +
           ((C32679 + C32678) * C81009 * C26924 +
            ((C490 * C32139 + C81012 * C32651) * C5657 +
             (C490 * C32141 + C81012 * C32652) * C80588) *
                C81009 * C26925) *
               C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
            C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C852 + C27982 * C81003 - C27899 * C853 - C27983 * C80988 +
            (C490 * C5659 + C81012 * C5964) * C854 +
            (C490 * C5722 + C81012 * C6013) * C80962) *
               C81009 * C26925) *
              C737 +
          ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81009 * C26924 +
           (C1394 * C853 - (C1496 * C81003 + C1390 * C852) + C1497 * C80988 -
            C7340 * C854 - C7418 * C80962) *
               C81009 * C26925) *
              C738 +
          ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81009 * C26924 +
           (C1392 * C852 + C1498 * C81003 - C1396 * C853 - C1499 * C80988 +
            (C490 * C6899 + C81012 * C7333) * C854 +
            (C490 * C6973 + C81012 * C7407) * C80962) *
               C81009 * C26925) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81009 * C26924 +
           ((C490 * C748 + C81012 * C1358) * C165 +
            (C490 * C856 + C81012 * C1471) * C80628) *
               C81009 * C26925) *
              C83 -
          ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
           (C592 + C576) * C81009 * C26924) *
              C84 +
          ((C581 + C593) * C81009 * C26924 +
           (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
              C85 -
          ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
           (C594 + C582) * C81009 * C26924) *
              C86 +
          ((C587 + C595) * C81009 * C26924 +
           ((C490 * C2617 + C81012 * C3053) * C165 +
            (C490 * C2689 + C81012 * C3127) * C80628) *
               C81009 * C26925) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
            C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
            (C490 * C5659 + C81012 * C5964) * C5066 +
            (C490 * C5722 + C81012 * C6013) * C80962) *
               C81009 * C26925) *
              C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81009 * C26924 +
           (C1394 * C5065 - (C1496 * C4984 + C1390 * C5064) + C1497 * C4985 -
            C7340 * C5066 - C7418 * C80962) *
               C81009 * C26925) *
              C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81009 * C26924 +
           (C1392 * C5064 + C1498 * C4984 - C1396 * C5065 - C1499 * C4985 +
            (C490 * C6899 + C81012 * C7333) * C5066 +
            (C490 * C6973 + C81012 * C7407) * C80962) *
               C81009 * C26925) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 - C27896 * C5717 -
           C27982 * C5653 + C27899 * C5718 + C27983 * C5654 - C31956 * C5719 -
           C32011 * C5655 + C31959 * C5720 + C32012 * C5656) *
              C81009 * C26924 +
          (C27896 * C5716 + C27982 * C5652 - C27899 * C5717 - C27983 * C5653 +
           C31956 * C5718 + C32011 * C5654 - C31959 * C5719 - C32012 * C5655 +
           (C490 * C31641 + C81012 * C31941) * C5720 +
           (C490 * C31707 + C81012 * C32005) * C5656) *
              C81009 * C26925) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81009 * C26924 +
            (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
               C80998 -
           ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
            (C592 + C576) * C81009 * C26924) *
               C80982 +
           ((C581 + C593) * C81009 * C26924 +
            (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
               C80954) *
              C9133 +
          (((C2416 + C2432) * C81009 * C26924 +
            (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
               C80982 -
           ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
            ((C490 * C1790 + C81012 * C2409) * C80628 +
             (C490 * C1684 + C81012 * C2294) * C165) *
                C81009 * C26924) *
               C80998 -
           ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
            (C2433 + C2419) * C81009 * C26924) *
               C80954) *
              C9134 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81009 * C26924 +
            (C32668 * C165 + C32762 * C80628) * C81009 * C26925) *
               C80998 -
           ((C11706 * C80628 + C11600 * C165) * C81009 * C26925 +
            (C2434 + C2422) * C81009 * C26924) *
               C80982 +
           ((C2427 + C2435) * C81009 * C26924 +
            ((C490 * C10971 + C81012 * C11593) * C165 +
             (C490 * C11073 + C81012 * C11699) * C80628) *
                C81009 * C26925) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
            C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C852 + C27982 * C81003 - C27899 * C853 - C27983 * C80988 +
            C31956 * C854 + C32011 * C80962) *
               C81009 * C26925) *
              C80588 * C9133 +
          ((C30701 * C853 -
            ((C490 * C1790 + C81012 * C2409) * C81003 +
             (C490 * C1684 + C81012 * C2294) * C852) +
            C30804 * C80988 - C32670 * C854 - C32761 * C80962) *
               C81009 * C26924 +
           (C32670 * C853 - (C30804 * C81003 + C30701 * C852) +
            C32761 * C80988 - C34913 * C854 - C34985 * C80962) *
               C81009 * C26925) *
              C80588 * C9134 +
          (((C490 * C1686 + C81012 * C2297) * C852 +
            (C490 * C1792 + C81012 * C2411) * C81003 - C32668 * C853 -
            C32762 * C80988 + C32673 * C854 + C32763 * C80962) *
               C81009 * C26924 +
           (C32668 * C852 + C32762 * C81003 - C32673 * C853 - C32763 * C80988 +
            (C490 * C32139 + C81012 * C32651) * C854 +
            (C490 * C32243 + C81012 * C32753) * C80962) *
               C81009 * C26925) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81009 * C26924 +
            (C28058 + C28066) * C81009 * C26925) *
               C81003 -
           ((C28067 + C28063) * C81009 * C26925 +
            (C28066 + C28058) * C81009 * C26924) *
               C80988 +
           ((C28063 + C28067) * C81009 * C26924 +
            ((C490 * C5659 + C81012 * C5964) * C220 +
             (C490 * C5772 + C81012 * C6060) * C80639) *
                C81009 * C26925) *
               C80962) *
              C737 +
          (((C1588 + C1602) * C81009 * C26924 +
            (C1589 + C1603) * C81009 * C26925) *
               C80988 -
           ((C1602 + C1588) * C81009 * C26925 +
            (C660 + C644) * C81009 * C26924) *
               C81003 -
           ((C7491 + C7489) * C81009 * C26925 +
            (C1603 + C1589) * C81009 * C26924) *
               C80962) *
              C738 +
          (((C649 + C661) * C81009 * C26924 +
            (C1592 + C1604) * C81009 * C26925) *
               C81003 -
           ((C1605 + C1597) * C81009 * C26925 +
            (C1604 + C1592) * C81009 * C26924) *
               C80988 +
           ((C1597 + C1605) * C81009 * C26924 +
            ((C490 * C6899 + C81012 * C7333) * C220 +
             (C490 * C7041 + C81012 * C7485) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81009 * C26924 +
           ((C490 * C748 + C81012 * C1358) * C220 +
            (C490 * C946 + C81012 * C1578) * C80639) *
               C81009 * C26925) *
              C80628 * C83 -
          ((C1602 + C1588) * C81009 * C26925 +
           (C660 + C644) * C81009 * C26924) *
              C80628 * C84 +
          ((C649 + C661) * C81009 * C26924 +
           (C1592 + C1604) * C81009 * C26925) *
              C80628 * C85 -
          ((C3215 + C3213) * C81009 * C26925 +
           (C662 + C650) * C81009 * C26924) *
              C80628 * C86 +
          ((C655 + C663) * C81009 * C26924 +
           ((C490 * C2617 + C81012 * C3053) * C220 +
            (C490 * C2757 + C81012 * C3209) * C80639) *
               C81009 * C26925) *
              C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81009 * C26924 +
            (C28058 + C28066) * C81009 * C26925) *
               C4984 -
           ((C28067 + C28063) * C81009 * C26925 +
            (C28066 + C28058) * C81009 * C26924) *
               C4985 +
           ((C28063 + C28067) * C81009 * C26924 +
            ((C490 * C5659 + C81012 * C5964) * C220 +
             (C490 * C5772 + C81012 * C6060) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80998 +
          (((C1588 + C1602) * C81009 * C26924 +
            (C1589 + C1603) * C81009 * C26925) *
               C4985 -
           ((C1602 + C1588) * C81009 * C26925 +
            (C660 + C644) * C81009 * C26924) *
               C4984 -
           ((C7491 + C7489) * C81009 * C26925 +
            (C1603 + C1589) * C81009 * C26924) *
               C80962) *
              C80982 +
          (((C649 + C661) * C81009 * C26924 +
            (C1592 + C1604) * C81009 * C26925) *
               C4984 -
           ((C1605 + C1597) * C81009 * C26925 +
            (C1604 + C1592) * C81009 * C26924) *
               C4985 +
           ((C1597 + C1605) * C81009 * C26924 +
            ((C490 * C6899 + C81012 * C7333) * C220 +
             (C490 * C7041 + C81012 * C7485) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81009 * C26924 +
           (C28058 + C28066) * C81009 * C26925) *
              C5652 -
          ((C28067 + C28063) * C81009 * C26925 +
           (C28066 + C28058) * C81009 * C26924) *
              C5653 +
          ((C28063 + C28067) * C81009 * C26924 +
           (C32056 + C32064) * C81009 * C26925) *
              C5654 -
          ((C32065 + C32061) * C81009 * C26925 +
           (C32064 + C32056) * C81009 * C26924) *
              C5655 +
          ((C32061 + C32065) * C81009 * C26924 +
           ((C490 * C31641 + C81012 * C31941) * C220 +
            (C490 * C31757 + C81012 * C32054) * C80639) *
               C81009 * C26925) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C27896 * C9284 + C28064 * C9133 - C30701 * C9285 - C30908 * C9134 +
            C32668 * C9286 + C32854 * C80965) *
               C81009 * C26925) *
              C80628 * C80998 +
          ((C9746 - (C9745 + C9744) + C9747 - C9748 - C9749) * C81009 * C26924 +
           (C11807 - (C11808 + C11809) + C11810 - C11811 - C11815) * C81009 *
               C26925) *
              C80628 * C80982 +
          ((C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C81009 * C26924 +
           (C1392 * C9284 + C1600 * C9133 - C4674 * C9285 - C4905 * C9134 +
            (C490 * C10971 + C81012 * C11593) * C9286 +
            (C490 * C11173 + C81012 * C11805) * C80965) *
               C81009 * C26925) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C9284 +
            (C490 * C221 + C81012 * C637) * C9133 -
            (C490 * C1684 + C81012 * C2294) * C9285 -
            (C490 * C1882 + C81012 * C2509) * C9134 +
            (C490 * C1686 + C81012 * C2297) * C9286 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C36404 + C36405 - C36406 - C36407 + C36408 + C36409) * C81009 *
               C26925) *
              C81003 +
          ((C36406 - (C36405 + C36404) + C36407 - C36408 - C36409) * C81009 *
               C26924 +
           (C36410 - (C36411 + C36412) + C36413 - C36414 - C36415) * C81009 *
               C26925) *
              C80988 +
          ((C36412 + C36411 - C36410 - C36413 + C36414 + C36415) * C81009 *
               C26924 +
           (C31956 * C9284 + C32062 * C9133 - C34913 * C9285 - C35058 * C9134 +
            (C490 * C32139 + C81012 * C32651) * C9286 +
            (C490 * C32328 + C81012 * C32837) * C80965) *
               C81009 * C26925) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78289 +
             (C26926 * C107 + C81009 * C117) * C80593 -
             (C26926 * C100 + C81009 * C106) * C78285 -
             (C26926 * C108 + C81009 * C118) * C80601 +
             (C26926 * C101 + C81009 * C109) * C78295 +
             (C26926 * C110 + C81009 * C119) * C15341) *
                C26924 +
            (C41172 + C41173 - C41174 - C41175 + C41176 + C41177) * C26925) *
               C81012 * C17817 +
           (((C26926 * C1682 + C81009 * C1690) * C78285 -
             ((C26926 * C1693 + C81009 * C1707) * C80593 +
              (C26926 * C1684 + C81009 * C1694) * C78289) +
             (C26926 * C1692 + C81009 * C1706) * C80601 -
             (C26926 * C1683 + C81009 * C1691) * C78295 -
             (C26926 * C1695 + C81009 * C1708) * C15341) *
                C26924 +
            (C41886 - (C41887 + C41888) + C41889 - C41890 - C41891) * C26925) *
               C81012 * C80726) *
              C80932 +
          (((C41174 - (C41173 + C41172) + C41175 - C41176 - C41177) * C26924 +
            (C41178 - (C41179 + C41180) + C41181 - C41182 - C41183) * C26925) *
               C81012 * C17817 +
           ((C41888 + C41887 - C41886 - C41889 + C41890 + C41891) * C26924 +
            (C32160 * C78289 + C32161 * C80593 - C33600 * C78285 -
             C33601 * C80601 + (C26926 * C7589 + C81009 * C7590) * C78295 +
             (C26926 * C7591 + C81009 * C7592) * C15341) *
                C26925) *
               C81012 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C80593 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C2688 - (C27476 * C80932 + C27366 * C2687) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80601 +
                     (((C26926 * C101 + C81009 * C109) * C2687 +
                       (C26926 * C168 + C81009 * C174) * C80932 -
                       C27368 * C2688 - C27478 * C80686) *
                          C26924 +
                      (C27368 * C2687 + C27478 * C80932 - C27374 * C2688 -
                       C27479 * C80686) *
                          C26925) *
                         C81012 * C15341) *
                        C17817 +
                    (((C30064 * C2688 -
                       ((C26926 * C1790 + C81009 * C1798) * C80932 +
                        (C26926 * C1684 + C81009 * C1694) * C2687) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C2688 - (C30178 * C80932 + C30064 * C2687) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C80593 +
                     (((C26926 * C1682 + C81009 * C1690) * C2687 +
                       (C26926 * C1788 + C81009 * C1796) * C80932 -
                       C30062 * C2688 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C2687 + C30179 * C80932 - C33600 * C2688 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80601 +
                     ((C30066 * C2688 -
                       ((C26926 * C1789 + C81009 * C1797) * C80932 +
                        (C26926 * C1683 + C81009 * C1691) * C2687) +
                       C30180 * C80686) *
                          C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C2688 -
                       (C30180 * C80932 + C30066 * C2687) +
                       (C26926 * C7691 + C81009 * C7692) * C80686) *
                          C26925) *
                         C81012 * C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[40] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       (C26926 * C1684 + C81009 * C1694) * C17952 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C44460 + C44461 - C44462 - C44463) * C26925) *
                         C81012 * C80932 +
                     ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                      (C44464 - (C44465 + C44466) + C44467) * C26925) *
                         C81012 * C80686) *
                        C80593 +
                    ((((C26926 * C1682 + C81009 * C1690) * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C44468 - (C44469 + C44470) + C44471) * C26925) *
                         C81012 * C80932 +
                     ((C44470 + C44469 - C44468 - C44471) * C26924 +
                      (C44472 + C44473 - C44474 - C44475) * C26925) *
                         C81012 * C80686) *
                        C80601 +
                    ((((C26926 * C101 + C81009 * C109) * C17951 +
                       (C26926 * C223 + C81009 * C229) * C17817 -
                       (C26926 * C1683 + C81009 * C1691) * C17952 -
                       (C26926 * C1885 + C81009 * C1893) * C80726) *
                          C26924 +
                      (C45960 + C45961 - C45962 - C45963) * C26925) *
                         C81012 * C80932 +
                     ((C45962 - (C45961 + C45960) + C45963) * C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C17952 -
                       (C27577 * C17817 + C27374 * C17951) +
                       (C26926 * C7791 + C81009 * C7792) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78289 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80593 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78285 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80601 +
            (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C78295 +
            (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
                C15341) *
               C81012 * C81009 * C17817 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78285 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80593 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78289) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80601 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C78295 -
            (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 +
             C26924 * C1981) *
                C15341) *
               C81012 * C81009 * C80726) *
              C80932 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78285 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80593 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78289) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80601 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C78295 -
            (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
                C15341) *
               C81012 * C81009 * C17817 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78289 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80593 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78285 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80601 +
            (C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C78295 +
            (C27053 * C3988 + C26924 * C4311 + C27054 * C7591 +
             C26925 * C7892) *
                C15341) *
               C81012 * C81009 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C2687 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80932 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C2688 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C80593 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C2688 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C80932 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C2687) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80601 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C2687 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80932 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C2688 -
            (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
                C80686) *
               C81012 * C81009 * C15341) *
              C17817 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C2688 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C80932 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C2687) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C80593 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C2687 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80932 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C2688 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80601 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C2688 -
            ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
              C26924 * C2086) *
                 C80932 +
             (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
              C26924 * C1973) *
                 C2687) +
            (C27053 * C4095 + C26924 * C4425 + C27054 * C7691 +
             C26925 * C7997) *
                C80686) *
               C81012 * C81009 * C15341) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C17951 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C17817 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C17952 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C17952 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C17817 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C17951) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80593 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C17952 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C17817 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C17951) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C17951 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C17817 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C17952 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80601 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C17951 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C17817 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C17952 -
            (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 +
             C26924 * C2191) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C17952 -
            ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                 C17817 +
             (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                 C17951) +
            (C27053 * C4201 + C26924 * C4541 + C27054 * C7791 +
             C26925 * C8105) *
                C80726) *
               C81012 * C81009 * C80686) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78289 +
             (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
             C521 * C80601 + C522 * C78295 + C523 * C15341) *
                C81009 * C26924 +
            (C41628 + C41629 - C41630 - C41631 + C41632 + C41633) * C81009 *
                C26925) *
               C17817 +
           ((C2326 * C78285 -
             ((C490 * C1693 + C81012 * C2301) * C80593 +
              (C490 * C1684 + C81012 * C2294) * C78289) +
             C2327 * C80601 - C2328 * C78295 - C2329 * C15341) *
                C81009 * C26924 +
            (C42480 - (C42481 + C42482) + C42483 - C42484 - C42485) * C81009 *
                C26925) *
               C80726) *
              C80932 +
          (((C41630 - (C41629 + C41628) + C41631 - C41632 - C41633) * C81009 *
                C26924 +
            (C41634 - (C41635 + C41636) + C41637 - C41638 - C41639) * C81009 *
                C26925) *
               C17817 +
           ((C42482 + C42481 - C42480 - C42483 + C42484 + C42485) * C81009 *
                C26924 +
            (C32670 * C78289 + C32671 * C80593 - C8218 * C78285 -
             C8219 * C80601 + (C490 * C7589 + C81012 * C8211) * C78295 +
             (C490 * C7591 + C81012 * C8212) * C15341) *
                C81009 * C26925) *
               C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
             C27982 * C80686) *
                C81009 * C26924 +
            (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
             C27983 * C80686) *
                C81009 * C26925) *
               C80593 +
           ((C3131 - (C3130 + C3129) + C3132) * C81009 * C26924 +
            (C1394 * C2688 - (C1496 * C80932 + C1390 * C2687) +
             C1497 * C80686) *
                C81009 * C26925) *
               C80601 +
           ((C3135 + C3134 - C3133 - C3136) * C81009 * C26924 +
            (C1392 * C2687 + C1498 * C80932 - C1396 * C2688 - C1499 * C80686) *
                C81009 * C26925) *
               C15341) *
              C17817 +
          (((C30701 * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             C30804 * C80686) *
                C81009 * C26924 +
            (C32670 * C2688 - (C30804 * C80932 + C30701 * C2687) +
             C32761 * C80686) *
                C81009 * C26925) *
               C80593 +
           ((C4780 + C4779 - C4778 - C4790) * C81009 * C26924 +
            (C4672 * C2687 + C4788 * C80932 - C8218 * C2688 - C8326 * C80686) *
                C81009 * C26925) *
               C80601 +
           ((C4785 - (C4784 + C4783) + C4791) * C81009 * C26924 +
            ((C490 * C7589 + C81012 * C8211) * C2688 -
             (C4789 * C80932 + C4674 * C2687) +
             (C490 * C7691 + C81012 * C8317) * C80686) *
                C81009 * C26925) *
               C15341) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[40] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                         C80932 +
                     ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                      (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                         C80686) *
                        C80593 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                      (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                         C80932 +
                     ((C19278 + C19277 - C19276 - C19279) * C81009 * C26924 +
                      (C19280 + C19281 - C19282 - C19283) * C81009 * C26925) *
                         C80686) *
                        C80601 +
                    (((C18368 + C18367 - C18366 - C18369) * C81009 * C26924 +
                      (C20788 + C20789 - C20790 - C20791) * C81009 * C26925) *
                         C80932 +
                     ((C20790 - (C20789 + C20788) + C20791) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C17952 -
                       (C1601 * C17817 + C1396 * C17951) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[41] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C39642 + C39643 - C39644 - C39645) * C26925) *
                         C81012 * C80722 +
                     (((C26926 * C1682 + C81009 * C1690) * C13806 -
                       ((C26926 * C1693 + C81009 * C1707) * C13799 +
                        (C26926 * C1684 + C81009 * C1694) * C13805) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C40292 - (C40293 + C40294) + C40295) * C26925) *
                         C81012 * C80729 +
                     (((C26926 * C1686 + C81009 * C1698) * C13805 +
                       (C26926 * C1700 + C81009 * C1710) * C13799 -
                       (C26926 * C1687 + C81009 * C1699) * C13806 -
                       (C26926 * C1701 + C81009 * C1711) * C80598) *
                          C26924 +
                      (C40296 + C40297 - C40298 - C40299) * C26925) *
                         C81012 * C20867) *
                        C80932 +
                    (((C39644 - (C39643 + C39642) + C39645) * C26924 +
                      (C39646 - (C39647 + C39648) + C39649) * C26925) *
                         C81012 * C80722 +
                     ((C40294 + C40293 - C40292 - C40295) * C26924 +
                      (C42780 + C42781 - C42782 - C42783) * C26925) *
                         C81012 * C80729 +
                     ((C40298 - (C40297 + C40296) + C40299) * C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C13806 -
                       (C32162 * C13799 + C32163 * C13805) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C26925) *
                         C81012 * C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[41] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C13799 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C2688 - (C27476 * C80932 + C27366 * C2687) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C80722 +
                    (((C30064 * C2688 -
                       ((C26926 * C1790 + C81009 * C1798) * C80932 +
                        (C26926 * C1684 + C81009 * C1694) * C2687) +
                       C30178 * C80686) *
                          C26924 +
                      (C32160 * C2688 - (C30178 * C80932 + C30064 * C2687) +
                       C32252 * C80686) *
                          C26925) *
                         C81012 * C13799 +
                     (((C26926 * C1682 + C81009 * C1690) * C2687 +
                       (C26926 * C1788 + C81009 * C1796) * C80932 -
                       C30062 * C2688 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C2687 + C30179 * C80932 - C33600 * C2688 -
                       C33704 * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C80729 +
                    ((((C26926 * C1686 + C81009 * C1698) * C2687 +
                       (C26926 * C1792 + C81009 * C1800) * C80932 -
                       C32158 * C2688 - C32253 * C80686) *
                          C26924 +
                      (C32158 * C2687 + C32253 * C80932 - C32163 * C2688 -
                       C32254 * C80686) *
                          C26925) *
                         C81012 * C13799 +
                     ((C36914 * C2688 -
                       ((C26926 * C1793 + C81009 * C1801) * C80932 +
                        (C26926 * C1687 + C81009 * C1699) * C2687) +
                       C37018 * C80686) *
                          C26924 +
                      ((C26926 * C6142 + C81009 * C6152) * C2688 -
                       (C37018 * C80932 + C36914 * C2687) +
                       (C26926 * C6240 + C81009 * C6246) * C80686) *
                          C26925) *
                         C81012 * C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78528 +
             (C26926 * C221 + C81009 * C227) * C80722 -
             (C26926 * C1684 + C81009 * C1694) * C78520 -
             (C26926 * C1882 + C81009 * C1890) * C80729 +
             (C26926 * C1686 + C81009 * C1698) * C78534 +
             (C26926 * C1883 + C81009 * C1891) * C20867) *
                C26924 +
            (C47512 + C47513 - C47514 - C47515 + C47516 + C47517) * C26925) *
               C81012 * C80932 +
           ((C47514 - (C47513 + C47512) + C47515 - C47516 - C47517) * C26924 +
            (C32160 * C78520 - (C27573 * C80722 + C27372 * C78528) +
             C32347 * C80729 - C32163 * C78534 - C32348 * C20867) *
                C26925) *
               C81012 * C80686) *
              C13799 +
          ((((C26926 * C1682 + C81009 * C1690) * C78520 -
             ((C26926 * C222 + C81009 * C228) * C80722 +
              (C26926 * C100 + C81009 * C106) * C78528) +
             (C26926 * C1881 + C81009 * C1889) * C80729 -
             (C26926 * C1687 + C81009 * C1699) * C78534 -
             (C26926 * C1884 + C81009 * C1892) * C20867) *
                C26924 +
            (C47518 - (C47519 + C47520) + C47521 - C47522 - C47523) * C26925) *
               C81012 * C80932 +
           ((C47520 + C47519 - C47518 - C47521 + C47522 + C47523) * C26924 +
            (C27370 * C78528 + C27575 * C80722 - C33600 * C78520 -
             C33812 * C80729 + (C26926 * C6142 + C81009 * C6152) * C78534 +
             (C26926 * C6326 + C81009 * C6332) * C20867) *
                C26925) *
               C81012 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13805 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C13799 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13806 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C80722 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13806 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C13799 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13805) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80729 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C13805 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C13799 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C13806 -
            (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 +
             C26924 * C1984) *
                C80598) *
               C81012 * C81009 * C20867) *
              C80932 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13806 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C13799 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C13805) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C80722 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13805 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C13799 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13806 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80729 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C13806 -
            ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
              C26924 * C6414) *
                 C13799 +
             (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
              C26924 * C6408) *
                 C13805) +
            (C27053 * C6143 + C26924 * C6413 + C27054 * C6154 +
             C26925 * C6418) *
                C80598) *
               C81012 * C81009 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C2687 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80932 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C2688 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C13799 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C2688 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C80932 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C2687) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C80598) *
              C80722 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C2688 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C80932 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C2687) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C13799 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C2687 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80932 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C2688 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C80598) *
              C80729 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C2687 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80932 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C2688 -
            (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 +
             C26924 * C6495) *
                C80686) *
               C81012 * C81009 * C13799 +
           ((C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C2688 -
            ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
              C26924 * C2090) *
                 C80932 +
             (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
              C26924 * C1976) *
                 C2687) +
            (C27053 * C6237 + C26924 * C6497 + C27054 * C6240 +
             C26925 * C6498) *
                C80686) *
               C81012 * C81009 * C80598) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78528 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80722 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C78520 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80729 +
            (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C78534 +
            (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 +
             C26925 * C6573) *
                C20867) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78520 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80722 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78528) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80729 -
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C78534 -
            (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 +
             C26924 * C6573) *
                C20867) *
               C81012 * C81009 * C80686) *
              C13799 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78520 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80722 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C78528) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80729 -
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C78534 -
            (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 +
             C26924 * C2190) *
                C20867) *
               C81012 * C81009 * C80932 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78528 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80722 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78520 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80729 +
            (C27053 * C6137 + C26924 * C6407 + C27054 * C6142 +
             C26925 * C6412) *
                C78534 +
            (C27053 * C6321 + C26924 * C6574 + C27054 * C6326 +
             C26925 * C6578) *
                C20867) *
               C81012 * C81009 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13805 +
                       (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                         C80722 +
                     ((C2326 * C13806 -
                       ((C490 * C1693 + C81012 * C2301) * C13799 +
                        (C490 * C1684 + C81012 * C2294) * C13805) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C40894 - (C40895 + C40896) + C40897) * C81009 * C26925) *
                         C80729 +
                     (((C490 * C1686 + C81012 * C2297) * C13805 +
                       (C490 * C1700 + C81012 * C2305) * C13799 -
                       C2330 * C13806 - C2331 * C80598) *
                          C81009 * C26924 +
                      (C40898 + C40899 - C40900 - C40901) * C81009 * C26925) *
                         C20867) *
                        C80932 +
                    (((C40052 - (C40051 + C40050) + C40053) * C81009 * C26924 +
                      (C40054 - (C40055 + C40056) + C40057) * C81009 * C26925) *
                         C80722 +
                     ((C40896 + C40895 - C40894 - C40897) * C81009 * C26924 +
                      (C43372 + C43373 - C43374 - C43375) * C81009 * C26925) *
                         C80729 +
                     ((C40900 - (C40899 + C40898) + C40901) * C81009 * C26924 +
                      ((C490 * C6142 + C81012 * C6658) * C13806 -
                       (C32672 * C13799 + C32673 * C13805) +
                       (C490 * C6154 + C81012 * C6664) * C80598) *
                          C81009 * C26925) *
                         C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
             C27982 * C80686) *
                C81009 * C26924 +
            (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
             C27983 * C80686) *
                C81009 * C26925) *
               C13799 +
           ((C3131 - (C3130 + C3129) + C3132) * C81009 * C26924 +
            (C1394 * C2688 - (C1496 * C80932 + C1390 * C2687) +
             C1497 * C80686) *
                C81009 * C26925) *
               C80598) *
              C80722 +
          (((C30701 * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             C30804 * C80686) *
                C81009 * C26924 +
            (C32670 * C2688 - (C30804 * C80932 + C30701 * C2687) +
             C32761 * C80686) *
                C81009 * C26925) *
               C13799 +
           ((C4780 + C4779 - C4778 - C4790) * C81009 * C26924 +
            (C4672 * C2687 + C4788 * C80932 - C8218 * C2688 - C8326 * C80686) *
                C81009 * C26925) *
               C80598) *
              C80729 +
          ((((C490 * C1686 + C81012 * C2297) * C2687 +
             (C490 * C1792 + C81012 * C2411) * C80932 - C32668 * C2688 -
             C32762 * C80686) *
                C81009 * C26924 +
            (C32668 * C2687 + C32762 * C80932 - C32673 * C2688 -
             C32763 * C80686) *
                C81009 * C26925) *
               C13799 +
           ((C11703 - (C11702 + C11701) + C11707) * C81009 * C26924 +
            ((C490 * C6142 + C81012 * C6658) * C2688 -
             (C11706 * C80932 + C11600 * C2687) +
             (C490 * C6240 + C81012 * C6744) * C80686) *
                C81009 * C26925) *
               C80598) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C78528 +
             (C490 * C221 + C81012 * C637) * C80722 -
             (C490 * C1684 + C81012 * C2294) * C78520 -
             (C490 * C1882 + C81012 * C2509) * C80729 +
             (C490 * C1686 + C81012 * C2297) * C78534 +
             (C490 * C1883 + C81012 * C2510) * C20867) *
                C81009 * C26924 +
            (C48112 + C48113 - C48114 - C48115 + C48116 + C48117) * C81009 *
                C26925) *
               C80932 +
           ((C48114 - (C48113 + C48112) + C48115 - C48116 - C48117) * C81009 *
                C26924 +
            (C32670 * C78520 - (C28065 * C80722 + C27899 * C78528) +
             C32855 * C80729 - C32673 * C78534 - C32856 * C20867) *
                C81009 * C26925) *
               C80686) *
              C13799 +
          (((C21478 - (C21477 + C21476) + C21479 - C21480 - C21481) * C81009 *
                C26924 +
            (C22376 - (C22377 + C22378) + C22379 - C22380 - C22381) * C81009 *
                C26925) *
               C80932 +
           ((C22378 + C22377 - C22376 - C22379 + C22380 + C22381) * C81009 *
                C26924 +
            (C1394 * C78528 + C1599 * C80722 - C8218 * C78520 - C8432 * C80729 +
             (C490 * C6142 + C81012 * C6658) * C78534 +
             (C490 * C6326 + C81012 * C6824) * C20867) *
                C81009 * C26925) *
               C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C39642 + C39643 - C39644 - C39645) * C26925) *
                         C81012 * C17817 +
                     (((C26926 * C1682 + C81009 * C1690) * C13806 -
                       ((C26926 * C1693 + C81009 * C1707) * C13799 +
                        (C26926 * C1684 + C81009 * C1694) * C13805) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C40292 - (C40293 + C40294) + C40295) * C26925) *
                         C81012 * C80726) *
                        C81003 +
                    (((C39644 - (C39643 + C39642) + C39645) * C26924 +
                      (C39646 - (C39647 + C39648) + C39649) * C26925) *
                         C81012 * C17817 +
                     ((C40294 + C40293 - C40292 - C40295) * C26924 +
                      (C42780 + C42781 - C42782 - C42783) * C26925) *
                         C81012 * C80726) *
                        C80988 +
                    (((C39648 + C39647 - C39646 - C39649) * C26924 +
                      (C39650 + C39651 - C39652 - C39653) * C26925) *
                         C81012 * C17817 +
                     ((C42782 - (C42781 + C42780) + C42783) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C13806 -
                       (C34488 * C13799 + C34489 * C13805) +
                       (C26926 * C8504 + C81009 * C8506) * C80598) *
                          C26925) *
                         C81012 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C39032 + C39033 - C39034 - C39035 + C39036 + C39037 -
                      C39038 - C39039) *
                         C26925) *
                        C81012 * C17817 +
                    (((C26926 * C1682 + C81009 * C1690) * C13176 -
                      ((C26926 * C1693 + C81009 * C1707) * C81010 +
                       (C26926 * C1684 + C81009 * C1694) * C13175) +
                      (C26926 * C1692 + C81009 * C1706) * C81000 -
                      (C26926 * C1683 + C81009 * C1691) * C13177 -
                      (C26926 * C1695 + C81009 * C1708) * C80984 +
                      (C26926 * C1685 + C81009 * C1696) * C13178 +
                      (C26926 * C1697 + C81009 * C1709) * C80966) *
                         C26924 +
                     (C30062 * C13176 - (C30063 * C81010 + C30064 * C13175) +
                      C30065 * C81000 - C30066 * C13177 - C30067 * C80984 +
                      (C26926 * C3982 + C81009 * C3989) * C13178 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C26925) *
                        C81012 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13805 +
                      (C26926 * C107 + C81009 * C117) * C13799 -
                      (C26926 * C100 + C81009 * C106) * C13806 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C26924 +
                     (C39642 + C39643 - C39644 - C39645) * C26925) *
                        C81012 * C81014 +
                    (((C26926 * C1682 + C81009 * C1690) * C13806 -
                      ((C26926 * C1693 + C81009 * C1707) * C13799 +
                       (C26926 * C1684 + C81009 * C1694) * C13805) +
                      (C26926 * C1692 + C81009 * C1706) * C80598) *
                         C26924 +
                     (C40292 - (C40293 + C40294) + C40295) * C26925) *
                        C81012 * C81008 +
                    (((C26926 * C1686 + C81009 * C1698) * C13805 +
                      (C26926 * C1700 + C81009 * C1710) * C13799 -
                      (C26926 * C1687 + C81009 * C1699) * C13806 -
                      (C26926 * C1701 + C81009 * C1711) * C80598) *
                         C26924 +
                     (C40296 + C40297 - C40298 - C40299) * C26925) *
                        C81012 * C80996 +
                    (((C26926 * C10468 + C81009 * C10474) * C13806 -
                      ((C26926 * C10473 + C81009 * C10481) * C13799 +
                       (C26926 * C10469 + C81009 * C10475) * C13805) +
                      (C26926 * C10472 + C81009 * C10480) * C80598) *
                         C26924 +
                     ((C26926 * C12544 + C81009 * C12546) * C13806 -
                      (C38386 * C13799 + C38387 * C13805) +
                      (C26926 * C12548 + C81009 * C12550) * C80598) *
                         C26925) *
                        C81012 * C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C852 +
             (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
             C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
                C26924 +
            (C27364 * C852 + C27474 * C81003 - C27372 * C853 - C27475 * C80988 +
             C31658 * C854 + C31714 * C80962) *
                C26925) *
               C81012 * C13799 +
           ((C27366 * C853 -
             ((C26926 * C167 + C81009 * C173) * C81003 +
              (C26926 * C100 + C81009 * C106) * C852) +
             C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
                C26924 +
            (C27370 * C853 - (C27476 * C81003 + C27366 * C852) +
             C27477 * C80988 - C32940 * C854 - C33012 * C80962) *
                C26925) *
               C81012 * C80598) *
              C17817 +
          (((C30064 * C853 -
             ((C26926 * C1790 + C81009 * C1798) * C81003 +
              (C26926 * C1684 + C81009 * C1694) * C852) +
             C30178 * C80988 - C32160 * C854 - C32252 * C80962) *
                C26924 +
            (C32160 * C853 - (C30178 * C81003 + C30064 * C852) +
             C32252 * C80988 - C34489 * C854 - C34562 * C80962) *
                C26925) *
               C81012 * C13799 +
           (((C26926 * C1682 + C81009 * C1690) * C852 +
             (C26926 * C1788 + C81009 * C1796) * C81003 - C30062 * C853 -
             C30179 * C80988 + C33600 * C854 + C33704 * C80962) *
                C26924 +
            (C30062 * C852 + C30179 * C81003 - C33600 * C853 - C33704 * C80988 +
             (C26926 * C8500 + C81009 * C8502) * C854 +
             (C26926 * C8574 + C81009 * C8576) * C80962) *
                C26925) *
               C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C81010 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C81000 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C26924 +
            (C27368 * C165 + C27478 * C80628) * C26925) *
               C81012 * C80984 -
           ((C28882 * C80628 + C28810 * C165) * C26925 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C26924) *
               C81012 * C80966) *
              C17817 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            (C30062 * C165 + C30179 * C80628) * C26925) *
               C81012 * C81000 -
           ((C30178 * C80628 + C30064 * C165) * C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C81010 -
           ((C30180 * C80628 + C30066 * C165) * C26925 +
            ((C26926 * C1789 + C81009 * C1797) * C80628 +
             (C26926 * C1683 + C81009 * C1691) * C165) *
                C26924) *
               C81012 * C80984 +
           (((C26926 * C1685 + C81009 * C1696) * C165 +
             (C26926 * C1791 + C81009 * C1799) * C80628) *
                C26924 +
            ((C26926 * C3982 + C81009 * C3989) * C165 +
             (C26926 * C4096 + C81009 * C4100) * C80628) *
                C26925) *
               C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C13799 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C80598) *
              C81014 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            (C30062 * C165 + C30179 * C80628) * C26925) *
               C81012 * C80598 -
           ((C30178 * C80628 + C30064 * C165) * C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C13799) *
              C81008 +
          ((((C26926 * C1686 + C81009 * C1698) * C165 +
             (C26926 * C1792 + C81009 * C1800) * C80628) *
                C26924 +
            (C32158 * C165 + C32253 * C80628) * C26925) *
               C81012 * C13799 -
           ((C37018 * C80628 + C36914 * C165) * C26925 +
            ((C26926 * C1793 + C81009 * C1801) * C80628 +
             (C26926 * C1687 + C81009 * C1699) * C165) *
                C26924) *
               C81012 * C80598) *
              C80996 +
          ((((C26926 * C10468 + C81009 * C10474) * C165 +
             (C26926 * C10526 + C81009 * C10530) * C80628) *
                C26924 +
            ((C26926 * C12544 + C81009 * C12546) * C165 +
             (C26926 * C12618 + C81009 * C12620) * C80628) *
                C26925) *
               C81012 * C80598 -
           ((C38460 * C80628 + C38387 * C165) * C26925 +
            ((C26926 * C10527 + C81009 * C10531) * C80628 +
             (C26926 * C10469 + C81009 * C10475) * C165) *
                C26924) *
               C81012 * C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       (C26926 * C1684 + C81009 * C1694) * C17952 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C44460 + C44461 - C44462 - C44463) * C26925) *
                         C81012 * C81003 +
                     ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                      (C44464 - (C44465 + C44466) + C44467) * C26925) *
                         C81012 * C80988 +
                     ((C44466 + C44465 - C44464 - C44467) * C26924 +
                      (C31658 * C17951 + C31766 * C17817 - C34489 * C17952 -
                       C34636 * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C13799 +
                    ((((C26926 * C1682 + C81009 * C1690) * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C44468 - (C44469 + C44470) + C44471) * C26925) *
                         C81012 * C81003 +
                     ((C44470 + C44469 - C44468 - C44471) * C26924 +
                      (C44472 + C44473 - C44474 - C44475) * C26925) *
                         C81012 * C80988 +
                     ((C44474 - (C44473 + C44472) + C44475) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C17952 -
                       (C33082 * C17817 + C32940 * C17951) +
                       (C26926 * C8644 + C81009 * C8646) * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      (C26926 * C1684 + C81009 * C1694) * C17952 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C27364 * C17951 + C27572 * C17817 - C30064 * C17952 -
                      C30294 * C80726) *
                         C26925) *
                        C81012 * C80628 * C81010 +
                    (((C26926 * C1682 + C81009 * C1690) * C17952 -
                      ((C26926 * C222 + C81009 * C228) * C17817 +
                       (C26926 * C100 + C81009 * C106) * C17951) +
                      (C26926 * C1881 + C81009 * C1889) * C80726) *
                         C26924 +
                     (C30062 * C17952 - (C27574 * C17817 + C27366 * C17951) +
                      C30295 * C80726) *
                         C26925) *
                        C81012 * C80628 * C81000 +
                    (((C26926 * C101 + C81009 * C109) * C17951 +
                      (C26926 * C223 + C81009 * C229) * C17817 -
                      (C26926 * C1683 + C81009 * C1691) * C17952 -
                      (C26926 * C1885 + C81009 * C1893) * C80726) *
                         C26924 +
                     (C27368 * C17951 + C27576 * C17817 - C30066 * C17952 -
                      C30296 * C80726) *
                         C26925) *
                        C81012 * C80628 * C80984 +
                    (((C26926 * C1685 + C81009 * C1696) * C17952 -
                      ((C26926 * C224 + C81009 * C230) * C17817 +
                       (C26926 * C102 + C81009 * C111) * C17951) +
                      (C26926 * C1887 + C81009 * C1895) * C80726) *
                         C26924 +
                     ((C26926 * C3982 + C81009 * C3989) * C17952 -
                      (C28952 * C17817 + C28810 * C17951) +
                      (C26926 * C4202 + C81009 * C4206) * C80726) *
                         C26925) *
                        C81012 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C19485 +
                      (C26926 * C221 + C81009 * C227) * C81014 -
                      (C26926 * C1684 + C81009 * C1694) * C19486 -
                      (C26926 * C1882 + C81009 * C1890) * C81008 +
                      (C26926 * C1686 + C81009 * C1698) * C19487 +
                      (C26926 * C1883 + C81009 * C1891) * C80996 -
                      (C26926 * C10469 + C81009 * C10475) * C19488 -
                      (C26926 * C10582 + C81009 * C10586) * C80978) *
                         C26924 +
                     (C27364 * C19485 + C27572 * C81014 - C30064 * C19486 -
                      C30294 * C81008 + C32158 * C19487 + C32346 * C80996 -
                      C38387 * C19488 - C38538 * C80978) *
                         C26925) *
                        C81012 * C80628 * C13799 +
                    (((C26926 * C1682 + C81009 * C1690) * C19486 -
                      ((C26926 * C222 + C81009 * C228) * C81014 +
                       (C26926 * C100 + C81009 * C106) * C19485) +
                      (C26926 * C1881 + C81009 * C1889) * C81008 -
                      (C26926 * C1687 + C81009 * C1699) * C19487 -
                      (C26926 * C1884 + C81009 * C1892) * C80996 +
                      (C26926 * C10468 + C81009 * C10474) * C19488 +
                      (C26926 * C10581 + C81009 * C10585) * C80978) *
                         C26924 +
                     (C30062 * C19486 - (C27574 * C81014 + C27366 * C19485) +
                      C30295 * C81008 - C36914 * C19487 - C37124 * C80996 +
                      (C26926 * C12544 + C81009 * C12546) * C19488 +
                      (C26926 * C12688 + C81009 * C12690) * C80978) *
                         C26925) *
                        C81012 * C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13805 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C13799 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13806 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13806 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C13799 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13805) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C81003 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13806 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C13799 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C13805) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13805 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C13799 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13806 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80988 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C13805 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C13799 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C13806 -
            (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C13806 -
            ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
              C26924 * C6416) *
                 C13799 +
             (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
              C26924 * C6410) *
                 C13805) +
            (C27053 * C6147 + C26924 * C6415 + C27054 * C8504 +
             C26925 * C8716) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13175 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C81010 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C13176 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C81000 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C13177 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80984 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C13178 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C17817 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C13176 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C81010 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C13175) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C81000 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C13177 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C80984 +
           (C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C13178 +
           (C27053 * C1697 + C26924 * C1982 + C27054 * C3990 + C26925 * C4312) *
               C80966) *
              C81012 * C81009 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13805 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C13799 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C13806 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80598) *
              C81012 * C81009 * C81014 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C13806 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C13799 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C13805) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C80598) *
              C81012 * C81009 * C81008 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C13805 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C13799 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C13806 -
           (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 + C26924 * C1984) *
               C80598) *
              C81012 * C81009 * C80996 +
          ((C27053 * C10468 + C26924 * C10631 + C27054 * C12544 +
            C26925 * C12758) *
               C13806 -
           ((C27054 * C12547 + C26925 * C12759 + C27053 * C10473 +
             C26924 * C10636) *
                C13799 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C13805) +
           (C27053 * C10472 + C26924 * C10635 + C27054 * C12548 +
            C26925 * C12760) *
               C80598) *
              C81012 * C81009 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C852 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C81003 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C853 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80988 +
            (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C854 +
            (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
                C80962) *
               C81012 * C81009 * C13799 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C853 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C81003 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C852) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80988 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C854 -
            (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
                C80962) *
               C81012 * C81009 * C80598) *
              C17817 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C853 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C81003 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C852) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80988 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C854 -
            (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 +
             C26924 * C6493) *
                C80962) *
               C81012 * C81009 * C13799 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C852 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C81003 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C853 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80988 +
            (C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C854 +
            (C27053 * C6235 + C26924 * C6494 + C27054 * C8574 +
             C26925 * C8784) *
                C80962) *
               C81012 * C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C81010 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C81000 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C80984 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C80628 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C165) *
               C81012 * C81009 * C80966) *
              C17817 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C81000 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C81010 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C80984 +
           ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 +
             C26925 * C4308) *
                C165 +
            (C27053 * C1791 + C26924 * C2088 + C27054 * C4096 +
             C26925 * C4426) *
                C80628) *
               C81012 * C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C13799 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C80598) *
              C81014 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C80598 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C13799) *
              C81008 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C165 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80628) *
               C81012 * C81009 * C13799 -
           ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
             C26924 * C2090) *
                C80628 +
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C165) *
               C81012 * C81009 * C80598) *
              C80996 +
          (((C27053 * C10468 + C26924 * C10631 + C27054 * C12544 +
             C26925 * C12758) *
                C165 +
            (C27053 * C10526 + C26924 * C10681 + C27054 * C12618 +
             C26925 * C12828) *
                C80628) *
               C81012 * C81009 * C80598 -
           ((C27054 * C12617 + C26925 * C12827 + C27053 * C10527 +
             C26924 * C10682) *
                C80628 +
            (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
             C26924 * C10632) *
                C165) *
               C81012 * C81009 * C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C17951 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C17817 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C17952 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C81003 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C17952 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C17817 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C17951) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80988 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C17951 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C17817 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C17952 -
            (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 +
             C26924 * C6575) *
                C80726) *
               C81012 * C81009 * C80962) *
              C13799 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C17952 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C17817 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C17951) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C81003 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C17951 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C17817 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C17952 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80988 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C17952 -
            ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 +
              C26924 * C1258) *
                 C17817 +
             (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
              C26924 * C1040) *
                 C17951) +
            (C27053 * C6323 + C26924 * C6577 + C27054 * C8644 +
             C26925 * C8852) *
                C80726) *
               C81012 * C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C17951 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C17817 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C17952 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C80628 * C81010 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C17952 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C17817 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C17951) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C80726) *
              C81012 * C81009 * C80628 * C81000 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C17951 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C17817 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C17952 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C80726) *
              C81012 * C81009 * C80628 * C80984 +
          ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C17952 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C17817 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C17951) +
           (C27053 * C1887 + C26924 * C2193 + C27054 * C4202 + C26925 * C4542) *
               C80726) *
              C81012 * C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C19485 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C81014 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C19486 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C81008 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C19487 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80996 -
           (C27054 * C12543 + C26925 * C12757 + C27053 * C10469 +
            C26924 * C10632) *
               C19488 -
           (C27054 * C12687 + C26925 * C12895 + C27053 * C10582 +
            C26924 * C10727) *
               C80978) *
              C81012 * C81009 * C80628 * C13799 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C19486 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C81014 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C19485) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C81008 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C19487 -
           (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 + C26924 * C2190) *
               C80996 +
           (C27053 * C10468 + C26924 * C10631 + C27054 * C12544 +
            C26925 * C12758) *
               C19488 +
           (C27053 * C10581 + C26924 * C10729 + C27054 * C12688 +
            C26925 * C12896) *
               C80978) *
              C81012 * C81009 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13805 +
                       (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                         C17817 +
                     ((C2326 * C13806 -
                       ((C490 * C1693 + C81012 * C2301) * C13799 +
                        (C490 * C1684 + C81012 * C2294) * C13805) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C40894 - (C40895 + C40896) + C40897) * C81009 * C26925) *
                         C80726) *
                        C81003 +
                    (((C40052 - (C40051 + C40050) + C40053) * C81009 * C26924 +
                      (C40054 - (C40055 + C40056) + C40057) * C81009 * C26925) *
                         C17817 +
                     ((C40896 + C40895 - C40894 - C40897) * C81009 * C26924 +
                      (C43372 + C43373 - C43374 - C43375) * C81009 * C26925) *
                         C80726) *
                        C80988 +
                    (((C40056 + C40055 - C40054 - C40057) * C81009 * C26924 +
                      (C40058 + C40059 - C40060 - C40061) * C81009 * C26925) *
                         C17817 +
                     ((C43374 - (C43373 + C43372) + C43375) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C13806 -
                       (C34912 * C13799 + C34913 * C13805) +
                       (C490 * C8504 + C81012 * C8922) * C80598) *
                          C81009 * C26925) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13175 +
                      (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
                      C521 * C81000 + C522 * C13177 + C523 * C80984 -
                      C524 * C13178 - C525 * C80966) *
                         C81009 * C26924 +
                     (C39436 + C39437 - C39438 - C39439 + C39440 + C39441 -
                      C39442 - C39443) *
                         C81009 * C26925) *
                        C17817 +
                    ((C2326 * C13176 -
                      ((C490 * C1693 + C81012 * C2301) * C81010 +
                       (C490 * C1684 + C81012 * C2294) * C13175) +
                      C2327 * C81000 - C2328 * C13177 - C2329 * C80984 +
                      C3726 * C13178 + C3727 * C80966) *
                         C81009 * C26924 +
                     (C4672 * C13176 - (C30700 * C81010 + C30701 * C13175) +
                      C4673 * C81000 - C4674 * C13177 - C4675 * C80984 +
                      (C490 * C3982 + C81012 * C4658) * C13178 +
                      (C490 * C3990 + C81012 * C4662) * C80966) *
                         C81009 * C26925) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13805 +
                      (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                      C521 * C80598) *
                         C81009 * C26924 +
                     (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                        C81014 +
                    ((C2326 * C13806 -
                      ((C490 * C1693 + C81012 * C2301) * C13799 +
                       (C490 * C1684 + C81012 * C2294) * C13805) +
                      C2327 * C80598) *
                         C81009 * C26924 +
                     (C40894 - (C40895 + C40896) + C40897) * C81009 * C26925) *
                        C81008 +
                    (((C490 * C1686 + C81012 * C2297) * C13805 +
                      (C490 * C1700 + C81012 * C2305) * C13799 -
                      C2330 * C13806 - C2331 * C80598) *
                         C81009 * C26924 +
                     (C40898 + C40899 - C40900 - C40901) * C81009 * C26925) *
                        C80996 +
                    ((C12326 * C13806 -
                      ((C490 * C10473 + C81012 * C10778) * C13799 +
                       (C490 * C10469 + C81012 * C10774) * C13805) +
                      C12327 * C80598) *
                         C81009 * C26924 +
                     ((C490 * C12544 + C81012 * C12964) * C13806 -
                      (C38814 * C13799 + C38815 * C13805) +
                      (C490 * C12548 + C81012 * C12966) * C80598) *
                         C81009 * C26925) *
                        C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eezy[42] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C852 +
                       (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
                       C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
                          C81009 * C26924 +
                      (C27896 * C852 + C27982 * C81003 - C27899 * C853 -
                       C27983 * C80988 + C31956 * C854 + C32011 * C80962) *
                          C81009 * C26925) *
                         C13799 +
                     ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) *
                          C81009 * C26924 +
                      (C1394 * C853 - (C1496 * C81003 + C1390 * C852) +
                       C1497 * C80988 - C7340 * C854 - C7418 * C80962) *
                          C81009 * C26925) *
                         C80598) *
                        C17817 +
                    (((C30701 * C853 -
                       ((C490 * C1790 + C81012 * C2409) * C81003 +
                        (C490 * C1684 + C81012 * C2294) * C852) +
                       C30804 * C80988 - C32670 * C854 - C32761 * C80962) *
                          C81009 * C26924 +
                      (C32670 * C853 - (C30804 * C81003 + C30701 * C852) +
                       C32761 * C80988 - C34913 * C854 - C34985 * C80962) *
                          C81009 * C26925) *
                         C13799 +
                     ((C19174 + C19173 - C19172 - C19175 + C19176 + C19177) *
                          C81009 * C26924 +
                      (C4672 * C852 + C4788 * C81003 - C8218 * C853 -
                       C8326 * C80988 + (C490 * C8500 + C81012 * C8920) * C854 +
                       (C490 * C8574 + C81012 * C8990) * C80962) *
                          C81009 * C26925) *
                         C80598) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C165 +
                       (C490 * C166 + C81012 * C569) * C80628) *
                          C81009 * C26924 +
                      (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
                         C81010 -
                     ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
                      (C592 + C576) * C81009 * C26924) *
                         C81000 +
                     ((C581 + C593) * C81009 * C26924 +
                      (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
                         C80984 -
                     ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
                      (C594 + C582) * C81009 * C26924) *
                         C80966) *
                        C17817 +
                    (((C2416 + C2432) * C81009 * C26924 +
                      (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
                         C81000 -
                     ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
                      ((C490 * C1790 + C81012 * C2409) * C80628 +
                       (C490 * C1684 + C81012 * C2294) * C165) *
                          C81009 * C26924) *
                         C81010 -
                     ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
                      (C2433 + C2419) * C81009 * C26924) *
                         C80984 +
                     ((C3797 + C3799) * C81009 * C26924 +
                      ((C490 * C3982 + C81012 * C4658) * C165 +
                       (C490 * C4096 + C81012 * C4776) * C80628) *
                          C81009 * C26925) *
                         C80966) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C165 +
                       (C490 * C166 + C81012 * C569) * C80628) *
                          C81009 * C26924 +
                      (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
                         C13799 -
                     ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
                      (C592 + C576) * C81009 * C26924) *
                         C80598) *
                        C81014 +
                    (((C2416 + C2432) * C81009 * C26924 +
                      (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
                         C80598 -
                     ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
                      ((C490 * C1790 + C81012 * C2409) * C80628 +
                       (C490 * C1684 + C81012 * C2294) * C165) *
                          C81009 * C26924) *
                         C13799) *
                        C81008 +
                    ((((C490 * C1686 + C81012 * C2297) * C165 +
                       (C490 * C1792 + C81012 * C2411) * C80628) *
                          C81009 * C26924 +
                      (C32668 * C165 + C32762 * C80628) * C81009 * C26925) *
                         C13799 -
                     ((C11706 * C80628 + C11600 * C165) * C81009 * C26925 +
                      (C2434 + C2422) * C81009 * C26924) *
                         C80598) *
                        C80996 +
                    (((C12395 + C12399) * C81009 * C26924 +
                      ((C490 * C12544 + C81012 * C12964) * C165 +
                       (C490 * C12618 + C81012 * C13034) * C80628) *
                          C81009 * C26925) *
                         C80598 -
                     ((C38887 * C80628 + C38815 * C165) * C81009 * C26925 +
                      ((C490 * C10527 + C81012 * C10824) * C80628 +
                       (C490 * C10469 + C81012 * C10774) * C165) *
                          C81009 * C26924) *
                         C13799) *
                        C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[42] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                         C81003 +
                     ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                      (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                         C80988 +
                     ((C45070 + C45069 - C45068 - C45071) * C81009 * C26924 +
                      (C31956 * C17951 + C32062 * C17817 - C34913 * C17952 -
                       C35058 * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C13799 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                      (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                         C81003 +
                     ((C19278 + C19277 - C19276 - C19279) * C81009 * C26924 +
                      (C19280 + C19281 - C19282 - C19283) * C81009 * C26925) *
                         C80988 +
                     ((C19282 - (C19281 + C19280) + C19283) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C17952 -
                       (C7490 * C17817 + C7340 * C17951) +
                       (C490 * C8644 + C81012 * C9058) * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C27896 * C17951 + C28064 * C17817 - C30701 * C17952 -
                      C30908 * C80726) *
                         C81009 * C26925) *
                        C80628 * C81010 +
                    ((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                     (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                        C80628 * C81000 +
                    ((C18368 + C18367 - C18366 - C18369) * C81009 * C26924 +
                     (C20788 + C20789 - C20790 - C20791) * C81009 * C26925) *
                        C80628 * C80984 +
                    ((C18372 - (C18371 + C18370) + C18373) * C81009 * C26924 +
                     ((C490 * C3982 + C81012 * C4658) * C17952 -
                      (C3214 * C17817 + C3060 * C17951) +
                      (C490 * C4202 + C81012 * C4892) * C80726) *
                         C81009 * C26925) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C19485 +
                      (C490 * C221 + C81012 * C637) * C81014 -
                      (C490 * C1684 + C81012 * C2294) * C19486 -
                      (C490 * C1882 + C81012 * C2509) * C81008 +
                      (C490 * C1686 + C81012 * C2297) * C19487 +
                      (C490 * C1883 + C81012 * C2510) * C80996 -
                      (C490 * C10469 + C81012 * C10774) * C19488 -
                      (C490 * C10582 + C81012 * C10869) * C80978) *
                         C81009 * C26924 +
                     (C27896 * C19485 + C28064 * C81014 - C30701 * C19486 -
                      C30908 * C81008 + C32668 * C19487 + C32854 * C80996 -
                      C38815 * C19488 - C38964 * C80978) *
                         C81009 * C26925) *
                        C80628 * C13799 +
                    ((C19896 - (C19895 + C19894) + C19897 - C19898 - C19899 +
                      C19900 + C19901) *
                         C81009 * C26924 +
                     (C4672 * C19486 - (C1598 * C81014 + C1390 * C19485) +
                      C4904 * C81008 - C11600 * C19487 - C11814 * C80996 +
                      (C490 * C12544 + C81012 * C12964) * C19488 +
                      (C490 * C12688 + C81012 * C13102) * C80978) *
                         C81009 * C26925) *
                        C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78289 +
            (C26926 * C107 + C81009 * C117) * C80593 -
            (C26926 * C100 + C81009 * C106) * C78285 -
            (C26926 * C108 + C81009 * C118) * C80601 +
            (C26926 * C101 + C81009 * C109) * C78295 +
            (C26926 * C110 + C81009 * C119) * C15341) *
               C26924 +
           (C41172 + C41173 - C41174 - C41175 + C41176 + C41177) * C26925) *
              C81012 * C80722 +
          (((C26926 * C1682 + C81009 * C1690) * C78285 -
            ((C26926 * C1693 + C81009 * C1707) * C80593 +
             (C26926 * C1684 + C81009 * C1694) * C78289) +
            (C26926 * C1692 + C81009 * C1706) * C80601 -
            (C26926 * C1683 + C81009 * C1691) * C78295 -
            (C26926 * C1695 + C81009 * C1708) * C15341) *
               C26924 +
           (C41886 - (C41887 + C41888) + C41889 - C41890 - C41891) * C26925) *
              C81012 * C80729 +
          (((C26926 * C1686 + C81009 * C1698) * C78289 +
            (C26926 * C1700 + C81009 * C1710) * C80593 -
            (C26926 * C1687 + C81009 * C1699) * C78285 -
            (C26926 * C1701 + C81009 * C1711) * C80601 +
            (C26926 * C1688 + C81009 * C1702) * C78295 +
            (C26926 * C1703 + C81009 * C1712) * C15341) *
               C26924 +
           (C32158 * C78289 + C32159 * C80593 - C36914 * C78285 -
            C36915 * C80601 + (C26926 * C10971 + C81009 * C10972) * C78295 +
            (C26926 * C10973 + C81009 * C10974) * C15341) *
               C26925) *
              C81012 * C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C165 +
                       (C26926 * C166 + C81009 * C172) * C80628) *
                          C26924 +
                      (C27364 * C165 + C27474 * C80628) * C26925) *
                         C81012 * C80593 -
                     ((C27476 * C80628 + C27366 * C165) * C26925 +
                      ((C26926 * C167 + C81009 * C173) * C80628 +
                       (C26926 * C100 + C81009 * C106) * C165) *
                          C26924) *
                         C81012 * C80601 +
                     (((C26926 * C101 + C81009 * C109) * C165 +
                       (C26926 * C168 + C81009 * C174) * C80628) *
                          C26924 +
                      (C27368 * C165 + C27478 * C80628) * C26925) *
                         C81012 * C15341) *
                        C80722 +
                    ((((C26926 * C1682 + C81009 * C1690) * C165 +
                       (C26926 * C1788 + C81009 * C1796) * C80628) *
                          C26924 +
                      (C30062 * C165 + C30179 * C80628) * C26925) *
                         C81012 * C80601 -
                     ((C30178 * C80628 + C30064 * C165) * C26925 +
                      ((C26926 * C1790 + C81009 * C1798) * C80628 +
                       (C26926 * C1684 + C81009 * C1694) * C165) *
                          C26924) *
                         C81012 * C80593 -
                     ((C30180 * C80628 + C30066 * C165) * C26925 +
                      ((C26926 * C1789 + C81009 * C1797) * C80628 +
                       (C26926 * C1683 + C81009 * C1691) * C165) *
                          C26924) *
                         C81012 * C15341) *
                        C80729 +
                    ((((C26926 * C1686 + C81009 * C1698) * C165 +
                       (C26926 * C1792 + C81009 * C1800) * C80628) *
                          C26924 +
                      (C32158 * C165 + C32253 * C80628) * C26925) *
                         C81012 * C80593 -
                     ((C37018 * C80628 + C36914 * C165) * C26925 +
                      ((C26926 * C1793 + C81009 * C1801) * C80628 +
                       (C26926 * C1687 + C81009 * C1699) * C165) *
                          C26924) *
                         C81012 * C80601 +
                     (((C26926 * C1688 + C81009 * C1702) * C165 +
                       (C26926 * C1794 + C81009 * C1802) * C80628) *
                          C26924 +
                      ((C26926 * C10971 + C81009 * C10972) * C165 +
                       (C26926 * C11073 + C81009 * C11074) * C80628) *
                          C26925) *
                         C81012 * C15341) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78528 +
            (C26926 * C221 + C81009 * C227) * C80722 -
            (C26926 * C1684 + C81009 * C1694) * C78520 -
            (C26926 * C1882 + C81009 * C1890) * C80729 +
            (C26926 * C1686 + C81009 * C1698) * C78534 +
            (C26926 * C1883 + C81009 * C1891) * C20867) *
               C26924 +
           (C27364 * C78528 + C27572 * C80722 - C30064 * C78520 -
            C30294 * C80729 + C32158 * C78534 + C32346 * C20867) *
               C26925) *
              C81012 * C80628 * C80593 +
          (((C26926 * C1682 + C81009 * C1690) * C78520 -
            ((C26926 * C222 + C81009 * C228) * C80722 +
             (C26926 * C100 + C81009 * C106) * C78528) +
            (C26926 * C1881 + C81009 * C1889) * C80729 -
            (C26926 * C1687 + C81009 * C1699) * C78534 -
            (C26926 * C1884 + C81009 * C1892) * C20867) *
               C26924 +
           (C30062 * C78520 - (C27574 * C80722 + C27366 * C78528) +
            C30295 * C80729 - C36914 * C78534 - C37124 * C20867) *
               C26925) *
              C81012 * C80628 * C80601 +
          (((C26926 * C101 + C81009 * C109) * C78528 +
            (C26926 * C223 + C81009 * C229) * C80722 -
            (C26926 * C1683 + C81009 * C1691) * C78520 -
            (C26926 * C1885 + C81009 * C1893) * C80729 +
            (C26926 * C1688 + C81009 * C1702) * C78534 +
            (C26926 * C1886 + C81009 * C1894) * C20867) *
               C26924 +
           (C27368 * C78528 + C27576 * C80722 - C30066 * C78520 -
            C30296 * C80729 + (C26926 * C10971 + C81009 * C10972) * C78534 +
            (C26926 * C11173 + C81009 * C11174) * C20867) *
               C26925) *
              C81012 * C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78289 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80593 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C78285 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80601 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C78295 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C15341) *
              C81012 * C81009 * C80722 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C78285 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80593 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C78289) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C80601 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C78295 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C15341) *
              C81012 * C81009 * C80729 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C78289 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C80593 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C78285 -
           (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 + C26924 * C1984) *
               C80601 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C78295 +
           (C27053 * C1703 + C26924 * C1985 + C27054 * C10973 +
            C26925 * C11274) *
               C15341) *
              C81012 * C81009 * C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C80593 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C80601 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C15341) *
              C80722 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C80601 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C80593 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C15341) *
              C80729 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C165 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80628) *
               C81012 * C81009 * C80593 -
           ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
             C26924 * C2090) *
                C80628 +
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C165) *
               C81012 * C81009 * C80601 +
           ((C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
             C26925 * C11273) *
                C165 +
            (C27053 * C1794 + C26924 * C2091 + C27054 * C11073 +
             C26925 * C11379) *
                C80628) *
               C81012 * C81009 * C15341) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78528 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80722 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C78520 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80729 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C78534 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C20867) *
              C81012 * C81009 * C80628 * C80593 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C78520 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80722 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78528) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C80729 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C78534 -
           (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 + C26924 * C2190) *
               C20867) *
              C81012 * C81009 * C80628 * C80601 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C78528 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C80722 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C78520 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C80729 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C78534 +
           (C27053 * C1886 + C26924 * C2192 + C27054 * C11173 +
            C26925 * C11485) *
               C20867) *
              C81012 * C81009 * C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78289 +
            (C490 * C107 + C81012 * C497) * C80593 - C520 * C78285 -
            C521 * C80601 + C522 * C78295 + C523 * C15341) *
               C81009 * C26924 +
           (C41628 + C41629 - C41630 - C41631 + C41632 + C41633) * C81009 *
               C26925) *
              C80722 +
          ((C2326 * C78285 -
            ((C490 * C1693 + C81012 * C2301) * C80593 +
             (C490 * C1684 + C81012 * C2294) * C78289) +
            C2327 * C80601 - C2328 * C78295 - C2329 * C15341) *
               C81009 * C26924 +
           (C42480 - (C42481 + C42482) + C42483 - C42484 - C42485) * C81009 *
               C26925) *
              C80729 +
          (((C490 * C1686 + C81012 * C2297) * C78289 +
            (C490 * C1700 + C81012 * C2305) * C80593 - C2330 * C78285 -
            C2331 * C80601 + C2332 * C78295 + C2333 * C15341) *
               C81009 * C26924 +
           (C32668 * C78289 + C32669 * C80593 - C11600 * C78285 -
            C11601 * C80601 + (C490 * C10971 + C81012 * C11593) * C78295 +
            (C490 * C10973 + C81012 * C11594) * C15341) *
               C81009 * C26925) *
              C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eezy[43] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C165 +
                       (C490 * C166 + C81012 * C569) * C80628) *
                          C81009 * C26924 +
                      (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
                         C80593 -
                     ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
                      (C592 + C576) * C81009 * C26924) *
                         C80601 +
                     ((C581 + C593) * C81009 * C26924 +
                      (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
                         C15341) *
                        C80722 +
                    (((C2416 + C2432) * C81009 * C26924 +
                      (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
                         C80601 -
                     ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
                      ((C490 * C1790 + C81012 * C2409) * C80628 +
                       (C490 * C1684 + C81012 * C2294) * C165) *
                          C81009 * C26924) *
                         C80593 -
                     ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
                      (C2433 + C2419) * C81009 * C26924) *
                         C15341) *
                        C80729 +
                    ((((C490 * C1686 + C81012 * C2297) * C165 +
                       (C490 * C1792 + C81012 * C2411) * C80628) *
                          C81009 * C26924 +
                      (C32668 * C165 + C32762 * C80628) * C81009 * C26925) *
                         C80593 -
                     ((C11706 * C80628 + C11600 * C165) * C81009 * C26925 +
                      (C2434 + C2422) * C81009 * C26924) *
                         C80601 +
                     ((C2427 + C2435) * C81009 * C26924 +
                      ((C490 * C10971 + C81012 * C11593) * C165 +
                       (C490 * C11073 + C81012 * C11699) * C80628) *
                          C81009 * C26925) *
                         C15341) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C78528 +
            (C490 * C221 + C81012 * C637) * C80722 -
            (C490 * C1684 + C81012 * C2294) * C78520 -
            (C490 * C1882 + C81012 * C2509) * C80729 +
            (C490 * C1686 + C81012 * C2297) * C78534 +
            (C490 * C1883 + C81012 * C2510) * C20867) *
               C81009 * C26924 +
           (C27896 * C78528 + C28064 * C80722 - C30701 * C78520 -
            C30908 * C80729 + C32668 * C78534 + C32854 * C20867) *
               C81009 * C26925) *
              C80628 * C80593 +
          ((C21478 - (C21477 + C21476) + C21479 - C21480 - C21481) * C81009 *
               C26924 +
           (C22376 - (C22377 + C22378) + C22379 - C22380 - C22381) * C81009 *
               C26925) *
              C80628 * C80601 +
          ((C21484 + C21483 - C21482 - C21485 + C21486 + C21487) * C81009 *
               C26924 +
           (C1392 * C78528 + C1600 * C80722 - C4674 * C78520 - C4905 * C80729 +
            (C490 * C10971 + C81012 * C11593) * C78534 +
            (C490 * C11173 + C81012 * C11805) * C20867) *
               C81009 * C26925) *
              C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C39032 + C39033 - C39034 - C39035 + C39036 + C39037 -
                      C39038 - C39039) *
                         C26925) *
                        C81012 * C17817 +
                    (((C26926 * C1682 + C81009 * C1690) * C13176 -
                      ((C26926 * C1693 + C81009 * C1707) * C81010 +
                       (C26926 * C1684 + C81009 * C1694) * C13175) +
                      (C26926 * C1692 + C81009 * C1706) * C81000 -
                      (C26926 * C1683 + C81009 * C1691) * C13177 -
                      (C26926 * C1695 + C81009 * C1708) * C80984 +
                      (C26926 * C1685 + C81009 * C1696) * C13178 +
                      (C26926 * C1697 + C81009 * C1709) * C80966) *
                         C26924 +
                     (C30062 * C13176 - (C30063 * C81010 + C30064 * C13175) +
                      C30065 * C81000 - C30066 * C13177 - C30067 * C80984 +
                      (C26926 * C3982 + C81009 * C3989) * C13178 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C26925) *
                        C81012 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C39642 + C39643 - C39644 - C39645) * C26925) *
                         C81012 * C17817 +
                     (((C26926 * C1682 + C81009 * C1690) * C13806 -
                       ((C26926 * C1693 + C81009 * C1707) * C13799 +
                        (C26926 * C1684 + C81009 * C1694) * C13805) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C40292 - (C40293 + C40294) + C40295) * C26925) *
                         C81012 * C80726) *
                        C81003 +
                    (((C39644 - (C39643 + C39642) + C39645) * C26924 +
                      (C39646 - (C39647 + C39648) + C39649) * C26925) *
                         C81012 * C17817 +
                     ((C40294 + C40293 - C40292 - C40295) * C26924 +
                      (C42780 + C42781 - C42782 - C42783) * C26925) *
                         C81012 * C80726) *
                        C80988 +
                    (((C39648 + C39647 - C39646 - C39649) * C26924 +
                      (C39650 + C39651 - C39652 - C39653) * C26925) *
                         C81012 * C17817 +
                     ((C42782 - (C42781 + C42780) + C42783) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C13806 -
                       (C34488 * C13799 + C34489 * C13805) +
                       (C26926 * C8504 + C81009 * C8506) * C80598) *
                          C26925) *
                         C81012 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C81010 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C81000 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C26924 +
            (C27368 * C165 + C27478 * C80628) * C26925) *
               C81012 * C80984 -
           ((C28882 * C80628 + C28810 * C165) * C26925 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C26924) *
               C81012 * C80966) *
              C17817 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            (C30062 * C165 + C30179 * C80628) * C26925) *
               C81012 * C81000 -
           ((C30178 * C80628 + C30064 * C165) * C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C81010 -
           ((C30180 * C80628 + C30066 * C165) * C26925 +
            ((C26926 * C1789 + C81009 * C1797) * C80628 +
             (C26926 * C1683 + C81009 * C1691) * C165) *
                C26924) *
               C81012 * C80984 +
           (((C26926 * C1685 + C81009 * C1696) * C165 +
             (C26926 * C1791 + C81009 * C1799) * C80628) *
                C26924 +
            ((C26926 * C3982 + C81009 * C3989) * C165 +
             (C26926 * C4096 + C81009 * C4100) * C80628) *
                C26925) *
               C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C852 +
             (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
             C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
                C26924 +
            (C27364 * C852 + C27474 * C81003 - C27372 * C853 - C27475 * C80988 +
             C31658 * C854 + C31714 * C80962) *
                C26925) *
               C81012 * C13799 +
           ((C27366 * C853 -
             ((C26926 * C167 + C81009 * C173) * C81003 +
              (C26926 * C100 + C81009 * C106) * C852) +
             C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
                C26924 +
            (C27370 * C853 - (C27476 * C81003 + C27366 * C852) +
             C27477 * C80988 - C32940 * C854 - C33012 * C80962) *
                C26925) *
               C81012 * C80598) *
              C17817 +
          (((C30064 * C853 -
             ((C26926 * C1790 + C81009 * C1798) * C81003 +
              (C26926 * C1684 + C81009 * C1694) * C852) +
             C30178 * C80988 - C32160 * C854 - C32252 * C80962) *
                C26924 +
            (C32160 * C853 - (C30178 * C81003 + C30064 * C852) +
             C32252 * C80988 - C34489 * C854 - C34562 * C80962) *
                C26925) *
               C81012 * C13799 +
           (((C26926 * C1682 + C81009 * C1690) * C852 +
             (C26926 * C1788 + C81009 * C1796) * C81003 - C30062 * C853 -
             C30179 * C80988 + C33600 * C854 + C33704 * C80962) *
                C26924 +
            (C30062 * C852 + C30179 * C81003 - C33600 * C853 - C33704 * C80988 +
             (C26926 * C8500 + C81009 * C8502) * C854 +
             (C26926 * C8574 + C81009 * C8576) * C80962) *
                C26925) *
               C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      (C26926 * C1684 + C81009 * C1694) * C17952 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C27364 * C17951 + C27572 * C17817 - C30064 * C17952 -
                      C30294 * C80726) *
                         C26925) *
                        C81012 * C80628 * C81010 +
                    (((C26926 * C1682 + C81009 * C1690) * C17952 -
                      ((C26926 * C222 + C81009 * C228) * C17817 +
                       (C26926 * C100 + C81009 * C106) * C17951) +
                      (C26926 * C1881 + C81009 * C1889) * C80726) *
                         C26924 +
                     (C30062 * C17952 - (C27574 * C17817 + C27366 * C17951) +
                      C30295 * C80726) *
                         C26925) *
                        C81012 * C80628 * C81000 +
                    (((C26926 * C101 + C81009 * C109) * C17951 +
                      (C26926 * C223 + C81009 * C229) * C17817 -
                      (C26926 * C1683 + C81009 * C1691) * C17952 -
                      (C26926 * C1885 + C81009 * C1893) * C80726) *
                         C26924 +
                     (C27368 * C17951 + C27576 * C17817 - C30066 * C17952 -
                      C30296 * C80726) *
                         C26925) *
                        C81012 * C80628 * C80984 +
                    (((C26926 * C1685 + C81009 * C1696) * C17952 -
                      ((C26926 * C224 + C81009 * C230) * C17817 +
                       (C26926 * C102 + C81009 * C111) * C17951) +
                      (C26926 * C1887 + C81009 * C1895) * C80726) *
                         C26924 +
                     ((C26926 * C3982 + C81009 * C3989) * C17952 -
                      (C28952 * C17817 + C28810 * C17951) +
                      (C26926 * C4202 + C81009 * C4206) * C80726) *
                         C26925) *
                        C81012 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       (C26926 * C1684 + C81009 * C1694) * C17952 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C44460 + C44461 - C44462 - C44463) * C26925) *
                         C81012 * C81003 +
                     ((C44462 - (C44461 + C44460) + C44463) * C26924 +
                      (C44464 - (C44465 + C44466) + C44467) * C26925) *
                         C81012 * C80988 +
                     ((C44466 + C44465 - C44464 - C44467) * C26924 +
                      (C31658 * C17951 + C31766 * C17817 - C34489 * C17952 -
                       C34636 * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C13799 +
                    ((((C26926 * C1682 + C81009 * C1690) * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C44468 - (C44469 + C44470) + C44471) * C26925) *
                         C81012 * C81003 +
                     ((C44470 + C44469 - C44468 - C44471) * C26924 +
                      (C44472 + C44473 - C44474 - C44475) * C26925) *
                         C81012 * C80988 +
                     ((C44474 - (C44473 + C44472) + C44475) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C17952 -
                       (C33082 * C17817 + C32940 * C17951) +
                       (C26926 * C8644 + C81009 * C8646) * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C13175 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C81010 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C13176 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C81000 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C13177 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80984 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C13178 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C17817 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C13176 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C81010 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C13175) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C81000 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C13177 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C80984 +
           (C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C13178 +
           (C27053 * C1697 + C26924 * C1982 + C27054 * C3990 + C26925 * C4312) *
               C80966) *
              C81012 * C81009 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C13805 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C13799 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C13806 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C13806 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C13799 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C13805) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C81003 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C13806 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C13799 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C13805) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C13805 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C13799 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C13806 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80988 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C13805 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C13799 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C13806 -
            (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
                C80598) *
               C81012 * C81009 * C17817 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C13806 -
            ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
              C26924 * C6416) *
                 C13799 +
             (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
              C26924 * C6410) *
                 C13805) +
            (C27053 * C6147 + C26924 * C6415 + C27054 * C8504 +
             C26925 * C8716) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C81010 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C81000 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C80984 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C80628 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C165) *
               C81012 * C81009 * C80966) *
              C17817 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C81000 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C81010 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C80984 +
           ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 +
             C26925 * C4308) *
                C165 +
            (C27053 * C1791 + C26924 * C2088 + C27054 * C4096 +
             C26925 * C4426) *
                C80628) *
               C81012 * C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C852 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C81003 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C853 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80988 +
            (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C854 +
            (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
                C80962) *
               C81012 * C81009 * C13799 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C853 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C81003 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C852) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80988 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C854 -
            (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
                C80962) *
               C81012 * C81009 * C80598) *
              C17817 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C853 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C81003 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C852) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80988 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C854 -
            (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 +
             C26924 * C6493) *
                C80962) *
               C81012 * C81009 * C13799 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C852 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C81003 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C853 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80988 +
            (C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C854 +
            (C27053 * C6235 + C26924 * C6494 + C27054 * C8574 +
             C26925 * C8784) *
                C80962) *
               C81012 * C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C17951 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C17817 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C17952 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C80628 * C81010 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C17952 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C17817 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C17951) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C80726) *
              C81012 * C81009 * C80628 * C81000 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C17951 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C17817 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C17952 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C80726) *
              C81012 * C81009 * C80628 * C80984 +
          ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C17952 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C17817 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C17951) +
           (C27053 * C1887 + C26924 * C2193 + C27054 * C4202 + C26925 * C4542) *
               C80726) *
              C81012 * C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C17951 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C17817 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C17952 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C81003 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C17952 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C17817 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C17951) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80988 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C17951 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C17817 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C17952 -
            (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 +
             C26924 * C6575) *
                C80726) *
               C81012 * C81009 * C80962) *
              C13799 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C17952 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C17817 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C17951) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C81003 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C17951 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C17817 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C17952 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80988 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C17952 -
            ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 +
              C26924 * C1258) *
                 C17817 +
             (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
              C26924 * C1040) *
                 C17951) +
            (C27053 * C6323 + C26924 * C6577 + C27054 * C8644 +
             C26925 * C8852) *
                C80726) *
               C81012 * C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C13175 +
                      (C490 * C107 + C81012 * C497) * C81010 - C520 * C13176 -
                      C521 * C81000 + C522 * C13177 + C523 * C80984 -
                      C524 * C13178 - C525 * C80966) *
                         C81009 * C26924 +
                     (C39436 + C39437 - C39438 - C39439 + C39440 + C39441 -
                      C39442 - C39443) *
                         C81009 * C26925) *
                        C17817 +
                    ((C2326 * C13176 -
                      ((C490 * C1693 + C81012 * C2301) * C81010 +
                       (C490 * C1684 + C81012 * C2294) * C13175) +
                      C2327 * C81000 - C2328 * C13177 - C2329 * C80984 +
                      C3726 * C13178 + C3727 * C80966) *
                         C81009 * C26924 +
                     (C4672 * C13176 - (C30700 * C81010 + C30701 * C13175) +
                      C4673 * C81000 - C4674 * C13177 - C4675 * C80984 +
                      (C490 * C3982 + C81012 * C4658) * C13178 +
                      (C490 * C3990 + C81012 * C4662) * C80966) *
                         C81009 * C26925) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C13805 +
                       (C490 * C107 + C81012 * C497) * C13799 - C520 * C13806 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C40050 + C40051 - C40052 - C40053) * C81009 * C26925) *
                         C17817 +
                     ((C2326 * C13806 -
                       ((C490 * C1693 + C81012 * C2301) * C13799 +
                        (C490 * C1684 + C81012 * C2294) * C13805) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C40894 - (C40895 + C40896) + C40897) * C81009 * C26925) *
                         C80726) *
                        C81003 +
                    (((C40052 - (C40051 + C40050) + C40053) * C81009 * C26924 +
                      (C40054 - (C40055 + C40056) + C40057) * C81009 * C26925) *
                         C17817 +
                     ((C40896 + C40895 - C40894 - C40897) * C81009 * C26924 +
                      (C43372 + C43373 - C43374 - C43375) * C81009 * C26925) *
                         C80726) *
                        C80988 +
                    (((C40056 + C40055 - C40054 - C40057) * C81009 * C26924 +
                      (C40058 + C40059 - C40060 - C40061) * C81009 * C26925) *
                         C17817 +
                     ((C43374 - (C43373 + C43372) + C43375) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C13806 -
                       (C34912 * C13799 + C34913 * C13805) +
                       (C490 * C8504 + C81012 * C8922) * C80598) *
                          C81009 * C26925) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C165 +
                       (C490 * C166 + C81012 * C569) * C80628) *
                          C81009 * C26924 +
                      (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
                         C81010 -
                     ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
                      (C592 + C576) * C81009 * C26924) *
                         C81000 +
                     ((C581 + C593) * C81009 * C26924 +
                      (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
                         C80984 -
                     ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
                      (C594 + C582) * C81009 * C26924) *
                         C80966) *
                        C17817 +
                    (((C2416 + C2432) * C81009 * C26924 +
                      (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
                         C81000 -
                     ((C30804 * C80628 + C30701 * C165) * C81009 * C26925 +
                      ((C490 * C1790 + C81012 * C2409) * C80628 +
                       (C490 * C1684 + C81012 * C2294) * C165) *
                          C81009 * C26924) *
                         C81010 -
                     ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
                      (C2433 + C2419) * C81009 * C26924) *
                         C80984 +
                     ((C3797 + C3799) * C81009 * C26924 +
                      ((C490 * C3982 + C81012 * C4658) * C165 +
                       (C490 * C4096 + C81012 * C4776) * C80628) *
                          C81009 * C26925) *
                         C80966) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C852 +
                       (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
                       C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
                          C81009 * C26924 +
                      (C27896 * C852 + C27982 * C81003 - C27899 * C853 -
                       C27983 * C80988 + C31956 * C854 + C32011 * C80962) *
                          C81009 * C26925) *
                         C13799 +
                     ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) *
                          C81009 * C26924 +
                      (C1394 * C853 - (C1496 * C81003 + C1390 * C852) +
                       C1497 * C80988 - C7340 * C854 - C7418 * C80962) *
                          C81009 * C26925) *
                         C80598) *
                        C17817 +
                    (((C30701 * C853 -
                       ((C490 * C1790 + C81012 * C2409) * C81003 +
                        (C490 * C1684 + C81012 * C2294) * C852) +
                       C30804 * C80988 - C32670 * C854 - C32761 * C80962) *
                          C81009 * C26924 +
                      (C32670 * C853 - (C30804 * C81003 + C30701 * C852) +
                       C32761 * C80988 - C34913 * C854 - C34985 * C80962) *
                          C81009 * C26925) *
                         C13799 +
                     ((C19174 + C19173 - C19172 - C19175 + C19176 + C19177) *
                          C81009 * C26924 +
                      (C4672 * C852 + C4788 * C81003 - C8218 * C853 -
                       C8326 * C80988 + (C490 * C8500 + C81012 * C8920) * C854 +
                       (C490 * C8574 + C81012 * C8990) * C80962) *
                          C81009 * C26925) *
                         C80598) *
                        C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C17951 +
                      (C490 * C221 + C81012 * C637) * C17817 -
                      (C490 * C1684 + C81012 * C2294) * C17952 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C27896 * C17951 + C28064 * C17817 - C30701 * C17952 -
                      C30908 * C80726) *
                         C81009 * C26925) *
                        C80628 * C81010 +
                    ((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                     (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                        C80628 * C81000 +
                    ((C18368 + C18367 - C18366 - C18369) * C81009 * C26924 +
                     (C20788 + C20789 - C20790 - C20791) * C81009 * C26925) *
                        C80628 * C80984 +
                    ((C18372 - (C18371 + C18370) + C18373) * C81009 * C26924 +
                     ((C490 * C3982 + C81012 * C4658) * C17952 -
                      (C3214 * C17817 + C3060 * C17951) +
                      (C490 * C4202 + C81012 * C4892) * C80726) *
                         C81009 * C26925) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C17951 +
                       (C490 * C221 + C81012 * C637) * C17817 -
                       (C490 * C1684 + C81012 * C2294) * C17952 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C45064 + C45065 - C45066 - C45067) * C81009 * C26925) *
                         C81003 +
                     ((C45066 - (C45065 + C45064) + C45067) * C81009 * C26924 +
                      (C45068 - (C45069 + C45070) + C45071) * C81009 * C26925) *
                         C80988 +
                     ((C45070 + C45069 - C45068 - C45071) * C81009 * C26924 +
                      (C31956 * C17951 + C32062 * C17817 - C34913 * C17952 -
                       C35058 * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C13799 +
                    (((C18364 - (C18363 + C18362) + C18365) * C81009 * C26924 +
                      (C19276 - (C19277 + C19278) + C19279) * C81009 * C26925) *
                         C81003 +
                     ((C19278 + C19277 - C19276 - C19279) * C81009 * C26924 +
                      (C19280 + C19281 - C19282 - C19283) * C81009 * C26925) *
                         C80988 +
                     ((C19282 - (C19281 + C19280) + C19283) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C17952 -
                       (C7490 * C17817 + C7340 * C17951) +
                       (C490 * C8644 + C81012 * C9058) * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C28800 + C28801 - C28802 - C28803 + C28804 + C28805 -
                      C28812 - C28813) *
                         C26925) *
                        C81012 * C80639 * C80932 +
                    ((C28802 - (C28801 + C28800) + C28803 - C28804 - C28805 +
                      C28812 + C28813) *
                         C26924 +
                     (C27370 * C2614 - (C27371 * C2607 + C27372 * C2613) +
                      C27373 * C2608 - C27374 * C2615 - C27375 * C2609 +
                      (C26926 * C753 + C81009 * C768) * C2616 +
                      (C26926 * C769 + C81009 * C777) * C80966) *
                         C26925) *
                        C81012 * C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C78279 +
                      (C26926 * C107 + C81009 * C117) * C80916 -
                      (C26926 * C100 + C81009 * C106) * C78260 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C26924 +
                     (C32926 + C32927 - C32928 - C32929) * C26925) *
                        C81012 * C80639 * C6893 +
                    ((C32928 - (C32927 + C32926) + C32929) * C26924 +
                     (C32930 - (C32931 + C32932) + C32933) * C26925) *
                        C81012 * C80639 * C6894 +
                    ((C32932 + C32931 - C32930 - C32933) * C26924 +
                     (C32934 + C32935 - C32942 - C32943) * C26925) *
                        C81012 * C80639 * C6895 +
                    ((C32942 - (C32935 + C32934) + C32943) * C26924 +
                     ((C26926 * C5661 + C81009 * C5667) * C78260 -
                      (C31660 * C80916 + C31661 * C78279) +
                      (C26926 * C5669 + C81009 * C5673) * C80598) *
                         C26925) *
                        C81012 * C80639 * C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2687 +
                      (C26926 * C166 + C81009 * C172) * C80932 -
                      C27364 * C2688 - C27474 * C80686) *
                         C26924 +
                     (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                      C27475 * C80686) *
                         C26925) *
                        C81012 * C2607 +
                    ((C27366 * C2688 -
                      ((C26926 * C167 + C81009 * C173) * C80932 +
                       (C26926 * C100 + C81009 * C106) * C2687) +
                      C27476 * C80686) *
                         C26924 +
                     (C27370 * C2688 - (C27476 * C80932 + C27366 * C2687) +
                      C27477 * C80686) *
                         C26925) *
                        C81012 * C2608 +
                    (((C26926 * C101 + C81009 * C109) * C2687 +
                      (C26926 * C168 + C81009 * C174) * C80932 -
                      C27368 * C2688 - C27478 * C80686) *
                         C26924 +
                     (C27368 * C2687 + C27478 * C80932 - C27374 * C2688 -
                      C27479 * C80686) *
                         C26925) *
                        C81012 * C2609 +
                    ((C28810 * C2688 -
                      ((C26926 * C169 + C81009 * C175) * C80932 +
                       (C26926 * C102 + C81009 * C111) * C2687) +
                      C28882 * C80686) *
                         C26924 +
                     ((C26926 * C753 + C81009 * C768) * C2688 -
                      (C28882 * C80932 + C28810 * C2687) +
                      (C26926 * C862 + C81009 * C870) * C80686) *
                         C26925) *
                        C81012 * C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C6969 + C27474 * C6893 - C27372 * C6970 -
                      C27475 * C6894 + C31658 * C6971 + C31714 * C6895 -
                      C31661 * C6972 - C31715 * C80972) *
                         C26925) *
                        C81012 * C80916 +
                    ((C27366 * C6970 -
                      ((C26926 * C167 + C81009 * C173) * C6893 +
                       (C26926 * C100 + C81009 * C106) * C6969) +
                      C27476 * C6894 - C27370 * C6971 - C27477 * C6895 +
                      C32940 * C6972 + C33012 * C80972) *
                         C26924 +
                     (C27370 * C6970 - (C27476 * C6893 + C27366 * C6969) +
                      C27477 * C6894 - C32940 * C6971 - C33012 * C6895 +
                      (C26926 * C5661 + C81009 * C5667) * C6972 +
                      (C26926 * C5724 + C81009 * C5728) * C80972) *
                         C26925) *
                        C81012 * C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q));
    d2eexz[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C26924 +
                      (C27554 + C27578) * C26925) *
                         C81012 * C80932 -
                     ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                         C81012 * C80686) *
                        C2607 +
                    (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                         C81012 * C80686 -
                     ((C27580 + C27560) * C26925 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C26924) *
                         C81012 * C80932) *
                        C2608 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C26924 +
                      (C27566 + C27582) * C26925) *
                         C81012 * C80932 -
                     ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) *
                         C81012 * C80686) *
                        C2609 +
                    (((C28949 + C28953) * C26924 +
                      ((C26926 * C753 + C81009 * C768) * C220 +
                       (C26926 * C952 + C81009 * C960) * C80639) *
                          C26925) *
                         C81012 * C80686 -
                     ((C28953 + C28949) * C26925 +
                      ((C26926 * C224 + C81009 * C230) * C80639 +
                       (C26926 * C102 + C81009 * C111) * C220) *
                          C26924) *
                         C81012 * C80932) *
                        C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C26924 +
                      (C27554 + C27578) * C26925) *
                         C81012 * C6893 -
                     ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                         C81012 * C6894 +
                     ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) *
                         C81012 * C6895 -
                     ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) *
                         C81012 * C80972) *
                        C80916 +
                    (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                         C81012 * C6894 -
                     ((C27580 + C27560) * C26925 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C26924) *
                         C81012 * C6893 -
                     ((C33083 + C33081) * C26925 + (C27581 + C27563) * C26924) *
                         C81012 * C6895 +
                     ((C33081 + C33083) * C26924 +
                      ((C26926 * C5661 + C81009 * C5667) * C220 +
                       (C26926 * C5774 + C81009 * C5778) * C80639) *
                          C26925) *
                         C81012 * C80972) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C2613 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C2607 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C2614 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C2608 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C2615 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C2609 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C2616 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C80639 * C80932 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C2614 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C2607 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C2613) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C2608 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C2615 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C2609 +
           (C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C2616 +
           (C27053 * C761 + C26924 * C1046 + C27054 * C769 + C26925 * C1050) *
               C80966) *
              C81012 * C81009 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C78279 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80916 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C78260 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80598) *
              C81012 * C81009 * C80639 * C6893 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C78260 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80916 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C78279) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C6894 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C78279 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80916 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C78260 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80598) *
              C81012 * C81009 * C80639 * C6895 +
          ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C78260 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C80916 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C78279) +
           (C27053 * C5662 + C26924 * C5825 + C27054 * C5669 + C26925 * C5828) *
               C80598) *
              C81012 * C81009 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C2687 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80932 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C2688 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80686) *
              C81012 * C81009 * C2607 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C2688 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80932 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C2687) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80686) *
              C81012 * C81009 * C2608 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C2687 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C80932 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C2688 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80686) *
              C81012 * C81009 * C2609 +
          ((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
               C2688 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C80932 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C2687) +
           (C27053 * C861 + C26924 * C1155 + C27054 * C862 + C26925 * C1156) *
               C80686) *
              C81012 * C81009 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C6969 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C6893 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C6970 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C6894 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C6971 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C6895 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C6972 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C80916 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C6970 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C6893 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C6969) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C6894 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C6971 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C6895 +
           (C27053 * C5658 + C26924 * C5821 + C27054 * C5661 + C26925 * C5824) *
               C6972 +
           (C27053 * C5721 + C26924 * C5873 + C27054 * C5724 + C26925 * C5874) *
               C80972) *
              C81012 * C81009 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C80932 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80686) *
              C2607 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C80932) *
              C2608 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C80932 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80686) *
              C2609 +
          (((C27053 * C749 + C26924 * C1038 + C27054 * C753 + C26925 * C1042) *
                C220 +
            (C27053 * C951 + C26924 * C1261 + C27054 * C952 + C26925 * C1262) *
                C80639) *
               C81012 * C81009 * C80686 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C80639 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C220) *
               C81012 * C81009 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C6893 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C6894 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C6895 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C80639 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C220) *
               C81012 * C81009 * C80972) *
              C80916 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C6894 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C6893 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C6895 +
           ((C27053 * C5658 + C26924 * C5821 + C27054 * C5661 +
             C26925 * C5824) *
                C220 +
            (C27053 * C5771 + C26924 * C5917 + C27054 * C5774 +
             C26925 * C5920) *
                C80639) *
               C81012 * C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C2613 +
                      (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
                      C521 * C2608 + C522 * C2615 + C523 * C2609 -
                      C524 * C2616 - C525 * C80966) *
                         C81009 * C26924 +
                     (C29218 + C29219 - C29220 - C29221 + C29222 + C29223 -
                      C29224 - C29225) *
                         C81009 * C26925) *
                        C80639 * C80932 +
                    ((C29220 - (C29219 + C29218) + C29221 - C29222 - C29223 +
                      C29224 + C29225) *
                         C81009 * C26924 +
                     (C1394 * C2614 - (C27898 * C2607 + C27899 * C2613) +
                      C1395 * C2608 - C1396 * C2615 - C1397 * C2609 +
                      (C490 * C753 + C81012 * C1364) * C2616 +
                      (C490 * C769 + C81012 * C1372) * C80966) *
                         C81009 * C26925) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C78279 +
                      (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                      C521 * C80598) *
                         C81009 * C26924 +
                     (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                        C80639 * C6893 +
                    ((C33350 - (C33349 + C33348) + C33351) * C81009 * C26924 +
                     (C33352 - (C33353 + C33354) + C33355) * C81009 * C26925) *
                        C80639 * C6894 +
                    ((C33354 + C33353 - C33352 - C33355) * C81009 * C26924 +
                     (C33356 + C33357 - C33358 - C33359) * C81009 * C26925) *
                        C80639 * C6895 +
                    ((C33358 - (C33357 + C33356) + C33359) * C81009 * C26924 +
                     ((C490 * C5661 + C81012 * C5966) * C78260 -
                      (C31958 * C80916 + C31959 * C78279) +
                      (C490 * C5669 + C81012 * C5970) * C80598) *
                         C81009 * C26925) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C2687 +
            (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
            C27982 * C80686) *
               C81009 * C26924 +
           (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
            C27983 * C80686) *
               C81009 * C26925) *
              C2607 +
          ((C3131 - (C3130 + C3129) + C3132) * C81009 * C26924 +
           (C1394 * C2688 - (C1496 * C80932 + C1390 * C2687) + C1497 * C80686) *
               C81009 * C26925) *
              C2608 +
          ((C3135 + C3134 - C3133 - C3136) * C81009 * C26924 +
           (C1392 * C2687 + C1498 * C80932 - C1396 * C2688 - C1499 * C80686) *
               C81009 * C26925) *
              C2609 +
          ((C3139 - (C3138 + C3137) + C3143) * C81009 * C26924 +
           ((C490 * C753 + C81012 * C1364) * C2688 -
            (C3142 * C80932 + C3060 * C2687) +
            (C490 * C862 + C81012 * C1478) * C80686) *
               C81009 * C26925) *
              C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 - C27896 * C6970 -
            C27982 * C6894 + C27899 * C6971 + C27983 * C6895 - C31956 * C6972 -
            C32011 * C80972) *
               C81009 * C26924 +
           (C27896 * C6969 + C27982 * C6893 - C27899 * C6970 - C27983 * C6894 +
            C31956 * C6971 + C32011 * C6895 - C31959 * C6972 -
            C32012 * C80972) *
               C81009 * C26925) *
              C80916 +
          ((C7411 - (C7410 + C7409) + C7412 - C7413 - C7414 + C7415 + C7419) *
               C81009 * C26924 +
           (C1394 * C6970 - (C1496 * C6893 + C1390 * C6969) + C1497 * C6894 -
            C7340 * C6971 - C7418 * C6895 +
            (C490 * C5661 + C81012 * C5966) * C6972 +
            (C490 * C5724 + C81012 * C6016) * C80972) *
               C81009 * C26925) *
              C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C80932 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C80686) *
                        C2607 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C80686 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C80932) *
                        C2608 +
                    (((C649 + C661) * C81009 * C26924 +
                      (C1592 + C1604) * C81009 * C26925) *
                         C80932 -
                     ((C1605 + C1597) * C81009 * C26925 +
                      (C1604 + C1592) * C81009 * C26924) *
                         C80686) *
                        C2609 +
                    (((C3213 + C3215) * C81009 * C26924 +
                      ((C490 * C753 + C81012 * C1364) * C220 +
                       (C490 * C952 + C81012 * C1584) * C80639) *
                          C81009 * C26925) *
                         C80686 -
                     ((C3215 + C3213) * C81009 * C26925 +
                      (C662 + C650) * C81009 * C26924) *
                         C80932) *
                        C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C6893 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C6894 +
                     ((C28063 + C28067) * C81009 * C26924 +
                      (C32056 + C32064) * C81009 * C26925) *
                         C6895 -
                     ((C32065 + C32061) * C81009 * C26925 +
                      (C32064 + C32056) * C81009 * C26924) *
                         C80972) *
                        C80916 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C6894 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C6893 -
                     ((C7491 + C7489) * C81009 * C26925 +
                      (C1603 + C1589) * C81009 * C26924) *
                         C6895 +
                     ((C7489 + C7491) * C81009 * C26924 +
                      ((C490 * C5661 + C81012 * C5966) * C220 +
                       (C490 * C5774 + C81012 * C6062) * C80639) *
                          C81009 * C26925) *
                         C80972) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C743 +
             (C26926 * C107 + C81009 * C117) * C737 -
             (C26926 * C100 + C81009 * C106) * C744 -
             (C26926 * C108 + C81009 * C118) * C738 +
             (C26926 * C101 + C81009 * C109) * C745 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C26924 +
            (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
               C81012 * C80933 +
           (((C26926 * C1682 + C81009 * C1690) * C744 -
             ((C26926 * C1693 + C81009 * C1707) * C737 +
              (C26926 * C1684 + C81009 * C1694) * C743) +
             (C26926 * C1692 + C81009 * C1706) * C738 -
             (C26926 * C1683 + C81009 * C1691) * C745 -
             (C26926 * C1695 + C81009 * C1708) * C80954) *
                C26924 +
            (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) * C26925) *
               C81012 * C80726) *
              C80932 +
          (((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C26924 +
            (C27382 - (C27383 + C27384) + C27385 - C27386 - C27387) * C26925) *
               C81012 * C80933 +
           ((C30070 + C30069 - C30068 - C30071 + C30072 + C30073) * C26924 +
            ((C26926 * C6140 + C81009 * C6150) * C743 +
             (C26926 * C6148 + C81009 * C6158) * C737 -
             (C26926 * C6139 + C81009 * C6149) * C744 -
             (C26926 * C6147 + C81009 * C6157) * C738 +
             (C26926 * C7589 + C81009 * C7590) * C745 +
             (C26926 * C7591 + C81009 * C7592) * C80954) *
                C26925) *
               C81012 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C80933 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C80726) *
              C6893 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C80726 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C80933) *
              C6894 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C80933 -
           ((C34490 + C34491) * C26925 + (C32167 + C32166) * C26924) * C81012 *
               C80726) *
              C6895 +
          (((C34491 + C34490) * C26924 +
            ((C26926 * C34479 + C81009 * C34480) * C5657 +
             (C26926 * C34481 + C81009 * C34482) * C80588) *
                C26925) *
               C81012 * C80726 -
           ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
               C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[46] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C26924 +
                      (C27364 * C2687 + C27474 * C80932 - C27372 * C2688 -
                       C27475 * C80686) *
                          C26925) *
                         C81012 * C737 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C26924 +
                      (C27370 * C2688 - (C27476 * C80932 + C27366 * C2687) +
                       C27477 * C80686) *
                          C26925) *
                         C81012 * C738 +
                     (((C26926 * C101 + C81009 * C109) * C2687 +
                       (C26926 * C168 + C81009 * C174) * C80932 -
                       C27368 * C2688 - C27478 * C80686) *
                          C26924 +
                      (C27368 * C2687 + C27478 * C80932 - C27374 * C2688 -
                       C27479 * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C80933 +
                    (((C30064 * C2688 -
                       ((C26926 * C1790 + C81009 * C1798) * C80932 +
                        (C26926 * C1684 + C81009 * C1694) * C2687) +
                       C30178 * C80686) *
                          C26924 +
                      ((C26926 * C6140 + C81009 * C6150) * C2688 -
                       (C30178 * C80932 + C30064 * C2687) +
                       (C26926 * C6236 + C81009 * C6242) * C80686) *
                          C26925) *
                         C81012 * C737 +
                     (((C26926 * C1682 + C81009 * C1690) * C2687 +
                       (C26926 * C1788 + C81009 * C1796) * C80932 -
                       C30062 * C2688 - C30179 * C80686) *
                          C26924 +
                      (C30062 * C2687 + C30179 * C80932 -
                       (C26926 * C6139 + C81009 * C6149) * C2688 -
                       (C26926 * C6235 + C81009 * C6241) * C80686) *
                          C26925) *
                         C81012 * C738 +
                     ((C30066 * C2688 -
                       ((C26926 * C1789 + C81009 * C1797) * C80932 +
                        (C26926 * C1683 + C81009 * C1691) * C2687) +
                       C30180 * C80686) *
                          C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C2688 -
                       (C30180 * C80932 + C30066 * C2687) +
                       (C26926 * C7691 + C81009 * C7692) * C80686) *
                          C26925) *
                         C81012 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C26924 +
                     (C27364 * C6969 + C27474 * C6893 - C27372 * C6970 -
                      C27475 * C6894 + C31658 * C6971 + C31714 * C6895 -
                      C31661 * C6972 - C31715 * C80972) *
                         C26925) *
                        C81012 * C80588 * C80933 +
                    ((C30064 * C6970 -
                      ((C26926 * C1790 + C81009 * C1798) * C6893 +
                       (C26926 * C1684 + C81009 * C1694) * C6969) +
                      C30178 * C6894 - C32160 * C6971 - C32252 * C6895 +
                      C34489 * C6972 + C34562 * C80972) *
                         C26924 +
                     (C32160 * C6970 - (C30178 * C6893 + C30064 * C6969) +
                      C32252 * C6894 - C34489 * C6971 - C34562 * C6895 +
                      (C26926 * C34479 + C81009 * C34480) * C6972 +
                      (C26926 * C34557 + C81009 * C34558) * C80972) *
                         C26925) *
                        C81012 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[46] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       (C26926 * C1684 + C81009 * C1694) * C3422 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C30279 + C30280 - C30281 - C30297) * C26925) *
                         C81012 * C80932 +
                     ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                      ((C26926 * C6140 + C81009 * C6150) * C3422 -
                       (C27573 * C80933 + C27372 * C3421) +
                       (C26926 * C6324 + C81009 * C6330) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C737 +
                    ((((C26926 * C1682 + C81009 * C1690) * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C30284 - (C30285 + C30286) + C30298) * C26925) *
                         C81012 * C80932 +
                     ((C30286 + C30285 - C30284 - C30298) * C26924 +
                      (C27370 * C3421 + C27575 * C80933 -
                       (C26926 * C6139 + C81009 * C6149) * C3422 -
                       (C26926 * C6323 + C81009 * C6329) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C738 +
                    ((((C26926 * C101 + C81009 * C109) * C3421 +
                       (C26926 * C223 + C81009 * C229) * C80933 -
                       (C26926 * C1683 + C81009 * C1691) * C3422 -
                       (C26926 * C1885 + C81009 * C1893) * C80726) *
                          C26924 +
                      (C30289 + C30290 - C30291 - C30299) * C26925) *
                         C81012 * C80932 +
                     ((C30291 - (C30290 + C30289) + C30299) * C26924 +
                      ((C26926 * C7589 + C81009 * C7590) * C3422 -
                       (C27577 * C80933 + C27374 * C3421) +
                       (C26926 * C7791 + C81009 * C7792) * C80726) *
                          C26925) *
                         C81012 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      (C26926 * C1684 + C81009 * C1694) * C3422 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C30279 + C30280 - C30281 - C30297) * C26925) *
                        C81012 * C6893 +
                    ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                     (C33803 - (C33804 + C33805) + C33806) * C26925) *
                        C81012 * C6894 +
                    ((C33805 + C33804 - C33803 - C33806) * C26924 +
                     (C34631 + C34632 - C34633 - C34637) * C26925) *
                        C81012 * C6895 +
                    ((C34633 - (C34632 + C34631) + C34637) * C26924 +
                     ((C26926 * C34479 + C81009 * C34480) * C3422 -
                      (C31767 * C80933 + C31661 * C3421) +
                      (C26926 * C34628 + C81009 * C34629) * C80726) *
                         C26925) *
                        C81012 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C743 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C737 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C744 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C738 +
            (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C745 +
            (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
                C80954) *
               C81012 * C81009 * C80933 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C744 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C737 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C743) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C738 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C745 -
            (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 +
             C26924 * C1981) *
                C80954) *
               C81012 * C81009 * C80726) *
              C80932 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C744 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C737 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C743) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C738 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C745 -
            (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
                C80954) *
               C81012 * C81009 * C80933 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C743 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C737 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C744 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C738 +
            (C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C745 +
            (C27053 * C3988 + C26924 * C4311 + C27054 * C7591 +
             C26925 * C7892) *
                C80954) *
               C81012 * C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C80933 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C80726) *
              C6893 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C80933) *
              C6894 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C80933 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C80726) *
              C6895 +
          (((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
             C26925 * C34703) *
                C5657 +
            (C27053 * C8503 + C26924 * C8715 + C27054 * C34481 +
             C26925 * C34704) *
                C80588) *
               C81012 * C81009 * C80726 -
           ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 +
             C26924 * C5826) *
                C80588 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C5657) *
               C81012 * C81009 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C2687 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80932 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C2688 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C80686) *
               C81012 * C81009 * C737 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C2688 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C80932 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C2687) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C80686) *
               C81012 * C81009 * C738 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C2687 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80932 -
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C2688 -
            (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
                C80686) *
               C81012 * C81009 * C80954) *
              C80933 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C2688 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C80932 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C2687) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C80686) *
               C81012 * C81009 * C737 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C2687 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80932 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C2688 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C80686) *
               C81012 * C81009 * C738 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C2688 -
            ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
              C26924 * C2086) *
                 C80932 +
             (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
              C26924 * C1973) *
                 C2687) +
            (C27053 * C4095 + C26924 * C4425 + C27054 * C7691 +
             C26925 * C7997) *
                C80686) *
               C81012 * C81009 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C6969 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C6893 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C6970 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C6894 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C6971 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C6895 -
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C6972 -
           (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
               C80972) *
              C81012 * C81009 * C80588 * C80933 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C6970 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C6893 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C6969) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C6894 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C6971 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C6895 +
           (C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C6972 +
           (C27053 * C8573 + C26924 * C8783 + C27054 * C34557 +
            C26925 * C34771) *
               C80972) *
              C81012 * C81009 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C3421 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80933 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C3422 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C3422 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80933 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C3421) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C80686) *
              C737 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C3422 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80933 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C3421) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C3421 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80933 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C3422 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C80686) *
              C738 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C3421 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80933 -
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C3422 -
            (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 +
             C26924 * C2191) *
                C80726) *
               C81012 * C81009 * C80932 +
           ((C27053 * C3981 + C26924 * C4307 + C27054 * C7589 +
             C26925 * C7891) *
                C3422 -
            ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                 C80933 +
             (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                 C3421) +
            (C27053 * C4201 + C26924 * C4541 + C27054 * C7791 +
             C26925 * C8105) *
                C80726) *
               C81012 * C81009 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C3421 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80933 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C3422 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C6893 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C3422 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80933 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C3421) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C80726) *
              C81012 * C81009 * C6894 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C3421 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C80933 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C3422 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C80726) *
              C81012 * C81009 * C6895 +
          ((C27053 * C8499 + C26924 * C8713 + C27054 * C34479 +
            C26925 * C34703) *
               C3422 -
           ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 +
             C26924 * C5918) *
                C80933 +
            (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 +
             C26924 * C5822) *
                C3421) +
           (C27053 * C8643 + C26924 * C8851 + C27054 * C34628 +
            C26925 * C34838) *
               C80726) *
              C81012 * C81009 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[46] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C743 +
                       (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                       C521 * C738 + C522 * C745 + C523 * C80954) *
                          C81009 * C26924 +
                      (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) *
                          C81009 * C26925) *
                         C80933 +
                     ((C2326 * C744 -
                       ((C490 * C1693 + C81012 * C2301) * C737 +
                        (C490 * C1684 + C81012 * C2294) * C743) +
                       C2327 * C738 - C2328 * C745 - C2329 * C80954) *
                          C81009 * C26924 +
                      (C30692 - (C30702 + C30703) + C30697 - C30698 - C30699) *
                          C81009 * C26925) *
                         C80726) *
                        C80932 +
                    (((C27884 - (C27901 + C27900) + C27885 - C27886 - C27887) *
                          C81009 * C26924 +
                      (C27888 - (C27902 + C27903) + C27893 - C27894 - C27895) *
                          C81009 * C26925) *
                         C80933 +
                     ((C30703 + C30702 - C30692 - C30697 + C30698 + C30699) *
                          C81009 * C26924 +
                      ((C490 * C6140 + C81012 * C6656) * C743 +
                       (C490 * C6148 + C81012 * C6662) * C737 - C8218 * C744 -
                       C8219 * C738 + (C490 * C7589 + C81012 * C8211) * C745 +
                       (C490 * C7591 + C81012 * C8212) * C80954) *
                          C81009 * C26925) *
                         C80726) *
                        C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81009 * C26924 +
                      (C31944 + C31945) * C81009 * C26925) *
                         C80933 -
                     ((C32654 + C32655) * C81009 * C26925 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81009 * C26924) *
                         C80726) *
                        C6893 +
                    (((C32655 + C32654) * C81009 * C26924 +
                      (C32676 + C32677) * C81009 * C26925) *
                         C80726 -
                     ((C31946 + C31947) * C81009 * C26925 +
                      (C31945 + C31944) * C81009 * C26924) *
                         C80933) *
                        C6894 +
                    (((C31947 + C31946) * C81009 * C26924 +
                      (C31960 + C31961) * C81009 * C26925) *
                         C80933 -
                     ((C34914 + C34915) * C81009 * C26925 +
                      (C32677 + C32676) * C81009 * C26924) *
                         C80726) *
                        C6895 +
                    (((C34915 + C34914) * C81009 * C26924 +
                      ((C490 * C34479 + C81012 * C34905) * C5657 +
                       (C490 * C34481 + C81012 * C34906) * C80588) *
                          C81009 * C26925) *
                         C80726 -
                     ((C31962 + C31963) * C81009 * C26925 +
                      (C31961 + C31960) * C81009 * C26924) *
                         C80933) *
                        C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C2687 +
             (C490 * C166 + C81012 * C569) * C80932 - C27896 * C2688 -
             C27982 * C80686) *
                C81009 * C26924 +
            (C27896 * C2687 + C27982 * C80932 - C27899 * C2688 -
             C27983 * C80686) *
                C81009 * C26925) *
               C737 +
           ((C3131 - (C3130 + C3129) + C3132) * C81009 * C26924 +
            (C1394 * C2688 - (C1496 * C80932 + C1390 * C2687) +
             C1497 * C80686) *
                C81009 * C26925) *
               C738 +
           ((C3135 + C3134 - C3133 - C3136) * C81009 * C26924 +
            (C1392 * C2687 + C1498 * C80932 - C1396 * C2688 - C1499 * C80686) *
                C81009 * C26925) *
               C80954) *
              C80933 +
          (((C30701 * C2688 -
             ((C490 * C1790 + C81012 * C2409) * C80932 +
              (C490 * C1684 + C81012 * C2294) * C2687) +
             C30804 * C80686) *
                C81009 * C26924 +
            ((C490 * C6140 + C81012 * C6656) * C2688 -
             (C30804 * C80932 + C30701 * C2687) +
             (C490 * C6236 + C81012 * C6739) * C80686) *
                C81009 * C26925) *
               C737 +
           ((C4780 + C4779 - C4778 - C4790) * C81009 * C26924 +
            (C4672 * C2687 + C4788 * C80932 - C8218 * C2688 - C8326 * C80686) *
                C81009 * C26925) *
               C738 +
           ((C4785 - (C4784 + C4783) + C4791) * C81009 * C26924 +
            ((C490 * C7589 + C81012 * C8211) * C2688 -
             (C4789 * C80932 + C4674 * C2687) +
             (C490 * C7691 + C81012 * C8317) * C80686) *
                C81009 * C26925) *
               C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C6969 +
            (C490 * C166 + C81012 * C569) * C6893 - C27896 * C6970 -
            C27982 * C6894 + C27899 * C6971 + C27983 * C6895 - C31956 * C6972 -
            C32011 * C80972) *
               C81009 * C26924 +
           (C27896 * C6969 + C27982 * C6893 - C27899 * C6970 - C27983 * C6894 +
            C31956 * C6971 + C32011 * C6895 - C31959 * C6972 -
            C32012 * C80972) *
               C81009 * C26925) *
              C80588 * C80933 +
          ((C30701 * C6970 -
            ((C490 * C1790 + C81012 * C2409) * C6893 +
             (C490 * C1684 + C81012 * C2294) * C6969) +
            C30804 * C6894 - C32670 * C6971 - C32761 * C6895 + C34913 * C6972 +
            C34985 * C80972) *
               C81009 * C26924 +
           (C32670 * C6970 - (C30804 * C6893 + C30701 * C6969) +
            C32761 * C6894 - C34913 * C6971 - C34985 * C6895 +
            (C490 * C34479 + C81012 * C34905) * C6972 +
            (C490 * C34557 + C81012 * C34981) * C80972) *
               C81009 * C26925) *
              C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[46] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                         C80932 +
                     ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                      ((C490 * C6140 + C81012 * C6656) * C3422 -
                       (C28065 * C80933 + C27899 * C3421) +
                       (C490 * C6324 + C81012 * C6821) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C737 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                      (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                         C80932 +
                     ((C4896 + C4895 - C4894 - C4906) * C81009 * C26924 +
                      (C8427 + C8428 - C8429 - C8433) * C81009 * C26925) *
                         C80686) *
                        C738 +
                    (((C3873 + C3872 - C3871 - C3874) * C81009 * C26924 +
                      (C4899 + C4900 - C4901 - C4907) * C81009 * C26925) *
                         C80932 +
                     ((C4901 - (C4900 + C4899) + C4907) * C81009 * C26924 +
                      ((C490 * C7589 + C81012 * C8211) * C3422 -
                       (C1601 * C80933 + C1396 * C3421) +
                       (C490 * C7791 + C81012 * C8425) * C80726) *
                          C81009 * C26925) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                        C6893 +
                    ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                     (C34410 - (C34411 + C34412) + C34413) * C81009 * C26925) *
                        C6894 +
                    ((C34412 + C34411 - C34410 - C34413) * C81009 * C26924 +
                     (C35053 + C35054 - C35055 - C35059) * C81009 * C26925) *
                        C6895 +
                    ((C35055 - (C35054 + C35053) + C35059) * C81009 * C26924 +
                     ((C490 * C34479 + C81012 * C34905) * C3422 -
                      (C32063 * C80933 + C31959 * C3421) +
                      (C490 * C34628 + C81012 * C35051) * C80726) *
                         C81009 * C26925) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
              C81012 * C80639 * C81003 +
          ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C26924 +
           (C27382 - (C27383 + C27384) + C27385 - C27386 - C27387) * C26925) *
              C81012 * C80639 * C80988 +
          ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C26924 +
           ((C26926 * C5659 + C81009 * C5665) * C743 +
            (C26926 * C5663 + C81009 * C5671) * C737 -
            (C26926 * C5658 + C81009 * C5664) * C744 -
            (C26926 * C5662 + C81009 * C5670) * C738 +
            (C26926 * C6899 + C81009 * C6900) * C745 +
            (C26926 * C6901 + C81009 * C6902) * C80954) *
               C26925) *
              C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C94 +
           (C26926 * C107 + C81009 * C117) * C83 -
           (C26926 * C100 + C81009 * C106) * C95 -
           (C26926 * C108 + C81009 * C118) * C84 +
           (C26926 * C101 + C81009 * C109) * C96 +
           (C26926 * C110 + C81009 * C119) * C85 -
           (C26926 * C102 + C81009 * C111) * C97 -
           (C26926 * C112 + C81009 * C120) * C86 +
           (C26926 * C103 + C81009 * C113) * C98 +
           (C26926 * C114 + C81009 * C121) * C87) *
              C26924 +
          ((C26926 * C748 + C81009 * C758) * C94 +
           (C26926 * C757 + C81009 * C771) * C83 -
           (C26926 * C746 + C81009 * C754) * C95 -
           (C26926 * C756 + C81009 * C770) * C84 +
           (C26926 * C747 + C81009 * C755) * C96 +
           (C26926 * C759 + C81009 * C772) * C85 -
           (C26926 * C749 + C81009 * C760) * C97 -
           (C26926 * C761 + C81009 * C773) * C86 +
           (C26926 * C2617 + C81009 * C2618) * C98 +
           (C26926 * C2619 + C81009 * C2620) * C87) *
              C26925) *
         C81012 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
              C81012 * C81004 +
          (((C26926 * C1682 + C81009 * C1690) * C744 -
            ((C26926 * C1693 + C81009 * C1707) * C737 +
             (C26926 * C1684 + C81009 * C1694) * C743) +
            (C26926 * C1692 + C81009 * C1706) * C738 -
            (C26926 * C1683 + C81009 * C1691) * C745 -
            (C26926 * C1695 + C81009 * C1708) * C80954) *
               C26924 +
           ((C26926 * C3980 + C81009 * C3984) * C744 -
            ((C26926 * C3985 + C81009 * C3991) * C737 +
             (C26926 * C3979 + C81009 * C3983) * C743) +
            (C26926 * C3986 + C81009 * C3992) * C738 -
            (C26926 * C3981 + C81009 * C3987) * C745 -
            (C26926 * C3988 + C81009 * C3993) * C80954) *
               C26925) *
              C81012 * C80990 +
          (((C26926 * C1686 + C81009 * C1698) * C743 +
            (C26926 * C1700 + C81009 * C1710) * C737 -
            (C26926 * C1687 + C81009 * C1699) * C744 -
            (C26926 * C1701 + C81009 * C1711) * C738 +
            (C26926 * C1688 + C81009 * C1702) * C745 +
            (C26926 * C1703 + C81009 * C1712) * C80954) *
               C26924 +
           ((C26926 * C6138 + C81009 * C6146) * C743 +
            (C26926 * C6144 + C81009 * C6156) * C737 -
            (C26926 * C6137 + C81009 * C6145) * C744 -
            (C26926 * C6143 + C81009 * C6155) * C738 +
            (C26926 * C10971 + C81009 * C10972) * C745 +
            (C26926 * C10973 + C81009 * C10974) * C80954) *
               C26925) *
              C81012 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
              C81012 * C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C26924 +
           (C30990 - (C30991 + C30992) + C30993 - C30994 - C30995) * C26925) *
              C81012 * C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C26924 +
           ((C26926 * C5659 + C81009 * C5665) * C4987 +
            (C26926 * C5663 + C81009 * C5671) * C80998 -
            (C26926 * C5658 + C81009 * C5664) * C4988 -
            (C26926 * C5662 + C81009 * C5670) * C80982 +
            (C26926 * C6899 + C81009 * C6900) * C4989 +
            (C26926 * C6901 + C81009 * C6902) * C80954) *
               C26925) *
              C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C26924 +
           (C31646 + C31647) * C26925) *
              C81012 * C80639 * C5652 -
          ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
              C80639 * C5653 +
          ((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
              C80639 * C5654 -
          ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
              C80639 * C5655 +
          ((C31665 + C31664) * C26924 +
           ((C26926 * C31641 + C81009 * C31642) * C5657 +
            (C26926 * C31643 + C81009 * C31644) * C80588) *
               C26925) *
              C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C26924 +
            (C31646 + C31647) * C26925) *
               C81012 * C81004 -
           ((C32144 + C32145) * C26925 +
            ((C26926 * C1693 + C81009 * C1707) * C80588 +
             (C26926 * C1684 + C81009 * C1694) * C5657) *
                C26924) *
               C81012 * C80990 +
           (((C26926 * C1686 + C81009 * C1698) * C5657 +
             (C26926 * C1700 + C81009 * C1710) * C80588) *
                C26924 +
            (C32164 + C32165) * C26925) *
               C81012 * C80965) *
              C4984 +
          (((C32145 + C32144) * C26924 + (C32166 + C32167) * C26925) * C81012 *
               C80990 -
           ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
               C81004 -
           ((C32168 + C32169) * C26925 + (C32165 + C32164) * C26924) * C81012 *
               C80965) *
              C4985 +
          (((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
               C81004 -
           (((C26926 * C8503 + C81009 * C8505) * C80588 +
             (C26926 * C8499 + C81009 * C8501) * C5657) *
                C26925 +
            (C32167 + C32166) * C26924) *
               C81012 * C80990 +
           ((C32169 + C32168) * C26924 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C26925) *
               C81012 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C26924 +
           (C27364 * C852 + C27474 * C81003 - C27372 * C853 - C27475 * C80988 +
            (C26926 * C5659 + C81009 * C5665) * C854 +
            (C26926 * C5722 + C81009 * C5726) * C80962) *
               C26925) *
              C81012 * C737 +
          ((C27366 * C853 -
            ((C26926 * C167 + C81009 * C173) * C81003 +
             (C26926 * C100 + C81009 * C106) * C852) +
            C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
               C26924 +
           (C27370 * C853 - (C27476 * C81003 + C27366 * C852) +
            C27477 * C80988 - (C26926 * C5658 + C81009 * C5664) * C854 -
            (C26926 * C5721 + C81009 * C5725) * C80962) *
               C26925) *
              C81012 * C738 +
          (((C26926 * C101 + C81009 * C109) * C852 +
            (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
            C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
               C26924 +
           (C27368 * C852 + C27478 * C81003 - C27374 * C853 - C27479 * C80988 +
            (C26926 * C6899 + C81009 * C6900) * C854 +
            (C26926 * C6973 + C81009 * C6974) * C80962) *
               C26925) *
              C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C26924 +
           ((C26926 * C748 + C81009 * C758) * C165 +
            (C26926 * C856 + C81009 * C864) * C80628) *
               C26925) *
              C81012 * C83 -
          (((C26926 * C855 + C81009 * C863) * C80628 +
            (C26926 * C746 + C81009 * C754) * C165) *
               C26925 +
           ((C26926 * C167 + C81009 * C173) * C80628 +
            (C26926 * C100 + C81009 * C106) * C165) *
               C26924) *
              C81012 * C84 +
          (((C26926 * C101 + C81009 * C109) * C165 +
            (C26926 * C168 + C81009 * C174) * C80628) *
               C26924 +
           ((C26926 * C747 + C81009 * C755) * C165 +
            (C26926 * C859 + C81009 * C867) * C80628) *
               C26925) *
              C81012 * C85 -
          (((C26926 * C861 + C81009 * C869) * C80628 +
            (C26926 * C749 + C81009 * C760) * C165) *
               C26925 +
           ((C26926 * C169 + C81009 * C175) * C80628 +
            (C26926 * C102 + C81009 * C111) * C165) *
               C26924) *
              C81012 * C86 +
          (((C26926 * C103 + C81009 * C113) * C165 +
            (C26926 * C170 + C81009 * C176) * C80628) *
               C26924 +
           ((C26926 * C2617 + C81009 * C2618) * C165 +
            (C26926 * C2689 + C81009 * C2690) * C80628) *
               C26925) *
              C81012 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C737 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C738 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C26924 +
            (C27368 * C165 + C27478 * C80628) * C26925) *
               C81012 * C80954) *
              C81004 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            ((C26926 * C3980 + C81009 * C3984) * C165 +
             (C26926 * C4094 + C81009 * C4098) * C80628) *
                C26925) *
               C81012 * C738 -
           (((C26926 * C4093 + C81009 * C4097) * C80628 +
             (C26926 * C3979 + C81009 * C3983) * C165) *
                C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C737 -
           (((C26926 * C4095 + C81009 * C4099) * C80628 +
             (C26926 * C3981 + C81009 * C3987) * C165) *
                C26925 +
            ((C26926 * C1789 + C81009 * C1797) * C80628 +
             (C26926 * C1683 + C81009 * C1691) * C165) *
                C26924) *
               C81012 * C80954) *
              C80990 +
          ((((C26926 * C1686 + C81009 * C1698) * C165 +
             (C26926 * C1792 + C81009 * C1800) * C80628) *
                C26924 +
            ((C26926 * C6138 + C81009 * C6146) * C165 +
             (C26926 * C6238 + C81009 * C6244) * C80628) *
                C26925) *
               C81012 * C737 -
           (((C26926 * C6237 + C81009 * C6243) * C80628 +
             (C26926 * C6137 + C81009 * C6145) * C165) *
                C26925 +
            ((C26926 * C1793 + C81009 * C1801) * C80628 +
             (C26926 * C1687 + C81009 * C1699) * C165) *
                C26924) *
               C81012 * C738 +
           (((C26926 * C1688 + C81009 * C1702) * C165 +
             (C26926 * C1794 + C81009 * C1802) * C80628) *
                C26924 +
            ((C26926 * C10971 + C81009 * C10972) * C165 +
             (C26926 * C11073 + C81009 * C11074) * C80628) *
                C26925) *
               C81012 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C26924 +
           (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
            (C26926 * C5659 + C81009 * C5665) * C5066 +
            (C26926 * C5722 + C81009 * C5726) * C80962) *
               C26925) *
              C81012 * C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C26924 +
           (C27370 * C5065 - (C27476 * C4984 + C27366 * C5064) +
            C27477 * C4985 - (C26926 * C5658 + C81009 * C5664) * C5066 -
            (C26926 * C5721 + C81009 * C5725) * C80962) *
               C26925) *
              C81012 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C26924 +
           (C27368 * C5064 + C27478 * C4984 - C27374 * C5065 - C27479 * C4985 +
            (C26926 * C6899 + C81009 * C6900) * C5066 +
            (C26926 * C6973 + C81009 * C6974) * C80962) *
               C26925) *
              C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C26924 +
          (C27364 * C5716 + C27474 * C5652 - C27372 * C5717 - C27475 * C5653 +
           C31658 * C5718 + C31714 * C5654 - C31661 * C5719 - C31715 * C5655 +
           (C26926 * C31641 + C81009 * C31642) * C5720 +
           (C26926 * C31707 + C81009 * C31708) * C5656) *
              C26925) *
         C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C26924 +
           (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
            C31658 * C5066 + C31714 * C80962) *
               C26925) *
              C81012 * C80588 * C81004 +
          ((C30064 * C5065 -
            ((C26926 * C1790 + C81009 * C1798) * C4984 +
             (C26926 * C1684 + C81009 * C1694) * C5064) +
            C30178 * C4985 - C32160 * C5066 - C32252 * C80962) *
               C26924 +
           (C32160 * C5065 - (C30178 * C4984 + C30064 * C5064) +
            C32252 * C4985 - (C26926 * C8499 + C81009 * C8501) * C5066 -
            (C26926 * C8573 + C81009 * C8575) * C80962) *
               C26925) *
              C81012 * C80588 * C80990 +
          (((C26926 * C1686 + C81009 * C1698) * C5064 +
            (C26926 * C1792 + C81009 * C1800) * C4984 - C32158 * C5065 -
            C32253 * C4985 + C32163 * C5066 + C32254 * C80962) *
               C26924 +
           (C32158 * C5064 + C32253 * C4984 - C32163 * C5065 - C32254 * C4985 +
            (C26926 * C32139 + C81009 * C32140) * C5066 +
            (C26926 * C32243 + C81009 * C32244) * C80962) *
               C26925) *
              C81012 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C81003 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C80988 +
           ((C27559 + C27579) * C26924 +
            ((C26926 * C5659 + C81009 * C5665) * C220 +
             (C26926 * C5772 + C81009 * C5776) * C80639) *
                C26925) *
               C81012 * C80962) *
              C737 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C80988 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C81003 -
           (((C26926 * C5771 + C81009 * C5775) * C80639 +
             (C26926 * C5658 + C81009 * C5664) * C220) *
                C26925 +
            (C27581 + C27563) * C26924) *
               C81012 * C80962) *
              C738 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C26924 +
            (C27566 + C27582) * C26925) *
               C81012 * C81003 -
           ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) * C81012 *
               C80988 +
           ((C27571 + C27583) * C26924 +
            ((C26926 * C6899 + C81009 * C6900) * C220 +
             (C26926 * C7041 + C81009 * C7042) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C26924 +
           ((C26926 * C748 + C81009 * C758) * C220 +
            (C26926 * C946 + C81009 * C954) * C80639) *
               C26925) *
              C81012 * C80628 * C83 -
          (((C26926 * C945 + C81009 * C953) * C80639 +
            (C26926 * C746 + C81009 * C754) * C220) *
               C26925 +
           ((C26926 * C222 + C81009 * C228) * C80639 +
            (C26926 * C100 + C81009 * C106) * C220) *
               C26924) *
              C81012 * C80628 * C84 +
          (((C26926 * C101 + C81009 * C109) * C220 +
            (C26926 * C223 + C81009 * C229) * C80639) *
               C26924 +
           ((C26926 * C747 + C81009 * C755) * C220 +
            (C26926 * C949 + C81009 * C957) * C80639) *
               C26925) *
              C81012 * C80628 * C85 -
          (((C26926 * C951 + C81009 * C959) * C80639 +
            (C26926 * C749 + C81009 * C760) * C220) *
               C26925 +
           ((C26926 * C224 + C81009 * C230) * C80639 +
            (C26926 * C102 + C81009 * C111) * C220) *
               C26924) *
              C81012 * C80628 * C86 +
          (((C26926 * C103 + C81009 * C113) * C220 +
            (C26926 * C225 + C81009 * C231) * C80639) *
               C26924 +
           ((C26926 * C2617 + C81009 * C2618) * C220 +
            (C26926 * C2757 + C81009 * C2758) * C80639) *
               C26925) *
              C81012 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C1878 +
            (C26926 * C221 + C81009 * C227) * C81004 -
            (C26926 * C1684 + C81009 * C1694) * C1879 -
            (C26926 * C1882 + C81009 * C1890) * C80990 +
            (C26926 * C1686 + C81009 * C1698) * C1880 +
            (C26926 * C1883 + C81009 * C1891) * C80965) *
               C26924 +
           (C27364 * C1878 + C27572 * C81004 -
            (C26926 * C3979 + C81009 * C3983) * C1879 -
            (C26926 * C4199 + C81009 * C4203) * C80990 +
            (C26926 * C6138 + C81009 * C6146) * C1880 +
            (C26926 * C6322 + C81009 * C6328) * C80965) *
               C26925) *
              C81012 * C80628 * C737 +
          (((C26926 * C1682 + C81009 * C1690) * C1879 -
            ((C26926 * C222 + C81009 * C228) * C81004 +
             (C26926 * C100 + C81009 * C106) * C1878) +
            (C26926 * C1881 + C81009 * C1889) * C80990 -
            (C26926 * C1687 + C81009 * C1699) * C1880 -
            (C26926 * C1884 + C81009 * C1892) * C80965) *
               C26924 +
           ((C26926 * C3980 + C81009 * C3984) * C1879 -
            (C27574 * C81004 + C27366 * C1878) +
            (C26926 * C4200 + C81009 * C4204) * C80990 -
            (C26926 * C6137 + C81009 * C6145) * C1880 -
            (C26926 * C6321 + C81009 * C6327) * C80965) *
               C26925) *
              C81012 * C80628 * C738 +
          (((C26926 * C101 + C81009 * C109) * C1878 +
            (C26926 * C223 + C81009 * C229) * C81004 -
            (C26926 * C1683 + C81009 * C1691) * C1879 -
            (C26926 * C1885 + C81009 * C1893) * C80990 +
            (C26926 * C1688 + C81009 * C1702) * C1880 +
            (C26926 * C1886 + C81009 * C1894) * C80965) *
               C26924 +
           (C27368 * C1878 + C27576 * C81004 -
            (C26926 * C3981 + C81009 * C3987) * C1879 -
            (C26926 * C4201 + C81009 * C4205) * C80990 +
            (C26926 * C10971 + C81009 * C10972) * C1880 +
            (C26926 * C11173 + C81009 * C11174) * C80965) *
               C26925) *
              C81012 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C26924 +
            (C27554 + C27578) * C26925) *
               C81012 * C4984 -
           ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
               C4985 +
           ((C27559 + C27579) * C26924 +
            ((C26926 * C5659 + C81009 * C5665) * C220 +
             (C26926 * C5772 + C81009 * C5776) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80998 +
          (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) * C81012 *
               C4985 -
           ((C27580 + C27560) * C26925 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C26924) *
               C81012 * C4984 -
           (((C26926 * C5771 + C81009 * C5775) * C80639 +
             (C26926 * C5658 + C81009 * C5664) * C220) *
                C26925 +
            (C27581 + C27563) * C26924) *
               C81012 * C80962) *
              C80982 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C26924 +
            (C27566 + C27582) * C26925) *
               C81012 * C4984 -
           ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) * C81012 *
               C4985 +
           ((C27571 + C27583) * C26924 +
            ((C26926 * C6899 + C81009 * C6900) * C220 +
             (C26926 * C7041 + C81009 * C7042) * C80639) *
                C26925) *
               C81012 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C26924 +
           (C27554 + C27578) * C26925) *
              C81012 * C5652 -
          ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) * C81012 *
              C5653 +
          ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) * C81012 *
              C5654 -
          ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) * C81012 *
              C5655 +
          ((C31765 + C31769) * C26924 +
           ((C26926 * C31641 + C81009 * C31642) * C220 +
            (C26926 * C31757 + C81009 * C31758) * C80639) *
               C26925) *
              C81012 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C1878 +
            (C26926 * C221 + C81009 * C227) * C81004 -
            (C26926 * C1684 + C81009 * C1694) * C1879 -
            (C26926 * C1882 + C81009 * C1890) * C80990 +
            (C26926 * C1686 + C81009 * C1698) * C1880 +
            (C26926 * C1883 + C81009 * C1891) * C80965) *
               C26924 +
           (C32331 + C32332 - C32333 - C32334 + C32335 + C32349) * C26925) *
              C81012 * C4984 +
          ((C32333 - (C32332 + C32331) + C32334 - C32335 - C32349) * C26924 +
           (C32338 - (C32339 + C32340) + C32350 - C32343 - C32351) * C26925) *
              C81012 * C4985 +
          ((C32340 + C32339 - C32338 - C32350 + C32343 + C32351) * C26924 +
           (C31658 * C1878 + C31766 * C81004 -
            (C26926 * C8499 + C81009 * C8501) * C1879 -
            (C26926 * C8643 + C81009 * C8645) * C80990 +
            (C26926 * C32139 + C81009 * C32140) * C1880 +
            (C26926 * C32328 + C81009 * C32329) * C80965) *
               C26925) *
              C81012 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C743 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C737 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C744 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C738 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C745 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C81003 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C744 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C737 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C743) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C738 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C745 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C80988 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C743 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C737 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C744 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C738 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C745 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C80954) *
              C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C94 +
          (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
              C83 -
          (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
              C95 -
          (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
              C84 +
          (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
              C96 +
          (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
              C85 -
          (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
              C97 -
          (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
              C86 +
          (C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
              C98 +
          (C27053 * C114 + C26924 * C286 + C27054 * C2619 + C26925 * C2826) *
              C87) *
         C81012 * C81009 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C743 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C737 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C744 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C738 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C745 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C81004 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C744 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C737 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C743) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C738 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C745 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C80954) *
              C81012 * C81009 * C80990 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C743 +
           (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 + C26925 * C6414) *
               C737 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C744 -
           (C27054 * C6143 + C26925 * C6413 + C27053 * C1701 + C26924 * C1984) *
               C738 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C745 +
           (C27053 * C1703 + C26924 * C1985 + C27054 * C10973 +
            C26925 * C11274) *
               C80954) *
              C81012 * C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C4987 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80998 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C4988 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80982 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C4989 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4984 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C4988 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80998 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C4987) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80982 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C4989 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4985 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C4987 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80998 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C4988 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80982 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C4989 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C80954) *
              C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5657 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80588) *
              C81012 * C81009 * C80639 * C5652 -
          ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
               C80588 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5657) *
              C81012 * C81009 * C80639 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5657 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80588) *
              C81012 * C81009 * C80639 * C5654 -
          ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 + C26924 * C5826) *
               C80588 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C5657) *
              C81012 * C81009 * C80639 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C5657 +
           (C27053 * C5668 + C26924 * C5827 + C27054 * C31643 +
            C26925 * C31812) *
               C80588) *
              C81012 * C81009 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5657 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80588) *
               C81012 * C81009 * C81004 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C80588 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5657) *
               C81012 * C81009 * C80990 +
           ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C5657 +
            (C27053 * C1700 + C26924 * C1983 + C27054 * C6144 +
             C26925 * C6414) *
                C80588) *
               C81012 * C81009 * C80965) *
              C4984 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5657 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80588) *
               C81012 * C81009 * C80990 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80588 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5657) *
               C81012 * C81009 * C81004 -
           ((C27054 * C6153 + C26925 * C6417 + C27053 * C6144 +
             C26924 * C6414) *
                C80588 +
            (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 +
             C26924 * C6408) *
                C5657) *
               C81012 * C81009 * C80965) *
              C4985 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5657 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80588) *
               C81012 * C81009 * C81004 -
           ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
             C26924 * C6416) *
                C80588 +
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5657) *
               C81012 * C81009 * C80990 +
           ((C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
             C26925 * C32425) *
                C5657 +
            (C27053 * C6153 + C26924 * C6417 + C27054 * C32141 +
             C26925 * C32426) *
                C80588) *
               C81012 * C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C852 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81003 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C853 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80988 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C854 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C737 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C853 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C81003 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C852) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80988 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C854 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80962) *
              C81012 * C81009 * C738 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C852 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C81003 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C853 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80988 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C854 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C80962) *
              C81012 * C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C165 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80628) *
              C81012 * C81009 * C83 -
          ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
               C80628 +
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C165) *
              C81012 * C81009 * C84 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C165 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C80628) *
              C81012 * C81009 * C85 -
          ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
               C80628 +
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C165) *
              C81012 * C81009 * C86 +
          ((C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
               C165 +
           (C27053 * C170 + C26924 * C358 + C27054 * C2689 + C26925 * C2899) *
               C80628) *
              C81012 * C81009 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C737 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C738 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C80954) *
              C81004 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C738 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C737 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C80954) *
              C80990 +
          (((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 +
             C26925 * C6408) *
                C165 +
            (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 +
             C26925 * C6495) *
                C80628) *
               C81012 * C81009 * C737 -
           ((C27054 * C6237 + C26925 * C6497 + C27053 * C1793 +
             C26924 * C2090) *
                C80628 +
            (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 +
             C26924 * C1976) *
                C165) *
               C81012 * C81009 * C738 +
           ((C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
             C26925 * C11273) *
                C165 +
            (C27053 * C1794 + C26924 * C2091 + C27054 * C11073 +
             C26925 * C11379) *
                C80628) *
               C81012 * C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5064 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C4984 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5065 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C4985 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5066 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80998 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C5065 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C4984 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C5064) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C4985 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C5066 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80962) *
              C81012 * C81009 * C80982 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C5064 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C4984 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C5065 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C4985 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C5066 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C80962) *
              C81012 * C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C5716 +
          (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
              C5652 -
          (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
              C5717 -
          (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
              C5653 +
          (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
              C5718 +
          (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
              C5654 -
          (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
              C5719 -
          (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
              C5655 +
          (C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
           C26925 * C31811) *
              C5720 +
          (C27053 * C5723 + C26924 * C5872 + C27054 * C31707 +
           C26925 * C31855) *
              C5656) *
         C81012 * C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5064 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C4984 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5065 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C4985 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5066 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80588 * C81004 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C5065 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C4984 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C5064) +
           (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 + C26925 * C6493) *
               C4985 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C5066 -
           (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 + C26924 * C6493) *
               C80962) *
              C81012 * C81009 * C80588 * C80990 +
          ((C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C5064 +
           (C27053 * C1792 + C26924 * C2089 + C27054 * C6238 + C26925 * C6495) *
               C4984 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C5065 -
           (C27054 * C6239 + C26925 * C6496 + C27053 * C6238 + C26924 * C6495) *
               C4985 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C5066 +
           (C27053 * C6239 + C26924 * C6496 + C27054 * C32243 +
            C26925 * C32501) *
               C80962) *
              C81012 * C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C81003 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80988 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80962) *
              C737 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80988 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C81003 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80962) *
              C738 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C81003 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80988 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C220 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80639) *
              C81012 * C81009 * C80628 * C83 -
          ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
               C80639 +
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C220) *
              C81012 * C81009 * C80628 * C84 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C220 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C80639) *
              C81012 * C81009 * C80628 * C85 -
          ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
               C80639 +
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C220) *
              C81012 * C81009 * C80628 * C86 +
          ((C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
               C220 +
           (C27053 * C225 + C26924 * C426 + C27054 * C2757 + C26925 * C2981) *
               C80639) *
              C81012 * C81009 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C1878 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C81004 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C1879 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80990 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C1880 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C80628 * C737 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C1879 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C81004 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C1878) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C80990 -
           (C27054 * C6137 + C26925 * C6407 + C27053 * C1687 + C26924 * C1976) *
               C1880 -
           (C27054 * C6321 + C26925 * C6574 + C27053 * C1884 + C26924 * C2190) *
               C80965) *
              C81012 * C81009 * C80628 * C738 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C1878 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C81004 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C1879 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C80990 +
           (C27053 * C1688 + C26924 * C1977 + C27054 * C10971 +
            C26925 * C11273) *
               C1880 +
           (C27053 * C1886 + C26924 * C2192 + C27054 * C11173 +
            C26925 * C11485) *
               C80965) *
              C81012 * C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80998 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C4985 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C4984 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80962) *
              C80982 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C220 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80639) *
              C81012 * C81009 * C5652 -
          ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
               C80639 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C220) *
              C81012 * C81009 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C220 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C80639) *
              C81012 * C81009 * C5654 -
          ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 + C26924 * C5918) *
               C80639 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C220) *
              C81012 * C81009 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C220 +
           (C27053 * C5773 + C26924 * C5919 + C27054 * C31757 +
            C26925 * C31898) *
               C80639) *
              C81012 * C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C1878 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C81004 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C1879 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80990 +
           (C27053 * C1686 + C26924 * C1975 + C27054 * C6138 + C26925 * C6408) *
               C1880 +
           (C27053 * C1883 + C26924 * C2188 + C27054 * C6322 + C26925 * C6573) *
               C80965) *
              C81012 * C81009 * C4984 +
          ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 + C26925 * C6410) *
               C1879 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C81004 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C1878) +
           (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 + C26925 * C6575) *
               C80990 -
           (C27054 * C6141 + C26925 * C6411 + C27053 * C6138 + C26924 * C6408) *
               C1880 -
           (C27054 * C6325 + C26925 * C6576 + C27053 * C6322 + C26924 * C6573) *
               C80965) *
              C81012 * C81009 * C4985 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C1878 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C81004 -
           (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 + C26924 * C6410) *
               C1879 -
           (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 + C26924 * C6575) *
               C80990 +
           (C27053 * C6141 + C26924 * C6411 + C27054 * C32139 +
            C26925 * C32425) *
               C1880 +
           (C27053 * C6325 + C26924 * C6576 + C27054 * C32328 +
            C26925 * C32576) *
               C80965) *
              C81012 * C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[47] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C743 +
                      (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                      C521 * C738 + C522 * C745 + C523 * C80954) *
                         C81009 * C26924 +
                     (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) *
                         C81009 * C26925) *
                        C80639 * C81003 +
                    ((C27884 - (C27901 + C27900) + C27885 - C27886 - C27887) *
                         C81009 * C26924 +
                     (C27888 - (C27902 + C27903) + C27893 - C27894 - C27895) *
                         C81009 * C26925) *
                        C80639 * C80988 +
                    ((C27903 + C27902 - C27888 - C27893 + C27894 + C27895) *
                         C81009 * C26924 +
                     ((C490 * C5659 + C81012 * C5964) * C743 +
                      (C490 * C5663 + C81012 * C5968) * C737 - C7340 * C744 -
                      C7341 * C738 + (C490 * C6899 + C81012 * C7333) * C745 +
                      (C490 * C6901 + C81012 * C7334) * C80954) *
                         C81009 * C26925) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C490 * C99 + C81012 * C491) * C94 +
                     (C490 * C107 + C81012 * C497) * C83 - C520 * C95 -
                     C521 * C84 + C522 * C96 + C523 * C85 - C524 * C97 -
                     C525 * C86 + C526 * C98 + C527 * C87) *
                        C81009 * C26924 +
                    ((C490 * C748 + C81012 * C1358) * C94 +
                     (C490 * C757 + C81012 * C1365) * C83 - C1390 * C95 -
                     C1391 * C84 + C1392 * C96 + C1393 * C85 - C3060 * C97 -
                     C3061 * C86 + (C490 * C2617 + C81012 * C3053) * C98 +
                     (C490 * C2619 + C81012 * C3054) * C87) *
                        C81009 * C26925) *
                   C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C743 +
                      (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                      C521 * C738 + C522 * C745 + C523 * C80954) *
                         C81009 * C26924 +
                     (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) *
                         C81009 * C26925) *
                        C81004 +
                    ((C2326 * C744 -
                      ((C490 * C1693 + C81012 * C2301) * C737 +
                       (C490 * C1684 + C81012 * C2294) * C743) +
                      C2327 * C738 - C2328 * C745 - C2329 * C80954) *
                         C81009 * C26924 +
                     (C4672 * C744 -
                      ((C490 * C3985 + C81012 * C4659) * C737 +
                       (C490 * C3979 + C81012 * C4655) * C743) +
                      C4673 * C738 - C4674 * C745 - C4675 * C80954) *
                         C81009 * C26925) *
                        C80990 +
                    (((C490 * C1686 + C81012 * C2297) * C743 +
                      (C490 * C1700 + C81012 * C2305) * C737 - C2330 * C744 -
                      C2331 * C738 + C2332 * C745 + C2333 * C80954) *
                         C81009 * C26924 +
                     ((C490 * C6138 + C81012 * C6654) * C743 +
                      (C490 * C6144 + C81012 * C6660) * C737 - C11600 * C744 -
                      C11601 * C738 + (C490 * C10971 + C81012 * C11593) * C745 +
                      (C490 * C10973 + C81012 * C11594) * C80954) *
                         C81009 * C26925) *
                        C80965) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81009 * C26924 +
                     (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) *
                         C81009 * C26925) *
                        C80639 * C4984 +
                    ((C31442 - (C31441 + C31440) + C31443 - C31444 - C31445) *
                         C81009 * C26924 +
                     (C31446 - (C31447 + C31448) + C31449 - C31450 - C31451) *
                         C81009 * C26925) *
                        C80639 * C4985 +
                    ((C31448 + C31447 - C31446 - C31449 + C31450 + C31451) *
                         C81009 * C26924 +
                     ((C490 * C5659 + C81012 * C5964) * C4987 +
                      (C490 * C5663 + C81012 * C5968) * C80998 - C7340 * C4988 -
                      C7341 * C80982 + (C490 * C6899 + C81012 * C7333) * C4989 +
                      (C490 * C6901 + C81012 * C7334) * C80954) *
                         C81009 * C26925) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81009 * C26924 +
                     (C31944 + C31945) * C81009 * C26925) *
                        C80639 * C5652 -
                    ((C31946 + C31947) * C81009 * C26925 +
                     (C31945 + C31944) * C81009 * C26924) *
                        C80639 * C5653 +
                    ((C31947 + C31946) * C81009 * C26924 +
                     (C31960 + C31961) * C81009 * C26925) *
                        C80639 * C5654 -
                    ((C31962 + C31963) * C81009 * C26925 +
                     (C31961 + C31960) * C81009 * C26924) *
                        C80639 * C5655 +
                    ((C31963 + C31962) * C81009 * C26924 +
                     ((C490 * C31641 + C81012 * C31941) * C5657 +
                      (C490 * C31643 + C81012 * C31942) * C80588) *
                         C81009 * C26925) *
                        C80639 * C5656)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C5657 +
                       (C490 * C107 + C81012 * C497) * C80588) *
                          C81009 * C26924 +
                      (C31944 + C31945) * C81009 * C26925) *
                         C81004 -
                     ((C32654 + C32655) * C81009 * C26925 +
                      ((C490 * C1693 + C81012 * C2301) * C80588 +
                       (C490 * C1684 + C81012 * C2294) * C5657) *
                          C81009 * C26924) *
                         C80990 +
                     (((C490 * C1686 + C81012 * C2297) * C5657 +
                       (C490 * C1700 + C81012 * C2305) * C80588) *
                          C81009 * C26924 +
                      (C32674 + C32675) * C81009 * C26925) *
                         C80965) *
                        C4984 +
                    (((C32655 + C32654) * C81009 * C26924 +
                      (C32676 + C32677) * C81009 * C26925) *
                         C80990 -
                     ((C31946 + C31947) * C81009 * C26925 +
                      (C31945 + C31944) * C81009 * C26924) *
                         C81004 -
                     ((C32678 + C32679) * C81009 * C26925 +
                      (C32675 + C32674) * C81009 * C26924) *
                         C80965) *
                        C4985 +
                    (((C31947 + C31946) * C81009 * C26924 +
                      (C31960 + C31961) * C81009 * C26925) *
                         C81004 -
                     (((C490 * C8503 + C81012 * C8921) * C80588 +
                       (C490 * C8499 + C81012 * C8919) * C5657) *
                          C81009 * C26925 +
                      (C32677 + C32676) * C81009 * C26924) *
                         C80990 +
                     ((C32679 + C32678) * C81009 * C26924 +
                      ((C490 * C32139 + C81012 * C32651) * C5657 +
                       (C490 * C32141 + C81012 * C32652) * C80588) *
                          C81009 * C26925) *
                         C80965) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
            C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C852 + C27982 * C81003 - C27899 * C853 - C27983 * C80988 +
            (C490 * C5659 + C81012 * C5964) * C854 +
            (C490 * C5722 + C81012 * C6013) * C80962) *
               C81009 * C26925) *
              C737 +
          ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81009 * C26924 +
           (C1394 * C853 - (C1496 * C81003 + C1390 * C852) + C1497 * C80988 -
            C7340 * C854 - C7418 * C80962) *
               C81009 * C26925) *
              C738 +
          ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81009 * C26924 +
           (C1392 * C852 + C1498 * C81003 - C1396 * C853 - C1499 * C80988 +
            (C490 * C6899 + C81012 * C7333) * C854 +
            (C490 * C6973 + C81012 * C7407) * C80962) *
               C81009 * C26925) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81009 * C26924 +
           ((C490 * C748 + C81012 * C1358) * C165 +
            (C490 * C856 + C81012 * C1471) * C80628) *
               C81009 * C26925) *
              C83 -
          ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
           (C592 + C576) * C81009 * C26924) *
              C84 +
          ((C581 + C593) * C81009 * C26924 +
           (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
              C85 -
          ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
           (C594 + C582) * C81009 * C26924) *
              C86 +
          ((C587 + C595) * C81009 * C26924 +
           ((C490 * C2617 + C81012 * C3053) * C165 +
            (C490 * C2689 + C81012 * C3127) * C80628) *
               C81009 * C26925) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81009 * C26924 +
            (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
               C737 -
           ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
            (C592 + C576) * C81009 * C26924) *
               C738 +
           ((C581 + C593) * C81009 * C26924 +
            (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
               C80954) *
              C81004 +
          (((C2416 + C2432) * C81009 * C26924 +
            (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
               C738 -
           (((C490 * C4093 + C81012 * C4773) * C80628 +
             (C490 * C3979 + C81012 * C4655) * C165) *
                C81009 * C26925 +
            ((C490 * C1790 + C81012 * C2409) * C80628 +
             (C490 * C1684 + C81012 * C2294) * C165) *
                C81009 * C26924) *
               C737 -
           ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
            (C2433 + C2419) * C81009 * C26924) *
               C80954) *
              C80990 +
          ((((C490 * C1686 + C81012 * C2297) * C165 +
             (C490 * C1792 + C81012 * C2411) * C80628) *
                C81009 * C26924 +
            ((C490 * C6138 + C81012 * C6654) * C165 +
             (C490 * C6238 + C81012 * C6741) * C80628) *
                C81009 * C26925) *
               C737 -
           ((C11706 * C80628 + C11600 * C165) * C81009 * C26925 +
            (C2434 + C2422) * C81009 * C26924) *
               C738 +
           ((C2427 + C2435) * C81009 * C26924 +
            ((C490 * C10971 + C81012 * C11593) * C165 +
             (C490 * C11073 + C81012 * C11699) * C80628) *
                C81009 * C26925) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
            C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
            (C490 * C5659 + C81012 * C5964) * C5066 +
            (C490 * C5722 + C81012 * C6013) * C80962) *
               C81009 * C26925) *
              C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81009 * C26924 +
           (C1394 * C5065 - (C1496 * C4984 + C1390 * C5064) + C1497 * C4985 -
            C7340 * C5066 - C7418 * C80962) *
               C81009 * C26925) *
              C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81009 * C26924 +
           (C1392 * C5064 + C1498 * C4984 - C1396 * C5065 - C1499 * C4985 +
            (C490 * C6899 + C81012 * C7333) * C5066 +
            (C490 * C6973 + C81012 * C7407) * C80962) *
               C81009 * C26925) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 - C27896 * C5717 -
           C27982 * C5653 + C27899 * C5718 + C27983 * C5654 - C31956 * C5719 -
           C32011 * C5655 + C31959 * C5720 + C32012 * C5656) *
              C81009 * C26924 +
          (C27896 * C5716 + C27982 * C5652 - C27899 * C5717 - C27983 * C5653 +
           C31956 * C5718 + C32011 * C5654 - C31959 * C5719 - C32012 * C5655 +
           (C490 * C31641 + C81012 * C31941) * C5720 +
           (C490 * C31707 + C81012 * C32005) * C5656) *
              C81009 * C26925) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
            C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
            C31956 * C5066 + C32011 * C80962) *
               C81009 * C26925) *
              C80588 * C81004 +
          ((C30701 * C5065 -
            ((C490 * C1790 + C81012 * C2409) * C4984 +
             (C490 * C1684 + C81012 * C2294) * C5064) +
            C30804 * C4985 - C32670 * C5066 - C32761 * C80962) *
               C81009 * C26924 +
           (C32670 * C5065 - (C30804 * C4984 + C30701 * C5064) +
            C32761 * C4985 - (C490 * C8499 + C81012 * C8919) * C5066 -
            (C490 * C8573 + C81012 * C8989) * C80962) *
               C81009 * C26925) *
              C80588 * C80990 +
          (((C490 * C1686 + C81012 * C2297) * C5064 +
            (C490 * C1792 + C81012 * C2411) * C4984 - C32668 * C5065 -
            C32762 * C4985 + C32673 * C5066 + C32763 * C80962) *
               C81009 * C26924 +
           (C32668 * C5064 + C32762 * C4984 - C32673 * C5065 - C32763 * C4985 +
            (C490 * C32139 + C81012 * C32651) * C5066 +
            (C490 * C32243 + C81012 * C32753) * C80962) *
               C81009 * C26925) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81009 * C26924 +
            (C28058 + C28066) * C81009 * C26925) *
               C81003 -
           ((C28067 + C28063) * C81009 * C26925 +
            (C28066 + C28058) * C81009 * C26924) *
               C80988 +
           ((C28063 + C28067) * C81009 * C26924 +
            ((C490 * C5659 + C81012 * C5964) * C220 +
             (C490 * C5772 + C81012 * C6060) * C80639) *
                C81009 * C26925) *
               C80962) *
              C737 +
          (((C1588 + C1602) * C81009 * C26924 +
            (C1589 + C1603) * C81009 * C26925) *
               C80988 -
           ((C1602 + C1588) * C81009 * C26925 +
            (C660 + C644) * C81009 * C26924) *
               C81003 -
           ((C7491 + C7489) * C81009 * C26925 +
            (C1603 + C1589) * C81009 * C26924) *
               C80962) *
              C738 +
          (((C649 + C661) * C81009 * C26924 +
            (C1592 + C1604) * C81009 * C26925) *
               C81003 -
           ((C1605 + C1597) * C81009 * C26925 +
            (C1604 + C1592) * C81009 * C26924) *
               C80988 +
           ((C1597 + C1605) * C81009 * C26924 +
            ((C490 * C6899 + C81012 * C7333) * C220 +
             (C490 * C7041 + C81012 * C7485) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81009 * C26924 +
           ((C490 * C748 + C81012 * C1358) * C220 +
            (C490 * C946 + C81012 * C1578) * C80639) *
               C81009 * C26925) *
              C80628 * C83 -
          ((C1602 + C1588) * C81009 * C26925 +
           (C660 + C644) * C81009 * C26924) *
              C80628 * C84 +
          ((C649 + C661) * C81009 * C26924 +
           (C1592 + C1604) * C81009 * C26925) *
              C80628 * C85 -
          ((C3215 + C3213) * C81009 * C26925 +
           (C662 + C650) * C81009 * C26924) *
              C80628 * C86 +
          ((C655 + C663) * C81009 * C26924 +
           ((C490 * C2617 + C81012 * C3053) * C220 +
            (C490 * C2757 + C81012 * C3209) * C80639) *
               C81009 * C26925) *
              C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C27896 * C1878 + C28064 * C81004 -
            (C490 * C3979 + C81012 * C4655) * C1879 -
            (C490 * C4199 + C81012 * C4889) * C80990 +
            (C490 * C6138 + C81012 * C6654) * C1880 +
            (C490 * C6322 + C81012 * C6819) * C80965) *
               C81009 * C26925) *
              C80628 * C737 +
          ((C2520 - (C2519 + C2518) + C2538 - C2523 - C2539) * C81009 * C26924 +
           (C15260 - (C15261 + C15262) + C15263 - C15264 - C15265) * C81009 *
               C26925) *
              C80628 * C738 +
          ((C2528 + C2527 - C2526 - C2540 + C2531 + C2541) * C81009 * C26924 +
           (C1392 * C1878 + C1600 * C81004 - C4674 * C1879 - C4905 * C80990 +
            (C490 * C10971 + C81012 * C11593) * C1880 +
            (C490 * C11173 + C81012 * C11805) * C80965) *
               C81009 * C26925) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C220 +
             (C490 * C221 + C81012 * C637) * C80639) *
                C81009 * C26924 +
            (C28058 + C28066) * C81009 * C26925) *
               C4984 -
           ((C28067 + C28063) * C81009 * C26925 +
            (C28066 + C28058) * C81009 * C26924) *
               C4985 +
           ((C28063 + C28067) * C81009 * C26924 +
            ((C490 * C5659 + C81012 * C5964) * C220 +
             (C490 * C5772 + C81012 * C6060) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80998 +
          (((C1588 + C1602) * C81009 * C26924 +
            (C1589 + C1603) * C81009 * C26925) *
               C4985 -
           ((C1602 + C1588) * C81009 * C26925 +
            (C660 + C644) * C81009 * C26924) *
               C4984 -
           ((C7491 + C7489) * C81009 * C26925 +
            (C1603 + C1589) * C81009 * C26924) *
               C80962) *
              C80982 +
          (((C649 + C661) * C81009 * C26924 +
            (C1592 + C1604) * C81009 * C26925) *
               C4984 -
           ((C1605 + C1597) * C81009 * C26925 +
            (C1604 + C1592) * C81009 * C26924) *
               C4985 +
           ((C1597 + C1605) * C81009 * C26924 +
            ((C490 * C6899 + C81012 * C7333) * C220 +
             (C490 * C7041 + C81012 * C7485) * C80639) *
                C81009 * C26925) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C220 +
            (C490 * C221 + C81012 * C637) * C80639) *
               C81009 * C26924 +
           (C28058 + C28066) * C81009 * C26925) *
              C5652 -
          ((C28067 + C28063) * C81009 * C26925 +
           (C28066 + C28058) * C81009 * C26924) *
              C5653 +
          ((C28063 + C28067) * C81009 * C26924 +
           (C32056 + C32064) * C81009 * C26925) *
              C5654 -
          ((C32065 + C32061) * C81009 * C26925 +
           (C32064 + C32056) * C81009 * C26924) *
              C5655 +
          ((C32061 + C32065) * C81009 * C26924 +
           ((C490 * C31641 + C81012 * C31941) * C220 +
            (C490 * C31757 + C81012 * C32054) * C80639) *
               C81009 * C26925) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C1878 +
            (C490 * C221 + C81012 * C637) * C81004 -
            (C490 * C1684 + C81012 * C2294) * C1879 -
            (C490 * C1882 + C81012 * C2509) * C80990 +
            (C490 * C1686 + C81012 * C2297) * C1880 +
            (C490 * C1883 + C81012 * C2510) * C80965) *
               C81009 * C26924 +
           (C32839 + C32840 - C32841 - C32842 + C32843 + C32857) * C81009 *
               C26925) *
              C4984 +
          ((C32841 - (C32840 + C32839) + C32842 - C32843 - C32857) * C81009 *
               C26924 +
           (C32846 - (C32847 + C32848) + C32858 - C32851 - C32859) * C81009 *
               C26925) *
              C4985 +
          ((C32848 + C32847 - C32846 - C32858 + C32851 + C32859) * C81009 *
               C26924 +
           (C31956 * C1878 + C32062 * C81004 -
            (C490 * C8499 + C81012 * C8919) * C1879 -
            (C490 * C8643 + C81012 * C9057) * C80990 +
            (C490 * C32139 + C81012 * C32651) * C1880 +
            (C490 * C32328 + C81012 * C32837) * C80965) *
               C81009 * C26925) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[48] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C26924 +
                     (C28800 + C28801 - C28802 - C28803 + C28804 + C28805 -
                      C28812 - C28813) *
                         C26925) *
                        C81012 * C80933 +
                    (((C26926 * C1682 + C81009 * C1690) * C2614 -
                      ((C26926 * C1693 + C81009 * C1707) * C2607 +
                       (C26926 * C1684 + C81009 * C1694) * C2613) +
                      (C26926 * C1692 + C81009 * C1706) * C2608 -
                      (C26926 * C1683 + C81009 * C1691) * C2615 -
                      (C26926 * C1695 + C81009 * C1708) * C2609 +
                      (C26926 * C1685 + C81009 * C1696) * C2616 +
                      (C26926 * C1697 + C81009 * C1709) * C80966) *
                         C26924 +
                     ((C26926 * C3980 + C81009 * C3984) * C2614 -
                      ((C26926 * C3985 + C81009 * C3991) * C2607 +
                       (C26926 * C3979 + C81009 * C3983) * C2613) +
                      (C26926 * C3986 + C81009 * C3992) * C2608 -
                      (C26926 * C3981 + C81009 * C3987) * C2615 -
                      (C26926 * C3988 + C81009 * C3993) * C2609 +
                      (C26926 * C3982 + C81009 * C3989) * C2616 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C26925) *
                        C81012 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C26924 +
                      (C32926 + C32927 - C32928 - C32929) * C26925) *
                         C81012 * C80933 +
                     (((C26926 * C1682 + C81009 * C1690) * C78260 -
                       ((C26926 * C1693 + C81009 * C1707) * C80916 +
                        (C26926 * C1684 + C81009 * C1694) * C78279) +
                       (C26926 * C1692 + C81009 * C1706) * C80598) *
                          C26924 +
                      (C33590 - (C33591 + C33592) + C33593) * C26925) *
                         C81012 * C80726) *
                        C4984 +
                    (((C32928 - (C32927 + C32926) + C32929) * C26924 +
                      (C32930 - (C32931 + C32932) + C32933) * C26925) *
                         C81012 * C80933 +
                     ((C33592 + C33591 - C33590 - C33593) * C26924 +
                      (C33594 + C33595 - C33602 - C33603) * C26925) *
                         C81012 * C80726) *
                        C4985 +
                    (((C32932 + C32931 - C32930 - C32933) * C26924 +
                      (C32934 + C32935 - C32942 - C32943) * C26925) *
                         C81012 * C80933 +
                     ((C33602 - (C33595 + C33594) + C33603) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C78260 -
                       ((C26926 * C8503 + C81009 * C8505) * C80916 +
                        (C26926 * C8499 + C81009 * C8501) * C78279) +
                       (C26926 * C8504 + C81009 * C8506) * C80598) *
                          C26925) *
                         C81012 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C26924 +
            (C27364 * C165 + C27474 * C80628) * C26925) *
               C81012 * C2607 -
           ((C27476 * C80628 + C27366 * C165) * C26925 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C26924) *
               C81012 * C2608 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C26924 +
            (C27368 * C165 + C27478 * C80628) * C26925) *
               C81012 * C2609 -
           ((C28882 * C80628 + C28810 * C165) * C26925 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C26924) *
               C81012 * C80966) *
              C80933 +
          ((((C26926 * C1682 + C81009 * C1690) * C165 +
             (C26926 * C1788 + C81009 * C1796) * C80628) *
                C26924 +
            ((C26926 * C3980 + C81009 * C3984) * C165 +
             (C26926 * C4094 + C81009 * C4098) * C80628) *
                C26925) *
               C81012 * C2608 -
           (((C26926 * C4093 + C81009 * C4097) * C80628 +
             (C26926 * C3979 + C81009 * C3983) * C165) *
                C26925 +
            ((C26926 * C1790 + C81009 * C1798) * C80628 +
             (C26926 * C1684 + C81009 * C1694) * C165) *
                C26924) *
               C81012 * C2607 -
           (((C26926 * C4095 + C81009 * C4099) * C80628 +
             (C26926 * C3981 + C81009 * C3987) * C165) *
                C26925 +
            ((C26926 * C1789 + C81009 * C1797) * C80628 +
             (C26926 * C1683 + C81009 * C1691) * C165) *
                C26924) *
               C81012 * C2609 +
           (((C26926 * C1685 + C81009 * C1696) * C165 +
             (C26926 * C1791 + C81009 * C1799) * C80628) *
                C26924 +
            ((C26926 * C3982 + C81009 * C3989) * C165 +
             (C26926 * C4096 + C81009 * C4100) * C80628) *
                C26925) *
               C81012 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5064 +
             (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
             C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
                C26924 +
            (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
             C31658 * C5066 + C31714 * C80962) *
                C26925) *
               C81012 * C80916 +
           ((C27366 * C5065 -
             ((C26926 * C167 + C81009 * C173) * C4984 +
              (C26926 * C100 + C81009 * C106) * C5064) +
             C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
                C26924 +
            (C27370 * C5065 - (C27476 * C4984 + C27366 * C5064) +
             C27477 * C4985 - C32940 * C5066 - C33012 * C80962) *
                C26925) *
               C81012 * C80598) *
              C80933 +
          (((C30064 * C5065 -
             ((C26926 * C1790 + C81009 * C1798) * C4984 +
              (C26926 * C1684 + C81009 * C1694) * C5064) +
             C30178 * C4985 - C32160 * C5066 - C32252 * C80962) *
                C26924 +
            (C32160 * C5065 - (C30178 * C4984 + C30064 * C5064) +
             C32252 * C4985 - (C26926 * C8499 + C81009 * C8501) * C5066 -
             (C26926 * C8573 + C81009 * C8575) * C80962) *
                C26925) *
               C81012 * C80916 +
           (((C26926 * C1682 + C81009 * C1690) * C5064 +
             (C26926 * C1788 + C81009 * C1796) * C4984 - C30062 * C5065 -
             C30179 * C4985 + C33600 * C5066 + C33704 * C80962) *
                C26924 +
            (C30062 * C5064 + C30179 * C4984 - C33600 * C5065 - C33704 * C4985 +
             (C26926 * C8500 + C81009 * C8502) * C5066 +
             (C26926 * C8574 + C81009 * C8576) * C80962) *
                C26925) *
               C81012 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[48] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      (C26926 * C1684 + C81009 * C1694) * C3422 -
                      (C26926 * C1882 + C81009 * C1890) * C80726) *
                         C26924 +
                     (C27364 * C3421 + C27572 * C80933 -
                      (C26926 * C3979 + C81009 * C3983) * C3422 -
                      (C26926 * C4199 + C81009 * C4203) * C80726) *
                         C26925) *
                        C81012 * C80628 * C2607 +
                    (((C26926 * C1682 + C81009 * C1690) * C3422 -
                      ((C26926 * C222 + C81009 * C228) * C80933 +
                       (C26926 * C100 + C81009 * C106) * C3421) +
                      (C26926 * C1881 + C81009 * C1889) * C80726) *
                         C26924 +
                     ((C26926 * C3980 + C81009 * C3984) * C3422 -
                      (C27574 * C80933 + C27366 * C3421) +
                      (C26926 * C4200 + C81009 * C4204) * C80726) *
                         C26925) *
                        C81012 * C80628 * C2608 +
                    (((C26926 * C101 + C81009 * C109) * C3421 +
                      (C26926 * C223 + C81009 * C229) * C80933 -
                      (C26926 * C1683 + C81009 * C1691) * C3422 -
                      (C26926 * C1885 + C81009 * C1893) * C80726) *
                         C26924 +
                     (C27368 * C3421 + C27576 * C80933 -
                      (C26926 * C3981 + C81009 * C3987) * C3422 -
                      (C26926 * C4201 + C81009 * C4205) * C80726) *
                         C26925) *
                        C81012 * C80628 * C2609 +
                    (((C26926 * C1685 + C81009 * C1696) * C3422 -
                      ((C26926 * C224 + C81009 * C230) * C80933 +
                       (C26926 * C102 + C81009 * C111) * C3421) +
                      (C26926 * C1887 + C81009 * C1895) * C80726) *
                         C26924 +
                     ((C26926 * C3982 + C81009 * C3989) * C3422 -
                      (C28952 * C80933 + C28810 * C3421) +
                      (C26926 * C4202 + C81009 * C4206) * C80726) *
                         C26925) *
                        C81012 * C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       (C26926 * C1684 + C81009 * C1694) * C3422 -
                       (C26926 * C1882 + C81009 * C1890) * C80726) *
                          C26924 +
                      (C30279 + C30280 - C30281 - C30297) * C26925) *
                         C81012 * C4984 +
                     ((C30281 - (C30280 + C30279) + C30297) * C26924 +
                      (C33803 - (C33804 + C33805) + C33806) * C26925) *
                         C81012 * C4985 +
                     ((C33805 + C33804 - C33803 - C33806) * C26924 +
                      (C31658 * C3421 + C31766 * C80933 -
                       (C26926 * C8499 + C81009 * C8501) * C3422 -
                       (C26926 * C8643 + C81009 * C8645) * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C80916 +
                    ((((C26926 * C1682 + C81009 * C1690) * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       (C26926 * C1881 + C81009 * C1889) * C80726) *
                          C26924 +
                      (C30284 - (C30285 + C30286) + C30298) * C26925) *
                         C81012 * C4984 +
                     ((C30286 + C30285 - C30284 - C30298) * C26924 +
                      (C33807 + C33808 - C33809 - C33813) * C26925) *
                         C81012 * C4985 +
                     ((C33809 - (C33808 + C33807) + C33813) * C26924 +
                      ((C26926 * C8500 + C81009 * C8502) * C3422 -
                       (C33082 * C80933 + C32940 * C3421) +
                       (C26926 * C8644 + C81009 * C8646) * C80726) *
                          C26925) *
                         C81012 * C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C2613 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C2607 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C2614 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C2608 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C2615 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C2609 -
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C2616 -
           (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
               C80966) *
              C81012 * C81009 * C80933 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C2614 -
           ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
             C26924 * C1979) *
                C2607 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C2613) +
           (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 + C26925 * C4310) *
               C2608 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C2615 -
           (C27054 * C3988 + C26925 * C4311 + C27053 * C1695 + C26924 * C1981) *
               C2609 +
           (C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C2616 +
           (C27053 * C1697 + C26924 * C1982 + C27054 * C3990 + C26925 * C4312) *
               C80966) *
              C81012 * C81009 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C78279 +
            (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
                C80916 -
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C78260 -
            (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C78260 -
            ((C27054 * C3985 + C26925 * C4309 + C27053 * C1693 +
              C26924 * C1979) *
                 C80916 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C78279) +
            (C27053 * C1692 + C26924 * C1980 + C27054 * C3986 +
             C26925 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C4984 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C78260 -
            ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                 C80916 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C78279) +
            (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C78279 +
            (C27053 * C3985 + C26924 * C4309 + C27054 * C6148 +
             C26925 * C6416) *
                C80916 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C78260 -
            (C27054 * C6147 + C26925 * C6415 + C27053 * C3986 +
             C26924 * C4310) *
                C80598) *
               C81012 * C81009 * C80726) *
              C4985 +
          (((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C78279 +
            (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
                C80916 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C78260 -
            (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
                C80598) *
               C81012 * C81009 * C80933 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C78260 -
            ((C27054 * C8503 + C26925 * C8715 + C27053 * C6148 +
              C26924 * C6416) *
                 C80916 +
             (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
              C26924 * C6410) *
                 C78279) +
            (C27053 * C6147 + C26924 * C6415 + C27054 * C8504 +
             C26925 * C8716) *
                C80598) *
               C81012 * C81009 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C165 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C80628) *
               C81012 * C81009 * C2607 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C80628 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C165) *
               C81012 * C81009 * C2608 +
           ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C165 +
            (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
                C80628) *
               C81012 * C81009 * C2609 -
           ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
                C80628 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C165) *
               C81012 * C81009 * C80966) *
              C80933 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C165 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C80628) *
               C81012 * C81009 * C2608 -
           ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
             C26924 * C2087) *
                C80628 +
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C165) *
               C81012 * C81009 * C2607 -
           ((C27054 * C4095 + C26925 * C4425 + C27053 * C1789 +
             C26924 * C2086) *
                C80628 +
            (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 +
             C26924 * C1973) *
                C165) *
               C81012 * C81009 * C2609 +
           ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 +
             C26925 * C4308) *
                C165 +
            (C27053 * C1791 + C26924 * C2088 + C27054 * C4096 +
             C26925 * C4426) *
                C80628) *
               C81012 * C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C5064 +
            (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
                C4984 -
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C5065 -
            (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
                C4985 +
            (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C5066 +
            (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
                C80962) *
               C81012 * C81009 * C80916 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C5065 -
            ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                 C4984 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C5064) +
            (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
                C4985 -
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C5066 -
            (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
                C80962) *
               C81012 * C81009 * C80598) *
              C80933 +
          (((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C5065 -
            ((C27054 * C4093 + C26925 * C4423 + C27053 * C1790 +
              C26924 * C2087) *
                 C4984 +
             (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
              C26924 * C1972) *
                 C5064) +
            (C27053 * C4093 + C26924 * C4423 + C27054 * C6236 +
             C26925 * C6493) *
                C4985 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C5066 -
            (C27054 * C8573 + C26925 * C8783 + C27053 * C6236 +
             C26924 * C6493) *
                C80962) *
               C81012 * C81009 * C80916 +
           ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C5064 +
            (C27053 * C1788 + C26924 * C2085 + C27054 * C4094 +
             C26925 * C4424) *
                C4984 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C5065 -
            (C27054 * C6235 + C26925 * C6494 + C27053 * C4094 +
             C26924 * C4424) *
                C4985 +
            (C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C5066 +
            (C27053 * C6235 + C26924 * C6494 + C27054 * C8574 +
             C26925 * C8784) *
                C80962) *
               C81012 * C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C3421 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80933 -
           (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 + C26924 * C1972) *
               C3422 -
           (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 + C26924 * C2187) *
               C80726) *
              C81012 * C81009 * C80628 * C2607 +
          ((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 + C26925 * C4306) *
               C3422 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80933 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C3421) +
           (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 + C26925 * C4540) *
               C80726) *
              C81012 * C81009 * C80628 * C2608 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C3421 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C80933 -
           (C27054 * C3981 + C26925 * C4307 + C27053 * C1683 + C26924 * C1973) *
               C3422 -
           (C27054 * C4201 + C26925 * C4541 + C27053 * C1885 + C26924 * C2191) *
               C80726) *
              C81012 * C81009 * C80628 * C2609 +
          ((C27053 * C1685 + C26924 * C1974 + C27054 * C3982 + C26925 * C4308) *
               C3422 -
           ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
                C80933 +
            (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
                C3421) +
           (C27053 * C1887 + C26924 * C2193 + C27054 * C4202 + C26925 * C4542) *
               C80726) *
              C81012 * C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C3421 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80933 -
            (C27054 * C3979 + C26925 * C4305 + C27053 * C1684 +
             C26924 * C1972) *
                C3422 -
            (C27054 * C4199 + C26925 * C4539 + C27053 * C1882 +
             C26924 * C2187) *
                C80726) *
               C81012 * C81009 * C4984 +
           ((C27053 * C3979 + C26924 * C4305 + C27054 * C6140 +
             C26925 * C6410) *
                C3422 -
            ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                 C80933 +
             (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                 C3421) +
            (C27053 * C4199 + C26924 * C4539 + C27054 * C6324 +
             C26925 * C6575) *
                C80726) *
               C81012 * C81009 * C4985 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C3421 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80933 -
            (C27054 * C8499 + C26925 * C8713 + C27053 * C6140 +
             C26924 * C6410) *
                C3422 -
            (C27054 * C8643 + C26925 * C8851 + C27053 * C6324 +
             C26924 * C6575) *
                C80726) *
               C81012 * C81009 * C80962) *
              C80916 +
          (((C27053 * C1682 + C26924 * C1971 + C27054 * C3980 +
             C26925 * C4306) *
                C3422 -
            ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                 C80933 +
             (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                 C3421) +
            (C27053 * C1881 + C26924 * C2189 + C27054 * C4200 +
             C26925 * C4540) *
                C80726) *
               C81012 * C81009 * C4984 +
           ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C3421 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80933 -
            (C27054 * C6139 + C26925 * C6409 + C27053 * C3980 +
             C26924 * C4306) *
                C3422 -
            (C27054 * C6323 + C26925 * C6577 + C27053 * C4200 +
             C26924 * C4540) *
                C80726) *
               C81012 * C81009 * C4985 +
           ((C27053 * C6139 + C26924 * C6409 + C27054 * C8500 +
             C26925 * C8714) *
                C3422 -
            ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 +
              C26924 * C1258) *
                 C80933 +
             (C27054 * C5658 + C26925 * C5821 + C27053 * C751 +
              C26924 * C1040) *
                 C3421) +
            (C27053 * C6323 + C26924 * C6577 + C27054 * C8644 +
             C26925 * C8852) *
                C80726) *
               C81012 * C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[48] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C2613 +
                      (C490 * C107 + C81012 * C497) * C2607 - C520 * C2614 -
                      C521 * C2608 + C522 * C2615 + C523 * C2609 -
                      C524 * C2616 - C525 * C80966) *
                         C81009 * C26924 +
                     (C29218 + C29219 - C29220 - C29221 + C29222 + C29223 -
                      C29224 - C29225) *
                         C81009 * C26925) *
                        C80933 +
                    ((C2326 * C2614 -
                      ((C490 * C1693 + C81012 * C2301) * C2607 +
                       (C490 * C1684 + C81012 * C2294) * C2613) +
                      C2327 * C2608 - C2328 * C2615 - C2329 * C2609 +
                      C3726 * C2616 + C3727 * C80966) *
                         C81009 * C26924 +
                     (C4672 * C2614 -
                      ((C490 * C3985 + C81012 * C4659) * C2607 +
                       (C490 * C3979 + C81012 * C4655) * C2613) +
                      C4673 * C2608 - C4674 * C2615 - C4675 * C2609 +
                      (C490 * C3982 + C81012 * C4658) * C2616 +
                      (C490 * C3990 + C81012 * C4662) * C80966) *
                         C81009 * C26925) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C78279 +
                       (C490 * C107 + C81012 * C497) * C80916 - C520 * C78260 -
                       C521 * C80598) *
                          C81009 * C26924 +
                      (C33348 + C33349 - C33350 - C33351) * C81009 * C26925) *
                         C80933 +
                     ((C2326 * C78260 -
                       ((C490 * C1693 + C81012 * C2301) * C80916 +
                        (C490 * C1684 + C81012 * C2294) * C78279) +
                       C2327 * C80598) *
                          C81009 * C26924 +
                      (C34206 - (C34207 + C34208) + C34209) * C81009 * C26925) *
                         C80726) *
                        C4984 +
                    (((C33350 - (C33349 + C33348) + C33351) * C81009 * C26924 +
                      (C33352 - (C33353 + C33354) + C33355) * C81009 * C26925) *
                         C80933 +
                     ((C34208 + C34207 - C34206 - C34209) * C81009 * C26924 +
                      (C34210 + C34211 - C34212 - C34213) * C81009 * C26925) *
                         C80726) *
                        C4985 +
                    (((C33354 + C33353 - C33352 - C33355) * C81009 * C26924 +
                      (C33356 + C33357 - C33358 - C33359) * C81009 * C26925) *
                         C80933 +
                     ((C34212 - (C34211 + C34210) + C34213) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C78260 -
                       ((C490 * C8503 + C81012 * C8921) * C80916 +
                        (C490 * C8499 + C81012 * C8919) * C78279) +
                       (C490 * C8504 + C81012 * C8922) * C80598) *
                          C81009 * C26925) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C165 +
             (C490 * C166 + C81012 * C569) * C80628) *
                C81009 * C26924 +
            (C27896 * C165 + C27982 * C80628) * C81009 * C26925) *
               C2607 -
           ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
            (C592 + C576) * C81009 * C26924) *
               C2608 +
           ((C581 + C593) * C81009 * C26924 +
            (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
               C2609 -
           ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
            (C594 + C582) * C81009 * C26924) *
               C80966) *
              C80933 +
          (((C2416 + C2432) * C81009 * C26924 +
            (C4672 * C165 + C4788 * C80628) * C81009 * C26925) *
               C2608 -
           (((C490 * C4093 + C81012 * C4773) * C80628 +
             (C490 * C3979 + C81012 * C4655) * C165) *
                C81009 * C26925 +
            ((C490 * C1790 + C81012 * C2409) * C80628 +
             (C490 * C1684 + C81012 * C2294) * C165) *
                C81009 * C26924) *
               C2607 -
           ((C4789 * C80628 + C4674 * C165) * C81009 * C26925 +
            (C2433 + C2419) * C81009 * C26924) *
               C2609 +
           ((C3797 + C3799) * C81009 * C26924 +
            ((C490 * C3982 + C81012 * C4658) * C165 +
             (C490 * C4096 + C81012 * C4776) * C80628) *
                C81009 * C26925) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C490 * C99 + C81012 * C491) * C5064 +
             (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
             C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
                C81009 * C26924 +
            (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
             C31956 * C5066 + C32011 * C80962) *
                C81009 * C26925) *
               C80916 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81009 *
                C26924 +
            (C1394 * C5065 - (C1496 * C4984 + C1390 * C5064) + C1497 * C4985 -
             C7340 * C5066 - C7418 * C80962) *
                C81009 * C26925) *
               C80598) *
              C80933 +
          (((C30701 * C5065 -
             ((C490 * C1790 + C81012 * C2409) * C4984 +
              (C490 * C1684 + C81012 * C2294) * C5064) +
             C30804 * C4985 - C32670 * C5066 - C32761 * C80962) *
                C81009 * C26924 +
            (C32670 * C5065 - (C30804 * C4984 + C30701 * C5064) +
             C32761 * C4985 - (C490 * C8499 + C81012 * C8919) * C5066 -
             (C490 * C8573 + C81012 * C8989) * C80962) *
                C81009 * C26925) *
               C80916 +
           ((C8321 + C8320 - C8319 - C8322 + C8323 + C8327) * C81009 * C26924 +
            (C4672 * C5064 + C4788 * C4984 - C8218 * C5065 - C8326 * C4985 +
             (C490 * C8500 + C81012 * C8920) * C5066 +
             (C490 * C8574 + C81012 * C8990) * C80962) *
                C81009 * C26925) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[48] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C3421 +
                      (C490 * C221 + C81012 * C637) * C80933 -
                      (C490 * C1684 + C81012 * C2294) * C3422 -
                      (C490 * C1882 + C81012 * C2509) * C80726) *
                         C81009 * C26924 +
                     (C27896 * C3421 + C28064 * C80933 -
                      (C490 * C3979 + C81012 * C4655) * C3422 -
                      (C490 * C4199 + C81012 * C4889) * C80726) *
                         C81009 * C26925) *
                        C80628 * C2607 +
                    ((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                     (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                        C80628 * C2608 +
                    ((C3873 + C3872 - C3871 - C3874) * C81009 * C26924 +
                     (C4899 + C4900 - C4901 - C4907) * C81009 * C26925) *
                        C80628 * C2609 +
                    ((C3877 - (C3876 + C3875) + C3881) * C81009 * C26924 +
                     ((C490 * C3982 + C81012 * C4658) * C3422 -
                      (C3214 * C80933 + C3060 * C3421) +
                      (C490 * C4202 + C81012 * C4892) * C80726) *
                         C81009 * C26925) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C3421 +
                       (C490 * C221 + C81012 * C637) * C80933 -
                       (C490 * C1684 + C81012 * C2294) * C3422 -
                       (C490 * C1882 + C81012 * C2509) * C80726) *
                          C81009 * C26924 +
                      (C30903 + C30904 - C30905 - C30909) * C81009 * C26925) *
                         C4984 +
                     ((C30905 - (C30904 + C30903) + C30909) * C81009 * C26924 +
                      (C34410 - (C34411 + C34412) + C34413) * C81009 * C26925) *
                         C4985 +
                     ((C34412 + C34411 - C34410 - C34413) * C81009 * C26924 +
                      (C31956 * C3421 + C32062 * C80933 -
                       (C490 * C8499 + C81012 * C8919) * C3422 -
                       (C490 * C8643 + C81012 * C9057) * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C80916 +
                    (((C3869 - (C3868 + C3867) + C3870) * C81009 * C26924 +
                      (C4894 - (C4895 + C4896) + C4906) * C81009 * C26925) *
                         C4984 +
                     ((C4896 + C4895 - C4894 - C4906) * C81009 * C26924 +
                      (C8427 + C8428 - C8429 - C8433) * C81009 * C26925) *
                         C4985 +
                     ((C8429 - (C8428 + C8427) + C8433) * C81009 * C26924 +
                      ((C490 * C8500 + C81012 * C8920) * C3422 -
                       (C7490 * C80933 + C7340 * C3421) +
                       (C490 * C8644 + C81012 * C9058) * C80726) *
                          C81009 * C26925) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C94 +
           (C26926 * C107 + C81009 * C117) * C83 -
           (C26926 * C100 + C81009 * C106) * C95 -
           (C26926 * C108 + C81009 * C118) * C84 +
           (C26926 * C101 + C81009 * C109) * C96 +
           (C26926 * C110 + C81009 * C119) * C85 -
           (C26926 * C102 + C81009 * C111) * C97 -
           (C26926 * C112 + C81009 * C120) * C86 +
           (C26926 * C103 + C81009 * C113) * C98 +
           (C26926 * C114 + C81009 * C121) * C87) *
              C26924 +
          ((C26926 * C748 + C81009 * C758) * C94 +
           (C26926 * C757 + C81009 * C771) * C83 -
           (C26926 * C746 + C81009 * C754) * C95 -
           (C26926 * C756 + C81009 * C770) * C84 +
           (C26926 * C747 + C81009 * C755) * C96 +
           (C26926 * C759 + C81009 * C772) * C85 -
           (C26926 * C749 + C81009 * C760) * C97 -
           (C26926 * C761 + C81009 * C773) * C86 +
           (C26926 * C2617 + C81009 * C2618) * C98 +
           (C26926 * C2619 + C81009 * C2620) * C87) *
              C26925) *
         C81012 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C27376 + C27377 - C27378 - C27379 + C27380 + C27381) * C26925) *
              C81012 * C80639 * C81003 +
          ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C26924 +
           (C27382 - (C27383 + C27384) + C27385 - C27386 - C27387) * C26925) *
              C81012 * C80639 * C80988 +
          ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C26924 +
           ((C26926 * C5659 + C81009 * C5665) * C743 +
            (C26926 * C5663 + C81009 * C5671) * C737 -
            (C26926 * C5658 + C81009 * C5664) * C744 -
            (C26926 * C5662 + C81009 * C5670) * C738 +
            (C26926 * C6899 + C81009 * C6900) * C745 +
            (C26926 * C6901 + C81009 * C6902) * C80954) *
               C26925) *
              C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C26924 +
           (C30984 + C30985 - C30986 - C30987 + C30988 + C30989) * C26925) *
              C81012 * C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C26924 +
           (C30990 - (C30991 + C30992) + C30993 - C30994 - C30995) * C26925) *
              C81012 * C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C26924 +
           ((C26926 * C5659 + C81009 * C5665) * C4987 +
            (C26926 * C5663 + C81009 * C5671) * C80998 -
            (C26926 * C5658 + C81009 * C5664) * C4988 -
            (C26926 * C5662 + C81009 * C5670) * C80982 +
            (C26926 * C6899 + C81009 * C6900) * C4989 +
            (C26926 * C6901 + C81009 * C6902) * C80954) *
               C26925) *
              C81012 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C26924 +
           (C31646 + C31647) * C26925) *
              C81012 * C80639 * C5652 -
          ((C31648 + C31649) * C26925 + (C31647 + C31646) * C26924) * C81012 *
              C80639 * C5653 +
          ((C31649 + C31648) * C26924 + (C31662 + C31663) * C26925) * C81012 *
              C80639 * C5654 -
          ((C31664 + C31665) * C26925 + (C31663 + C31662) * C26924) * C81012 *
              C80639 * C5655 +
          ((C31665 + C31664) * C26924 +
           ((C26926 * C31641 + C81009 * C31642) * C5657 +
            (C26926 * C31643 + C81009 * C31644) * C80588) *
               C26925) *
              C81012 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C26924 +
           ((C26926 * C748 + C81009 * C758) * C165 +
            (C26926 * C856 + C81009 * C864) * C80628) *
               C26925) *
              C81012 * C83 -
          (((C26926 * C855 + C81009 * C863) * C80628 +
            (C26926 * C746 + C81009 * C754) * C165) *
               C26925 +
           ((C26926 * C167 + C81009 * C173) * C80628 +
            (C26926 * C100 + C81009 * C106) * C165) *
               C26924) *
              C81012 * C84 +
          (((C26926 * C101 + C81009 * C109) * C165 +
            (C26926 * C168 + C81009 * C174) * C80628) *
               C26924 +
           ((C26926 * C747 + C81009 * C755) * C165 +
            (C26926 * C859 + C81009 * C867) * C80628) *
               C26925) *
              C81012 * C85 -
          (((C26926 * C861 + C81009 * C869) * C80628 +
            (C26926 * C749 + C81009 * C760) * C165) *
               C26925 +
           ((C26926 * C169 + C81009 * C175) * C80628 +
            (C26926 * C102 + C81009 * C111) * C165) *
               C26924) *
              C81012 * C86 +
          (((C26926 * C103 + C81009 * C113) * C165 +
            (C26926 * C170 + C81009 * C176) * C80628) *
               C26924 +
           ((C26926 * C2617 + C81009 * C2618) * C165 +
            (C26926 * C2689 + C81009 * C2690) * C80628) *
               C26925) *
              C81012 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C26924 +
           (C27364 * C852 + C27474 * C81003 - C27372 * C853 - C27475 * C80988 +
            (C26926 * C5659 + C81009 * C5665) * C854 +
            (C26926 * C5722 + C81009 * C5726) * C80962) *
               C26925) *
              C81012 * C737 +
          ((C27366 * C853 -
            ((C26926 * C167 + C81009 * C173) * C81003 +
             (C26926 * C100 + C81009 * C106) * C852) +
            C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
               C26924 +
           (C27370 * C853 - (C27476 * C81003 + C27366 * C852) +
            C27477 * C80988 - (C26926 * C5658 + C81009 * C5664) * C854 -
            (C26926 * C5721 + C81009 * C5725) * C80962) *
               C26925) *
              C81012 * C738 +
          (((C26926 * C101 + C81009 * C109) * C852 +
            (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
            C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
               C26924 +
           (C27368 * C852 + C27478 * C81003 - C27374 * C853 - C27479 * C80988 +
            (C26926 * C6899 + C81009 * C6900) * C854 +
            (C26926 * C6973 + C81009 * C6974) * C80962) *
               C26925) *
              C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C26924 +
           (C27364 * C5064 + C27474 * C4984 - C27372 * C5065 - C27475 * C4985 +
            (C26926 * C5659 + C81009 * C5665) * C5066 +
            (C26926 * C5722 + C81009 * C5726) * C80962) *
               C26925) *
              C81012 * C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C26924 +
           (C27370 * C5065 - (C27476 * C4984 + C27366 * C5064) +
            C27477 * C4985 - (C26926 * C5658 + C81009 * C5664) * C5066 -
            (C26926 * C5721 + C81009 * C5725) * C80962) *
               C26925) *
              C81012 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C26924 +
           (C27368 * C5064 + C27478 * C4984 - C27374 * C5065 - C27479 * C4985 +
            (C26926 * C6899 + C81009 * C6900) * C5066 +
            (C26926 * C6973 + C81009 * C6974) * C80962) *
               C26925) *
              C81012 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C26924 +
          (C27364 * C5716 + C27474 * C5652 - C27372 * C5717 - C27475 * C5653 +
           C31658 * C5718 + C31714 * C5654 - C31661 * C5719 - C31715 * C5655 +
           (C26926 * C31641 + C81009 * C31642) * C5720 +
           (C26926 * C31707 + C81009 * C31708) * C5656) *
              C26925) *
         C81012 * C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eexz[49] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C220 +
                      (C26926 * C221 + C81009 * C227) * C80639) *
                         C26924 +
                     ((C26926 * C748 + C81009 * C758) * C220 +
                      (C26926 * C946 + C81009 * C954) * C80639) *
                         C26925) *
                        C81012 * C80628 * C83 -
                    (((C26926 * C945 + C81009 * C953) * C80639 +
                      (C26926 * C746 + C81009 * C754) * C220) *
                         C26925 +
                     ((C26926 * C222 + C81009 * C228) * C80639 +
                      (C26926 * C100 + C81009 * C106) * C220) *
                         C26924) *
                        C81012 * C80628 * C84 +
                    (((C26926 * C101 + C81009 * C109) * C220 +
                      (C26926 * C223 + C81009 * C229) * C80639) *
                         C26924 +
                     ((C26926 * C747 + C81009 * C755) * C220 +
                      (C26926 * C949 + C81009 * C957) * C80639) *
                         C26925) *
                        C81012 * C80628 * C85 -
                    (((C26926 * C951 + C81009 * C959) * C80639 +
                      (C26926 * C749 + C81009 * C760) * C220) *
                         C26925 +
                     ((C26926 * C224 + C81009 * C230) * C80639 +
                      (C26926 * C102 + C81009 * C111) * C220) *
                         C26924) *
                        C81012 * C80628 * C86 +
                    (((C26926 * C103 + C81009 * C113) * C220 +
                      (C26926 * C225 + C81009 * C231) * C80639) *
                         C26924 +
                     ((C26926 * C2617 + C81009 * C2618) * C220 +
                      (C26926 * C2757 + C81009 * C2758) * C80639) *
                         C26925) *
                        C81012 * C80628 * C87)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C26924 +
                      (C27554 + C27578) * C26925) *
                         C81012 * C81003 -
                     ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                         C81012 * C80988 +
                     ((C27559 + C27579) * C26924 +
                      ((C26926 * C5659 + C81009 * C5665) * C220 +
                       (C26926 * C5772 + C81009 * C5776) * C80639) *
                          C26925) *
                         C81012 * C80962) *
                        C737 +
                    (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                         C81012 * C80988 -
                     ((C27580 + C27560) * C26925 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C26924) *
                         C81012 * C81003 -
                     (((C26926 * C5771 + C81009 * C5775) * C80639 +
                       (C26926 * C5658 + C81009 * C5664) * C220) *
                          C26925 +
                      (C27581 + C27563) * C26924) *
                         C81012 * C80962) *
                        C738 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C26924 +
                      (C27566 + C27582) * C26925) *
                         C81012 * C81003 -
                     ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) *
                         C81012 * C80988 +
                     ((C27571 + C27583) * C26924 +
                      ((C26926 * C6899 + C81009 * C6900) * C220 +
                       (C26926 * C7041 + C81009 * C7042) * C80639) *
                          C26925) *
                         C81012 * C80962) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C26924 +
                      (C27554 + C27578) * C26925) *
                         C81012 * C4984 -
                     ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                         C81012 * C4985 +
                     ((C27559 + C27579) * C26924 +
                      ((C26926 * C5659 + C81009 * C5665) * C220 +
                       (C26926 * C5772 + C81009 * C5776) * C80639) *
                          C26925) *
                         C81012 * C80962) *
                        C80998 +
                    (((C27560 + C27580) * C26924 + (C27563 + C27581) * C26925) *
                         C81012 * C4985 -
                     ((C27580 + C27560) * C26925 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C26924) *
                         C81012 * C4984 -
                     (((C26926 * C5771 + C81009 * C5775) * C80639 +
                       (C26926 * C5658 + C81009 * C5664) * C220) *
                          C26925 +
                      (C27581 + C27563) * C26924) *
                         C81012 * C80962) *
                        C80982 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C26924 +
                      (C27566 + C27582) * C26925) *
                         C81012 * C4984 -
                     ((C27583 + C27571) * C26925 + (C27582 + C27566) * C26924) *
                         C81012 * C4985 +
                     ((C27571 + C27583) * C26924 +
                      ((C26926 * C6899 + C81009 * C6900) * C220 +
                       (C26926 * C7041 + C81009 * C7042) * C80639) *
                          C26925) *
                         C81012 * C80962) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C220 +
                      (C26926 * C221 + C81009 * C227) * C80639) *
                         C26924 +
                     (C27554 + C27578) * C26925) *
                        C81012 * C5652 -
                    ((C27579 + C27559) * C26925 + (C27578 + C27554) * C26924) *
                        C81012 * C5653 +
                    ((C27559 + C27579) * C26924 + (C31760 + C31768) * C26925) *
                        C81012 * C5654 -
                    ((C31769 + C31765) * C26925 + (C31768 + C31760) * C26924) *
                        C81012 * C5655 +
                    ((C31765 + C31769) * C26924 +
                     ((C26926 * C31641 + C81009 * C31642) * C220 +
                      (C26926 * C31757 + C81009 * C31758) * C80639) *
                         C26925) *
                        C81012 * C5656) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C94 +
          (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
              C83 -
          (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
              C95 -
          (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
              C84 +
          (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
              C96 +
          (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
              C85 -
          (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
              C97 -
          (C27054 * C761 + C26925 * C1046 + C27053 * C112 + C26924 * C285) *
              C86 +
          (C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
              C98 +
          (C27053 * C114 + C26924 * C286 + C27054 * C2619 + C26925 * C2826) *
              C87) *
         C81012 * C81009 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C743 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C737 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C744 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C738 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C745 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C81003 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C744 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C737 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C743) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C738 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C745 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C80988 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C743 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C737 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C744 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C738 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C745 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C80954) *
              C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C4987 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80998 -
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C4988 -
           (C27054 * C756 + C26925 * C1044 + C27053 * C108 + C26924 * C283) *
               C80982 +
           (C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C4989 +
           (C27053 * C110 + C26924 * C284 + C27054 * C759 + C26925 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4984 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C4988 -
           ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
                C80998 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C4987) +
           (C27053 * C756 + C26924 * C1044 + C27054 * C765 + C26925 * C1048) *
               C80982 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C4989 -
           (C27054 * C767 + C26925 * C1049 + C27053 * C759 + C26924 * C1045) *
               C80954) *
              C81012 * C81009 * C80639 * C4985 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C4987 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80998 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C4988 -
           (C27054 * C5662 + C26925 * C5825 + C27053 * C765 + C26924 * C1048) *
               C80982 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C4989 +
           (C27053 * C767 + C26924 * C1049 + C27054 * C6901 + C26925 * C7110) *
               C80954) *
              C81012 * C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5657 +
           (C27053 * C107 + C26924 * C282 + C27054 * C757 + C26925 * C1043) *
               C80588) *
              C81012 * C81009 * C80639 * C5652 -
          ((C27054 * C764 + C26925 * C1047 + C27053 * C757 + C26924 * C1043) *
               C80588 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5657) *
              C81012 * C81009 * C80639 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5657 +
           (C27053 * C764 + C26924 * C1047 + C27054 * C5663 + C26925 * C5826) *
               C80588) *
              C81012 * C81009 * C80639 * C5654 -
          ((C27054 * C5668 + C26925 * C5827 + C27053 * C5663 + C26924 * C5826) *
               C80588 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C5657) *
              C81012 * C81009 * C80639 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C5657 +
           (C27053 * C5668 + C26924 * C5827 + C27054 * C31643 +
            C26925 * C31812) *
               C80588) *
              C81012 * C81009 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C165 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C80628) *
              C81012 * C81009 * C83 -
          ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
               C80628 +
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C165) *
              C81012 * C81009 * C84 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C165 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C80628) *
              C81012 * C81009 * C85 -
          ((C27054 * C861 + C26925 * C1155 + C27053 * C169 + C26924 * C357) *
               C80628 +
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C165) *
              C81012 * C81009 * C86 +
          ((C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
               C165 +
           (C27053 * C170 + C26924 * C358 + C27054 * C2689 + C26925 * C2899) *
               C80628) *
              C81012 * C81009 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C852 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C81003 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C853 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C80988 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C854 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C737 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C853 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C81003 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C852) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C80988 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C854 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80962) *
              C81012 * C81009 * C738 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C852 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C81003 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C853 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C80988 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C854 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C80962) *
              C81012 * C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C5064 +
           (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
               C4984 -
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C5065 -
           (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
               C4985 +
           (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C5066 +
           (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
               C80962) *
              C81012 * C81009 * C80998 +
          ((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
               C5065 -
           ((C27054 * C855 + C26925 * C1151 + C27053 * C167 + C26924 * C355) *
                C4984 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C5064) +
           (C27053 * C855 + C26924 * C1151 + C27054 * C858 + C26925 * C1152) *
               C4985 -
           (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
               C5066 -
           (C27054 * C5721 + C26925 * C5873 + C27053 * C858 + C26924 * C1152) *
               C80962) *
              C81012 * C81009 * C80982 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C5064 +
           (C27053 * C168 + C26924 * C356 + C27054 * C859 + C26925 * C1153) *
               C4984 -
           (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
               C5065 -
           (C27054 * C860 + C26925 * C1154 + C27053 * C859 + C26924 * C1153) *
               C4985 +
           (C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
               C5066 +
           (C27053 * C860 + C26924 * C1154 + C27054 * C6973 + C26925 * C7183) *
               C80962) *
              C81012 * C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
              C5716 +
          (C27053 * C166 + C26924 * C354 + C27054 * C856 + C26925 * C1149) *
              C5652 -
          (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
              C5717 -
          (C27054 * C857 + C26925 * C1150 + C27053 * C856 + C26924 * C1149) *
              C5653 +
          (C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
              C5718 +
          (C27053 * C857 + C26924 * C1150 + C27054 * C5722 + C26925 * C5871) *
              C5654 -
          (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
              C5719 -
          (C27054 * C5723 + C26925 * C5872 + C27053 * C5722 + C26924 * C5871) *
              C5655 +
          (C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
           C26925 * C31811) *
              C5720 +
          (C27053 * C5723 + C26924 * C5872 + C27054 * C31707 +
           C26925 * C31855) *
              C5656) *
         C81012 * C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C220 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80639) *
              C81012 * C81009 * C80628 * C83 -
          ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
               C80639 +
           (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
               C220) *
              C81012 * C81009 * C80628 * C84 +
          ((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
               C220 +
           (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
               C80639) *
              C81012 * C81009 * C80628 * C85 -
          ((C27054 * C951 + C26925 * C1261 + C27053 * C224 + C26924 * C425) *
               C80639 +
           (C27054 * C749 + C26925 * C1038 + C27053 * C102 + C26924 * C279) *
               C220) *
              C81012 * C81009 * C80628 * C86 +
          ((C27053 * C103 + C26924 * C280 + C27054 * C2617 + C26925 * C2825) *
               C220 +
           (C27053 * C225 + C26924 * C426 + C27054 * C2757 + C26925 * C2981) *
               C80639) *
              C81012 * C81009 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C81003 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C80988 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80962) *
              C737 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C80988 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C81003 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80962) *
              C738 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C81003 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C80988 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
                C220 +
            (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
                C80639 +
            (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
                C220 +
            (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80998 +
          (((C27053 * C746 + C26924 * C1035 + C27054 * C751 + C26925 * C1040) *
                C220 +
            (C27053 * C945 + C26924 * C1255 + C27054 * C948 + C26925 * C1258) *
                C80639) *
               C81012 * C81009 * C4985 -
           ((C27054 * C945 + C26925 * C1255 + C27053 * C222 + C26924 * C423) *
                C80639 +
            (C27054 * C746 + C26925 * C1035 + C27053 * C100 + C26924 * C277) *
                C220) *
               C81012 * C81009 * C4984 -
           ((C27054 * C5771 + C26925 * C5917 + C27053 * C948 + C26924 * C1258) *
                C80639 +
            (C27054 * C5658 + C26925 * C5821 + C27053 * C751 + C26924 * C1040) *
                C220) *
               C81012 * C81009 * C80962) *
              C80982 +
          (((C27053 * C101 + C26924 * C278 + C27054 * C747 + C26925 * C1037) *
                C220 +
            (C27053 * C223 + C26924 * C424 + C27054 * C949 + C26925 * C1259) *
                C80639) *
               C81012 * C81009 * C4984 -
           ((C27054 * C950 + C26925 * C1260 + C27053 * C949 + C26924 * C1259) *
                C80639 +
            (C27054 * C752 + C26925 * C1041 + C27053 * C747 + C26924 * C1037) *
                C220) *
               C81012 * C81009 * C4985 +
           ((C27053 * C752 + C26924 * C1041 + C27054 * C6899 + C26925 * C7109) *
                C220 +
            (C27053 * C950 + C26924 * C1260 + C27054 * C7041 + C26925 * C7261) *
                C80639) *
               C81012 * C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C27053 * C99 + C26924 * C276 + C27054 * C748 + C26925 * C1036) *
               C220 +
           (C27053 * C221 + C26924 * C422 + C27054 * C946 + C26925 * C1256) *
               C80639) *
              C81012 * C81009 * C5652 -
          ((C27054 * C947 + C26925 * C1257 + C27053 * C946 + C26924 * C1256) *
               C80639 +
           (C27054 * C750 + C26925 * C1039 + C27053 * C748 + C26924 * C1036) *
               C220) *
              C81012 * C81009 * C5653 +
          ((C27053 * C750 + C26924 * C1039 + C27054 * C5659 + C26925 * C5822) *
               C220 +
           (C27053 * C947 + C26924 * C1257 + C27054 * C5772 + C26925 * C5918) *
               C80639) *
              C81012 * C81009 * C5654 -
          ((C27054 * C5773 + C26925 * C5919 + C27053 * C5772 + C26924 * C5918) *
               C80639 +
           (C27054 * C5660 + C26925 * C5823 + C27053 * C5659 + C26924 * C5822) *
               C220) *
              C81012 * C81009 * C5655 +
          ((C27053 * C5660 + C26924 * C5823 + C27054 * C31641 +
            C26925 * C31811) *
               C220 +
           (C27053 * C5773 + C26924 * C5919 + C27054 * C31757 +
            C26925 * C31898) *
               C80639) *
              C81012 * C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[49] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C490 * C99 + C81012 * C491) * C94 +
                     (C490 * C107 + C81012 * C497) * C83 - C520 * C95 -
                     C521 * C84 + C522 * C96 + C523 * C85 - C524 * C97 -
                     C525 * C86 + C526 * C98 + C527 * C87) *
                        C81009 * C26924 +
                    ((C490 * C748 + C81012 * C1358) * C94 +
                     (C490 * C757 + C81012 * C1365) * C83 - C1390 * C95 -
                     C1391 * C84 + C1392 * C96 + C1393 * C85 - C3060 * C97 -
                     C3061 * C86 + (C490 * C2617 + C81012 * C3053) * C98 +
                     (C490 * C2619 + C81012 * C3054) * C87) *
                        C81009 * C26925) *
                   C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C743 +
                      (C490 * C107 + C81012 * C497) * C737 - C520 * C744 -
                      C521 * C738 + C522 * C745 + C523 * C80954) *
                         C81009 * C26924 +
                     (C27900 + C27901 - C27884 - C27885 + C27886 + C27887) *
                         C81009 * C26925) *
                        C80639 * C81003 +
                    ((C27884 - (C27901 + C27900) + C27885 - C27886 - C27887) *
                         C81009 * C26924 +
                     (C27888 - (C27902 + C27903) + C27893 - C27894 - C27895) *
                         C81009 * C26925) *
                        C80639 * C80988 +
                    ((C27903 + C27902 - C27888 - C27893 + C27894 + C27895) *
                         C81009 * C26924 +
                     ((C490 * C5659 + C81012 * C5964) * C743 +
                      (C490 * C5663 + C81012 * C5968) * C737 - C7340 * C744 -
                      C7341 * C738 + (C490 * C6899 + C81012 * C7333) * C745 +
                      (C490 * C6901 + C81012 * C7334) * C80954) *
                         C81009 * C26925) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C4987 +
                      (C490 * C107 + C81012 * C497) * C80998 - C520 * C4988 -
                      C521 * C80982 + C522 * C4989 + C523 * C80954) *
                         C81009 * C26924 +
                     (C31440 + C31441 - C31442 - C31443 + C31444 + C31445) *
                         C81009 * C26925) *
                        C80639 * C4984 +
                    ((C31442 - (C31441 + C31440) + C31443 - C31444 - C31445) *
                         C81009 * C26924 +
                     (C31446 - (C31447 + C31448) + C31449 - C31450 - C31451) *
                         C81009 * C26925) *
                        C80639 * C4985 +
                    ((C31448 + C31447 - C31446 - C31449 + C31450 + C31451) *
                         C81009 * C26924 +
                     ((C490 * C5659 + C81012 * C5964) * C4987 +
                      (C490 * C5663 + C81012 * C5968) * C80998 - C7340 * C4988 -
                      C7341 * C80982 + (C490 * C6899 + C81012 * C7333) * C4989 +
                      (C490 * C6901 + C81012 * C7334) * C80954) *
                         C81009 * C26925) *
                        C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C5657 +
                      (C490 * C107 + C81012 * C497) * C80588) *
                         C81009 * C26924 +
                     (C31944 + C31945) * C81009 * C26925) *
                        C80639 * C5652 -
                    ((C31946 + C31947) * C81009 * C26925 +
                     (C31945 + C31944) * C81009 * C26924) *
                        C80639 * C5653 +
                    ((C31947 + C31946) * C81009 * C26924 +
                     (C31960 + C31961) * C81009 * C26925) *
                        C80639 * C5654 -
                    ((C31962 + C31963) * C81009 * C26925 +
                     (C31961 + C31960) * C81009 * C26924) *
                        C80639 * C5655 +
                    ((C31963 + C31962) * C81009 * C26924 +
                     ((C490 * C31641 + C81012 * C31941) * C5657 +
                      (C490 * C31643 + C81012 * C31942) * C80588) *
                         C81009 * C26925) *
                        C80639 * C5656)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C165 +
            (C490 * C166 + C81012 * C569) * C80628) *
               C81009 * C26924 +
           ((C490 * C748 + C81012 * C1358) * C165 +
            (C490 * C856 + C81012 * C1471) * C80628) *
               C81009 * C26925) *
              C83 -
          ((C1496 * C80628 + C1390 * C165) * C81009 * C26925 +
           (C592 + C576) * C81009 * C26924) *
              C84 +
          ((C581 + C593) * C81009 * C26924 +
           (C1392 * C165 + C1498 * C80628) * C81009 * C26925) *
              C85 -
          ((C3142 * C80628 + C3060 * C165) * C81009 * C26925 +
           (C594 + C582) * C81009 * C26924) *
              C86 +
          ((C587 + C595) * C81009 * C26924 +
           ((C490 * C2617 + C81012 * C3053) * C165 +
            (C490 * C2689 + C81012 * C3127) * C80628) *
               C81009 * C26925) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C852 +
            (C490 * C166 + C81012 * C569) * C81003 - C27896 * C853 -
            C27982 * C80988 + C27899 * C854 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C852 + C27982 * C81003 - C27899 * C853 - C27983 * C80988 +
            (C490 * C5659 + C81012 * C5964) * C854 +
            (C490 * C5722 + C81012 * C6013) * C80962) *
               C81009 * C26925) *
              C737 +
          ((C1482 - (C1481 + C1480) + C1500 - C1485 - C1501) * C81009 * C26924 +
           (C1394 * C853 - (C1496 * C81003 + C1390 * C852) + C1497 * C80988 -
            C7340 * C854 - C7418 * C80962) *
               C81009 * C26925) *
              C738 +
          ((C1490 + C1489 - C1488 - C1502 + C1493 + C1503) * C81009 * C26924 +
           (C1392 * C852 + C1498 * C81003 - C1396 * C853 - C1499 * C80988 +
            (C490 * C6899 + C81012 * C7333) * C854 +
            (C490 * C6973 + C81012 * C7407) * C80962) *
               C81009 * C26925) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C490 * C99 + C81012 * C491) * C5064 +
            (C490 * C166 + C81012 * C569) * C4984 - C27896 * C5065 -
            C27982 * C4985 + C27899 * C5066 + C27983 * C80962) *
               C81009 * C26924 +
           (C27896 * C5064 + C27982 * C4984 - C27899 * C5065 - C27983 * C4985 +
            (C490 * C5659 + C81012 * C5964) * C5066 +
            (C490 * C5722 + C81012 * C6013) * C80962) *
               C81009 * C26925) *
              C80998 +
          ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C81009 * C26924 +
           (C1394 * C5065 - (C1496 * C4984 + C1390 * C5064) + C1497 * C4985 -
            C7340 * C5066 - C7418 * C80962) *
               C81009 * C26925) *
              C80982 +
          ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C81009 * C26924 +
           (C1392 * C5064 + C1498 * C4984 - C1396 * C5065 - C1499 * C4985 +
            (C490 * C6899 + C81012 * C7333) * C5066 +
            (C490 * C6973 + C81012 * C7407) * C80962) *
               C81009 * C26925) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C490 * C99 + C81012 * C491) * C5716 +
           (C490 * C166 + C81012 * C569) * C5652 - C27896 * C5717 -
           C27982 * C5653 + C27899 * C5718 + C27983 * C5654 - C31956 * C5719 -
           C32011 * C5655 + C31959 * C5720 + C32012 * C5656) *
              C81009 * C26924 +
          (C27896 * C5716 + C27982 * C5652 - C27899 * C5717 - C27983 * C5653 +
           C31956 * C5718 + C32011 * C5654 - C31959 * C5719 - C32012 * C5655 +
           (C490 * C31641 + C81012 * C31941) * C5720 +
           (C490 * C31707 + C81012 * C32005) * C5656) *
              C81009 * C26925) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[49] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C220 +
                      (C490 * C221 + C81012 * C637) * C80639) *
                         C81009 * C26924 +
                     ((C490 * C748 + C81012 * C1358) * C220 +
                      (C490 * C946 + C81012 * C1578) * C80639) *
                         C81009 * C26925) *
                        C80628 * C83 -
                    ((C1602 + C1588) * C81009 * C26925 +
                     (C660 + C644) * C81009 * C26924) *
                        C80628 * C84 +
                    ((C649 + C661) * C81009 * C26924 +
                     (C1592 + C1604) * C81009 * C26925) *
                        C80628 * C85 -
                    ((C3215 + C3213) * C81009 * C26925 +
                     (C662 + C650) * C81009 * C26924) *
                        C80628 * C86 +
                    ((C655 + C663) * C81009 * C26924 +
                     ((C490 * C2617 + C81012 * C3053) * C220 +
                      (C490 * C2757 + C81012 * C3209) * C80639) *
                         C81009 * C26925) *
                        C80628 * C87)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C81003 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C80988 +
                     ((C28063 + C28067) * C81009 * C26924 +
                      ((C490 * C5659 + C81012 * C5964) * C220 +
                       (C490 * C5772 + C81012 * C6060) * C80639) *
                          C81009 * C26925) *
                         C80962) *
                        C737 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C80988 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C81003 -
                     ((C7491 + C7489) * C81009 * C26925 +
                      (C1603 + C1589) * C81009 * C26924) *
                         C80962) *
                        C738 +
                    (((C649 + C661) * C81009 * C26924 +
                      (C1592 + C1604) * C81009 * C26925) *
                         C81003 -
                     ((C1605 + C1597) * C81009 * C26925 +
                      (C1604 + C1592) * C81009 * C26924) *
                         C80988 +
                     ((C1597 + C1605) * C81009 * C26924 +
                      ((C490 * C6899 + C81012 * C7333) * C220 +
                       (C490 * C7041 + C81012 * C7485) * C80639) *
                          C81009 * C26925) *
                         C80962) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C490 * C99 + C81012 * C491) * C220 +
                       (C490 * C221 + C81012 * C637) * C80639) *
                          C81009 * C26924 +
                      (C28058 + C28066) * C81009 * C26925) *
                         C4984 -
                     ((C28067 + C28063) * C81009 * C26925 +
                      (C28066 + C28058) * C81009 * C26924) *
                         C4985 +
                     ((C28063 + C28067) * C81009 * C26924 +
                      ((C490 * C5659 + C81012 * C5964) * C220 +
                       (C490 * C5772 + C81012 * C6060) * C80639) *
                          C81009 * C26925) *
                         C80962) *
                        C80998 +
                    (((C1588 + C1602) * C81009 * C26924 +
                      (C1589 + C1603) * C81009 * C26925) *
                         C4985 -
                     ((C1602 + C1588) * C81009 * C26925 +
                      (C660 + C644) * C81009 * C26924) *
                         C4984 -
                     ((C7491 + C7489) * C81009 * C26925 +
                      (C1603 + C1589) * C81009 * C26924) *
                         C80962) *
                        C80982 +
                    (((C649 + C661) * C81009 * C26924 +
                      (C1592 + C1604) * C81009 * C26925) *
                         C4984 -
                     ((C1605 + C1597) * C81009 * C26925 +
                      (C1604 + C1592) * C81009 * C26924) *
                         C4985 +
                     ((C1597 + C1605) * C81009 * C26924 +
                      ((C490 * C6899 + C81012 * C7333) * C220 +
                       (C490 * C7041 + C81012 * C7485) * C80639) *
                          C81009 * C26925) *
                         C80962) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C490 * C99 + C81012 * C491) * C220 +
                      (C490 * C221 + C81012 * C637) * C80639) *
                         C81009 * C26924 +
                     (C28058 + C28066) * C81009 * C26925) *
                        C5652 -
                    ((C28067 + C28063) * C81009 * C26925 +
                     (C28066 + C28058) * C81009 * C26924) *
                        C5653 +
                    ((C28063 + C28067) * C81009 * C26924 +
                     (C32056 + C32064) * C81009 * C26925) *
                        C5654 -
                    ((C32065 + C32061) * C81009 * C26925 +
                     (C32064 + C32056) * C81009 * C26924) *
                        C5655 +
                    ((C32061 + C32065) * C81009 * C26924 +
                     ((C490 * C31641 + C81012 * C31941) * C220 +
                      (C490 * C31757 + C81012 * C32054) * C80639) *
                         C81009 * C26925) *
                        C5656) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78289 +
            (C26926 * C107 + C81009 * C117) * C80593 -
            (C26926 * C100 + C81009 * C106) * C78285 -
            (C26926 * C108 + C81009 * C118) * C80601 +
            (C26926 * C101 + C81009 * C109) * C78295 +
            (C26926 * C110 + C81009 * C119) * C15341) *
               C81011 * C52707 +
           (C53812 * C78289 + C53813 * C80593 - C53814 * C78285 -
            C53815 * C80601 + C53816 * C78295 + C53817 * C15341) *
               C81011 * C52708) *
              C80639 * C80682 +
          ((C41174 - (C41173 + C41172) + C41175 - C41176 - C41177) * C81011 *
               C52707 +
           (C41886 - (C41887 + C41888) + C41889 - C41890 - C41891) * C81011 *
               C52708) *
              C80639 * C80689 +
          ((C41180 + C41179 - C41178 - C41181 + C41182 + C41183) * C81011 *
               C52707 +
           (C32160 * C78289 + C32161 * C80593 - C33600 * C78285 -
            C33601 * C80601 + (C26926 * C7589 + C81009 * C7590) * C78295 +
            (C26926 * C7591 + C81009 * C7592) * C15341) *
               C81011 * C52708) *
              C80639 * C15344)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78437 +
            (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
            C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
               C81011 * C52707 +
           (C53812 * C78437 + C53928 * C80682 - C30064 * C78429 -
            C30178 * C80689 + C32160 * C78443 + C32252 * C15344) *
               C81011 * C52708) *
              C80593 +
          ((C27366 * C78429 -
            ((C26926 * C167 + C81009 * C173) * C80682 +
             (C26926 * C100 + C81009 * C106) * C78437) +
            C27476 * C80689 - C27370 * C78443 - C27477 * C15344) *
               C81011 * C52707 +
           (C30062 * C78429 - (C53929 * C80682 + C53814 * C78437) +
            C30179 * C80689 - C33600 * C78443 - C33704 * C15344) *
               C81011 * C52708) *
              C80601 +
          (((C26926 * C101 + C81009 * C109) * C78437 +
            (C26926 * C168 + C81009 * C174) * C80682 - C27368 * C78429 -
            C27478 * C80689 + C27374 * C78443 + C27479 * C15344) *
               C81011 * C52707 +
           (C53816 * C78437 + C53930 * C80682 - C30066 * C78429 -
            C30180 * C80689 + (C26926 * C7589 + C81009 * C7590) * C78443 +
            (C26926 * C7691 + C81009 * C7692) * C15344) *
               C81011 * C52708) *
              C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C81011 * C52707 +
                      (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
                         C80682 -
                     ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                      (C27578 + C27554) * C81011 * C52707) *
                         C80689 +
                     ((C27559 + C27579) * C81011 * C52707 +
                      (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
                         C15344) *
                        C80593 +
                    (((C27560 + C27580) * C81011 * C52707 +
                      (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                         C80689 -
                     ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C81011 * C52707) *
                         C80682 -
                     ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
                      (C27581 + C27563) * C81011 * C52707) *
                         C15344) *
                        C80601 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C81011 * C52707 +
                      (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
                         C80682 -
                     ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
                      (C27582 + C27566) * C81011 * C52707) *
                         C80689 +
                     ((C27571 + C27583) * C81011 * C52707 +
                      ((C26926 * C7589 + C81009 * C7590) * C220 +
                       (C26926 * C7791 + C81009 * C7792) * C80639) *
                          C81011 * C52708) *
                         C15344) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78289 +
            (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
            C306 * C80601 + C307 * C78295 + C308 * C15341) *
               C52707 +
           (C54122 * C78289 + C54123 * C80593 - C2004 * C78285 -
            C2005 * C80601 + C2006 * C78295 + C2007 * C15341) *
               C52708) *
              C81009 * C80639 * C80682 +
          ((C1068 * C78285 -
            ((C275 * C757 + C81011 * C1043) * C80593 +
             (C275 * C748 + C81011 * C1036) * C78289) +
            C1069 * C80601 - C1070 * C78295 - C1071 * C15341) *
               C52707 +
           (C4322 * C78285 - (C56146 * C80593 + C56147 * C78289) +
            C4323 * C80601 - C4324 * C78295 - C4325 * C15341) *
               C52708) *
              C81009 * C80639 * C80689 +
          (((C275 * C750 + C81011 * C1039) * C78289 +
            (C275 * C764 + C81011 * C1047) * C80593 - C1072 * C78285 -
            C1073 * C80601 + C1074 * C78295 + C1075 * C15341) *
               C52707 +
           (C58026 * C78289 + C58027 * C80593 - C7898 * C78285 -
            C7899 * C80601 + (C275 * C7589 + C81011 * C7891) * C78295 +
            (C275 * C7591 + C81011 * C7892) * C15341) *
               C52708) *
              C81009 * C80639 * C15344)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78437 +
            (C275 * C166 + C81011 * C354) * C80682 -
            (C275 * C748 + C81011 * C1036) * C78429 -
            (C275 * C856 + C81011 * C1149) * C80689 +
            (C275 * C750 + C81011 * C1039) * C78443 +
            (C275 * C857 + C81011 * C1150) * C15344) *
               C52707 +
           (C54122 * C78437 + C54210 * C80682 - C56147 * C78429 -
            C56253 * C80689 + C58026 * C78443 + C58125 * C15344) *
               C52708) *
              C81009 * C80593 +
          ((C15650 - (C15649 + C15648) + C15651 - C15652 - C15653) * C52707 +
           (C17348 - (C17349 + C17350) + C17351 - C17352 - C17353) * C52708) *
              C81009 * C80601 +
          ((C15656 + C15655 - C15654 - C15657 + C15658 + C15659) * C52707 +
           (C2006 * C78437 + C2107 * C80682 - C4324 * C78429 - C4439 * C80689 +
            (C275 * C7589 + C81011 * C7891) * C78443 +
            (C275 * C7691 + C81011 * C7997) * C15344) *
               C52708) *
              C81009 * C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C80682 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80689 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            (C58026 * C220 + C58212 * C80639) * C52708) *
               C81009 * C15344) *
              C80593 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80689 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C80682 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C15344) *
              C80601 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C80682 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80689 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C15344) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78289 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80593 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C78285 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80601 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C78295 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C15341) *
              C81009 * C81011 * C80639 * C80682 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C78285 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80593 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C78289) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80601 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C78295 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C15341) *
              C81009 * C81011 * C80639 * C80689 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C78289 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80593 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C78285 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80601 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C78295 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C15341) *
              C81009 * C81011 * C80639 * C15344)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78437 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80682 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C78429 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80689 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C78443 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C15344) *
              C81009 * C81011 * C80593 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C78429 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80682 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78437) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80689 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C78443 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C15344) *
              C81009 * C81011 * C80601 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C78437 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C80682 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C78429 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80689 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C78443 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C15344) *
              C81009 * C81011 * C15341) *
         C80639) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C80682 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80689 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C15344) *
              C80593 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80689 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C80682 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C15344) *
              C80601 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C80682 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80689 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C15344) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C65820 + C65821 - C65822 - C65823) * C81011 * C52708) *
                         C80933 +
                     ((C65822 - (C65821 + C65820) + C65823) * C81011 * C52707 +
                      (C65824 - (C65825 + C65826) + C65827) * C81011 * C52708) *
                         C80726) *
                        C80682 +
                    (((C39644 - (C39643 + C39642) + C39645) * C81011 * C52707 +
                      (C40292 - (C40293 + C40294) + C40295) * C81011 * C52708) *
                         C80933 +
                     ((C40294 + C40293 - C40292 - C40295) * C81011 * C52707 +
                      (C40296 + C40297 - C40298 - C40299) * C81011 * C52708) *
                         C80726) *
                        C80689 +
                    (((C39648 + C39647 - C39646 - C39649) * C81011 * C52707 +
                      (C42780 + C42781 - C42782 - C42783) * C81011 * C52708) *
                         C80933 +
                     ((C42782 - (C42781 + C42780) + C42783) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C13806 -
                       (C32162 * C13799 + C32163 * C13805) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78437 +
             (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
             C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
                C81011 * C52707 +
            (C68418 + C68419 - C68420 - C68421 + C68422 + C68423) * C81011 *
                C52708) *
               C13799 +
           ((C27366 * C78429 -
             ((C26926 * C167 + C81009 * C173) * C80682 +
              (C26926 * C100 + C81009 * C106) * C78437) +
             C27476 * C80689 - C27370 * C78443 - C27477 * C15344) *
                C81011 * C52707 +
            (C68424 - (C68425 + C68426) + C68427 - C68428 - C68429) * C81011 *
                C52708) *
               C80598) *
              C80933 +
          (((C68420 - (C68419 + C68418) + C68421 - C68422 - C68423) * C81011 *
                C52707 +
            (C32158 * C78429 - (C53932 * C80682 + C53820 * C78437) +
             C32253 * C80689 - C32163 * C78443 - C32254 * C15344) *
                C81011 * C52708) *
               C13799 +
           ((C68426 + C68425 - C68424 - C68427 + C68428 + C68429) * C81011 *
                C52707 +
            (C53818 * C78437 + C53931 * C80682 - C36914 * C78429 -
             C37018 * C80689 + (C26926 * C6142 + C81009 * C6152) * C78443 +
             (C26926 * C6240 + C81009 * C6246) * C15344) *
                C81011 * C52708) *
               C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       C53812 * C3422 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C80682 +
                     ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                      (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80689 +
                     ((C33805 + C33804 - C33803 - C33806) * C81011 * C52707 +
                      (C32160 * C3421 + C32347 * C80933 - C32163 * C3422 -
                       C32348 * C80726) *
                          C81011 * C52708) *
                         C15344) *
                        C13799 +
                    (((C53814 * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C80682 +
                     ((C30286 + C30285 - C30284 - C30298) * C81011 * C52707 +
                      (C30062 * C3421 + C30295 * C80933 - C36914 * C3422 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80689 +
                     ((C33809 - (C33808 + C33807) + C33813) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C3422 -
                       (C33812 * C80933 + C33600 * C3421) +
                       (C26926 * C6326 + C81009 * C6332) * C80726) *
                          C81011 * C52708) *
                         C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13805 +
                       (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                       C306 * C80598) *
                          C52707 +
                      (C66138 + C66139 - C66140 - C66141) * C52708) *
                         C81009 * C80933 +
                     ((C66140 - (C66139 + C66138) + C66141) * C52707 +
                      (C66142 - (C66143 + C66144) + C66145) * C52708) *
                         C81009 * C80726) *
                        C80682 +
                    (((C1068 * C13806 -
                       ((C275 * C757 + C81011 * C1043) * C13799 +
                        (C275 * C748 + C81011 * C1036) * C13805) +
                       C1069 * C80598) *
                          C52707 +
                      (C66146 - (C66147 + C66148) + C66149) * C52708) *
                         C81009 * C80933 +
                     ((C66148 + C66147 - C66146 - C66149) * C52707 +
                      (C66150 + C66151 - C66152 - C66153) * C52708) *
                         C81009 * C80726) *
                        C80689 +
                    ((((C275 * C750 + C81011 * C1039) * C13805 +
                       (C275 * C764 + C81011 * C1047) * C13799 -
                       C1072 * C13806 - C1073 * C80598) *
                          C52707 +
                      (C68626 + C68627 - C68628 - C68629) * C52708) *
                         C81009 * C80933 +
                     ((C68628 - (C68627 + C68626) + C68629) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C13806 -
                       (C58028 * C13799 + C58029 * C13805) +
                       (C275 * C6154 + C81011 * C6418) * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78437 +
             (C275 * C166 + C81011 * C354) * C80682 -
             (C275 * C748 + C81011 * C1036) * C78429 -
             (C275 * C856 + C81011 * C1149) * C80689 +
             (C275 * C750 + C81011 * C1039) * C78443 +
             (C275 * C857 + C81011 * C1150) * C15344) *
                C52707 +
            (C68728 + C68729 - C68730 - C68731 + C68732 + C68733) * C52708) *
               C81009 * C13799 +
           ((C15650 - (C15649 + C15648) + C15651 - C15652 - C15653) * C52707 +
            (C17348 - (C17349 + C17350) + C17351 - C17352 - C17353) * C52708) *
               C81009 * C80598) *
              C80933 +
          (((C68730 - (C68729 + C68728) + C68731 - C68732 - C68733) * C52707 +
            (C58024 * C78429 - (C54211 * C80682 + C54125 * C78437) +
             C58126 * C80689 - C58029 * C78443 - C58127 * C15344) *
                C52708) *
               C81009 * C13799 +
           ((C17350 + C17349 - C17348 - C17351 + C17352 + C17353) * C52707 +
            (C2008 * C78437 + C2108 * C80682 - C11280 * C78429 -
             C11386 * C80689 + (C275 * C6142 + C81011 * C6412) * C78443 +
             (C275 * C6240 + C81011 * C6498) * C15344) *
                C52708) *
               C81009 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C3421 +
                       (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
                       C54292 * C80726) *
                          C52707 +
                      (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
                       C54293 * C80726) *
                          C52708) *
                         C81009 * C80682 +
                     ((C56147 * C3422 -
                       ((C275 * C946 + C81011 * C1256) * C80933 +
                        (C275 * C748 + C81011 * C1036) * C3421) +
                       C56355 * C80726) *
                          C52707 +
                      (C58024 * C3422 - (C56355 * C80933 + C56147 * C3421) +
                       C58211 * C80726) *
                          C52708) *
                         C81009 * C80689 +
                     (((C275 * C750 + C81011 * C1039) * C3421 +
                       (C275 * C947 + C81011 * C1257) * C80933 -
                       C58026 * C3422 - C58212 * C80726) *
                          C52707 +
                      (C58026 * C3421 + C58212 * C80933 - C58029 * C3422 -
                       C58213 * C80726) *
                          C52708) *
                         C81009 * C15344) *
                        C13799 +
                    (((C3641 - (C3640 + C3639) + C3642) * C52707 +
                      (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) +
                       C2213 * C80726) *
                          C52708) *
                         C81009 * C80682 +
                     ((C4546 + C4545 - C4544 - C4556) * C52707 +
                      (C4322 * C3421 + C4554 * C80933 - C11280 * C3422 -
                       C11494 * C80726) *
                          C52708) *
                         C81009 * C80689 +
                     ((C8109 - (C8108 + C8107) + C8113) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C3422 -
                       (C8112 * C80933 + C7898 * C3421) +
                       (C275 * C6326 + C81011 * C6578) * C80726) *
                          C52708) *
                         C81009 * C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13805 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C13799 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13806 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13806 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C13799 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13805) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80682 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13806 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C13799 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C13805) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13805 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C13799 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13806 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80689 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C13805 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C13799 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C13806 -
            (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C13806 -
            ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
              C52707 * C6662) *
                 C13799 +
             (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
              C52707 * C6656) *
                 C13805) +
            (C52961 * C6147 + C52707 * C6661 + C52962 * C6154 +
             C52708 * C6664) *
                C80598) *
               C81009 * C81011 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78437 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80682 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C78429 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80689 +
            (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C78443 +
            (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
                C15344) *
               C81009 * C81011 * C13799 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78429 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C80682 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C78437) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80689 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C78443 -
            (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
                C15344) *
               C81009 * C81011 * C80598) *
              C80933 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78429 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C80682 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78437) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80689 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C78443 -
            (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 +
             C52707 * C6739) *
                C15344) *
               C81009 * C81011 * C13799 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78437 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80682 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78429 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80689 +
            (C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C78443 +
            (C52961 * C6235 + C52707 * C6740 + C52962 * C6240 +
             C52708 * C6744) *
                C15344) *
               C81009 * C81011 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C3421 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80933 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C3422 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C80682 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C3422 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80933 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C3421) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80689 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C3421 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80933 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C3422 -
            (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 +
             C52707 * C6821) *
                C80726) *
               C81009 * C81011 * C15344) *
              C13799 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C3422 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80933 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C3421) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C80682 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C3421 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80933 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C3422 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80689 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C3422 -
            ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 +
              C52707 * C1580) *
                 C80933 +
             (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
              C52707 * C1362) *
                 C3421) +
            (C52961 * C6323 + C52707 * C6823 + C52962 * C6326 +
             C52708 * C6824) *
                C80726) *
               C81009 * C81011 * C15344) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13805 +
                      (C26926 * C107 + C81009 * C117) * C13799 -
                      (C26926 * C100 + C81009 * C106) * C13806 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C81011 * C52707 +
                     (C53812 * C13805 + C53813 * C13799 - C53814 * C13806 -
                      C53815 * C80598) *
                         C81011 * C52708) *
                        C80639 * C81013 +
                    ((C39644 - (C39643 + C39642) + C39645) * C81011 * C52707 +
                     (C40292 - (C40293 + C40294) + C40295) * C81011 * C52708) *
                        C80639 * C81006 +
                    ((C39648 + C39647 - C39646 - C39649) * C81011 * C52707 +
                     (C42780 + C42781 - C42782 - C42783) * C81011 * C52708) *
                        C80639 * C80993 +
                    ((C39652 - (C39651 + C39650) + C39653) * C81011 * C52707 +
                     ((C26926 * C8500 + C81009 * C8502) * C13806 -
                      (C34488 * C13799 + C34489 * C13805) +
                      (C26926 * C8504 + C81009 * C8506) * C80598) *
                         C81011 * C52708) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C53812 * C13175 + C53813 * C81010 - C53814 * C13176 -
                      C53815 * C81000 + C53816 * C13177 + C53817 * C80984 -
                      C55186 * C13178 - C55187 * C80966) *
                         C81011 * C52708) *
                        C80639 * C13173 +
                    ((C39034 - (C39033 + C39032) + C39035 - C39036 - C39037 +
                      C39038 + C39039) *
                         C81011 * C52707 +
                     (C30062 * C13176 - (C30063 * C81010 + C30064 * C13175) +
                      C30065 * C81000 - C30066 * C13177 - C30067 * C80984 +
                      (C26926 * C3982 + C81009 * C3989) * C13178 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C81011 * C52708) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C65820 + C65821 - C65822 - C65823) * C81011 * C52708) *
                         C81004 +
                     ((C65822 - (C65821 + C65820) + C65823) * C81011 * C52707 +
                      (C65824 - (C65825 + C65826) + C65827) * C81011 * C52708) *
                         C80990 +
                     ((C65826 + C65825 - C65824 - C65827) * C81011 * C52707 +
                      (C61992 * C13805 + C61993 * C13799 - C63374 * C13806 -
                       C63375 * C80598) *
                          C81011 * C52708) *
                         C80965) *
                        C13173 +
                    (((C39644 - (C39643 + C39642) + C39645) * C81011 * C52707 +
                      (C40292 - (C40293 + C40294) + C40295) * C81011 * C52708) *
                         C81004 +
                     ((C40294 + C40293 - C40292 - C40295) * C81011 * C52707 +
                      (C40296 + C40297 - C40298 - C40299) * C81011 * C52708) *
                         C80990 +
                     ((C40298 - (C40297 + C40296) + C40299) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C13806 -
                       (C38386 * C13799 + C38387 * C13805) +
                       (C26926 * C12548 + C81009 * C12550) * C80598) *
                          C81011 * C52708) *
                         C80965) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C53812 * C13873 + C53928 * C81013 - C30064 * C13874 -
                      C30178 * C81006 + C32160 * C13875 + C32252 * C80993 -
                      C34489 * C13876 - C34562 * C80972) *
                         C81011 * C52708) *
                        C13799 +
                    ((C27366 * C13874 -
                      ((C26926 * C167 + C81009 * C173) * C81013 +
                       (C26926 * C100 + C81009 * C106) * C13873) +
                      C27476 * C81006 - C27370 * C13875 - C27477 * C80993 +
                      C32940 * C13876 + C33012 * C80972) *
                         C81011 * C52707 +
                     (C30062 * C13874 - (C53929 * C81013 + C53814 * C13873) +
                      C30179 * C81006 - C33600 * C13875 - C33704 * C80993 +
                      (C26926 * C8500 + C81009 * C8502) * C13876 +
                      (C26926 * C8574 + C81009 * C8576) * C80972) *
                         C81011 * C52708) *
                        C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13245 +
                      (C26926 * C166 + C81009 * C172) * C13173 -
                      C27364 * C13246 - C27474 * C80686) *
                         C81011 * C52707 +
                     (C53812 * C13245 + C53928 * C13173 - C30064 * C13246 -
                      C30178 * C80686) *
                         C81011 * C52708) *
                        C81010 +
                    ((C27366 * C13246 -
                      ((C26926 * C167 + C81009 * C173) * C13173 +
                       (C26926 * C100 + C81009 * C106) * C13245) +
                      C27476 * C80686) *
                         C81011 * C52707 +
                     (C30062 * C13246 - (C53929 * C13173 + C53814 * C13245) +
                      C30179 * C80686) *
                         C81011 * C52708) *
                        C81000 +
                    (((C26926 * C101 + C81009 * C109) * C13245 +
                      (C26926 * C168 + C81009 * C174) * C13173 -
                      C27368 * C13246 - C27478 * C80686) *
                         C81011 * C52707 +
                     (C53816 * C13245 + C53930 * C13173 - C30066 * C13246 -
                      C30180 * C80686) *
                         C81011 * C52708) *
                        C80984 +
                    ((C28810 * C13246 -
                      ((C26926 * C169 + C81009 * C175) * C13173 +
                       (C26926 * C102 + C81009 * C111) * C13245) +
                      C28882 * C80686) *
                         C81011 * C52707 +
                     ((C26926 * C3982 + C81009 * C3989) * C13246 -
                      (C55259 * C13173 + C55186 * C13245) +
                      (C26926 * C4096 + C81009 * C4100) * C80686) *
                         C81011 * C52708) *
                        C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C65926 + C65927 - C65928 - C65929) * C81011 * C52708) *
                         C13799 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C65930 - (C65931 + C65932) + C65933) * C81011 * C52708) *
                         C80598) *
                        C81004 +
                    (((C65928 - (C65927 + C65926) + C65929) * C81011 * C52707 +
                      (C65934 - (C65935 + C65936) + C65937) * C81011 * C52708) *
                         C13799 +
                     ((C65932 + C65931 - C65930 - C65933) * C81011 * C52707 +
                      (C65938 + C65939 - C65940 - C65941) * C81011 * C52708) *
                         C80598) *
                        C80990 +
                    (((C65936 + C65935 - C65934 - C65937) * C81011 * C52707 +
                      (C61992 * C13245 + C62050 * C13173 - C38387 * C13246 -
                       C38460 * C80686) *
                          C81011 * C52708) *
                         C13799 +
                     ((C65940 - (C65939 + C65938) + C65941) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C13246 -
                       (C63447 * C13173 + C63374 * C13245) +
                       (C26926 * C12618 + C81009 * C12620) * C80686) *
                          C81011 * C52708) *
                         C80598) *
                        C80965)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
               C81013 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C81006 +
           ((C27559 + C27579) * C81011 * C52707 +
            (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
               C80993 -
           ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
            (C31768 + C31760) * C81011 * C52707) *
               C80972) *
              C13799 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C81006 -
           ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C81013 -
           ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
            (C27581 + C27563) * C81011 * C52707) *
               C80993 +
           ((C33081 + C33083) * C81011 * C52707 +
            ((C26926 * C8500 + C81009 * C8502) * C220 +
             (C26926 * C8644 + C81009 * C8646) * C80639) *
                C81011 * C52708) *
               C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
               C13173 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C80686) *
              C81010 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C80686 -
           ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C13173) *
              C81000 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C81011 * C52707 +
            (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
               C13173 -
           ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
            (C27582 + C27566) * C81011 * C52707) *
               C80686) *
              C80984 +
          (((C28949 + C28953) * C81011 * C52707 +
            ((C26926 * C3982 + C81009 * C3989) * C220 +
             (C26926 * C4202 + C81009 * C4206) * C80639) *
                C81011 * C52708) *
               C80686 -
           ((C55329 * C80639 + C55186 * C220) * C81011 * C52708 +
            ((C26926 * C224 + C81009 * C230) * C80639 +
             (C26926 * C102 + C81009 * C111) * C220) *
                C81011 * C52707) *
               C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C1878 +
             (C26926 * C221 + C81009 * C227) * C81004 - C53812 * C1879 -
             C54026 * C80990 + C53820 * C1880 + C54027 * C80965) *
                C81011 * C52707 +
            (C53812 * C1878 + C54026 * C81004 - C53820 * C1879 -
             C54027 * C80990 + C61992 * C1880 + C62102 * C80965) *
                C81011 * C52708) *
               C13173 +
           ((C32333 - (C32332 + C32331) + C32334 - C32335 - C32349) * C81011 *
                C52707 +
            (C32158 * C1879 - (C30294 * C81004 + C30064 * C1878) +
             C32346 * C80990 - C38387 * C1880 - C38538 * C80965) *
                C81011 * C52708) *
               C80686) *
              C13799 +
          (((C53814 * C1879 -
             ((C26926 * C222 + C81009 * C228) * C81004 +
              (C26926 * C100 + C81009 * C106) * C1878) +
             C54028 * C80990 - C53818 * C1880 - C54029 * C80965) *
                C81011 * C52707 +
            (C53818 * C1879 - (C54028 * C81004 + C53814 * C1878) +
             C54029 * C80990 - C63374 * C1880 - C63517 * C80965) *
                C81011 * C52708) *
               C13173 +
           ((C40498 + C40497 - C40496 - C40499 + C40500 + C40501) * C81011 *
                C52707 +
            (C30062 * C1878 + C30295 * C81004 - C36914 * C1879 -
             C37124 * C80990 + (C26926 * C12544 + C81009 * C12546) * C1880 +
             (C26926 * C12688 + C81009 * C12690) * C80965) *
                C81011 * C52708) *
               C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13805 +
                      (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                      C306 * C80598) *
                         C52707 +
                     (C54122 * C13805 + C54123 * C13799 - C2004 * C13806 -
                      C2005 * C80598) *
                         C52708) *
                        C81009 * C80639 * C81013 +
                    ((C1068 * C13806 -
                      ((C275 * C757 + C81011 * C1043) * C13799 +
                       (C275 * C748 + C81011 * C1036) * C13805) +
                      C1069 * C80598) *
                         C52707 +
                     (C4322 * C13806 - (C56146 * C13799 + C56147 * C13805) +
                      C4323 * C80598) *
                         C52708) *
                        C81009 * C80639 * C81006 +
                    (((C275 * C750 + C81011 * C1039) * C13805 +
                      (C275 * C764 + C81011 * C1047) * C13799 - C1072 * C13806 -
                      C1073 * C80598) *
                         C52707 +
                     (C58026 * C13805 + C58027 * C13799 - C7898 * C13806 -
                      C7899 * C80598) *
                         C52708) *
                        C81009 * C80639 * C80993 +
                    ((C7116 * C13806 -
                      ((C275 * C5663 + C81011 * C5826) * C13799 +
                       (C275 * C5659 + C81011 * C5822) * C13805) +
                      C7117 * C80598) *
                         C52707 +
                     ((C275 * C8500 + C81011 * C8714) * C13806 -
                      (C60211 * C13799 + C60210 * C13805) +
                      (C275 * C8504 + C81011 * C8716) * C80598) *
                         C52708) *
                        C81009 * C80639 * C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13175 +
                      (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
                      C306 * C81000 + C307 * C13177 + C308 * C80984 -
                      C309 * C13178 - C310 * C80966) *
                         C52707 +
                     (C54122 * C13175 + C54123 * C81010 - C2004 * C13176 -
                      C2005 * C81000 + C2006 * C13177 + C2007 * C80984 -
                      C3498 * C13178 - C3499 * C80966) *
                         C52708) *
                        C81009 * C80639 * C13173 +
                    ((C1068 * C13176 -
                      ((C275 * C757 + C81011 * C1043) * C81010 +
                       (C275 * C748 + C81011 * C1036) * C13175) +
                      C1069 * C81000 - C1070 * C13177 - C1071 * C80984 +
                      C2832 * C13178 + C2833 * C80966) *
                         C52707 +
                     (C4322 * C13176 - (C56146 * C81010 + C56147 * C13175) +
                      C4323 * C81000 - C4324 * C13177 - C4325 * C80984 +
                      (C275 * C3982 + C81011 * C4308) * C13178 +
                      (C275 * C3990 + C81011 * C4312) * C80966) *
                         C52708) *
                        C81009 * C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13805 +
                       (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                       C306 * C80598) *
                          C52707 +
                      (C66138 + C66139 - C66140 - C66141) * C52708) *
                         C81009 * C81004 +
                     ((C66140 - (C66139 + C66138) + C66141) * C52707 +
                      (C66142 - (C66143 + C66144) + C66145) * C52708) *
                         C81009 * C80990 +
                     ((C66144 + C66143 - C66142 - C66145) * C52707 +
                      (C62156 * C13805 + C62157 * C13799 - C12102 * C13806 -
                       C12103 * C80598) *
                          C52708) *
                         C81009 * C80965) *
                        C13173 +
                    (((C1068 * C13806 -
                       ((C275 * C757 + C81011 * C1043) * C13799 +
                        (C275 * C748 + C81011 * C1036) * C13805) +
                       C1069 * C80598) *
                          C52707 +
                      (C66146 - (C66147 + C66148) + C66149) * C52708) *
                         C81009 * C81004 +
                     ((C66148 + C66147 - C66146 - C66149) * C52707 +
                      (C66150 + C66151 - C66152 - C66153) * C52708) *
                         C81009 * C80990 +
                     ((C66152 - (C66151 + C66150) + C66153) * C52707 +
                      ((C275 * C12544 + C81011 * C12758) * C13806 -
                       (C64190 * C13799 + C64191 * C13805) +
                       (C275 * C12548 + C81011 * C12760) * C80598) *
                          C52708) *
                         C81009 * C80965) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13873 +
                      (C275 * C166 + C81011 * C354) * C81013 -
                      (C275 * C748 + C81011 * C1036) * C13874 -
                      (C275 * C856 + C81011 * C1149) * C81006 +
                      (C275 * C750 + C81011 * C1039) * C13875 +
                      (C275 * C857 + C81011 * C1150) * C80993 -
                      (C275 * C5659 + C81011 * C5822) * C13876 -
                      (C275 * C5722 + C81011 * C5871) * C80972) *
                         C52707 +
                     (C54122 * C13873 + C54210 * C81013 - C56147 * C13874 -
                      C56253 * C81006 + C58026 * C13875 + C58125 * C80993 -
                      C60210 * C13876 - C60289 * C80972) *
                         C52708) *
                        C81009 * C13799 +
                    ((C14078 - (C14077 + C14076) + C14079 - C14080 - C14081 +
                      C14082 + C14083) *
                         C52707 +
                     (C4322 * C13874 - (C2106 * C81013 + C2004 * C13873) +
                      C4438 * C81006 - C7898 * C13875 - C8006 * C80993 +
                      (C275 * C8500 + C81011 * C8714) * C13876 +
                      (C275 * C8574 + C81011 * C8784) * C80972) *
                         C52708) *
                        C81009 * C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C52707 +
                     (C54122 * C13245 + C54210 * C13173 - C56147 * C13246 -
                      C56253 * C80686) *
                         C52708) *
                        C81009 * C81010 +
                    ((C13448 - (C13447 + C13446) + C13449) * C52707 +
                     (C14846 - (C14847 + C14848) + C14849) * C52708) *
                        C81009 * C81000 +
                    ((C13452 + C13451 - C13450 - C13453) * C52707 +
                     (C16458 + C16459 - C16460 - C16461) * C52708) *
                        C81009 * C80984 +
                    ((C13456 - (C13455 + C13454) + C13457) * C52707 +
                     ((C275 * C3982 + C81011 * C4308) * C13246 -
                      (C3570 * C13173 + C3498 * C13245) +
                      (C275 * C4096 + C81011 * C4426) * C80686) *
                         C52708) *
                        C81009 * C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13245 +
                       (C275 * C166 + C81011 * C354) * C13173 -
                       (C275 * C748 + C81011 * C1036) * C13246 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C66252 + C66253 - C66254 - C66255) * C52708) *
                         C81009 * C13799 +
                     ((C13448 - (C13447 + C13446) + C13449) * C52707 +
                      (C14846 - (C14847 + C14848) + C14849) * C52708) *
                         C81009 * C80598) *
                        C81004 +
                    (((C66254 - (C66253 + C66252) + C66255) * C52707 +
                      (C66256 - (C66257 + C66258) + C66259) * C52708) *
                         C81009 * C13799 +
                     ((C14848 + C14847 - C14846 - C14849) * C52707 +
                      (C14850 + C14851 - C14852 - C14853) * C52708) *
                         C81009 * C80598) *
                        C80990 +
                    (((C66258 + C66257 - C66256 - C66259) * C52707 +
                      (C62156 * C13245 + C62213 * C13173 - C64191 * C13246 -
                       C64265 * C80686) *
                          C52708) *
                         C81009 * C13799 +
                     ((C14852 - (C14851 + C14850) + C14853) * C52707 +
                      ((C275 * C12544 + C81011 * C12758) * C13246 -
                       (C12174 * C13173 + C12102 * C13245) +
                       (C275 * C12618 + C81011 * C12828) * C80686) *
                          C52708) *
                         C81009 * C80598) *
                        C80965)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C81013 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C81006 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            (C58026 * C220 + C58212 * C80639) * C52708) *
               C81009 * C80993 -
           ((C60359 * C80639 + C60210 * C220) * C52708 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C52707) *
               C81009 * C80972) *
              C13799 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C81006 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C81013 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80993 +
           ((C7265 + C7267) * C52707 +
            ((C275 * C8500 + C81011 * C8714) * C220 +
             (C275 * C8644 + C81011 * C8852) * C80639) *
                C52708) *
               C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C13173 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80686) *
              C81010 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80686 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C13173) *
              C81000 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C13173 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80686) *
              C80984 +
          (((C2985 + C2987) * C52707 +
            ((C275 * C3982 + C81011 * C4308) * C220 +
             (C275 * C4202 + C81011 * C4542) * C80639) *
                C52708) *
               C81009 * C80686 -
           ((C3652 * C80639 + C3498 * C220) * C52708 + (C447 + C435) * C52707) *
               C81009 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C1878 +
             (C275 * C221 + C81011 * C422) * C81004 - C54122 * C1879 -
             C54292 * C80990 + C54125 * C1880 + C54293 * C80965) *
                C52707 +
            (C54122 * C1878 + C54292 * C81004 - C54125 * C1879 -
             C54293 * C80990 + C62156 * C1880 + C62264 * C80965) *
                C52708) *
               C81009 * C13173 +
           ((C56147 * C1879 -
             ((C275 * C946 + C81011 * C1256) * C81004 +
              (C275 * C748 + C81011 * C1036) * C1878) +
             C56355 * C80990 - C58024 * C1880 - C58211 * C80965) *
                C52707 +
            (C58024 * C1879 - (C56355 * C81004 + C56147 * C1878) +
             C58211 * C80990 - C64191 * C1880 - C64335 * C80965) *
                C52708) *
               C81009 * C80686) *
              C13799 +
          (((C2198 - (C2197 + C2196) + C2216 - C2201 - C2217) * C52707 +
            (C2008 * C1879 - (C2212 * C81004 + C2004 * C1878) + C2213 * C80990 -
             C12102 * C1880 - C12252 * C80965) *
                C52708) *
               C81009 * C13173 +
           ((C14954 + C14953 - C14952 - C14955 + C14956 + C14957) * C52707 +
            (C4322 * C1878 + C4554 * C81004 - C11280 * C1879 - C11494 * C80990 +
             (C275 * C12544 + C81011 * C12758) * C1880 +
             (C275 * C12688 + C81011 * C12896) * C80965) *
                C52708) *
               C81009 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13805 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C13799 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C13806 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80598) *
              C81009 * C81011 * C80639 * C81013 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13806 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C13799 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13805) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80598) *
              C81009 * C81011 * C80639 * C81006 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C13805 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C13799 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C13806 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80598) *
              C81009 * C81011 * C80639 * C80993 +
          ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C13806 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C13799 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C13805) +
           (C52961 * C5662 + C52707 * C5967 + C52962 * C8504 + C52708 * C8922) *
               C80598) *
              C81009 * C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13175 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C81010 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C13176 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C81000 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C13177 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80984 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C13178 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C80639 * C13173 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13176 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C81010 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13175) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C81000 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C13177 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80984 +
           (C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C13178 +
           (C52961 * C761 + C52707 * C1368 + C52962 * C3990 + C52708 * C4662) *
               C80966) *
              C81009 * C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13805 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C13799 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13806 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C81004 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13806 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C13799 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13805) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80990 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C13805 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C13799 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C13806 -
            (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
             C52707 * C2306) *
                C80598) *
               C81009 * C81011 * C80965) *
              C13173 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13806 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C13799 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C13805) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C81004 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13805 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C13799 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13806 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80990 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C13806 -
            ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
              C52707 * C6660) *
                 C13799 +
             (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
              C52707 * C6654) *
                 C13805) +
            (C52961 * C6143 + C52707 * C6659 + C52962 * C12548 +
             C52708 * C12966) *
                C80598) *
               C81009 * C81011 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13873 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81013 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C13874 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C81006 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C13875 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80993 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C13876 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C13799 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13874 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C81013 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13873) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C81006 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C13875 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80993 +
           (C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C13876 +
           (C52961 * C5721 + C52707 * C6015 + C52962 * C8574 + C52708 * C8990) *
               C80972) *
              C81009 * C81011 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13245 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C13173 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C13246 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80686) *
              C81009 * C81011 * C81010 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13246 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C13173 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13245) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80686) *
              C81009 * C81011 * C81000 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C13245 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C13173 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C13246 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80686) *
              C81009 * C81011 * C80984 +
          ((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C13246 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C13173 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C13245) +
           (C52961 * C861 + C52707 * C1477 + C52962 * C4096 + C52708 * C4776) *
               C80686) *
              C81009 * C81011 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13245 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C13173 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13246 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C13799 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13246 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C13173 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C13245) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C81004 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13246 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C13173 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13245) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C13799 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13245 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C13173 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13246 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C80990 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C13245 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C13173 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C13246 -
            (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
             C52707 * C6741) *
                C80686) *
               C81009 * C81011 * C13799 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C13246 -
            ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
              C52707 * C2412) *
                 C13173 +
             (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
              C52707 * C2298) *
                 C13245) +
            (C52961 * C6237 + C52707 * C6743 + C52962 * C12618 +
             C52708 * C13034) *
                C80686) *
               C81009 * C81011 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C81013 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C81006 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80993 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C80639 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C220) *
               C81009 * C81011 * C80972) *
              C13799 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C81006 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C81013 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80993 +
           ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 +
             C52708 * C8920) *
                C220 +
            (C52961 * C5771 + C52707 * C6059 + C52962 * C8644 +
             C52708 * C9058) *
                C80639) *
               C81009 * C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C13173 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80686) *
              C81010 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C13173) *
              C81000 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C13173 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80686) *
              C80984 +
          (((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
                C220 +
            (C52961 * C951 + C52707 * C1583 + C52962 * C4202 + C52708 * C4892) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C80639 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C220) *
               C81009 * C81011 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C1878 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C81004 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C1879 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80990 +
            (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C1880 +
            (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
             C52708 * C10869) *
                C80965) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C1879 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C81004 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C1878) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80990 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C1880 -
            (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
             C52707 * C6819) *
                C80965) *
               C81009 * C81011 * C80686) *
              C13799 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C1879 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C81004 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C1878) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80990 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C1880 -
            (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
             C52707 * C2512) *
                C80965) *
               C81009 * C81011 * C13173 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C1878 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C81004 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C1879 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80990 +
            (C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C1880 +
            (C52961 * C6321 + C52707 * C6820 + C52962 * C12688 +
             C52708 * C13102) *
                C80965) *
               C81009 * C81011 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78289 +
             (C26926 * C107 + C81009 * C117) * C80593 -
             (C26926 * C100 + C81009 * C106) * C78285 -
             (C26926 * C108 + C81009 * C118) * C80601 +
             (C26926 * C101 + C81009 * C109) * C78295 +
             (C26926 * C110 + C81009 * C119) * C15341) *
                C81011 * C52707 +
            (C67416 + C67417 - C67418 - C67419 + C67420 + C67421) * C81011 *
                C52708) *
               C80933 +
           ((C67418 - (C67417 + C67416) + C67419 - C67420 - C67421) * C81011 *
                C52707 +
            (C53818 * C78285 - (C53819 * C80593 + C53820 * C78289) +
             C53821 * C80601 - C53822 * C78295 - C53823 * C15341) *
                C81011 * C52708) *
               C80726) *
              C13173 +
          (((C41174 - (C41173 + C41172) + C41175 - C41176 - C41177) * C81011 *
                C52707 +
            (C41886 - (C41887 + C41888) + C41889 - C41890 - C41891) * C81011 *
                C52708) *
               C80933 +
           ((C41888 + C41887 - C41886 - C41889 + C41890 + C41891) * C81011 *
                C52707 +
            (C32158 * C78289 + C32159 * C80593 - C36914 * C78285 -
             C36915 * C80601 + (C26926 * C10971 + C81009 * C10972) * C78295 +
             (C26926 * C10973 + C81009 * C10974) * C15341) *
                C81011 * C52708) *
               C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C65926 + C65927 - C65928 - C65929) * C81011 * C52708) *
                         C80593 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C65930 - (C65931 + C65932) + C65933) * C81011 * C52708) *
                         C80601 +
                     (((C26926 * C101 + C81009 * C109) * C13245 +
                       (C26926 * C168 + C81009 * C174) * C13173 -
                       C27368 * C13246 - C27478 * C80686) *
                          C81011 * C52707 +
                      (C67520 + C67521 - C67522 - C67523) * C81011 * C52708) *
                         C15341) *
                        C80933 +
                    (((C65928 - (C65927 + C65926) + C65929) * C81011 * C52707 +
                      (C65934 - (C65935 + C65936) + C65937) * C81011 * C52708) *
                         C80593 +
                     ((C65932 + C65931 - C65930 - C65933) * C81011 * C52707 +
                      (C65938 + C65939 - C65940 - C65941) * C81011 * C52708) *
                         C80601 +
                     ((C67522 - (C67521 + C67520) + C67523) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C13246 -
                       (C53933 * C13173 + C53822 * C13245) +
                       (C26926 * C11073 + C81009 * C11074) * C80686) *
                          C81011 * C52708) *
                         C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       C53812 * C3422 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                      (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80593 +
                    (((C53814 * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C30286 + C30285 - C30284 - C30298) * C81011 * C52707 +
                      (C30062 * C3421 + C30295 * C80933 - C36914 * C3422 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80601 +
                    ((((C26926 * C101 + C81009 * C109) * C3421 +
                       (C26926 * C223 + C81009 * C229) * C80933 -
                       C53816 * C3422 - C54030 * C80726) *
                          C81011 * C52707 +
                      (C53816 * C3421 + C54030 * C80933 - C53822 * C3422 -
                       C54031 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C30291 - (C30290 + C30289) + C30299) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C3422 -
                       (C30296 * C80933 + C30066 * C3421) +
                       (C26926 * C11173 + C81009 * C11174) * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78289 +
             (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
             C306 * C80601 + C307 * C78295 + C308 * C15341) *
                C52707 +
            (C67720 + C67721 - C67722 - C67723 + C67724 + C67725) * C52708) *
               C81009 * C80933 +
           ((C67722 - (C67721 + C67720) + C67723 - C67724 - C67725) * C52707 +
            (C2008 * C78285 - (C54124 * C80593 + C54125 * C78289) +
             C2009 * C80601 - C2010 * C78295 - C2011 * C15341) *
                C52708) *
               C81009 * C80726) *
              C13173 +
          (((C1068 * C78285 -
             ((C275 * C757 + C81011 * C1043) * C80593 +
              (C275 * C748 + C81011 * C1036) * C78289) +
             C1069 * C80601 - C1070 * C78295 - C1071 * C15341) *
                C52707 +
            (C67726 - (C67727 + C67728) + C67729 - C67730 - C67731) * C52708) *
               C81009 * C80933 +
           ((C67728 + C67727 - C67726 - C67729 + C67730 + C67731) * C52707 +
            (C58024 * C78289 + C58025 * C80593 - C11280 * C78285 -
             C11281 * C80601 + (C275 * C10971 + C81011 * C11273) * C78295 +
             (C275 * C10973 + C81011 * C11274) * C15341) *
                C52708) *
               C81009 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13245 +
                       (C275 * C166 + C81011 * C354) * C13173 -
                       (C275 * C748 + C81011 * C1036) * C13246 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C66252 + C66253 - C66254 - C66255) * C52708) *
                         C81009 * C80593 +
                     ((C13448 - (C13447 + C13446) + C13449) * C52707 +
                      (C14846 - (C14847 + C14848) + C14849) * C52708) *
                         C81009 * C80601 +
                     ((C13452 + C13451 - C13450 - C13453) * C52707 +
                      (C16458 + C16459 - C16460 - C16461) * C52708) *
                         C81009 * C15341) *
                        C80933 +
                    (((C66254 - (C66253 + C66252) + C66255) * C52707 +
                      (C66256 - (C66257 + C66258) + C66259) * C52708) *
                         C81009 * C80593 +
                     ((C14848 + C14847 - C14846 - C14849) * C52707 +
                      (C14850 + C14851 - C14852 - C14853) * C52708) *
                         C81009 * C80601 +
                     ((C16460 - (C16459 + C16458) + C16461) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C13246 -
                       (C2109 * C13173 + C2010 * C13245) +
                       (C275 * C11073 + C81011 * C11379) * C80686) *
                          C52708) *
                         C81009 * C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C3421 +
             (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
             C54292 * C80726) *
                C52707 +
            (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
             C54293 * C80726) *
                C52708) *
               C81009 * C13173 +
           ((C56147 * C3422 -
             ((C275 * C946 + C81011 * C1256) * C80933 +
              (C275 * C748 + C81011 * C1036) * C3421) +
             C56355 * C80726) *
                C52707 +
            (C58024 * C3422 - (C56355 * C80933 + C56147 * C3421) +
             C58211 * C80726) *
                C52708) *
               C81009 * C80686) *
              C80593 +
          (((C3641 - (C3640 + C3639) + C3642) * C52707 +
            (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) +
             C2213 * C80726) *
                C52708) *
               C81009 * C13173 +
           ((C4546 + C4545 - C4544 - C4556) * C52707 +
            (C4322 * C3421 + C4554 * C80933 - C11280 * C3422 -
             C11494 * C80726) *
                C52708) *
               C81009 * C80686) *
              C80601 +
          (((C3645 + C3644 - C3643 - C3646) * C52707 +
            (C2006 * C3421 + C2214 * C80933 - C2010 * C3422 - C2215 * C80726) *
                C52708) *
               C81009 * C13173 +
           ((C4551 - (C4550 + C4549) + C4557) * C52707 +
            ((C275 * C10971 + C81011 * C11273) * C3422 -
             (C4555 * C80933 + C4324 * C3421) +
             (C275 * C11173 + C81011 * C11485) * C80726) *
                C52708) *
               C81009 * C80686) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78289 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80593 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78285 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80601 +
            (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C78295 +
            (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
                C15341) *
               C81009 * C81011 * C80933 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78285 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80593 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78289) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80601 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C78295 -
            (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 +
             C52707 * C2303) *
                C15341) *
               C81009 * C81011 * C80726) *
              C13173 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78285 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80593 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78289) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80601 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C78295 -
            (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
                C15341) *
               C81009 * C81011 * C80933 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78289 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80593 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78285 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80601 +
            (C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C78295 +
            (C52961 * C3988 + C52707 * C4661 + C52962 * C10973 +
             C52708 * C11594) *
                C15341) *
               C81009 * C81011 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13245 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C13173 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13246 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C80593 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13246 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C13173 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C13245) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80601 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C13245 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C13173 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C13246 -
            (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
                C80686) *
               C81009 * C81011 * C15341) *
              C80933 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13246 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C13173 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13245) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C80593 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13245 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C13173 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13246 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80601 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C13246 -
            ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
              C52707 * C2408) *
                 C13173 +
             (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
              C52707 * C2295) *
                 C13245) +
            (C52961 * C4095 + C52707 * C4775 + C52962 * C11073 +
             C52708 * C11699) *
                C80686) *
               C81009 * C81011 * C15341) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C3421 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80933 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C3422 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C3422 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80933 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C3421) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80593 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C3422 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80933 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C3421) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C3421 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80933 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C3422 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80601 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C3421 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80933 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C3422 -
            (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 +
             C52707 * C2513) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C3422 -
            ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 +
              C52707 * C1581) *
                 C80933 +
             (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
              C52707 * C1359) *
                 C3421) +
            (C52961 * C4201 + C52707 * C4891 + C52962 * C11173 +
             C52708 * C11805) *
                C80726) *
               C81009 * C81011 * C80686) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C53812 * C13175 + C53813 * C81010 - C53814 * C13176 -
                      C53815 * C81000 + C53816 * C13177 + C53817 * C80984 -
                      C55186 * C13178 - C55187 * C80966) *
                         C81011 * C52708) *
                        C80639 * C13173 +
                    ((C39034 - (C39033 + C39032) + C39035 - C39036 - C39037 +
                      C39038 + C39039) *
                         C81011 * C52707 +
                     (C30062 * C13176 - (C30063 * C81010 + C30064 * C13175) +
                      C30065 * C81000 - C30066 * C13177 - C30067 * C80984 +
                      (C26926 * C3982 + C81009 * C3989) * C13178 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C81011 * C52708) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13805 +
                      (C26926 * C107 + C81009 * C117) * C13799 -
                      (C26926 * C100 + C81009 * C106) * C13806 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C81011 * C52707 +
                     (C53812 * C13805 + C53813 * C13799 - C53814 * C13806 -
                      C53815 * C80598) *
                         C81011 * C52708) *
                        C80639 * C81013 +
                    ((C39644 - (C39643 + C39642) + C39645) * C81011 * C52707 +
                     (C40292 - (C40293 + C40294) + C40295) * C81011 * C52708) *
                        C80639 * C81006 +
                    ((C39648 + C39647 - C39646 - C39649) * C81011 * C52707 +
                     (C42780 + C42781 - C42782 - C42783) * C81011 * C52708) *
                        C80639 * C80993 +
                    ((C39652 - (C39651 + C39650) + C39653) * C81011 * C52707 +
                     ((C26926 * C8500 + C81009 * C8502) * C13806 -
                      (C34488 * C13799 + C34489 * C13805) +
                      (C26926 * C8504 + C81009 * C8506) * C80598) *
                         C81011 * C52708) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13245 +
                      (C26926 * C166 + C81009 * C172) * C13173 -
                      C27364 * C13246 - C27474 * C80686) *
                         C81011 * C52707 +
                     (C53812 * C13245 + C53928 * C13173 - C30064 * C13246 -
                      C30178 * C80686) *
                         C81011 * C52708) *
                        C81010 +
                    ((C27366 * C13246 -
                      ((C26926 * C167 + C81009 * C173) * C13173 +
                       (C26926 * C100 + C81009 * C106) * C13245) +
                      C27476 * C80686) *
                         C81011 * C52707 +
                     (C30062 * C13246 - (C53929 * C13173 + C53814 * C13245) +
                      C30179 * C80686) *
                         C81011 * C52708) *
                        C81000 +
                    (((C26926 * C101 + C81009 * C109) * C13245 +
                      (C26926 * C168 + C81009 * C174) * C13173 -
                      C27368 * C13246 - C27478 * C80686) *
                         C81011 * C52707 +
                     (C53816 * C13245 + C53930 * C13173 - C30066 * C13246 -
                      C30180 * C80686) *
                         C81011 * C52708) *
                        C80984 +
                    ((C28810 * C13246 -
                      ((C26926 * C169 + C81009 * C175) * C13173 +
                       (C26926 * C102 + C81009 * C111) * C13245) +
                      C28882 * C80686) *
                         C81011 * C52707 +
                     ((C26926 * C3982 + C81009 * C3989) * C13246 -
                      (C55259 * C13173 + C55186 * C13245) +
                      (C26926 * C4096 + C81009 * C4100) * C80686) *
                         C81011 * C52708) *
                        C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C53812 * C13873 + C53928 * C81013 - C30064 * C13874 -
                      C30178 * C81006 + C32160 * C13875 + C32252 * C80993 -
                      C34489 * C13876 - C34562 * C80972) *
                         C81011 * C52708) *
                        C13799 +
                    ((C27366 * C13874 -
                      ((C26926 * C167 + C81009 * C173) * C81013 +
                       (C26926 * C100 + C81009 * C106) * C13873) +
                      C27476 * C81006 - C27370 * C13875 - C27477 * C80993 +
                      C32940 * C13876 + C33012 * C80972) *
                         C81011 * C52707 +
                     (C30062 * C13874 - (C53929 * C81013 + C53814 * C13873) +
                      C30179 * C81006 - C33600 * C13875 - C33704 * C80993 +
                      (C26926 * C8500 + C81009 * C8502) * C13876 +
                      (C26926 * C8574 + C81009 * C8576) * C80972) *
                         C81011 * C52708) *
                        C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q));
    d2eexz[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C81011 * C52707 +
                      (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
                         C13173 -
                     ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                      (C27578 + C27554) * C81011 * C52707) *
                         C80686) *
                        C81010 +
                    (((C27560 + C27580) * C81011 * C52707 +
                      (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                         C80686 -
                     ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C81011 * C52707) *
                         C13173) *
                        C81000 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C81011 * C52707 +
                      (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
                         C13173 -
                     ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
                      (C27582 + C27566) * C81011 * C52707) *
                         C80686) *
                        C80984 +
                    (((C28949 + C28953) * C81011 * C52707 +
                      ((C26926 * C3982 + C81009 * C3989) * C220 +
                       (C26926 * C4202 + C81009 * C4206) * C80639) *
                          C81011 * C52708) *
                         C80686 -
                     ((C55329 * C80639 + C55186 * C220) * C81011 * C52708 +
                      ((C26926 * C224 + C81009 * C230) * C80639 +
                       (C26926 * C102 + C81009 * C111) * C220) *
                          C81011 * C52707) *
                         C13173) *
                        C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C81011 * C52707 +
                      (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
                         C81013 -
                     ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                      (C27578 + C27554) * C81011 * C52707) *
                         C81006 +
                     ((C27559 + C27579) * C81011 * C52707 +
                      (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
                         C80993 -
                     ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
                      (C31768 + C31760) * C81011 * C52707) *
                         C80972) *
                        C13799 +
                    (((C27560 + C27580) * C81011 * C52707 +
                      (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                         C81006 -
                     ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C81011 * C52707) *
                         C81013 -
                     ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
                      (C27581 + C27563) * C81011 * C52707) *
                         C80993 +
                     ((C33081 + C33083) * C81011 * C52707 +
                      ((C26926 * C8500 + C81009 * C8502) * C220 +
                       (C26926 * C8644 + C81009 * C8646) * C80639) *
                          C81011 * C52708) *
                         C80972) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13175 +
                      (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
                      C306 * C81000 + C307 * C13177 + C308 * C80984 -
                      C309 * C13178 - C310 * C80966) *
                         C52707 +
                     (C54122 * C13175 + C54123 * C81010 - C2004 * C13176 -
                      C2005 * C81000 + C2006 * C13177 + C2007 * C80984 -
                      C3498 * C13178 - C3499 * C80966) *
                         C52708) *
                        C81009 * C80639 * C13173 +
                    ((C1068 * C13176 -
                      ((C275 * C757 + C81011 * C1043) * C81010 +
                       (C275 * C748 + C81011 * C1036) * C13175) +
                      C1069 * C81000 - C1070 * C13177 - C1071 * C80984 +
                      C2832 * C13178 + C2833 * C80966) *
                         C52707 +
                     (C4322 * C13176 - (C56146 * C81010 + C56147 * C13175) +
                      C4323 * C81000 - C4324 * C13177 - C4325 * C80984 +
                      (C275 * C3982 + C81011 * C4308) * C13178 +
                      (C275 * C3990 + C81011 * C4312) * C80966) *
                         C52708) *
                        C81009 * C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13805 +
                      (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                      C306 * C80598) *
                         C52707 +
                     (C54122 * C13805 + C54123 * C13799 - C2004 * C13806 -
                      C2005 * C80598) *
                         C52708) *
                        C81009 * C80639 * C81013 +
                    ((C1068 * C13806 -
                      ((C275 * C757 + C81011 * C1043) * C13799 +
                       (C275 * C748 + C81011 * C1036) * C13805) +
                      C1069 * C80598) *
                         C52707 +
                     (C4322 * C13806 - (C56146 * C13799 + C56147 * C13805) +
                      C4323 * C80598) *
                         C52708) *
                        C81009 * C80639 * C81006 +
                    (((C275 * C750 + C81011 * C1039) * C13805 +
                      (C275 * C764 + C81011 * C1047) * C13799 - C1072 * C13806 -
                      C1073 * C80598) *
                         C52707 +
                     (C58026 * C13805 + C58027 * C13799 - C7898 * C13806 -
                      C7899 * C80598) *
                         C52708) *
                        C81009 * C80639 * C80993 +
                    ((C7116 * C13806 -
                      ((C275 * C5663 + C81011 * C5826) * C13799 +
                       (C275 * C5659 + C81011 * C5822) * C13805) +
                      C7117 * C80598) *
                         C52707 +
                     ((C275 * C8500 + C81011 * C8714) * C13806 -
                      (C60211 * C13799 + C60210 * C13805) +
                      (C275 * C8504 + C81011 * C8716) * C80598) *
                         C52708) *
                        C81009 * C80639 * C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C52707 +
                     (C54122 * C13245 + C54210 * C13173 - C56147 * C13246 -
                      C56253 * C80686) *
                         C52708) *
                        C81009 * C81010 +
                    ((C13448 - (C13447 + C13446) + C13449) * C52707 +
                     (C14846 - (C14847 + C14848) + C14849) * C52708) *
                        C81009 * C81000 +
                    ((C13452 + C13451 - C13450 - C13453) * C52707 +
                     (C16458 + C16459 - C16460 - C16461) * C52708) *
                        C81009 * C80984 +
                    ((C13456 - (C13455 + C13454) + C13457) * C52707 +
                     ((C275 * C3982 + C81011 * C4308) * C13246 -
                      (C3570 * C13173 + C3498 * C13245) +
                      (C275 * C4096 + C81011 * C4426) * C80686) *
                         C52708) *
                        C81009 * C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13873 +
                      (C275 * C166 + C81011 * C354) * C81013 -
                      (C275 * C748 + C81011 * C1036) * C13874 -
                      (C275 * C856 + C81011 * C1149) * C81006 +
                      (C275 * C750 + C81011 * C1039) * C13875 +
                      (C275 * C857 + C81011 * C1150) * C80993 -
                      (C275 * C5659 + C81011 * C5822) * C13876 -
                      (C275 * C5722 + C81011 * C5871) * C80972) *
                         C52707 +
                     (C54122 * C13873 + C54210 * C81013 - C56147 * C13874 -
                      C56253 * C81006 + C58026 * C13875 + C58125 * C80993 -
                      C60210 * C13876 - C60289 * C80972) *
                         C52708) *
                        C81009 * C13799 +
                    ((C14078 - (C14077 + C14076) + C14079 - C14080 - C14081 +
                      C14082 + C14083) *
                         C52707 +
                     (C4322 * C13874 - (C2106 * C81013 + C2004 * C13873) +
                      C4438 * C81006 - C7898 * C13875 - C8006 * C80993 +
                      (C275 * C8500 + C81011 * C8714) * C13876 +
                      (C275 * C8574 + C81011 * C8784) * C80972) *
                         C52708) *
                        C81009 * C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C13173 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80686) *
              C81010 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80686 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C13173) *
              C81000 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C13173 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80686) *
              C80984 +
          (((C2985 + C2987) * C52707 +
            ((C275 * C3982 + C81011 * C4308) * C220 +
             (C275 * C4202 + C81011 * C4542) * C80639) *
                C52708) *
               C81009 * C80686 -
           ((C3652 * C80639 + C3498 * C220) * C52708 + (C447 + C435) * C52707) *
               C81009 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C81013 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C81006 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            (C58026 * C220 + C58212 * C80639) * C52708) *
               C81009 * C80993 -
           ((C60359 * C80639 + C60210 * C220) * C52708 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C52707) *
               C81009 * C80972) *
              C13799 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C81006 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C81013 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80993 +
           ((C7265 + C7267) * C52707 +
            ((C275 * C8500 + C81011 * C8714) * C220 +
             (C275 * C8644 + C81011 * C8852) * C80639) *
                C52708) *
               C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13175 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C81010 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C13176 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C81000 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C13177 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80984 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C13178 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C80639 * C13173 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13176 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C81010 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13175) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C81000 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C13177 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80984 +
           (C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C13178 +
           (C52961 * C761 + C52707 * C1368 + C52962 * C3990 + C52708 * C4662) *
               C80966) *
              C81009 * C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13805 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C13799 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C13806 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80598) *
              C81009 * C81011 * C80639 * C81013 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13806 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C13799 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13805) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80598) *
              C81009 * C81011 * C80639 * C81006 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C13805 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C13799 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C13806 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80598) *
              C81009 * C81011 * C80639 * C80993 +
          ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C13806 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C13799 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C13805) +
           (C52961 * C5662 + C52707 * C5967 + C52962 * C8504 + C52708 * C8922) *
               C80598) *
              C81009 * C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13245 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C13173 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C13246 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80686) *
              C81009 * C81011 * C81010 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13246 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C13173 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13245) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80686) *
              C81009 * C81011 * C81000 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C13245 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C13173 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C13246 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80686) *
              C81009 * C81011 * C80984 +
          ((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C13246 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C13173 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C13245) +
           (C52961 * C861 + C52707 * C1477 + C52962 * C4096 + C52708 * C4776) *
               C80686) *
              C81009 * C81011 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13873 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81013 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C13874 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C81006 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C13875 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80993 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C13876 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C13799 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C13874 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C81013 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13873) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C81006 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C13875 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80993 +
           (C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C13876 +
           (C52961 * C5721 + C52707 * C6015 + C52962 * C8574 + C52708 * C8990) *
               C80972) *
              C81009 * C81011 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C13173 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80686) *
              C81010 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C13173) *
              C81000 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C13173 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80686) *
              C80984 +
          (((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
                C220 +
            (C52961 * C951 + C52707 * C1583 + C52962 * C4202 + C52708 * C4892) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C80639 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C220) *
               C81009 * C81011 * C13173) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C81013 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C81006 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80993 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C80639 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C220) *
               C81009 * C81011 * C80972) *
              C13799 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C81006 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C81013 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80993 +
           ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 +
             C52708 * C8920) *
                C220 +
            (C52961 * C5771 + C52707 * C6059 + C52962 * C8644 +
             C52708 * C9058) *
                C80639) *
               C81009 * C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C59128 + C59129 - C59130 - C59131) * C81011 * C52708) *
                         C17817 +
                     ((C59130 - (C59129 + C59128) + C59131) * C81011 * C52707 +
                      (C62494 - (C62495 + C62496) + C62497) * C81011 * C52708) *
                         C80726) *
                        C80682 +
                    (((C32928 - (C32927 + C32926) + C32929) * C81011 * C52707 +
                      (C33590 - (C33591 + C33592) + C33593) * C81011 * C52708) *
                         C17817 +
                     ((C33592 + C33591 - C33590 - C33593) * C81011 * C52707 +
                      (C36908 + C36909 - C36916 - C36917) * C81011 * C52708) *
                         C80726) *
                        C80689 +
                    (((C32932 + C32931 - C32930 - C32933) * C81011 * C52707 +
                      (C33594 + C33595 - C33602 - C33603) * C81011 * C52708) *
                         C17817 +
                     ((C33602 - (C33595 + C33594) + C33603) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C78260 -
                       (C32162 * C80916 + C32163 * C78279) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78437 +
             (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
             C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
                C81011 * C52707 +
            (C68418 + C68419 - C68420 - C68421 + C68422 + C68423) * C81011 *
                C52708) *
               C80916 +
           ((C27366 * C78429 -
             ((C26926 * C167 + C81009 * C173) * C80682 +
              (C26926 * C100 + C81009 * C106) * C78437) +
             C27476 * C80689 - C27370 * C78443 - C27477 * C15344) *
                C81011 * C52707 +
            (C68424 - (C68425 + C68426) + C68427 - C68428 - C68429) * C81011 *
                C52708) *
               C80598) *
              C17817 +
          (((C68420 - (C68419 + C68418) + C68421 - C68422 - C68423) * C81011 *
                C52707 +
            (C32158 * C78429 - (C53932 * C80682 + C53820 * C78437) +
             C32253 * C80689 - C32163 * C78443 - C32254 * C15344) *
                C81011 * C52708) *
               C80916 +
           ((C68426 + C68425 - C68424 - C68427 + C68428 + C68429) * C81011 *
                C52707 +
            (C53818 * C78437 + C53931 * C80682 - C36914 * C78429 -
             C37018 * C80689 + (C26926 * C6142 + C81009 * C6152) * C78443 +
             (C26926 * C6240 + C81009 * C6246) * C15344) *
                C81011 * C52708) *
               C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       C53812 * C17952 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C80682 +
                     ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                      (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80689 +
                     ((C44466 + C44465 - C44464 - C44467) * C81011 * C52707 +
                      (C32160 * C17951 + C32347 * C17817 - C32163 * C17952 -
                       C32348 * C80726) *
                          C81011 * C52708) *
                         C15344) *
                        C80916 +
                    (((C53814 * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C80682 +
                     ((C44470 + C44469 - C44468 - C44471) * C81011 * C52707 +
                      (C30062 * C17951 + C30295 * C17817 - C36914 * C17952 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80689 +
                     ((C44474 - (C44473 + C44472) + C44475) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C17952 -
                       (C33812 * C17817 + C33600 * C17951) +
                       (C26926 * C6326 + C81009 * C6332) * C80726) *
                          C81011 * C52708) *
                         C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C78279 +
                       (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
                       C306 * C80598) *
                          C52707 +
                      (C59432 + C59433 - C59434 - C59435) * C52708) *
                         C81009 * C17817 +
                     ((C59434 - (C59433 + C59432) + C59435) * C52707 +
                      (C62800 - (C62801 + C62802) + C62803) * C52708) *
                         C81009 * C80726) *
                        C80682 +
                    (((C1068 * C78260 -
                       ((C275 * C757 + C81011 * C1043) * C80916 +
                        (C275 * C748 + C81011 * C1036) * C78279) +
                       C1069 * C80598) *
                          C52707 +
                      (C59436 - (C59437 + C59438) + C59439) * C52708) *
                         C81009 * C17817 +
                     ((C59438 + C59437 - C59436 - C59439) * C52707 +
                      (C62804 + C62805 - C62806 - C62807) * C52708) *
                         C81009 * C80726) *
                        C80689 +
                    ((((C275 * C750 + C81011 * C1039) * C78279 +
                       (C275 * C764 + C81011 * C1047) * C80916 -
                       C1072 * C78260 - C1073 * C80598) *
                          C52707 +
                      (C59440 + C59441 - C59442 - C59443) * C52708) *
                         C81009 * C17817 +
                     ((C59442 - (C59441 + C59440) + C59443) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C78260 -
                       (C58028 * C80916 + C58029 * C78279) +
                       (C275 * C6154 + C81011 * C6418) * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78437 +
             (C275 * C166 + C81011 * C354) * C80682 -
             (C275 * C748 + C81011 * C1036) * C78429 -
             (C275 * C856 + C81011 * C1149) * C80689 +
             (C275 * C750 + C81011 * C1039) * C78443 +
             (C275 * C857 + C81011 * C1150) * C15344) *
                C52707 +
            (C68728 + C68729 - C68730 - C68731 + C68732 + C68733) * C52708) *
               C81009 * C80916 +
           ((C15650 - (C15649 + C15648) + C15651 - C15652 - C15653) * C52707 +
            (C17348 - (C17349 + C17350) + C17351 - C17352 - C17353) * C52708) *
               C81009 * C80598) *
              C17817 +
          (((C68730 - (C68729 + C68728) + C68731 - C68732 - C68733) * C52707 +
            (C58024 * C78429 - (C54211 * C80682 + C54125 * C78437) +
             C58126 * C80689 - C58029 * C78443 - C58127 * C15344) *
                C52708) *
               C81009 * C80916 +
           ((C17350 + C17349 - C17348 - C17351 + C17352 + C17353) * C52707 +
            (C2008 * C78437 + C2108 * C80682 - C11280 * C78429 -
             C11386 * C80689 + (C275 * C6142 + C81011 * C6412) * C78443 +
             (C275 * C6240 + C81011 * C6498) * C15344) *
                C52708) *
               C81009 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C17951 +
                       (C275 * C221 + C81011 * C422) * C17817 -
                       C54122 * C17952 - C54292 * C80726) *
                          C52707 +
                      (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
                       C54293 * C80726) *
                          C52708) *
                         C81009 * C80682 +
                     ((C56147 * C17952 -
                       ((C275 * C946 + C81011 * C1256) * C17817 +
                        (C275 * C748 + C81011 * C1036) * C17951) +
                       C56355 * C80726) *
                          C52707 +
                      (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
                       C58211 * C80726) *
                          C52708) *
                         C81009 * C80689 +
                     (((C275 * C750 + C81011 * C1039) * C17951 +
                       (C275 * C947 + C81011 * C1257) * C17817 -
                       C58026 * C17952 - C58212 * C80726) *
                          C52707 +
                      (C58026 * C17951 + C58212 * C17817 - C58029 * C17952 -
                       C58213 * C80726) *
                          C52708) *
                         C81009 * C15344) *
                        C80916 +
                    (((C18154 - (C18153 + C18152) + C18155) * C52707 +
                      (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
                       C2213 * C80726) *
                          C52708) *
                         C81009 * C80682 +
                     ((C18970 + C18969 - C18968 - C18971) * C52707 +
                      (C4322 * C17951 + C4554 * C17817 - C11280 * C17952 -
                       C11494 * C80726) *
                          C52708) *
                         C81009 * C80689 +
                     ((C18974 - (C18973 + C18972) + C18975) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C17952 -
                       (C8112 * C17817 + C7898 * C17951) +
                       (C275 * C6326 + C81011 * C6578) * C80726) *
                          C52708) *
                         C81009 * C15344) *
                        C80598)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78279 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80916 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78260 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78260 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80916 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78279) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80682 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78260 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80916 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78279) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78279 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80916 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78260 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80689 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C78279 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80916 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C78260 -
            (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C78260 -
            ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
              C52707 * C6662) *
                 C80916 +
             (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
              C52707 * C6656) *
                 C78279) +
            (C52961 * C6147 + C52707 * C6661 + C52962 * C6154 +
             C52708 * C6664) *
                C80598) *
               C81009 * C81011 * C80726) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78437 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80682 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C78429 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80689 +
            (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C78443 +
            (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
                C15344) *
               C81009 * C81011 * C80916 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78429 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C80682 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C78437) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80689 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C78443 -
            (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
                C15344) *
               C81009 * C81011 * C80598) *
              C17817 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78429 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C80682 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78437) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80689 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C78443 -
            (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 +
             C52707 * C6739) *
                C15344) *
               C81009 * C81011 * C80916 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78437 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80682 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78429 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80689 +
            (C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C78443 +
            (C52961 * C6235 + C52707 * C6740 + C52962 * C6240 +
             C52708 * C6744) *
                C15344) *
               C81009 * C81011 * C80598) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C17951 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C17817 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C17952 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C80682 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C17952 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C17817 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C17951) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80689 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C17951 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C17817 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C17952 -
            (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 +
             C52707 * C6821) *
                C80726) *
               C81009 * C81011 * C15344) *
              C80916 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C17952 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C17817 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C17951) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C80682 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C17951 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C17817 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C17952 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80689 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C17952 -
            ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 +
              C52707 * C1580) *
                 C17817 +
             (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
              C52707 * C1362) *
                 C17951) +
            (C52961 * C6323 + C52707 * C6823 + C52962 * C6326 +
             C52708 * C6824) *
                C80726) *
               C81009 * C81011 * C15344) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C5657 +
                       (C26926 * C107 + C81009 * C117) * C80588) *
                          C81011 * C52707 +
                      (C57768 + C57769) * C81011 * C52708) *
                         C80722 -
                     ((C57770 + C57771) * C81011 * C52708 +
                      (C57769 + C57768) * C81011 * C52707) *
                         C80729 +
                     ((C57771 + C57770) * C81011 * C52707 +
                      (C61996 + C61997) * C81011 * C52708) *
                         C20867) *
                        C80682 +
                    (((C32145 + C32144) * C81011 * C52707 +
                      (C32164 + C32165) * C81011 * C52708) *
                         C80729 -
                     ((C32144 + C32145) * C81011 * C52708 +
                      (C31647 + C31646) * C81011 * C52707) *
                         C80722 -
                     ((C38388 + C38389) * C81011 * C52708 +
                      (C32165 + C32164) * C81011 * C52707) *
                         C20867) *
                        C80689 +
                    (((C31649 + C31648) * C81011 * C52707 +
                      (C32166 + C32167) * C81011 * C52708) *
                         C80722 -
                     ((C32168 + C32169) * C81011 * C52708 +
                      (C32167 + C32166) * C81011 * C52707) *
                         C80729 +
                     ((C32169 + C32168) * C81011 * C52707 +
                      ((C26926 * C38377 + C81009 * C38378) * C5657 +
                       (C26926 * C38379 + C81009 * C38380) * C80588) *
                          C81011 * C52708) *
                         C20867) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78437 +
            (C26926 * C166 + C81009 * C172) * C80682 - C27364 * C78429 -
            C27474 * C80689 + C27372 * C78443 + C27475 * C15344) *
               C81011 * C52707 +
           (C68418 + C68419 - C68420 - C68421 + C68422 + C68423) * C81011 *
               C52708) *
              C80588 * C80722 +
          ((C68420 - (C68419 + C68418) + C68421 - C68422 - C68423) * C81011 *
               C52707 +
           (C77680 - (C77681 + C77682) + C77683 - C77684 - C77685) * C81011 *
               C52708) *
              C80588 * C80729 +
          ((C77682 + C77681 - C77680 - C77683 + C77684 + C77685) * C81011 *
               C52707 +
           (C61992 * C78437 + C62050 * C80682 - C38387 * C78429 -
            C38460 * C80689 + (C26926 * C38377 + C81009 * C38378) * C78443 +
            (C26926 * C38455 + C81009 * C38456) * C15344) *
               C81011 * C52708) *
              C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78528 +
            (C26926 * C221 + C81009 * C227) * C80722 - C53812 * C78520 -
            C54026 * C80729 + C53820 * C78534 + C54027 * C20867) *
               C81011 * C52707 +
           (C53812 * C78528 + C54026 * C80722 - C53820 * C78520 -
            C54027 * C80729 + C61992 * C78534 + C62102 * C20867) *
               C81011 * C52708) *
              C80682 +
          ((C47514 - (C47513 + C47512) + C47515 - C47516 - C47517) * C81011 *
               C52707 +
           (C32158 * C78520 - (C30294 * C80722 + C30064 * C78528) +
            C32346 * C80729 - C38387 * C78534 - C38538 * C20867) *
               C81011 * C52708) *
              C80689 +
          ((C52212 + C52211 - C52210 - C52213 + C52214 + C52215) * C81011 *
               C52707 +
           (C32160 * C78528 + C32347 * C80722 - C32163 * C78520 -
            C32348 * C80729 + (C26926 * C38377 + C81009 * C38378) * C78534 +
            (C26926 * C38526 + C81009 * C38527) * C20867) *
               C81011 * C52708) *
              C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C5657 +
                       (C275 * C107 + C81011 * C282) * C80588) *
                          C52707 +
                      (C58006 + C58007) * C52708) *
                         C81009 * C80722 -
                     ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) *
                         C81009 * C80729 +
                     ((C58009 + C58008) * C52707 + (C62160 + C62161) * C52708) *
                         C81009 * C20867) *
                        C80682 +
                    (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) *
                         C81009 * C80729 -
                     ((C58011 + C58010) * C52708 +
                      ((C275 * C757 + C81011 * C1043) * C80588 +
                       (C275 * C748 + C81011 * C1036) * C5657) *
                          C52707) *
                         C81009 * C80722 -
                     ((C64192 + C64193) * C52708 + (C58031 + C58030) * C52707) *
                         C81009 * C20867) *
                        C80689 +
                    ((((C275 * C750 + C81011 * C1039) * C5657 +
                       (C275 * C764 + C81011 * C1047) * C80588) *
                          C52707 +
                      (C58032 + C58033) * C52708) *
                         C81009 * C80722 -
                     ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) *
                         C81009 * C80729 +
                     ((C58035 + C58034) * C52707 +
                      ((C275 * C38377 + C81011 * C38605) * C5657 +
                       (C275 * C38379 + C81011 * C38606) * C80588) *
                          C52708) *
                         C81009 * C20867) *
                        C15344)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78437 +
            (C275 * C166 + C81011 * C354) * C80682 -
            (C275 * C748 + C81011 * C1036) * C78429 -
            (C275 * C856 + C81011 * C1149) * C80689 +
            (C275 * C750 + C81011 * C1039) * C78443 +
            (C275 * C857 + C81011 * C1150) * C15344) *
               C52707 +
           (C68728 + C68729 - C68730 - C68731 + C68732 + C68733) * C52708) *
              C81009 * C80588 * C80722 +
          ((C68730 - (C68729 + C68728) + C68731 - C68732 - C68733) * C52707 +
           (C77908 - (C77909 + C77910) + C77911 - C77912 - C77913) * C52708) *
              C81009 * C80588 * C80729 +
          ((C77910 + C77909 - C77908 - C77911 + C77912 + C77913) * C52707 +
           (C62156 * C78437 + C62213 * C80682 - C64191 * C78429 -
            C64265 * C80689 + (C275 * C38377 + C81011 * C38605) * C78443 +
            (C275 * C38455 + C81011 * C38673) * C15344) *
               C52708) *
              C81009 * C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78528 +
            (C275 * C221 + C81011 * C422) * C80722 - C54122 * C78520 -
            C54292 * C80729 + C54125 * C78534 + C54293 * C20867) *
               C52707 +
           (C54122 * C78528 + C54292 * C80722 - C54125 * C78520 -
            C54293 * C80729 + C62156 * C78534 + C62264 * C20867) *
               C52708) *
              C81009 * C80682 +
          ((C56147 * C78520 -
            ((C275 * C946 + C81011 * C1256) * C80722 +
             (C275 * C748 + C81011 * C1036) * C78528) +
            C56355 * C80729 - C58024 * C78534 - C58211 * C20867) *
               C52707 +
           (C58024 * C78520 - (C56355 * C80722 + C56147 * C78528) +
            C58211 * C80729 - C64191 * C78534 - C64335 * C20867) *
               C52708) *
              C81009 * C80689 +
          (((C275 * C750 + C81011 * C1039) * C78528 +
            (C275 * C947 + C81011 * C1257) * C80722 - C58026 * C78520 -
            C58212 * C80729 + C58029 * C78534 + C58213 * C20867) *
               C52707 +
           (C58026 * C78528 + C58212 * C80722 - C58029 * C78520 -
            C58213 * C80729 + (C275 * C38377 + C81011 * C38605) * C78534 +
            (C275 * C38526 + C81011 * C38740) * C20867) *
               C52708) *
              C81009 * C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C80722 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C80729 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C5657 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80588) *
               C81009 * C81011 * C20867) *
              C80682 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C80729 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C80722 -
           ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
             C52707 * C6660) *
                C80588 +
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C5657) *
               C81009 * C81011 * C20867) *
              C80689 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C80722 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C80729 +
           ((C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
             C52708 * C38807) *
                C5657 +
            (C52961 * C6153 + C52707 * C6663 + C52962 * C38379 +
             C52708 * C38808) *
                C80588) *
               C81009 * C81011 * C20867) *
              C15344)) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78437 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80682 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C78429 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80689 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C78443 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C15344) *
              C81009 * C81011 * C80588 * C80722 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C78429 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80682 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C78437) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C80689 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C78443 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C15344) *
              C81009 * C81011 * C80588 * C80729 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C78437 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C80682 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C78429 -
           (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
            C52707 * C6741) *
               C80689 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C78443 +
           (C52961 * C6239 + C52707 * C6742 + C52962 * C38455 +
            C52708 * C38883) *
               C15344) *
              C81009 * C81011 * C80588 * C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78528 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80722 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C78520 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80729 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C78534 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C20867) *
              C81009 * C81011 * C80682 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C78520 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80722 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C78528) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C80729 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C78534 -
           (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
            C52707 * C6819) *
               C20867) *
              C81009 * C81011 * C80689 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C78528 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C80722 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C78520 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C80729 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C78534 +
           (C52961 * C6325 + C52707 * C6822 + C52962 * C38526 +
            C52708 * C38953) *
               C20867) *
              C81009 * C81011 * C15344) *
         C80588) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C17817 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C80726) *
              C81013 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C80726 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C17817) *
              C81006 +
          (((C31649 + C31648) * C81011 * C52707 +
            (C32166 + C32167) * C81011 * C52708) *
               C17817 -
           ((C32168 + C32169) * C81011 * C52708 +
            (C32167 + C32166) * C81011 * C52707) *
               C80726) *
              C80993 +
          (((C34491 + C34490) * C81011 * C52707 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C81011 * C52708) *
               C80726 -
           ((C34490 + C34491) * C81011 * C52708 +
            (C31663 + C31662) * C81011 * C52707) *
               C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C4987 +
             (C26926 * C107 + C81009 * C117) * C80998 -
             (C26926 * C100 + C81009 * C106) * C4988 -
             (C26926 * C108 + C81009 * C118) * C80982 +
             (C26926 * C101 + C81009 * C109) * C4989 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C81011 * C52707 +
            (C60632 + C60633 - C60634 - C60635 + C60636 + C60637) * C81011 *
                C52708) *
               C17817 +
           ((C60634 - (C60633 + C60632) + C60635 - C60636 - C60637) * C81011 *
                C52707 +
            (C60638 - (C60639 + C60640) + C60641 - C60642 - C60643) * C81011 *
                C52708) *
               C80726) *
              C13173 +
          (((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C81011 *
                C52707 +
            (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C81011 *
                C52708) *
               C17817 +
           ((C48218 + C48217 - C48216 - C48219 + C48220 + C48221) * C81011 *
                C52707 +
            (C32158 * C4987 + C32159 * C80998 - C36914 * C4988 -
             C36915 * C80982 + (C26926 * C10971 + C81009 * C10972) * C4989 +
             (C26926 * C10973 + C81009 * C10974) * C80954) *
                C81011 * C52708) *
               C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C81014 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C81008 +
           ((C57771 + C57770) * C81011 * C52707 +
            (C61996 + C61997) * C81011 * C52708) *
               C80996 -
           ((C61998 + C61999) * C81011 * C52708 +
            (C61997 + C61996) * C81011 * C52707) *
               C80978) *
              C13173 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C81008 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C81014 -
           ((C38388 + C38389) * C81011 * C52708 +
            (C32165 + C32164) * C81011 * C52707) *
               C80996 +
           ((C38389 + C38388) * C81011 * C52707 +
            ((C26926 * C36457 + C81009 * C36458) * C5657 +
             (C26926 * C36459 + C81009 * C36460) * C80588) *
                C81011 * C52708) *
               C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C74688 + C74689 - C74690 - C74691 + C74692 + C74693 -
                      C74694 - C74695) *
                         C81011 * C52708) *
                        C80588 * C17817 +
                    ((C74690 - (C74689 + C74688) + C74691 - C74692 - C74693 +
                      C74694 + C74695) *
                         C81011 * C52707 +
                     (C32158 * C13874 - (C53932 * C81013 + C53820 * C13873) +
                      C32253 * C81006 - C32163 * C13875 - C32254 * C80993 +
                      (C26926 * C32139 + C81009 * C32140) * C13876 +
                      (C26926 * C32243 + C81009 * C32244) * C80972) *
                         C81011 * C52708) *
                        C80588 * C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C65926 + C65927 - C65928 - C65929) * C81011 * C52708) *
                         C80998 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C65930 - (C65931 + C65932) + C65933) * C81011 * C52708) *
                         C80982 +
                     (((C26926 * C101 + C81009 * C109) * C13245 +
                       (C26926 * C168 + C81009 * C174) * C13173 -
                       C27368 * C13246 - C27478 * C80686) *
                          C81011 * C52707 +
                      (C67520 + C67521 - C67522 - C67523) * C81011 * C52708) *
                         C80954) *
                        C17817 +
                    (((C65928 - (C65927 + C65926) + C65929) * C81011 * C52707 +
                      (C65934 - (C65935 + C65936) + C65937) * C81011 * C52708) *
                         C80998 +
                     ((C65932 + C65931 - C65930 - C65933) * C81011 * C52707 +
                      (C65938 + C65939 - C65940 - C65941) * C81011 * C52708) *
                         C80982 +
                     ((C67522 - (C67521 + C67520) + C67523) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C13246 -
                       (C53933 * C13173 + C53822 * C13245) +
                       (C26926 * C11073 + C81009 * C11074) * C80686) *
                          C81011 * C52708) *
                         C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13245 +
                      (C26926 * C166 + C81009 * C172) * C13173 -
                      C27364 * C13246 - C27474 * C80686) *
                         C81011 * C52707 +
                     (C65926 + C65927 - C65928 - C65929) * C81011 * C52708) *
                        C80588 * C81014 +
                    ((C65928 - (C65927 + C65926) + C65929) * C81011 * C52707 +
                     (C65934 - (C65935 + C65936) + C65937) * C81011 * C52708) *
                        C80588 * C81008 +
                    ((C65936 + C65935 - C65934 - C65937) * C81011 * C52707 +
                     (C75298 + C75299 - C75300 - C75301) * C81011 * C52708) *
                        C80588 * C80996 +
                    ((C75300 - (C75299 + C75298) + C75301) * C81011 * C52707 +
                     ((C26926 * C36457 + C81009 * C36458) * C13246 -
                      (C62051 * C13173 + C61995 * C13245) +
                      (C26926 * C36503 + C81009 * C36504) * C80686) *
                         C81011 * C52708) *
                        C80588 * C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      C53812 * C17952 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C81013 +
                    ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                     (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                      C32346 * C80726) *
                         C81011 * C52708) *
                        C81006 +
                    ((C44466 + C44465 - C44464 - C44467) * C81011 * C52707 +
                     (C32160 * C17951 + C32347 * C17817 - C32163 * C17952 -
                      C32348 * C80726) *
                         C81011 * C52708) *
                        C80993 +
                    ((C49212 - (C49211 + C49210) + C49213) * C81011 * C52707 +
                     ((C26926 * C32139 + C81009 * C32140) * C17952 -
                      (C34636 * C17817 + C34489 * C17951) +
                      (C26926 * C32328 + C81009 * C32329) * C80726) *
                         C81011 * C52708) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       C53812 * C17952 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                      (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80998 +
                    (((C53814 * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C44470 + C44469 - C44468 - C44471) * C81011 * C52707 +
                      (C30062 * C17951 + C30295 * C17817 - C36914 * C17952 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80982 +
                    ((((C26926 * C101 + C81009 * C109) * C17951 +
                       (C26926 * C223 + C81009 * C229) * C17817 -
                       C53816 * C17952 - C54030 * C80726) *
                          C81011 * C52707 +
                      (C53816 * C17951 + C54030 * C17817 - C53822 * C17952 -
                       C54031 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C45962 - (C45961 + C45960) + C45963) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C17952 -
                       (C30296 * C17817 + C30066 * C17951) +
                       (C26926 * C11173 + C81009 * C11174) * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C19485 +
                      (C26926 * C221 + C81009 * C227) * C81014 -
                      C53812 * C19486 - C54026 * C81008 + C53820 * C19487 +
                      C54027 * C80996 - C61992 * C19488 - C62102 * C80978) *
                         C81011 * C52707 +
                     (C53812 * C19485 + C54026 * C81014 - C53820 * C19486 -
                      C54027 * C81008 + C61992 * C19487 + C62102 * C80996 -
                      C61995 * C19488 - C62103 * C80978) *
                         C81011 * C52708) *
                        C13173 +
                    ((C49814 - (C49813 + C49812) + C49815 - C49816 - C49817 +
                      C49818 + C49819) *
                         C81011 * C52707 +
                     (C32158 * C19486 - (C30294 * C81014 + C30064 * C19485) +
                      C32346 * C81008 - C38387 * C19487 - C38538 * C80996 +
                      (C26926 * C36457 + C81009 * C36458) * C19488 +
                      (C26926 * C36547 + C81009 * C36548) * C80978) *
                         C81011 * C52708) *
                        C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C17817 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C80726) *
              C81013 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C80726 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C17817) *
              C81006 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C17817 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C80726) *
              C80993 +
          (((C60212 + C60213) * C52707 +
            ((C275 * C32139 + C81011 * C32425) * C5657 +
             (C275 * C32141 + C81011 * C32426) * C80588) *
                C52708) *
               C81009 * C80726 -
           ((C60213 + C60212) * C52708 +
            ((C275 * C5663 + C81011 * C5826) * C80588 +
             (C275 * C5659 + C81011 * C5822) * C5657) *
                C52707) *
               C81009 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C4987 +
             (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
             C306 * C80982 + C307 * C4989 + C308 * C80954) *
                C52707 +
            (C60866 + C60867 - C60868 - C60869 + C60870 + C60871) * C52708) *
               C81009 * C17817 +
           ((C60868 - (C60867 + C60866) + C60869 - C60870 - C60871) * C52707 +
            (C60872 - (C60873 + C60874) + C60875 - C60876 - C60877) * C52708) *
               C81009 * C80726) *
              C13173 +
          (((C1068 * C4988 -
             ((C275 * C757 + C81011 * C1043) * C80998 +
              (C275 * C748 + C81011 * C1036) * C4987) +
             C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                C52707 +
            (C74060 - (C74061 + C74062) + C74063 - C74064 - C74065) * C52708) *
               C81009 * C17817 +
           ((C74062 + C74061 - C74060 - C74063 + C74064 + C74065) * C52707 +
            (C58024 * C4987 + C58025 * C80998 - C11280 * C4988 -
             C11281 * C80982 + (C275 * C10971 + C81011 * C11273) * C4989 +
             (C275 * C10973 + C81011 * C11274) * C80954) *
                C52708) *
               C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C81014 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C81008 +
           ((C58009 + C58008) * C52707 + (C62160 + C62161) * C52708) * C81009 *
               C80996 -
           ((C62162 + C62163) * C52708 + (C62161 + C62160) * C52707) * C81009 *
               C80978) *
              C13173 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C81008 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C81014 -
           ((C64192 + C64193) * C52708 + (C58031 + C58030) * C52707) * C81009 *
               C80996 +
           ((C64193 + C64192) * C52707 +
            ((C275 * C36457 + C81011 * C36591) * C5657 +
             (C275 * C36459 + C81011 * C36592) * C80588) *
                C52708) *
               C81009 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13873 +
                      (C275 * C166 + C81011 * C354) * C81013 -
                      (C275 * C748 + C81011 * C1036) * C13874 -
                      (C275 * C856 + C81011 * C1149) * C81006 +
                      (C275 * C750 + C81011 * C1039) * C13875 +
                      (C275 * C857 + C81011 * C1150) * C80993 -
                      (C275 * C5659 + C81011 * C5822) * C13876 -
                      (C275 * C5722 + C81011 * C5871) * C80972) *
                         C52707 +
                     (C74894 + C74895 - C74896 - C74897 + C74898 + C74899 -
                      C74900 - C74901) *
                         C52708) *
                        C81009 * C80588 * C17817 +
                    ((C74896 - (C74895 + C74894) + C74897 - C74898 - C74899 +
                      C74900 + C74901) *
                         C52707 +
                     (C58024 * C13874 - (C54211 * C81013 + C54125 * C13873) +
                      C58126 * C81006 - C58029 * C13875 - C58127 * C80993 +
                      (C275 * C32139 + C81011 * C32425) * C13876 +
                      (C275 * C32243 + C81011 * C32501) * C80972) *
                         C52708) *
                        C81009 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13245 +
                       (C275 * C166 + C81011 * C354) * C13173 -
                       (C275 * C748 + C81011 * C1036) * C13246 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C66252 + C66253 - C66254 - C66255) * C52708) *
                         C81009 * C80998 +
                     ((C13448 - (C13447 + C13446) + C13449) * C52707 +
                      (C14846 - (C14847 + C14848) + C14849) * C52708) *
                         C81009 * C80982 +
                     ((C13452 + C13451 - C13450 - C13453) * C52707 +
                      (C16458 + C16459 - C16460 - C16461) * C52708) *
                         C81009 * C80954) *
                        C17817 +
                    (((C66254 - (C66253 + C66252) + C66255) * C52707 +
                      (C66256 - (C66257 + C66258) + C66259) * C52708) *
                         C81009 * C80998 +
                     ((C14848 + C14847 - C14846 - C14849) * C52707 +
                      (C14850 + C14851 - C14852 - C14853) * C52708) *
                         C81009 * C80982 +
                     ((C16460 - (C16459 + C16458) + C16461) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C13246 -
                       (C2109 * C13173 + C2010 * C13245) +
                       (C275 * C11073 + C81011 * C11379) * C80686) *
                          C52708) *
                         C81009 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13245 +
                      (C275 * C166 + C81011 * C354) * C13173 -
                      (C275 * C748 + C81011 * C1036) * C13246 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C52707 +
                     (C66252 + C66253 - C66254 - C66255) * C52708) *
                        C81009 * C80588 * C81014 +
                    ((C66254 - (C66253 + C66252) + C66255) * C52707 +
                     (C66256 - (C66257 + C66258) + C66259) * C52708) *
                        C81009 * C80588 * C81008 +
                    ((C66258 + C66257 - C66256 - C66259) * C52707 +
                     (C75500 + C75501 - C75502 - C75503) * C52708) *
                        C81009 * C80588 * C80996 +
                    ((C75502 - (C75501 + C75500) + C75503) * C52707 +
                     ((C275 * C36457 + C81011 * C36591) * C13246 -
                      (C62214 * C13173 + C62159 * C13245) +
                      (C275 * C36503 + C81011 * C36635) * C80686) *
                         C52708) *
                        C81009 * C80588 * C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C17951 +
                      (C275 * C221 + C81011 * C422) * C17817 - C54122 * C17952 -
                      C54292 * C80726) *
                         C52707 +
                     (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
                      C54293 * C80726) *
                         C52708) *
                        C81009 * C81013 +
                    ((C56147 * C17952 -
                      ((C275 * C946 + C81011 * C1256) * C17817 +
                       (C275 * C748 + C81011 * C1036) * C17951) +
                      C56355 * C80726) *
                         C52707 +
                     (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
                      C58211 * C80726) *
                         C52708) *
                        C81009 * C81006 +
                    (((C275 * C750 + C81011 * C1039) * C17951 +
                      (C275 * C947 + C81011 * C1257) * C17817 -
                      C58026 * C17952 - C58212 * C80726) *
                         C52707 +
                     (C58026 * C17951 + C58212 * C17817 - C58029 * C17952 -
                      C58213 * C80726) *
                         C52708) *
                        C81009 * C80993 +
                    ((C60210 * C17952 -
                      ((C275 * C5772 + C81011 * C5918) * C17817 +
                       (C275 * C5659 + C81011 * C5822) * C17951) +
                      C60359 * C80726) *
                         C52707 +
                     ((C275 * C32139 + C81011 * C32425) * C17952 -
                      (C60359 * C17817 + C60210 * C17951) +
                      (C275 * C32328 + C81011 * C32576) * C80726) *
                         C52708) *
                        C81009 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C17951 +
                       (C275 * C221 + C81011 * C422) * C17817 -
                       C54122 * C17952 - C54292 * C80726) *
                          C52707 +
                      (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
                       C54293 * C80726) *
                          C52708) *
                         C81009 * C13173 +
                     ((C56147 * C17952 -
                       ((C275 * C946 + C81011 * C1256) * C17817 +
                        (C275 * C748 + C81011 * C1036) * C17951) +
                       C56355 * C80726) *
                          C52707 +
                      (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
                       C58211 * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80998 +
                    (((C18154 - (C18153 + C18152) + C18155) * C52707 +
                      (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
                       C2213 * C80726) *
                          C52708) *
                         C81009 * C13173 +
                     ((C18970 + C18969 - C18968 - C18971) * C52707 +
                      (C4322 * C17951 + C4554 * C17817 - C11280 * C17952 -
                       C11494 * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80982 +
                    (((C18158 + C18157 - C18156 - C18159) * C52707 +
                      (C2006 * C17951 + C2214 * C17817 - C2010 * C17952 -
                       C2215 * C80726) *
                          C52708) *
                         C81009 * C13173 +
                     ((C20492 - (C20491 + C20490) + C20493) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C17952 -
                       (C4555 * C17817 + C4324 * C17951) +
                       (C275 * C11173 + C81011 * C11485) * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C19485 +
                      (C275 * C221 + C81011 * C422) * C81014 - C54122 * C19486 -
                      C54292 * C81008 + C54125 * C19487 + C54293 * C80996 -
                      C62156 * C19488 - C62264 * C80978) *
                         C52707 +
                     (C54122 * C19485 + C54292 * C81014 - C54125 * C19486 -
                      C54293 * C81008 + C62156 * C19487 + C62264 * C80996 -
                      C62159 * C19488 - C62265 * C80978) *
                         C52708) *
                        C81009 * C13173 +
                    ((C56147 * C19486 -
                      ((C275 * C946 + C81011 * C1256) * C81014 +
                       (C275 * C748 + C81011 * C1036) * C19485) +
                      C56355 * C81008 - C58024 * C19487 - C58211 * C80996 +
                      C64191 * C19488 + C64335 * C80978) *
                         C52707 +
                     (C58024 * C19486 - (C56355 * C81014 + C56147 * C19485) +
                      C58211 * C81008 - C64191 * C19487 - C64335 * C80996 +
                      (C275 * C36457 + C81011 * C36591) * C19488 +
                      (C275 * C36547 + C81011 * C36678) * C80978) *
                         C52708) *
                        C81009 * C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C17817 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C80726) *
              C81013 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C17817) *
              C81006 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C17817 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C80726) *
              C80993 +
          (((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
             C52708 * C32651) *
                C5657 +
            (C52961 * C8503 + C52707 * C8921 + C52962 * C32141 +
             C52708 * C32652) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C80588 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C5657) *
               C81009 * C81011 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C4987 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80998 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C4988 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80982 +
            (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C4989 +
            (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
                C80954) *
               C81009 * C81011 * C17817 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C4988 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80998 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C4987) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80982 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C4989 -
            (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 +
             C52707 * C2303) *
                C80954) *
               C81009 * C81011 * C80726) *
              C13173 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C4988 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80998 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C4987) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80982 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C4989 -
            (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
                C80954) *
               C81009 * C81011 * C17817 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C4987 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80998 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C4988 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80982 +
            (C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C4989 +
            (C52961 * C3988 + C52707 * C4661 + C52962 * C10973 +
             C52708 * C11594) *
                C80954) *
               C81009 * C81011 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C81014 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C81008 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C5657 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80588) *
               C81009 * C81011 * C80996 -
           ((C52962 * C10478 + C52708 * C10779 + C52961 * C10473 +
             C52707 * C10778) *
                C80588 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C5657) *
               C81009 * C81011 * C80978) *
              C13173 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C81008 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C81014 -
           ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
             C52707 * C6660) *
                C80588 +
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C5657) *
               C81009 * C81011 * C80996 +
           ((C52961 * C12543 + C52707 * C12963 + C52962 * C36457 +
             C52708 * C36721) *
                C5657 +
            (C52961 * C12547 + C52707 * C12965 + C52962 * C36459 +
             C52708 * C36722) *
                C80588) *
               C81009 * C81011 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13873 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81013 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C13874 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C81006 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C13875 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80993 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C13876 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C80588 * C17817 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C13874 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C81013 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C13873) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C81006 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C13875 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C80993 +
           (C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C13876 +
           (C52961 * C8573 + C52707 * C8989 + C52962 * C32243 +
            C52708 * C32753) *
               C80972) *
              C81009 * C81011 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13245 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C13173 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13246 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C80998 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13246 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C13173 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C13245) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80982 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C13245 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C13173 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C13246 -
            (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
                C80686) *
               C81009 * C81011 * C80954) *
              C17817 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13246 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C13173 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13245) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C80998 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13245 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C13173 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13246 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80982 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C13246 -
            ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
              C52707 * C2408) *
                 C13173 +
             (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
              C52707 * C2295) *
                 C13245) +
            (C52961 * C4095 + C52707 * C4775 + C52962 * C11073 +
             C52708 * C11699) *
                C80686) *
               C81009 * C81011 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13245 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C13173 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C13246 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80686) *
              C81009 * C81011 * C80588 * C81014 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C13246 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C13173 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C13245) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C80686) *
              C81009 * C81011 * C80588 * C81008 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C13245 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C13173 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C13246 -
           (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
            C52707 * C6741) *
               C80686) *
              C81009 * C81011 * C80588 * C80996 +
          ((C52961 * C12543 + C52707 * C12963 + C52962 * C36457 +
            C52708 * C36721) *
               C13246 -
           ((C52962 * C10528 + C52708 * C10825 + C52961 * C10527 +
             C52707 * C10824) *
                C13173 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C13245) +
           (C52961 * C12617 + C52707 * C13033 + C52962 * C36503 +
            C52708 * C36765) *
               C80686) *
              C81009 * C81011 * C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C17951 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C17817 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C17952 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C81013 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C17952 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C17817 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C17951) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C80726) *
              C81009 * C81011 * C81006 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C17951 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C17817 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C17952 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C80726) *
              C81009 * C81011 * C80993 +
          ((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C17952 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C17817 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C17951) +
           (C52961 * C8643 + C52707 * C9057 + C52962 * C32328 +
            C52708 * C32837) *
               C80726) *
              C81009 * C81011 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C17951 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C17817 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C17952 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C17952 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C17817 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C17951) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80998 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C17952 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C17817 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C17951) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C17951 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C17817 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C17952 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80982 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C17951 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C17817 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C17952 -
            (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 +
             C52707 * C2513) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C17952 -
            ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 +
              C52707 * C1581) *
                 C17817 +
             (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
              C52707 * C1359) *
                 C17951) +
            (C52961 * C4201 + C52707 * C4891 + C52962 * C11173 +
             C52708 * C11805) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C19485 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C81014 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C19486 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C81008 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C19487 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80996 -
           (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
            C52707 * C10774) *
               C19488 -
           (C52962 * C10583 + C52708 * C10870 + C52961 * C10582 +
            C52707 * C10869) *
               C80978) *
              C81009 * C81011 * C13173 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C19486 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C81014 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C19485) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C81008 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C19487 -
           (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
            C52707 * C6819) *
               C80996 +
           (C52961 * C12543 + C52707 * C12963 + C52962 * C36457 +
            C52708 * C36721) *
               C19488 +
           (C52961 * C12687 + C52707 * C13101 + C52962 * C36547 +
            C52708 * C36808) *
               C80978) *
              C81009 * C81011 * C80686) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C59128 + C59129 - C59130 - C59131) * C81011 * C52708) *
                         C80722 +
                     ((C59130 - (C59129 + C59128) + C59131) * C81011 * C52707 +
                      (C62494 - (C62495 + C62496) + C62497) * C81011 * C52708) *
                         C80729 +
                     ((C62496 + C62495 - C62494 - C62497) * C81011 * C52707 +
                      (C63368 + C63369 - C63376 - C63377) * C81011 * C52708) *
                         C20867) *
                        C13173 +
                    (((C32928 - (C32927 + C32926) + C32929) * C81011 * C52707 +
                      (C33590 - (C33591 + C33592) + C33593) * C81011 * C52708) *
                         C80722 +
                     ((C33592 + C33591 - C33590 - C33593) * C81011 * C52707 +
                      (C36908 + C36909 - C36916 - C36917) * C81011 * C52708) *
                         C80729 +
                     ((C36916 - (C36909 + C36908) + C36917) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C78260 -
                       (C38386 * C80916 + C38387 * C78279) +
                       (C26926 * C12548 + C81009 * C12550) * C80598) *
                          C81011 * C52708) *
                         C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C65926 + C65927 - C65928 - C65929) * C81011 * C52708) *
                         C80916 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C65930 - (C65931 + C65932) + C65933) * C81011 * C52708) *
                         C80598) *
                        C80722 +
                    (((C65928 - (C65927 + C65926) + C65929) * C81011 * C52707 +
                      (C65934 - (C65935 + C65936) + C65937) * C81011 * C52708) *
                         C80916 +
                     ((C65932 + C65931 - C65930 - C65933) * C81011 * C52707 +
                      (C65938 + C65939 - C65940 - C65941) * C81011 * C52708) *
                         C80598) *
                        C80729 +
                    (((C65936 + C65935 - C65934 - C65937) * C81011 * C52707 +
                      (C75298 + C75299 - C75300 - C75301) * C81011 * C52708) *
                         C80916 +
                     ((C65940 - (C65939 + C65938) + C65941) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C13246 -
                       (C63447 * C13173 + C63374 * C13245) +
                       (C26926 * C12618 + C81009 * C12620) * C80686) *
                          C81011 * C52708) *
                         C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78528 +
             (C26926 * C221 + C81009 * C227) * C80722 - C53812 * C78520 -
             C54026 * C80729 + C53820 * C78534 + C54027 * C20867) *
                C81011 * C52707 +
            (C53812 * C78528 + C54026 * C80722 - C53820 * C78520 -
             C54027 * C80729 + C61992 * C78534 + C62102 * C20867) *
                C81011 * C52708) *
               C13173 +
           ((C47514 - (C47513 + C47512) + C47515 - C47516 - C47517) * C81011 *
                C52707 +
            (C32158 * C78520 - (C30294 * C80722 + C30064 * C78528) +
             C32346 * C80729 - C38387 * C78534 - C38538 * C20867) *
                C81011 * C52708) *
               C80686) *
              C80916 +
          (((C53814 * C78520 -
             ((C26926 * C222 + C81009 * C228) * C80722 +
              (C26926 * C100 + C81009 * C106) * C78528) +
             C54028 * C80729 - C53818 * C78534 - C54029 * C20867) *
                C81011 * C52707 +
            (C53818 * C78520 - (C54028 * C80722 + C53814 * C78528) +
             C54029 * C80729 - C63374 * C78534 - C63517 * C20867) *
                C81011 * C52708) *
               C13173 +
           ((C47520 + C47519 - C47518 - C47521 + C47522 + C47523) * C81011 *
                C52707 +
            (C30062 * C78528 + C30295 * C80722 - C36914 * C78520 -
             C37124 * C80729 + (C26926 * C12544 + C81009 * C12546) * C78534 +
             (C26926 * C12688 + C81009 * C12690) * C20867) *
                C81011 * C52708) *
               C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C78279 +
                       (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
                       C306 * C80598) *
                          C52707 +
                      (C59432 + C59433 - C59434 - C59435) * C52708) *
                         C81009 * C80722 +
                     ((C59434 - (C59433 + C59432) + C59435) * C52707 +
                      (C62800 - (C62801 + C62802) + C62803) * C52708) *
                         C81009 * C80729 +
                     ((C62802 + C62801 - C62800 - C62803) * C52707 +
                      (C63584 + C63585 - C63586 - C63587) * C52708) *
                         C81009 * C20867) *
                        C13173 +
                    (((C1068 * C78260 -
                       ((C275 * C757 + C81011 * C1043) * C80916 +
                        (C275 * C748 + C81011 * C1036) * C78279) +
                       C1069 * C80598) *
                          C52707 +
                      (C59436 - (C59437 + C59438) + C59439) * C52708) *
                         C81009 * C80722 +
                     ((C59438 + C59437 - C59436 - C59439) * C52707 +
                      (C62804 + C62805 - C62806 - C62807) * C52708) *
                         C81009 * C80729 +
                     ((C62806 - (C62805 + C62804) + C62807) * C52707 +
                      ((C275 * C12544 + C81011 * C12758) * C78260 -
                       (C64190 * C80916 + C64191 * C78279) +
                       (C275 * C12548 + C81011 * C12760) * C80598) *
                          C52708) *
                         C81009 * C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13245 +
                       (C275 * C166 + C81011 * C354) * C13173 -
                       (C275 * C748 + C81011 * C1036) * C13246 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C66252 + C66253 - C66254 - C66255) * C52708) *
                         C81009 * C80916 +
                     ((C13448 - (C13447 + C13446) + C13449) * C52707 +
                      (C14846 - (C14847 + C14848) + C14849) * C52708) *
                         C81009 * C80598) *
                        C80722 +
                    (((C66254 - (C66253 + C66252) + C66255) * C52707 +
                      (C66256 - (C66257 + C66258) + C66259) * C52708) *
                         C81009 * C80916 +
                     ((C14848 + C14847 - C14846 - C14849) * C52707 +
                      (C14850 + C14851 - C14852 - C14853) * C52708) *
                         C81009 * C80598) *
                        C80729 +
                    (((C66258 + C66257 - C66256 - C66259) * C52707 +
                      (C75500 + C75501 - C75502 - C75503) * C52708) *
                         C81009 * C80916 +
                     ((C14852 - (C14851 + C14850) + C14853) * C52707 +
                      ((C275 * C12544 + C81011 * C12758) * C13246 -
                       (C12174 * C13173 + C12102 * C13245) +
                       (C275 * C12618 + C81011 * C12828) * C80686) *
                          C52708) *
                         C81009 * C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78528 +
             (C275 * C221 + C81011 * C422) * C80722 - C54122 * C78520 -
             C54292 * C80729 + C54125 * C78534 + C54293 * C20867) *
                C52707 +
            (C54122 * C78528 + C54292 * C80722 - C54125 * C78520 -
             C54293 * C80729 + C62156 * C78534 + C62264 * C20867) *
                C52708) *
               C81009 * C13173 +
           ((C56147 * C78520 -
             ((C275 * C946 + C81011 * C1256) * C80722 +
              (C275 * C748 + C81011 * C1036) * C78528) +
             C56355 * C80729 - C58024 * C78534 - C58211 * C20867) *
                C52707 +
            (C58024 * C78520 - (C56355 * C80722 + C56147 * C78528) +
             C58211 * C80729 - C64191 * C78534 - C64335 * C20867) *
                C52708) *
               C81009 * C80686) *
              C80916 +
          (((C21244 - (C21243 + C21242) + C21245 - C21246 - C21247) * C52707 +
            (C2008 * C78520 - (C2212 * C80722 + C2004 * C78528) +
             C2213 * C80729 - C12102 * C78534 - C12252 * C20867) *
                C52708) *
               C81009 * C13173 +
           ((C22078 + C22077 - C22076 - C22079 + C22080 + C22081) * C52707 +
            (C4322 * C78528 + C4554 * C80722 - C11280 * C78520 -
             C11494 * C80729 + (C275 * C12544 + C81011 * C12758) * C78534 +
             (C275 * C12688 + C81011 * C12896) * C20867) *
                C52708) *
               C81009 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78279 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80916 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78260 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C80722 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78260 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80916 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78279) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80729 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C78279 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80916 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C78260 -
            (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
             C52707 * C2306) *
                C80598) *
               C81009 * C81011 * C20867) *
              C13173 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78260 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80916 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78279) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C80722 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78279 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80916 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78260 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80729 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C78260 -
            ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
              C52707 * C6660) *
                 C80916 +
             (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
              C52707 * C6654) *
                 C78279) +
            (C52961 * C6143 + C52707 * C6659 + C52962 * C12548 +
             C52708 * C12966) *
                C80598) *
               C81009 * C81011 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13245 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C13173 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13246 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C80916 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13246 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C13173 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C13245) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C80722 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13246 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C13173 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13245) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C80916 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13245 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C13173 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13246 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C80729 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C13245 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C13173 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C13246 -
            (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
             C52707 * C6741) *
                C80686) *
               C81009 * C81011 * C80916 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C13246 -
            ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
              C52707 * C2412) *
                 C13173 +
             (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
              C52707 * C2298) *
                 C13245) +
            (C52961 * C6237 + C52707 * C6743 + C52962 * C12618 +
             C52708 * C13034) *
                C80686) *
               C81009 * C81011 * C80598) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78528 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80722 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C78520 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80729 +
            (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C78534 +
            (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
             C52708 * C10869) *
                C20867) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78520 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80722 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78528) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80729 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C78534 -
            (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
             C52707 * C6819) *
                C20867) *
               C81009 * C81011 * C80686) *
              C80916 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78520 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80722 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C78528) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80729 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C78534 -
            (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
             C52707 * C2512) *
                C20867) *
               C81009 * C81011 * C13173 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78528 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80722 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78520 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80729 +
            (C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C78534 +
            (C52961 * C6321 + C52707 * C6820 + C52962 * C12688 +
             C52708 * C13102) *
                C20867) *
               C81009 * C81011 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C4987 +
             (C26926 * C107 + C81009 * C117) * C80998 -
             (C26926 * C100 + C81009 * C106) * C4988 -
             (C26926 * C108 + C81009 * C118) * C80982 +
             (C26926 * C101 + C81009 * C109) * C4989 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C81011 * C52707 +
            (C60632 + C60633 - C60634 - C60635 + C60636 + C60637) * C81011 *
                C52708) *
               C17817 +
           ((C60634 - (C60633 + C60632) + C60635 - C60636 - C60637) * C81011 *
                C52707 +
            (C60638 - (C60639 + C60640) + C60641 - C60642 - C60643) * C81011 *
                C52708) *
               C80726) *
              C13173 +
          (((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C81011 *
                C52707 +
            (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C81011 *
                C52708) *
               C17817 +
           ((C48218 + C48217 - C48216 - C48219 + C48220 + C48221) * C81011 *
                C52707 +
            (C32158 * C4987 + C32159 * C80998 - C36914 * C4988 -
             C36915 * C80982 + (C26926 * C10971 + C81009 * C10972) * C4989 +
             (C26926 * C10973 + C81009 * C10974) * C80954) *
                C81011 * C52708) *
               C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C17817 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C80726) *
              C81013 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C80726 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C17817) *
              C81006 +
          (((C31649 + C31648) * C81011 * C52707 +
            (C32166 + C32167) * C81011 * C52708) *
               C17817 -
           ((C32168 + C32169) * C81011 * C52708 +
            (C32167 + C32166) * C81011 * C52707) *
               C80726) *
              C80993 +
          (((C34491 + C34490) * C81011 * C52707 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C81011 * C52708) *
               C80726 -
           ((C34490 + C34491) * C81011 * C52708 +
            (C31663 + C31662) * C81011 * C52707) *
               C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13245 +
                       (C26926 * C166 + C81009 * C172) * C13173 -
                       C27364 * C13246 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C65926 + C65927 - C65928 - C65929) * C81011 * C52708) *
                         C80998 +
                     ((C27366 * C13246 -
                       ((C26926 * C167 + C81009 * C173) * C13173 +
                        (C26926 * C100 + C81009 * C106) * C13245) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C65930 - (C65931 + C65932) + C65933) * C81011 * C52708) *
                         C80982 +
                     (((C26926 * C101 + C81009 * C109) * C13245 +
                       (C26926 * C168 + C81009 * C174) * C13173 -
                       C27368 * C13246 - C27478 * C80686) *
                          C81011 * C52707 +
                      (C67520 + C67521 - C67522 - C67523) * C81011 * C52708) *
                         C80954) *
                        C17817 +
                    (((C65928 - (C65927 + C65926) + C65929) * C81011 * C52707 +
                      (C65934 - (C65935 + C65936) + C65937) * C81011 * C52708) *
                         C80998 +
                     ((C65932 + C65931 - C65930 - C65933) * C81011 * C52707 +
                      (C65938 + C65939 - C65940 - C65941) * C81011 * C52708) *
                         C80982 +
                     ((C67522 - (C67521 + C67520) + C67523) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C13246 -
                       (C53933 * C13173 + C53822 * C13245) +
                       (C26926 * C11073 + C81009 * C11074) * C80686) *
                          C81011 * C52708) *
                         C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13873 +
                      (C26926 * C166 + C81009 * C172) * C81013 -
                      C27364 * C13874 - C27474 * C81006 + C27372 * C13875 +
                      C27475 * C80993 - C31658 * C13876 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C74688 + C74689 - C74690 - C74691 + C74692 + C74693 -
                      C74694 - C74695) *
                         C81011 * C52708) *
                        C80588 * C17817 +
                    ((C74690 - (C74689 + C74688) + C74691 - C74692 - C74693 +
                      C74694 + C74695) *
                         C81011 * C52707 +
                     (C32158 * C13874 - (C53932 * C81013 + C53820 * C13873) +
                      C32253 * C81006 - C32163 * C13875 - C32254 * C80993 +
                      (C26926 * C32139 + C81009 * C32140) * C13876 +
                      (C26926 * C32243 + C81009 * C32244) * C80972) *
                         C81011 * C52708) *
                        C80588 * C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       C53812 * C17952 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                      (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80998 +
                    (((C53814 * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C44470 + C44469 - C44468 - C44471) * C81011 * C52707 +
                      (C30062 * C17951 + C30295 * C17817 - C36914 * C17952 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80982 +
                    ((((C26926 * C101 + C81009 * C109) * C17951 +
                       (C26926 * C223 + C81009 * C229) * C17817 -
                       C53816 * C17952 - C54030 * C80726) *
                          C81011 * C52707 +
                      (C53816 * C17951 + C54030 * C17817 - C53822 * C17952 -
                       C54031 * C80726) *
                          C81011 * C52708) *
                         C13173 +
                     ((C45962 - (C45961 + C45960) + C45963) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C17952 -
                       (C30296 * C17817 + C30066 * C17951) +
                       (C26926 * C11173 + C81009 * C11174) * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      C53812 * C17952 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C81013 +
                    ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                     (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                      C32346 * C80726) *
                         C81011 * C52708) *
                        C81006 +
                    ((C44466 + C44465 - C44464 - C44467) * C81011 * C52707 +
                     (C32160 * C17951 + C32347 * C17817 - C32163 * C17952 -
                      C32348 * C80726) *
                         C81011 * C52708) *
                        C80993 +
                    ((C49212 - (C49211 + C49210) + C49213) * C81011 * C52707 +
                     ((C26926 * C32139 + C81009 * C32140) * C17952 -
                      (C34636 * C17817 + C34489 * C17951) +
                      (C26926 * C32328 + C81009 * C32329) * C80726) *
                         C81011 * C52708) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C4987 +
             (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
             C306 * C80982 + C307 * C4989 + C308 * C80954) *
                C52707 +
            (C60866 + C60867 - C60868 - C60869 + C60870 + C60871) * C52708) *
               C81009 * C17817 +
           ((C60868 - (C60867 + C60866) + C60869 - C60870 - C60871) * C52707 +
            (C60872 - (C60873 + C60874) + C60875 - C60876 - C60877) * C52708) *
               C81009 * C80726) *
              C13173 +
          (((C1068 * C4988 -
             ((C275 * C757 + C81011 * C1043) * C80998 +
              (C275 * C748 + C81011 * C1036) * C4987) +
             C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                C52707 +
            (C74060 - (C74061 + C74062) + C74063 - C74064 - C74065) * C52708) *
               C81009 * C17817 +
           ((C74062 + C74061 - C74060 - C74063 + C74064 + C74065) * C52707 +
            (C58024 * C4987 + C58025 * C80998 - C11280 * C4988 -
             C11281 * C80982 + (C275 * C10971 + C81011 * C11273) * C4989 +
             (C275 * C10973 + C81011 * C11274) * C80954) *
                C52708) *
               C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C17817 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C80726) *
              C81013 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C80726 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C17817) *
              C81006 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C17817 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C80726) *
              C80993 +
          (((C60212 + C60213) * C52707 +
            ((C275 * C32139 + C81011 * C32425) * C5657 +
             (C275 * C32141 + C81011 * C32426) * C80588) *
                C52708) *
               C81009 * C80726 -
           ((C60213 + C60212) * C52708 +
            ((C275 * C5663 + C81011 * C5826) * C80588 +
             (C275 * C5659 + C81011 * C5822) * C5657) *
                C52707) *
               C81009 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13245 +
                       (C275 * C166 + C81011 * C354) * C13173 -
                       (C275 * C748 + C81011 * C1036) * C13246 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C66252 + C66253 - C66254 - C66255) * C52708) *
                         C81009 * C80998 +
                     ((C13448 - (C13447 + C13446) + C13449) * C52707 +
                      (C14846 - (C14847 + C14848) + C14849) * C52708) *
                         C81009 * C80982 +
                     ((C13452 + C13451 - C13450 - C13453) * C52707 +
                      (C16458 + C16459 - C16460 - C16461) * C52708) *
                         C81009 * C80954) *
                        C17817 +
                    (((C66254 - (C66253 + C66252) + C66255) * C52707 +
                      (C66256 - (C66257 + C66258) + C66259) * C52708) *
                         C81009 * C80998 +
                     ((C14848 + C14847 - C14846 - C14849) * C52707 +
                      (C14850 + C14851 - C14852 - C14853) * C52708) *
                         C81009 * C80982 +
                     ((C16460 - (C16459 + C16458) + C16461) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C13246 -
                       (C2109 * C13173 + C2010 * C13245) +
                       (C275 * C11073 + C81011 * C11379) * C80686) *
                          C52708) *
                         C81009 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13873 +
                      (C275 * C166 + C81011 * C354) * C81013 -
                      (C275 * C748 + C81011 * C1036) * C13874 -
                      (C275 * C856 + C81011 * C1149) * C81006 +
                      (C275 * C750 + C81011 * C1039) * C13875 +
                      (C275 * C857 + C81011 * C1150) * C80993 -
                      (C275 * C5659 + C81011 * C5822) * C13876 -
                      (C275 * C5722 + C81011 * C5871) * C80972) *
                         C52707 +
                     (C74894 + C74895 - C74896 - C74897 + C74898 + C74899 -
                      C74900 - C74901) *
                         C52708) *
                        C81009 * C80588 * C17817 +
                    ((C74896 - (C74895 + C74894) + C74897 - C74898 - C74899 +
                      C74900 + C74901) *
                         C52707 +
                     (C58024 * C13874 - (C54211 * C81013 + C54125 * C13873) +
                      C58126 * C81006 - C58029 * C13875 - C58127 * C80993 +
                      (C275 * C32139 + C81011 * C32425) * C13876 +
                      (C275 * C32243 + C81011 * C32501) * C80972) *
                         C52708) *
                        C81009 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C17951 +
                       (C275 * C221 + C81011 * C422) * C17817 -
                       C54122 * C17952 - C54292 * C80726) *
                          C52707 +
                      (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
                       C54293 * C80726) *
                          C52708) *
                         C81009 * C13173 +
                     ((C56147 * C17952 -
                       ((C275 * C946 + C81011 * C1256) * C17817 +
                        (C275 * C748 + C81011 * C1036) * C17951) +
                       C56355 * C80726) *
                          C52707 +
                      (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
                       C58211 * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80998 +
                    (((C18154 - (C18153 + C18152) + C18155) * C52707 +
                      (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
                       C2213 * C80726) *
                          C52708) *
                         C81009 * C13173 +
                     ((C18970 + C18969 - C18968 - C18971) * C52707 +
                      (C4322 * C17951 + C4554 * C17817 - C11280 * C17952 -
                       C11494 * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80982 +
                    (((C18158 + C18157 - C18156 - C18159) * C52707 +
                      (C2006 * C17951 + C2214 * C17817 - C2010 * C17952 -
                       C2215 * C80726) *
                          C52708) *
                         C81009 * C13173 +
                     ((C20492 - (C20491 + C20490) + C20493) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C17952 -
                       (C4555 * C17817 + C4324 * C17951) +
                       (C275 * C11173 + C81011 * C11485) * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C17951 +
                      (C275 * C221 + C81011 * C422) * C17817 - C54122 * C17952 -
                      C54292 * C80726) *
                         C52707 +
                     (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
                      C54293 * C80726) *
                         C52708) *
                        C81009 * C81013 +
                    ((C56147 * C17952 -
                      ((C275 * C946 + C81011 * C1256) * C17817 +
                       (C275 * C748 + C81011 * C1036) * C17951) +
                      C56355 * C80726) *
                         C52707 +
                     (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
                      C58211 * C80726) *
                         C52708) *
                        C81009 * C81006 +
                    (((C275 * C750 + C81011 * C1039) * C17951 +
                      (C275 * C947 + C81011 * C1257) * C17817 -
                      C58026 * C17952 - C58212 * C80726) *
                         C52707 +
                     (C58026 * C17951 + C58212 * C17817 - C58029 * C17952 -
                      C58213 * C80726) *
                         C52708) *
                        C81009 * C80993 +
                    ((C60210 * C17952 -
                      ((C275 * C5772 + C81011 * C5918) * C17817 +
                       (C275 * C5659 + C81011 * C5822) * C17951) +
                      C60359 * C80726) *
                         C52707 +
                     ((C275 * C32139 + C81011 * C32425) * C17952 -
                      (C60359 * C17817 + C60210 * C17951) +
                      (C275 * C32328 + C81011 * C32576) * C80726) *
                         C52708) *
                        C81009 * C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C4987 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80998 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C4988 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80982 +
            (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C4989 +
            (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
                C80954) *
               C81009 * C81011 * C17817 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C4988 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80998 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C4987) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80982 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C4989 -
            (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 +
             C52707 * C2303) *
                C80954) *
               C81009 * C81011 * C80726) *
              C13173 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C4988 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80998 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C4987) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80982 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C4989 -
            (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
                C80954) *
               C81009 * C81011 * C17817 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C4987 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80998 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C4988 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80982 +
            (C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C4989 +
            (C52961 * C3988 + C52707 * C4661 + C52962 * C10973 +
             C52708 * C11594) *
                C80954) *
               C81009 * C81011 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C17817 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C80726) *
              C81013 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C17817) *
              C81006 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C17817 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C80726) *
              C80993 +
          (((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
             C52708 * C32651) *
                C5657 +
            (C52961 * C8503 + C52707 * C8921 + C52962 * C32141 +
             C52708 * C32652) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C80588 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C5657) *
               C81009 * C81011 * C17817) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13245 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C13173 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C13246 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C80998 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13246 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C13173 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C13245) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80982 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C13245 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C13173 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C13246 -
            (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
                C80686) *
               C81009 * C81011 * C80954) *
              C17817 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13246 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C13173 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13245) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C80998 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13245 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C13173 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13246 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80982 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C13246 -
            ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
              C52707 * C2408) *
                 C13173 +
             (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
              C52707 * C2295) *
                 C13245) +
            (C52961 * C4095 + C52707 * C4775 + C52962 * C11073 +
             C52708 * C11699) *
                C80686) *
               C81009 * C81011 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13873 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81013 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C13874 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C81006 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C13875 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80993 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C13876 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C80588 * C17817 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C13874 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C81013 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C13873) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C81006 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C13875 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C80993 +
           (C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C13876 +
           (C52961 * C8573 + C52707 * C8989 + C52962 * C32243 +
            C52708 * C32753) *
               C80972) *
              C81009 * C81011 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C17951 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C17817 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C17952 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C17952 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C17817 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C17951) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80998 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C17952 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C17817 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C17951) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C17951 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C17817 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C17952 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80982 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C17951 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C17817 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C17952 -
            (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 +
             C52707 * C2513) *
                C80726) *
               C81009 * C81011 * C13173 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C17952 -
            ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 +
              C52707 * C1581) *
                 C17817 +
             (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
              C52707 * C1359) *
                 C17951) +
            (C52961 * C4201 + C52707 * C4891 + C52962 * C11173 +
             C52708 * C11805) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C17951 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C17817 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C17952 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C81013 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C17952 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C17817 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C17951) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C80726) *
              C81009 * C81011 * C81006 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C17951 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C17817 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C17952 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C80726) *
              C81009 * C81011 * C80993 +
          ((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C17952 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C17817 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C17951) +
           (C52961 * C8643 + C52707 * C9057 + C52962 * C32328 +
            C52708 * C32837) *
               C80726) *
              C81009 * C81011 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C78279 +
                      (C26926 * C107 + C81009 * C117) * C80916 -
                      (C26926 * C100 + C81009 * C106) * C78260 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C81011 * C52707 +
                     (C53812 * C78279 + C53813 * C80916 - C53814 * C78260 -
                      C53815 * C80598) *
                         C81011 * C52708) *
                        C80639 * C6893 +
                    ((C32928 - (C32927 + C32926) + C32929) * C81011 * C52707 +
                     (C33590 - (C33591 + C33592) + C33593) * C81011 * C52708) *
                        C80639 * C6894 +
                    ((C32932 + C32931 - C32930 - C32933) * C81011 * C52707 +
                     (C33594 + C33595 - C33602 - C33603) * C81011 * C52708) *
                        C80639 * C6895 +
                    ((C32942 - (C32935 + C32934) + C32943) * C81011 * C52707 +
                     ((C26926 * C8500 + C81009 * C8502) * C78260 -
                      (C34488 * C80916 + C34489 * C78279) +
                      (C26926 * C8504 + C81009 * C8506) * C80598) *
                         C81011 * C52708) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C53812 * C2613 + C53813 * C2607 - C53814 * C2614 -
                      C53815 * C2608 + C53816 * C2615 + C53817 * C2609 -
                      (C26926 * C1685 + C81009 * C1696) * C2616 -
                      (C26926 * C1697 + C81009 * C1709) * C80966) *
                         C81011 * C52708) *
                        C80639 * C80932 +
                    ((C28802 - (C28801 + C28800) + C28803 - C28804 - C28805 +
                      C28812 + C28813) *
                         C81011 * C52707 +
                     (C30062 * C2614 - (C30063 * C2607 + C30064 * C2613) +
                      C30065 * C2608 - C30066 * C2615 - C30067 * C2609 +
                      (C26926 * C3982 + C81009 * C3989) * C2616 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C81011 * C52708) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C59128 + C59129 - C59130 - C59131) * C81011 * C52708) *
                         C9133 +
                     ((C59130 - (C59129 + C59128) + C59131) * C81011 * C52707 +
                      (C62494 - (C62495 + C62496) + C62497) * C81011 * C52708) *
                         C9134 +
                     ((C62496 + C62495 - C62494 - C62497) * C81011 * C52707 +
                      (C61992 * C78279 + C61993 * C80916 -
                       (C26926 * C10468 + C81009 * C10474) * C78260 -
                       (C26926 * C10472 + C81009 * C10480) * C80598) *
                          C81011 * C52708) *
                         C80965) *
                        C80932 +
                    (((C32928 - (C32927 + C32926) + C32929) * C81011 * C52707 +
                      (C33590 - (C33591 + C33592) + C33593) * C81011 * C52708) *
                         C9133 +
                     ((C33592 + C33591 - C33590 - C33593) * C81011 * C52707 +
                      (C36908 + C36909 - C36916 - C36917) * C81011 * C52708) *
                         C9134 +
                     ((C36916 - (C36909 + C36908) + C36917) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C78260 -
                       (C38386 * C80916 + C38387 * C78279) +
                       (C26926 * C12548 + C81009 * C12550) * C80598) *
                          C81011 * C52708) *
                         C80965) *
                        C80686)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[60] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C53812 * C6969 + C53928 * C6893 - C30064 * C6970 -
                      C30178 * C6894 + C32160 * C6971 + C32252 * C6895 -
                      C34489 * C6972 - C34562 * C80972) *
                         C81011 * C52708) *
                        C80916 +
                    ((C27366 * C6970 -
                      ((C26926 * C167 + C81009 * C173) * C6893 +
                       (C26926 * C100 + C81009 * C106) * C6969) +
                      C27476 * C6894 - C27370 * C6971 - C27477 * C6895 +
                      C32940 * C6972 + C33012 * C80972) *
                         C81011 * C52707 +
                     (C30062 * C6970 - (C53929 * C6893 + C53814 * C6969) +
                      C30179 * C6894 - C33600 * C6971 - C33704 * C6895 +
                      (C26926 * C8500 + C81009 * C8502) * C6972 +
                      (C26926 * C8574 + C81009 * C8576) * C80972) *
                         C81011 * C52708) *
                        C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2687 +
                      (C26926 * C166 + C81009 * C172) * C80932 -
                      C27364 * C2688 - C27474 * C80686) *
                         C81011 * C52707 +
                     (C53812 * C2687 + C53928 * C80932 - C30064 * C2688 -
                      C30178 * C80686) *
                         C81011 * C52708) *
                        C2607 +
                    ((C27366 * C2688 -
                      ((C26926 * C167 + C81009 * C173) * C80932 +
                       (C26926 * C100 + C81009 * C106) * C2687) +
                      C27476 * C80686) *
                         C81011 * C52707 +
                     (C30062 * C2688 - (C53929 * C80932 + C53814 * C2687) +
                      C30179 * C80686) *
                         C81011 * C52708) *
                        C2608 +
                    (((C26926 * C101 + C81009 * C109) * C2687 +
                      (C26926 * C168 + C81009 * C174) * C80932 -
                      C27368 * C2688 - C27478 * C80686) *
                         C81011 * C52707 +
                     (C53816 * C2687 + C53930 * C80932 - C30066 * C2688 -
                      C30180 * C80686) *
                         C81011 * C52708) *
                        C2609 +
                    ((C28810 * C2688 -
                      ((C26926 * C169 + C81009 * C175) * C80932 +
                       (C26926 * C102 + C81009 * C111) * C2687) +
                      C28882 * C80686) *
                         C81011 * C52707 +
                     ((C26926 * C3982 + C81009 * C3989) * C2688 -
                      ((C26926 * C1791 + C81009 * C1799) * C80932 +
                       (C26926 * C1685 + C81009 * C1696) * C2687) +
                      (C26926 * C4096 + C81009 * C4100) * C80686) *
                         C81011 * C52708) *
                        C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C55930 + C55931 - C55932 - C55933) * C81011 * C52708) *
                         C80916 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C55934 - (C55935 + C55936) + C55937) * C81011 * C52708) *
                         C80598) *
                        C9133 +
                    (((C55932 - (C55931 + C55930) + C55933) * C81011 * C52707 +
                      (C62596 - (C62597 + C62598) + C62599) * C81011 * C52708) *
                         C80916 +
                     ((C55936 + C55935 - C55934 - C55937) * C81011 * C52707 +
                      (C62600 + C62601 - C62602 - C62603) * C81011 * C52708) *
                         C80598) *
                        C9134 +
                    (((C62598 + C62597 - C62596 - C62599) * C81011 * C52707 +
                      (C61992 * C2687 + C62050 * C80932 - C38387 * C2688 -
                       C38460 * C80686) *
                          C81011 * C52708) *
                         C80916 +
                     ((C62602 - (C62601 + C62600) + C62603) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C2688 -
                       ((C26926 * C10526 + C81009 * C10530) * C80932 +
                        (C26926 * C10468 + C81009 * C10474) * C2687) +
                       (C26926 * C12618 + C81009 * C12620) * C80686) *
                          C81011 * C52708) *
                         C80598) *
                        C80965)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
               C6893 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C6894 +
           ((C27559 + C27579) * C81011 * C52707 +
            (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
               C6895 -
           ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
            (C31768 + C31760) * C81011 * C52707) *
               C80972) *
              C80916 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C6894 -
           ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C6893 -
           ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
            (C27581 + C27563) * C81011 * C52707) *
               C6895 +
           ((C33081 + C33083) * C81011 * C52707 +
            ((C26926 * C8500 + C81009 * C8502) * C220 +
             (C26926 * C8644 + C81009 * C8646) * C80639) *
                C81011 * C52708) *
               C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
               C80932 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C80686) *
              C2607 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C80686 -
           ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C80932) *
              C2608 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C81011 * C52707 +
            (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
               C80932 -
           ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
            (C27582 + C27566) * C81011 * C52707) *
               C80686) *
              C2609 +
          (((C28949 + C28953) * C81011 * C52707 +
            ((C26926 * C3982 + C81009 * C3989) * C220 +
             (C26926 * C4202 + C81009 * C4206) * C80639) *
                C81011 * C52708) *
               C80686 -
           (((C26926 * C1887 + C81009 * C1895) * C80639 +
             (C26926 * C1685 + C81009 * C1696) * C220) *
                C81011 * C52708 +
            ((C26926 * C224 + C81009 * C230) * C80639 +
             (C26926 * C102 + C81009 * C111) * C220) *
                C81011 * C52707) *
               C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C9284 +
             (C26926 * C221 + C81009 * C227) * C9133 - C53812 * C9285 -
             C54026 * C9134 + C53820 * C9286 + C54027 * C80965) *
                C81011 * C52707 +
            (C53812 * C9284 + C54026 * C9133 - C53820 * C9285 - C54027 * C9134 +
             C61992 * C9286 + C62102 * C80965) *
                C81011 * C52708) *
               C80932 +
           ((C35950 - (C35949 + C35948) + C35951 - C35952 - C35953) * C81011 *
                C52707 +
            (C32158 * C9285 - (C30294 * C9133 + C30064 * C9284) +
             C32346 * C9134 - C38387 * C9286 - C38538 * C80965) *
                C81011 * C52708) *
               C80686) *
              C80916 +
          (((C53814 * C9285 -
             ((C26926 * C222 + C81009 * C228) * C9133 +
              (C26926 * C100 + C81009 * C106) * C9284) +
             C54028 * C9134 - C53818 * C9286 - C54029 * C80965) *
                C81011 * C52707 +
            (C53818 * C9285 - (C54028 * C9133 + C53814 * C9284) +
             C54029 * C9134 - (C26926 * C10468 + C81009 * C10474) * C9286 -
             (C26926 * C10581 + C81009 * C10585) * C80965) *
                C81011 * C52708) *
               C80932 +
           ((C37119 + C37118 - C37117 - C37120 + C37121 + C37125) * C81011 *
                C52707 +
            (C30062 * C9284 + C30295 * C9133 - C36914 * C9285 - C37124 * C9134 +
             (C26926 * C12544 + C81009 * C12546) * C9286 +
             (C26926 * C12688 + C81009 * C12690) * C80965) *
                C81011 * C52708) *
               C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78279 +
            (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
            C306 * C80598) *
               C52707 +
           (C54122 * C78279 + C54123 * C80916 - C2004 * C78260 -
            C2005 * C80598) *
               C52708) *
              C81009 * C80639 * C6893 +
          ((C1068 * C78260 -
            ((C275 * C757 + C81011 * C1043) * C80916 +
             (C275 * C748 + C81011 * C1036) * C78279) +
            C1069 * C80598) *
               C52707 +
           (C4322 * C78260 - (C56146 * C80916 + C56147 * C78279) +
            C4323 * C80598) *
               C52708) *
              C81009 * C80639 * C6894 +
          (((C275 * C750 + C81011 * C1039) * C78279 +
            (C275 * C764 + C81011 * C1047) * C80916 - C1072 * C78260 -
            C1073 * C80598) *
               C52707 +
           (C58026 * C78279 + C58027 * C80916 - C7898 * C78260 -
            C7899 * C80598) *
               C52708) *
              C81009 * C80639 * C6895 +
          ((C7116 * C78260 -
            ((C275 * C5663 + C81011 * C5826) * C80916 +
             (C275 * C5659 + C81011 * C5822) * C78279) +
            C7117 * C80598) *
               C52707 +
           ((C275 * C8500 + C81011 * C8714) * C78260 -
            ((C275 * C8503 + C81011 * C8715) * C80916 +
             (C275 * C8499 + C81011 * C8713) * C78279) +
            (C275 * C8504 + C81011 * C8716) * C80598) *
               C52708) *
              C81009 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2613 +
            (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
            C306 * C2608 + C307 * C2615 + C308 * C2609 - C309 * C2616 -
            C310 * C80966) *
               C52707 +
           (C54122 * C2613 + C54123 * C2607 - C2004 * C2614 - C2005 * C2608 +
            C2006 * C2615 + C2007 * C2609 - C3498 * C2616 - C3499 * C80966) *
               C52708) *
              C81009 * C80639 * C80932 +
          ((C1068 * C2614 -
            ((C275 * C757 + C81011 * C1043) * C2607 +
             (C275 * C748 + C81011 * C1036) * C2613) +
            C1069 * C2608 - C1070 * C2615 - C1071 * C2609 + C2832 * C2616 +
            C2833 * C80966) *
               C52707 +
           (C4322 * C2614 -
            ((C275 * C3985 + C81011 * C4309) * C2607 +
             (C275 * C3979 + C81011 * C4305) * C2613) +
            C4323 * C2608 - C4324 * C2615 - C4325 * C2609 +
            (C275 * C3982 + C81011 * C4308) * C2616 +
            (C275 * C3990 + C81011 * C4312) * C80966) *
               C52708) *
              C81009 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78279 +
             (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
             C306 * C80598) *
                C52707 +
            (C59432 + C59433 - C59434 - C59435) * C52708) *
               C81009 * C9133 +
           ((C59434 - (C59433 + C59432) + C59435) * C52707 +
            (C62800 - (C62801 + C62802) + C62803) * C52708) *
               C81009 * C9134 +
           ((C62802 + C62801 - C62800 - C62803) * C52707 +
            (C62156 * C78279 + C62157 * C80916 - C12102 * C78260 -
             C12103 * C80598) *
                C52708) *
               C81009 * C80965) *
              C80932 +
          (((C1068 * C78260 -
             ((C275 * C757 + C81011 * C1043) * C80916 +
              (C275 * C748 + C81011 * C1036) * C78279) +
             C1069 * C80598) *
                C52707 +
            (C59436 - (C59437 + C59438) + C59439) * C52708) *
               C81009 * C9133 +
           ((C59438 + C59437 - C59436 - C59439) * C52707 +
            (C62804 + C62805 - C62806 - C62807) * C52708) *
               C81009 * C9134 +
           ((C62806 - (C62805 + C62804) + C62807) * C52707 +
            ((C275 * C12544 + C81011 * C12758) * C78260 -
             ((C275 * C12547 + C81011 * C12759) * C80916 +
              (C275 * C12543 + C81011 * C12757) * C78279) +
             (C275 * C12548 + C81011 * C12760) * C80598) *
                C52708) *
               C81009 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C6969 +
            (C275 * C166 + C81011 * C354) * C6893 -
            (C275 * C748 + C81011 * C1036) * C6970 -
            (C275 * C856 + C81011 * C1149) * C6894 +
            (C275 * C750 + C81011 * C1039) * C6971 +
            (C275 * C857 + C81011 * C1150) * C6895 -
            (C275 * C5659 + C81011 * C5822) * C6972 -
            (C275 * C5722 + C81011 * C5871) * C80972) *
               C52707 +
           (C54122 * C6969 + C54210 * C6893 - C56147 * C6970 - C56253 * C6894 +
            C58026 * C6971 + C58125 * C6895 -
            (C275 * C8499 + C81011 * C8713) * C6972 -
            (C275 * C8573 + C81011 * C8783) * C80972) *
               C52708) *
              C81009 * C80916 +
          ((C7187 - (C7186 + C7185) + C7188 - C7189 - C7190 + C7191 + C7195) *
               C52707 +
           (C4322 * C6970 - (C2106 * C6893 + C2004 * C6969) + C4438 * C6894 -
            C7898 * C6971 - C8006 * C6895 +
            (C275 * C8500 + C81011 * C8714) * C6972 +
            (C275 * C8574 + C81011 * C8784) * C80972) *
               C52708) *
              C81009 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2687 +
            (C275 * C166 + C81011 * C354) * C80932 -
            (C275 * C748 + C81011 * C1036) * C2688 -
            (C275 * C856 + C81011 * C1149) * C80686) *
               C52707 +
           (C54122 * C2687 + C54210 * C80932 -
            (C275 * C3979 + C81011 * C4305) * C2688 -
            (C275 * C4093 + C81011 * C4423) * C80686) *
               C52708) *
              C81009 * C2607 +
          ((C2903 - (C2902 + C2901) + C2904) * C52707 +
           (C4428 - (C4429 + C4430) + C4440) * C52708) *
              C81009 * C2608 +
          ((C2907 + C2906 - C2905 - C2908) * C52707 +
           (C4433 + C4434 - C4435 - C4441) * C52708) *
              C81009 * C2609 +
          ((C2911 - (C2910 + C2909) + C2915) * C52707 +
           ((C275 * C3982 + C81011 * C4308) * C2688 -
            (C3570 * C80932 + C3498 * C2687) +
            (C275 * C4096 + C81011 * C4426) * C80686) *
               C52708) *
              C81009 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C2687 +
             (C275 * C166 + C81011 * C354) * C80932 -
             (C275 * C748 + C81011 * C1036) * C2688 -
             (C275 * C856 + C81011 * C1149) * C80686) *
                C52707 +
            (C56248 + C56249 - C56250 - C56254) * C52708) *
               C81009 * C80916 +
           ((C2903 - (C2902 + C2901) + C2904) * C52707 +
            (C4428 - (C4429 + C4430) + C4440) * C52708) *
               C81009 * C80598) *
              C9133 +
          (((C56250 - (C56249 + C56248) + C56254) * C52707 +
            (C62906 - (C62907 + C62908) + C62909) * C52708) *
               C81009 * C80916 +
           ((C4430 + C4429 - C4428 - C4440) * C52707 +
            (C11381 + C11382 - C11383 - C11387) * C52708) *
               C81009 * C80598) *
              C9134 +
          (((C62908 + C62907 - C62906 - C62909) * C52707 +
            (C62156 * C2687 + C62213 * C80932 -
             (C275 * C12543 + C81011 * C12757) * C2688 -
             (C275 * C12617 + C81011 * C12827) * C80686) *
                C52708) *
               C81009 * C80916 +
           ((C11383 - (C11382 + C11381) + C11387) * C52707 +
            ((C275 * C12544 + C81011 * C12758) * C2688 -
             (C12174 * C80932 + C12102 * C2687) +
             (C275 * C12618 + C81011 * C12828) * C80686) *
                C52708) *
               C81009 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C6893 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C6894 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            (C58026 * C220 + C58212 * C80639) * C52708) *
               C81009 * C6895 -
           (((C275 * C8643 + C81011 * C8851) * C80639 +
             (C275 * C8499 + C81011 * C8713) * C220) *
                C52708 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C52707) *
               C81009 * C80972) *
              C80916 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C6894 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C6893 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C6895 +
           ((C7265 + C7267) * C52707 +
            ((C275 * C8500 + C81011 * C8714) * C220 +
             (C275 * C8644 + C81011 * C8852) * C80639) *
                C52708) *
               C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C80932 -
           (((C275 * C4199 + C81011 * C4539) * C80639 +
             (C275 * C3979 + C81011 * C4305) * C220) *
                C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80686) *
              C2607 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80686 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C80932) *
              C2608 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C80932 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80686) *
              C2609 +
          (((C2985 + C2987) * C52707 +
            ((C275 * C3982 + C81011 * C4308) * C220 +
             (C275 * C4202 + C81011 * C4542) * C80639) *
                C52708) *
               C81009 * C80686 -
           ((C3652 * C80639 + C3498 * C220) * C52708 + (C447 + C435) * C52707) *
               C81009 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C9284 +
             (C275 * C221 + C81011 * C422) * C9133 - C54122 * C9285 -
             C54292 * C9134 + C54125 * C9286 + C54293 * C80965) *
                C52707 +
            (C54122 * C9284 + C54292 * C9133 - C54125 * C9285 - C54293 * C9134 +
             C62156 * C9286 + C62264 * C80965) *
                C52708) *
               C81009 * C80932 +
           ((C56147 * C9285 -
             ((C275 * C946 + C81011 * C1256) * C9133 +
              (C275 * C748 + C81011 * C1036) * C9284) +
             C56355 * C9134 - C58024 * C9286 - C58211 * C80965) *
                C52707 +
            (C58024 * C9285 - (C56355 * C9133 + C56147 * C9284) +
             C58211 * C9134 - (C275 * C12543 + C81011 * C12757) * C9286 -
             (C275 * C12687 + C81011 * C12895) * C80965) *
                C52708) *
               C81009 * C80686) *
              C80916 +
          (((C9512 - (C9511 + C9510) + C9513 - C9514 - C9515) * C52707 +
            (C2008 * C9285 - (C2212 * C9133 + C2004 * C9284) + C2213 * C9134 -
             C12102 * C9286 - C12252 * C80965) *
                C52708) *
               C81009 * C80932 +
           ((C11489 + C11488 - C11487 - C11490 + C11491 + C11495) * C52707 +
            (C4322 * C9284 + C4554 * C9133 - C11280 * C9285 - C11494 * C9134 +
             (C275 * C12544 + C81011 * C12758) * C9286 +
             (C275 * C12688 + C81011 * C12896) * C80965) *
                C52708) *
               C81009 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78279 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80916 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C78260 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80598) *
              C81009 * C81011 * C80639 * C6893 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C78260 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80916 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C78279) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80598) *
              C81009 * C81011 * C80639 * C6894 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C78279 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80916 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C78260 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80598) *
              C81009 * C81011 * C80639 * C6895 +
          ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C78260 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C80916 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C78279) +
           (C52961 * C5662 + C52707 * C5967 + C52962 * C8504 + C52708 * C8922) *
               C80598) *
              C81009 * C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C2613 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C2607 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C2614 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C2608 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C2615 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C2609 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C2616 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C80639 * C80932 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C2614 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C2607 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C2613) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C2608 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C2615 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C2609 +
           (C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C2616 +
           (C52961 * C761 + C52707 * C1368 + C52962 * C3990 + C52708 * C4662) *
               C80966) *
              C81009 * C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78279 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80916 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78260 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C9133 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78260 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80916 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78279) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C9134 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C78279 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80916 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C78260 -
            (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
             C52707 * C2306) *
                C80598) *
               C81009 * C81011 * C80965) *
              C80932 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78260 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80916 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78279) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C9133 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78279 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80916 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78260 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C9134 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C78260 -
            ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
              C52707 * C6660) *
                 C80916 +
             (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
              C52707 * C6654) *
                 C78279) +
            (C52961 * C6143 + C52707 * C6659 + C52962 * C12548 +
             C52708 * C12966) *
                C80598) *
               C81009 * C81011 * C80965) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C6969 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C6893 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C6970 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C6894 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C6971 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C6895 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C6972 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C80916 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C6970 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C6893 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C6969) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C6894 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C6971 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C6895 +
           (C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C6972 +
           (C52961 * C5721 + C52707 * C6015 + C52962 * C8574 + C52708 * C8990) *
               C80972) *
              C81009 * C81011 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C2687 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80932 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C2688 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80686) *
              C81009 * C81011 * C2607 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C2688 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80932 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C2687) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80686) *
              C81009 * C81011 * C2608 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C2687 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C80932 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C2688 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80686) *
              C81009 * C81011 * C2609 +
          ((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C2688 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C80932 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C2687) +
           (C52961 * C861 + C52707 * C1477 + C52962 * C4096 + C52708 * C4776) *
               C80686) *
              C81009 * C81011 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C2687 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80932 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C2688 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C80916 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C2688 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C80932 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C2687) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C9133 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C2688 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C80932 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C2687) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C80916 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C2687 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80932 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C2688 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C9134 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C2687 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80932 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C2688 -
            (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
             C52707 * C6741) *
                C80686) *
               C81009 * C81011 * C80916 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C2688 -
            ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
              C52707 * C2412) *
                 C80932 +
             (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
              C52707 * C2298) *
                 C2687) +
            (C52961 * C6237 + C52707 * C6743 + C52962 * C12618 +
             C52708 * C13034) *
                C80686) *
               C81009 * C81011 * C80598) *
              C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C6893 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C6894 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C6895 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C80639 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C220) *
               C81009 * C81011 * C80972) *
              C80916 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C6894 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C6893 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C6895 +
           ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 +
             C52708 * C8920) *
                C220 +
            (C52961 * C5771 + C52707 * C6059 + C52962 * C8644 +
             C52708 * C9058) *
                C80639) *
               C81009 * C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C80932 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80686) *
              C2607 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C80932) *
              C2608 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C80932 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80686) *
              C2609 +
          (((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
                C220 +
            (C52961 * C951 + C52707 * C1583 + C52962 * C4202 + C52708 * C4892) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C80639 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C220) *
               C81009 * C81011 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C9284 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C9133 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C9285 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C9134 +
            (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C9286 +
            (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
             C52708 * C10869) *
                C80965) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C9285 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C9133 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C9284) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C9134 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C9286 -
            (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
             C52707 * C6819) *
                C80965) *
               C81009 * C81011 * C80686) *
              C80916 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C9285 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C9133 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C9284) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C9134 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C9286 -
            (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
             C52707 * C2512) *
                C80965) *
               C81009 * C81011 * C80932 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C9284 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C9133 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C9285 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C9134 +
            (C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C9286 +
            (C52961 * C6321 + C52707 * C6820 + C52962 * C12688 +
             C52708 * C13102) *
                C80965) *
               C81009 * C81011 * C80686) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C80933 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C80726) *
              C6893 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C80726 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C80933) *
              C6894 +
          (((C31649 + C31648) * C81011 * C52707 +
            (C32166 + C32167) * C81011 * C52708) *
               C80933 -
           ((C32168 + C32169) * C81011 * C52708 +
            (C32167 + C32166) * C81011 * C52707) *
               C80726) *
              C6895 +
          (((C34491 + C34490) * C81011 * C52707 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C81011 * C52708) *
               C80726 -
           ((C34490 + C34491) * C81011 * C52708 +
            (C31663 + C31662) * C81011 * C52707) *
               C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C743 +
             (C26926 * C107 + C81009 * C117) * C737 -
             (C26926 * C100 + C81009 * C106) * C744 -
             (C26926 * C108 + C81009 * C118) * C738 +
             (C26926 * C101 + C81009 * C109) * C745 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C81011 * C52707 +
            (C53824 + C53825 - C53826 - C53827 + C53828 + C53829) * C81011 *
                C52708) *
               C80933 +
           ((C53826 - (C53825 + C53824) + C53827 - C53828 - C53829) * C81011 *
                C52707 +
            (C53830 - (C53831 + C53832) + C53833 - C53834 - C53835) * C81011 *
                C52708) *
               C80726) *
              C80932 +
          (((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C81011 *
                C52707 +
            (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) * C81011 *
                C52708) *
               C80933 +
           ((C30070 + C30069 - C30068 - C30071 + C30072 + C30073) * C81011 *
                C52707 +
            (C32158 * C743 + C32159 * C737 - C36914 * C744 - C36915 * C738 +
             (C26926 * C10971 + C81009 * C10972) * C745 +
             (C26926 * C10973 + C81009 * C10974) * C80954) *
                C81011 * C52708) *
               C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C11881 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C11882 +
           ((C57771 + C57770) * C81011 * C52707 +
            (C61996 + C61997) * C81011 * C52708) *
               C11883 -
           ((C61998 + C61999) * C81011 * C52708 +
            (C61997 + C61996) * C81011 * C52707) *
               C80978) *
              C80932 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C11882 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C11881 -
           ((C38388 + C38389) * C81011 * C52708 +
            (C32165 + C32164) * C81011 * C52707) *
               C11883 +
           ((C38389 + C38388) * C81011 * C52707 +
            ((C26926 * C36457 + C81009 * C36458) * C5657 +
             (C26926 * C36459 + C81009 * C36460) * C80588) *
                C81011 * C52708) *
               C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C60066 + C60067 - C60068 - C60069 + C60070 + C60071 -
                      C60072 - C60073) *
                         C81011 * C52708) *
                        C80588 * C80933 +
                    ((C60068 - (C60067 + C60066) + C60069 - C60070 - C60071 +
                      C60072 + C60073) *
                         C81011 * C52707 +
                     (C32158 * C6970 - (C53932 * C6893 + C53820 * C6969) +
                      C32253 * C6894 - C32163 * C6971 - C32254 * C6895 +
                      (C26926 * C32139 + C81009 * C32140) * C6972 +
                      (C26926 * C32243 + C81009 * C32244) * C80972) *
                         C81011 * C52708) *
                        C80588 * C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C55930 + C55931 - C55932 - C55933) * C81011 * C52708) *
                         C737 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C55934 - (C55935 + C55936) + C55937) * C81011 * C52708) *
                         C738 +
                     (((C26926 * C101 + C81009 * C109) * C2687 +
                       (C26926 * C168 + C81009 * C174) * C80932 -
                       C27368 * C2688 - C27478 * C80686) *
                          C81011 * C52707 +
                      (C55938 + C55939 - C55940 - C55941) * C81011 * C52708) *
                         C80954) *
                        C80933 +
                    (((C55932 - (C55931 + C55930) + C55933) * C81011 * C52707 +
                      (C32158 * C2688 - (C53932 * C80932 + C53820 * C2687) +
                       C32253 * C80686) *
                          C81011 * C52708) *
                         C737 +
                     ((C55936 + C55935 - C55934 - C55937) * C81011 * C52707 +
                      (C53818 * C2687 + C53931 * C80932 - C36914 * C2688 -
                       C37018 * C80686) *
                          C81011 * C52708) *
                         C738 +
                     ((C55940 - (C55939 + C55938) + C55941) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C2688 -
                       (C53933 * C80932 + C53822 * C2687) +
                       (C26926 * C11073 + C81009 * C11074) * C80686) *
                          C81011 * C52708) *
                         C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2687 +
                      (C26926 * C166 + C81009 * C172) * C80932 -
                      C27364 * C2688 - C27474 * C80686) *
                         C81011 * C52707 +
                     (C55930 + C55931 - C55932 - C55933) * C81011 * C52708) *
                        C80588 * C11881 +
                    ((C55932 - (C55931 + C55930) + C55933) * C81011 * C52707 +
                     (C62596 - (C62597 + C62598) + C62599) * C81011 * C52708) *
                        C80588 * C11882 +
                    ((C62598 + C62597 - C62596 - C62599) * C81011 * C52707 +
                     (C64050 + C64051 - C64052 - C64053) * C81011 * C52708) *
                        C80588 * C11883 +
                    ((C64052 - (C64051 + C64050) + C64053) * C81011 * C52707 +
                     ((C26926 * C36457 + C81009 * C36458) * C2688 -
                      (C62051 * C80932 + C61995 * C2687) +
                      (C26926 * C36503 + C81009 * C36504) * C80686) *
                         C81011 * C52708) *
                        C80588 * C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[61] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      C53812 * C3422 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C6893 +
                    ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                     (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                      C32346 * C80726) *
                         C81011 * C52708) *
                        C6894 +
                    ((C33805 + C33804 - C33803 - C33806) * C81011 * C52707 +
                     (C32160 * C3421 + C32347 * C80933 - C32163 * C3422 -
                      C32348 * C80726) *
                         C81011 * C52708) *
                        C6895 +
                    ((C34633 - (C34632 + C34631) + C34637) * C81011 * C52707 +
                     ((C26926 * C32139 + C81009 * C32140) * C3422 -
                      (C34636 * C80933 + C34489 * C3421) +
                      (C26926 * C32328 + C81009 * C32329) * C80726) *
                         C81011 * C52708) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       C53812 * C3422 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                      (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C737 +
                    (((C53814 * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C30286 + C30285 - C30284 - C30298) * C81011 * C52707 +
                      (C30062 * C3421 + C30295 * C80933 - C36914 * C3422 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C738 +
                    ((((C26926 * C101 + C81009 * C109) * C3421 +
                       (C26926 * C223 + C81009 * C229) * C80933 -
                       C53816 * C3422 - C54030 * C80726) *
                          C81011 * C52707 +
                      (C53816 * C3421 + C54030 * C80933 - C53822 * C3422 -
                       C54031 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C30291 - (C30290 + C30289) + C30299) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C3422 -
                       (C30296 * C80933 + C30066 * C3421) +
                       (C26926 * C11173 + C81009 * C11174) * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C12023 +
                      (C26926 * C221 + C81009 * C227) * C11881 -
                      C53812 * C12024 - C54026 * C11882 + C53820 * C12025 +
                      C54027 * C11883 - C61992 * C12026 - C62102 * C80978) *
                         C81011 * C52707 +
                     (C53812 * C12023 + C54026 * C11881 - C53820 * C12024 -
                      C54027 * C11882 + C61992 * C12025 + C62102 * C11883 -
                      C61995 * C12026 - C62103 * C80978) *
                         C81011 * C52708) *
                        C80932 +
                    ((C38531 - (C38530 + C38529) + C38532 - C38533 - C38534 +
                      C38535 + C38539) *
                         C81011 * C52707 +
                     (C32158 * C12024 - (C30294 * C11881 + C30064 * C12023) +
                      C32346 * C11882 - C38387 * C12025 - C38538 * C11883 +
                      (C26926 * C36457 + C81009 * C36458) * C12026 +
                      (C26926 * C36547 + C81009 * C36548) * C80978) *
                         C81011 * C52708) *
                        C80686) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C80933 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C80726) *
              C6893 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C80726 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C80933) *
              C6894 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C80933 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C80726) *
              C6895 +
          (((C60212 + C60213) * C52707 +
            ((C275 * C32139 + C81011 * C32425) * C5657 +
             (C275 * C32141 + C81011 * C32426) * C80588) *
                C52708) *
               C81009 * C80726 -
           ((C60213 + C60212) * C52708 +
            ((C275 * C5663 + C81011 * C5826) * C80588 +
             (C275 * C5659 + C81011 * C5822) * C5657) *
                C52707) *
               C81009 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C743 +
             (C275 * C107 + C81011 * C282) * C737 - C305 * C744 - C306 * C738 +
             C307 * C745 + C308 * C80954) *
                C52707 +
            (C54126 + C54127 - C54110 - C54111 + C54112 + C54113) * C52708) *
               C81009 * C80933 +
           ((C54110 - (C54127 + C54126) + C54111 - C54112 - C54113) * C52707 +
            (C54114 - (C54128 + C54129) + C54119 - C54120 - C54121) * C52708) *
               C81009 * C80726) *
              C80932 +
          (((C1068 * C744 -
             ((C275 * C757 + C81011 * C1043) * C737 +
              (C275 * C748 + C81011 * C1036) * C743) +
             C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                C52707 +
            (C56138 - (C56148 + C56149) + C56143 - C56144 - C56145) * C52708) *
               C81009 * C80933 +
           ((C56149 + C56148 - C56138 - C56143 + C56144 + C56145) * C52707 +
            ((C275 * C6138 + C81011 * C6408) * C743 +
             (C275 * C6144 + C81011 * C6414) * C737 - C11280 * C744 -
             C11281 * C738 + (C275 * C10971 + C81011 * C11273) * C745 +
             (C275 * C10973 + C81011 * C11274) * C80954) *
                C52708) *
               C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C11881 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C11882 +
           ((C58009 + C58008) * C52707 + (C62160 + C62161) * C52708) * C81009 *
               C11883 -
           ((C62162 + C62163) * C52708 + (C62161 + C62160) * C52707) * C81009 *
               C80978) *
              C80932 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C11882 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C11881 -
           ((C64192 + C64193) * C52708 + (C58031 + C58030) * C52707) * C81009 *
               C11883 +
           ((C64193 + C64192) * C52707 +
            ((C275 * C36457 + C81011 * C36591) * C5657 +
             (C275 * C36459 + C81011 * C36592) * C80588) *
                C52708) *
               C81009 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C6969 +
                      (C275 * C166 + C81011 * C354) * C6893 -
                      (C275 * C748 + C81011 * C1036) * C6970 -
                      (C275 * C856 + C81011 * C1149) * C6894 +
                      (C275 * C750 + C81011 * C1039) * C6971 +
                      (C275 * C857 + C81011 * C1150) * C6895 -
                      (C275 * C5659 + C81011 * C5822) * C6972 -
                      (C275 * C5722 + C81011 * C5871) * C80972) *
                         C52707 +
                     (C60280 + C60281 - C60282 - C60283 + C60284 + C60285 -
                      C60286 - C60290) *
                         C52708) *
                        C81009 * C80588 * C80933 +
                    ((C60282 - (C60281 + C60280) + C60283 - C60284 - C60285 +
                      C60286 + C60290) *
                         C52707 +
                     (C58024 * C6970 - (C54211 * C6893 + C54125 * C6969) +
                      C58126 * C6894 - C58029 * C6971 - C58127 * C6895 +
                      (C275 * C32139 + C81011 * C32425) * C6972 +
                      (C275 * C32243 + C81011 * C32501) * C80972) *
                         C52708) *
                        C81009 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C2687 +
                       (C275 * C166 + C81011 * C354) * C80932 -
                       (C275 * C748 + C81011 * C1036) * C2688 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C56248 + C56249 - C56250 - C56254) * C52708) *
                         C81009 * C737 +
                     ((C2903 - (C2902 + C2901) + C2904) * C52707 +
                      (C4428 - (C4429 + C4430) + C4440) * C52708) *
                         C81009 * C738 +
                     ((C2907 + C2906 - C2905 - C2908) * C52707 +
                      (C4433 + C4434 - C4435 - C4441) * C52708) *
                         C81009 * C80954) *
                        C80933 +
                    (((C56250 - (C56249 + C56248) + C56254) * C52707 +
                      ((C275 * C6138 + C81011 * C6408) * C2688 -
                       (C54211 * C80932 + C54125 * C2687) +
                       (C275 * C6238 + C81011 * C6495) * C80686) *
                          C52708) *
                         C81009 * C737 +
                     ((C4430 + C4429 - C4428 - C4440) * C52707 +
                      (C11381 + C11382 - C11383 - C11387) * C52708) *
                         C81009 * C738 +
                     ((C4435 - (C4434 + C4433) + C4441) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C2688 -
                       (C2109 * C80932 + C2010 * C2687) +
                       (C275 * C11073 + C81011 * C11379) * C80686) *
                          C52708) *
                         C81009 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C2687 +
                      (C275 * C166 + C81011 * C354) * C80932 -
                      (C275 * C748 + C81011 * C1036) * C2688 -
                      (C275 * C856 + C81011 * C1149) * C80686) *
                         C52707 +
                     (C56248 + C56249 - C56250 - C56254) * C52708) *
                        C81009 * C80588 * C11881 +
                    ((C56250 - (C56249 + C56248) + C56254) * C52707 +
                     (C62906 - (C62907 + C62908) + C62909) * C52708) *
                        C81009 * C80588 * C11882 +
                    ((C62908 + C62907 - C62906 - C62909) * C52707 +
                     (C64260 + C64261 - C64262 - C64266) * C52708) *
                        C81009 * C80588 * C11883 +
                    ((C64262 - (C64261 + C64260) + C64266) * C52707 +
                     ((C275 * C36457 + C81011 * C36591) * C2688 -
                      (C62214 * C80932 + C62159 * C2687) +
                      (C275 * C36503 + C81011 * C36635) * C80686) *
                         C52708) *
                        C81009 * C80588 * C80978)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C3421 +
            (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
            C54292 * C80726) *
               C52707 +
           (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
            C54293 * C80726) *
               C52708) *
              C81009 * C6893 +
          ((C56147 * C3422 -
            ((C275 * C946 + C81011 * C1256) * C80933 +
             (C275 * C748 + C81011 * C1036) * C3421) +
            C56355 * C80726) *
               C52707 +
           (C58024 * C3422 - (C56355 * C80933 + C56147 * C3421) +
            C58211 * C80726) *
               C52708) *
              C81009 * C6894 +
          (((C275 * C750 + C81011 * C1039) * C3421 +
            (C275 * C947 + C81011 * C1257) * C80933 - C58026 * C3422 -
            C58212 * C80726) *
               C52707 +
           (C58026 * C3421 + C58212 * C80933 - C58029 * C3422 -
            C58213 * C80726) *
               C52708) *
              C81009 * C6895 +
          ((C60210 * C3422 -
            ((C275 * C5772 + C81011 * C5918) * C80933 +
             (C275 * C5659 + C81011 * C5822) * C3421) +
            C60359 * C80726) *
               C52707 +
           ((C275 * C32139 + C81011 * C32425) * C3422 -
            (C60359 * C80933 + C60210 * C3421) +
            (C275 * C32328 + C81011 * C32576) * C80726) *
               C52708) *
              C81009 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C3421 +
             (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
             C54292 * C80726) *
                C52707 +
            (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
             C54293 * C80726) *
                C52708) *
               C81009 * C80932 +
           ((C56147 * C3422 -
             ((C275 * C946 + C81011 * C1256) * C80933 +
              (C275 * C748 + C81011 * C1036) * C3421) +
             C56355 * C80726) *
                C52707 +
            ((C275 * C6138 + C81011 * C6408) * C3422 -
             (C56355 * C80933 + C56147 * C3421) +
             (C275 * C6322 + C81011 * C6573) * C80726) *
                C52708) *
               C81009 * C80686) *
              C737 +
          (((C3641 - (C3640 + C3639) + C3642) * C52707 +
            (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) +
             C2213 * C80726) *
                C52708) *
               C81009 * C80932 +
           ((C4546 + C4545 - C4544 - C4556) * C52707 +
            (C4322 * C3421 + C4554 * C80933 - C11280 * C3422 -
             C11494 * C80726) *
                C52708) *
               C81009 * C80686) *
              C738 +
          (((C3645 + C3644 - C3643 - C3646) * C52707 +
            (C2006 * C3421 + C2214 * C80933 - C2010 * C3422 - C2215 * C80726) *
                C52708) *
               C81009 * C80932 +
           ((C4551 - (C4550 + C4549) + C4557) * C52707 +
            ((C275 * C10971 + C81011 * C11273) * C3422 -
             (C4555 * C80933 + C4324 * C3421) +
             (C275 * C11173 + C81011 * C11485) * C80726) *
                C52708) *
               C81009 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C12023 +
            (C275 * C221 + C81011 * C422) * C11881 - C54122 * C12024 -
            C54292 * C11882 + C54125 * C12025 + C54293 * C11883 -
            C62156 * C12026 - C62264 * C80978) *
               C52707 +
           (C54122 * C12023 + C54292 * C11881 - C54125 * C12024 -
            C54293 * C11882 + C62156 * C12025 + C62264 * C11883 -
            C62159 * C12026 - C62265 * C80978) *
               C52708) *
              C81009 * C80932 +
          ((C56147 * C12024 -
            ((C275 * C946 + C81011 * C1256) * C11881 +
             (C275 * C748 + C81011 * C1036) * C12023) +
            C56355 * C11882 - C58024 * C12025 - C58211 * C11883 +
            C64191 * C12026 + C64335 * C80978) *
               C52707 +
           (C58024 * C12024 - (C56355 * C11881 + C56147 * C12023) +
            C58211 * C11882 - C64191 * C12025 - C64335 * C11883 +
            (C275 * C36457 + C81011 * C36591) * C12026 +
            (C275 * C36547 + C81011 * C36678) * C80978) *
               C52708) *
              C81009 * C80686) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C80933 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C80726) *
              C6893 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C80933) *
              C6894 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C80933 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C80726) *
              C6895 +
          (((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
             C52708 * C32651) *
                C5657 +
            (C52961 * C8503 + C52707 * C8921 + C52962 * C32141 +
             C52708 * C32652) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C80588 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C5657) *
               C81009 * C81011 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C743 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C737 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C744 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C738 +
            (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C745 +
            (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
                C80954) *
               C81009 * C81011 * C80933 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C744 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C737 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C743) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C738 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C745 -
            (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 +
             C52707 * C2303) *
                C80954) *
               C81009 * C81011 * C80726) *
              C80932 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C744 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C737 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C743) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C738 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C745 -
            (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
                C80954) *
               C81009 * C81011 * C80933 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C743 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C737 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C744 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C738 +
            (C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C745 +
            (C52961 * C3988 + C52707 * C4661 + C52962 * C10973 +
             C52708 * C11594) *
                C80954) *
               C81009 * C81011 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C11881 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C11882 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C5657 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80588) *
               C81009 * C81011 * C11883 -
           ((C52962 * C10478 + C52708 * C10779 + C52961 * C10473 +
             C52707 * C10778) *
                C80588 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C5657) *
               C81009 * C81011 * C80978) *
              C80932 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C11882 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C11881 -
           ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
             C52707 * C6660) *
                C80588 +
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C5657) *
               C81009 * C81011 * C11883 +
           ((C52961 * C12543 + C52707 * C12963 + C52962 * C36457 +
             C52708 * C36721) *
                C5657 +
            (C52961 * C12547 + C52707 * C12965 + C52962 * C36459 +
             C52708 * C36722) *
                C80588) *
               C81009 * C81011 * C80978) *
              C80686)) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C6969 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C6893 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C6970 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C6894 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C6971 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C6895 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C6972 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C80588 * C80933 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C6970 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C6893 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C6969) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C6894 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C6971 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C6895 +
           (C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C6972 +
           (C52961 * C8573 + C52707 * C8989 + C52962 * C32243 +
            C52708 * C32753) *
               C80972) *
              C81009 * C81011 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C2687 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80932 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C2688 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C737 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C2688 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C80932 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C2687) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C738 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C2687 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80932 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C2688 -
            (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
                C80686) *
               C81009 * C81011 * C80954) *
              C80933 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C2688 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C80932 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C2687) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C737 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C2687 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80932 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C2688 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C738 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C2688 -
            ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
              C52707 * C2408) *
                 C80932 +
             (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
              C52707 * C2295) *
                 C2687) +
            (C52961 * C4095 + C52707 * C4775 + C52962 * C11073 +
             C52708 * C11699) *
                C80686) *
               C81009 * C81011 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C2687 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80932 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C2688 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80686) *
              C81009 * C81011 * C80588 * C11881 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C2688 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80932 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C2687) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C80686) *
              C81009 * C81011 * C80588 * C11882 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C2687 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C80932 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C2688 -
           (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
            C52707 * C6741) *
               C80686) *
              C81009 * C81011 * C80588 * C11883 +
          ((C52961 * C12543 + C52707 * C12963 + C52962 * C36457 +
            C52708 * C36721) *
               C2688 -
           ((C52962 * C10528 + C52708 * C10825 + C52961 * C10527 +
             C52707 * C10824) *
                C80932 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C2687) +
           (C52961 * C12617 + C52707 * C13033 + C52962 * C36503 +
            C52708 * C36765) *
               C80686) *
              C81009 * C81011 * C80588 * C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C3421 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80933 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C3422 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C6893 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C3422 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80933 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C3421) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C80726) *
              C81009 * C81011 * C6894 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C3421 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C80933 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C3422 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C80726) *
              C81009 * C81011 * C6895 +
          ((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C3422 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C80933 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C3421) +
           (C52961 * C8643 + C52707 * C9057 + C52962 * C32328 +
            C52708 * C32837) *
               C80726) *
              C81009 * C81011 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C3421 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80933 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C3422 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C3422 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80933 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C3421) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80686) *
              C737 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C3422 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80933 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C3421) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C3421 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80933 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C3422 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80686) *
              C738 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C3421 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80933 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C3422 -
            (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 +
             C52707 * C2513) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C3422 -
            ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 +
              C52707 * C1581) *
                 C80933 +
             (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
              C52707 * C1359) *
                 C3421) +
            (C52961 * C4201 + C52707 * C4891 + C52962 * C11173 +
             C52708 * C11805) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C12023 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C11881 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C12024 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C11882 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C12025 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C11883 -
           (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
            C52707 * C10774) *
               C12026 -
           (C52962 * C10583 + C52708 * C10870 + C52961 * C10582 +
            C52707 * C10869) *
               C80978) *
              C81009 * C81011 * C80932 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C12024 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C11881 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C12023) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C11882 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C12025 -
           (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
            C52707 * C6819) *
               C11883 +
           (C52961 * C12543 + C52707 * C12963 + C52962 * C36457 +
            C52708 * C36721) *
               C12026 +
           (C52961 * C12687 + C52707 * C13101 + C52962 * C36547 +
            C52708 * C36808) *
               C80978) *
              C81009 * C81011 * C80686) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C26926 * C99 + C81009 * C105) * C94 +
               (C26926 * C107 + C81009 * C117) * C83 -
               (C26926 * C100 + C81009 * C106) * C95 -
               (C26926 * C108 + C81009 * C118) * C84 +
               (C26926 * C101 + C81009 * C109) * C96 +
               (C26926 * C110 + C81009 * C119) * C85 -
               (C26926 * C102 + C81009 * C111) * C97 -
               (C26926 * C112 + C81009 * C120) * C86 +
               (C26926 * C103 + C81009 * C113) * C98 +
               (C26926 * C114 + C81009 * C121) * C87) *
                  C81011 * C52707 +
              ((C26926 * C1684 + C81009 * C1694) * C94 +
               (C26926 * C1693 + C81009 * C1707) * C83 -
               (C26926 * C1682 + C81009 * C1690) * C95 -
               (C26926 * C1692 + C81009 * C1706) * C84 +
               (C26926 * C1683 + C81009 * C1691) * C96 +
               (C26926 * C1695 + C81009 * C1708) * C85 -
               (C26926 * C1685 + C81009 * C1696) * C97 -
               (C26926 * C1697 + C81009 * C1709) * C86 +
               (C26926 * C3283 + C81009 * C3284) * C98 +
               (C26926 * C3285 + C81009 * C3286) * C87) *
                  C81011 * C52708) *
             C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C743 +
                (C26926 * C107 + C81009 * C117) * C737 -
                (C26926 * C100 + C81009 * C106) * C744 -
                (C26926 * C108 + C81009 * C118) * C738 +
                (C26926 * C101 + C81009 * C109) * C745 +
                (C26926 * C110 + C81009 * C119) * C80954) *
                   C81011 * C52707 +
               ((C26926 * C1684 + C81009 * C1694) * C743 +
                (C26926 * C1693 + C81009 * C1707) * C737 -
                (C26926 * C1682 + C81009 * C1690) * C744 -
                (C26926 * C1692 + C81009 * C1706) * C738 +
                (C26926 * C1683 + C81009 * C1691) * C745 +
                (C26926 * C1695 + C81009 * C1708) * C80954) *
                   C81011 * C52708) *
                  C80639 * C81003 +
              ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) *
                   C81011 * C52707 +
               (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) *
                   C81011 * C52708) *
                  C80639 * C80988 +
              ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C81011 *
                   C52707 +
               (C32160 * C743 + C32161 * C737 - C33600 * C744 - C33601 * C738 +
                (C26926 * C7589 + C81009 * C7590) * C745 +
                (C26926 * C7591 + C81009 * C7592) * C80954) *
                   C81011 * C52708) *
                  C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C53824 + C53825 - C53826 - C53827 + C53828 + C53829) * C81011 *
               C52708) *
              C81004 +
          ((C53826 - (C53825 + C53824) + C53827 - C53828 - C53829) * C81011 *
               C52707 +
           (C53830 - (C53831 + C53832) + C53833 - C53834 - C53835) * C81011 *
               C52708) *
              C80990 +
          ((C53832 + C53831 - C53830 - C53833 + C53834 + C53835) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C743 +
            (C26926 * C10473 + C81009 * C10481) * C737 -
            (C26926 * C10468 + C81009 * C10474) * C744 -
            (C26926 * C10472 + C81009 * C10480) * C738 +
            (C26926 * C11885 + C81009 * C11886) * C745 +
            (C26926 * C11887 + C81009 * C11888) * C80954) *
               C81011 * C52708) *
              C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C53812 * C4987 + C53813 * C80998 - C53814 * C4988 -
            C53815 * C80982 + C53816 * C4989 + C53817 * C80954) *
               C81011 * C52708) *
              C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C81011 *
               C52707 +
           (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C81011 *
               C52708) *
              C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C81011 *
               C52707 +
           (C32160 * C4987 + C32161 * C80998 - C33600 * C4988 -
            C33601 * C80982 + (C26926 * C7589 + C81009 * C7590) * C4989 +
            (C26926 * C7591 + C81009 * C7592) * C80954) *
               C81011 * C52708) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C81011 * C52707 +
           (C53812 * C5657 + C53813 * C80588) * C81011 * C52708) *
              C80639 * C5652 -
          ((C32144 + C32145) * C81011 * C52708 +
           (C31647 + C31646) * C81011 * C52707) *
              C80639 * C5653 +
          ((C31649 + C31648) * C81011 * C52707 +
           (C32166 + C32167) * C81011 * C52708) *
              C80639 * C5654 -
          ((C34490 + C34491) * C81011 * C52708 +
           (C31663 + C31662) * C81011 * C52707) *
              C80639 * C5655 +
          ((C31665 + C31664) * C81011 * C52707 +
           ((C26926 * C34479 + C81009 * C34480) * C5657 +
            (C26926 * C34481 + C81009 * C34482) * C80588) *
               C81011 * C52708) *
              C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C26926 * C99 + C81009 * C105) * C5657 +
                                 (C26926 * C107 + C81009 * C117) * C80588) *
                                    C81011 * C52707 +
                                (C57768 + C57769) * C81011 * C52708) *
                                   C81004 -
                               ((C57770 + C57771) * C81011 * C52708 +
                                (C57769 + C57768) * C81011 * C52707) *
                                   C80990 +
                               ((C57771 + C57770) * C81011 * C52707 +
                                ((C26926 * C10469 + C81009 * C10475) * C5657 +
                                 (C26926 * C10473 + C81009 * C10481) * C80588) *
                                    C81011 * C52708) *
                                   C80965) *
                                  C4984 +
                              (((C32145 + C32144) * C81011 * C52707 +
                                (C32164 + C32165) * C81011 * C52708) *
                                   C80990 -
                               ((C32144 + C32145) * C81011 * C52708 +
                                (C31647 + C31646) * C81011 * C52707) *
                                   C81004 -
                               ((C38388 + C38389) * C81011 * C52708 +
                                (C32165 + C32164) * C81011 * C52707) *
                                   C80965) *
                                  C4985 +
                              (((C31649 + C31648) * C81011 * C52707 +
                                (C32166 + C32167) * C81011 * C52708) *
                                   C81004 -
                               ((C32168 + C32169) * C81011 * C52708 +
                                (C32167 + C32166) * C81011 * C52707) *
                                   C80990 +
                               ((C32169 + C32168) * C81011 * C52707 +
                                ((C26926 * C38377 + C81009 * C38378) * C5657 +
                                 (C26926 * C38379 + C81009 * C38380) * C80588) *
                                    C81011 * C52708) *
                                   C80965) *
                                  C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C60632 + C60633 - C60634 - C60635 + C60636 + C60637) * C81011 *
               C52708) *
              C9133 +
          ((C60634 - (C60633 + C60632) + C60635 - C60636 - C60637) * C81011 *
               C52707 +
           (C60638 - (C60639 + C60640) + C60641 - C60642 - C60643) * C81011 *
               C52708) *
              C9134 +
          ((C60640 + C60639 - C60638 - C60641 + C60642 + C60643) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C4987 +
            (C26926 * C10473 + C81009 * C10481) * C80998 -
            (C26926 * C10468 + C81009 * C10474) * C4988 -
            (C26926 * C10472 + C81009 * C10480) * C80982 +
            (C26926 * C11885 + C81009 * C11886) * C4989 +
            (C26926 * C11887 + C81009 * C11888) * C80954) *
               C81011 * C52708) *
              C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C26926 * C99 + C81009 * C105) * C5657 +
                                 (C26926 * C107 + C81009 * C117) * C80588) *
                                    C81011 * C52707 +
                                (C57768 + C57769) * C81011 * C52708) *
                                   C9133 -
                               ((C57770 + C57771) * C81011 * C52708 +
                                (C57769 + C57768) * C81011 * C52707) *
                                   C9134 +
                               ((C57771 + C57770) * C81011 * C52707 +
                                ((C26926 * C10469 + C81009 * C10475) * C5657 +
                                 (C26926 * C10473 + C81009 * C10481) * C80588) *
                                    C81011 * C52708) *
                                   C80965) *
                                  C81003 +
                              (((C32145 + C32144) * C81011 * C52707 +
                                (C32164 + C32165) * C81011 * C52708) *
                                   C9134 -
                               ((C32144 + C32145) * C81011 * C52708 +
                                (C31647 + C31646) * C81011 * C52707) *
                                   C9133 -
                               ((C38388 + C38389) * C81011 * C52708 +
                                (C32165 + C32164) * C81011 * C52707) *
                                   C80965) *
                                  C80988 +
                              (((C31649 + C31648) * C81011 * C52707 +
                                (C32166 + C32167) * C81011 * C52708) *
                                   C9133 -
                               ((C32168 + C32169) * C81011 * C52708 +
                                (C32167 + C32166) * C81011 * C52707) *
                                   C9134 +
                               ((C32169 + C32168) * C81011 * C52707 +
                                ((C26926 * C38377 + C81009 * C38378) * C5657 +
                                 (C26926 * C38379 + C81009 * C38380) * C80588) *
                                    C81011 * C52708) *
                                   C80965) *
                                  C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C81011 * C52707 +
           (C57768 + C57769) * C81011 * C52708) *
              C10463 -
          ((C57770 + C57771) * C81011 * C52708 +
           (C57769 + C57768) * C81011 * C52707) *
              C10464 +
          ((C57771 + C57770) * C81011 * C52707 +
           (C61996 + C61997) * C81011 * C52708) *
              C10465 -
          ((C61998 + C61999) * C81011 * C52708 +
           (C61997 + C61996) * C81011 * C52707) *
              C10466 +
          ((C61999 + C61998) * C81011 * C52707 +
           ((C26926 * C61979 + C81009 * C61980) * C5657 +
            (C26926 * C61981 + C81009 * C61982) * C80588) *
               C81011 * C52708) *
              C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C165 +
                (C26926 * C166 + C81009 * C172) * C80628) *
                   C81011 * C52707 +
               ((C26926 * C1684 + C81009 * C1694) * C165 +
                (C26926 * C1790 + C81009 * C1798) * C80628) *
                   C81011 * C52708) *
                  C83 -
              (((C26926 * C1788 + C81009 * C1796) * C80628 +
                (C26926 * C1682 + C81009 * C1690) * C165) *
                   C81011 * C52708 +
               ((C26926 * C167 + C81009 * C173) * C80628 +
                (C26926 * C100 + C81009 * C106) * C165) *
                   C81011 * C52707) *
                  C84 +
              (((C26926 * C101 + C81009 * C109) * C165 +
                (C26926 * C168 + C81009 * C174) * C80628) *
                   C81011 * C52707 +
               ((C26926 * C1683 + C81009 * C1691) * C165 +
                (C26926 * C1789 + C81009 * C1797) * C80628) *
                   C81011 * C52708) *
                  C85 -
              (((C26926 * C1791 + C81009 * C1799) * C80628 +
                (C26926 * C1685 + C81009 * C1696) * C165) *
                   C81011 * C52708 +
               ((C26926 * C169 + C81009 * C175) * C80628 +
                (C26926 * C102 + C81009 * C111) * C165) *
                   C81011 * C52707) *
                  C86 +
              (((C26926 * C103 + C81009 * C113) * C165 +
                (C26926 * C170 + C81009 * C176) * C80628) *
                   C81011 * C52707 +
               ((C26926 * C3283 + C81009 * C3284) * C165 +
                (C26926 * C3353 + C81009 * C3354) * C80628) *
                   C81011 * C52708) *
                  C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C852 +
                (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
                C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
                   C81011 * C52707 +
               ((C26926 * C1684 + C81009 * C1694) * C852 +
                (C26926 * C1790 + C81009 * C1798) * C81003 - C30064 * C853 -
                C30178 * C80988 + C32160 * C854 + C32252 * C80962) *
                   C81011 * C52708) *
                  C737 +
              ((C27366 * C853 -
                ((C26926 * C167 + C81009 * C173) * C81003 +
                 (C26926 * C100 + C81009 * C106) * C852) +
                C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
                   C81011 * C52707 +
               (C30062 * C853 -
                ((C26926 * C1788 + C81009 * C1796) * C81003 +
                 (C26926 * C1682 + C81009 * C1690) * C852) +
                C30179 * C80988 - C33600 * C854 - C33704 * C80962) *
                   C81011 * C52708) *
                  C738 +
              (((C26926 * C101 + C81009 * C109) * C852 +
                (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
                C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
                   C81011 * C52707 +
               ((C26926 * C1683 + C81009 * C1691) * C852 +
                (C26926 * C1789 + C81009 * C1797) * C81003 - C30066 * C853 -
                C30180 * C80988 + (C26926 * C7589 + C81009 * C7590) * C854 +
                (C26926 * C7691 + C81009 * C7692) * C80962) *
                   C81011 * C52708) *
                  C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C26926 * C99 + C81009 * C105) * C165 +
                                 (C26926 * C166 + C81009 * C172) * C80628) *
                                    C81011 * C52707 +
                                (C53910 + C53934) * C81011 * C52708) *
                                   C737 -
                               ((C53935 + C53915) * C81011 * C52708 +
                                ((C26926 * C167 + C81009 * C173) * C80628 +
                                 (C26926 * C100 + C81009 * C106) * C165) *
                                    C81011 * C52707) *
                                   C738 +
                               (((C26926 * C101 + C81009 * C109) * C165 +
                                 (C26926 * C168 + C81009 * C174) * C80628) *
                                    C81011 * C52707 +
                                (C53916 + C53936) * C81011 * C52708) *
                                   C80954) *
                                  C81004 +
                              (((C53915 + C53935) * C81011 * C52707 +
                                (C53919 + C53937) * C81011 * C52708) *
                                   C738 -
                               ((C53938 + C53924) * C81011 * C52708 +
                                (C53934 + C53910) * C81011 * C52707) *
                                   C737 -
                               ((C53939 + C53927) * C81011 * C52708 +
                                (C53936 + C53916) * C81011 * C52707) *
                                   C80954) *
                                  C80990 +
                              (((C53924 + C53938) * C81011 * C52707 +
                                ((C26926 * C10469 + C81009 * C10475) * C165 +
                                 (C26926 * C10527 + C81009 * C10531) * C80628) *
                                    C81011 * C52708) *
                                   C737 -
                               (((C26926 * C10526 + C81009 * C10530) * C80628 +
                                 (C26926 * C10468 + C81009 * C10474) * C165) *
                                    C81011 * C52708 +
                                (C53937 + C53919) * C81011 * C52707) *
                                   C738 +
                               ((C53927 + C53939) * C81011 * C52707 +
                                ((C26926 * C11885 + C81009 * C11886) * C165 +
                                 (C26926 * C11955 + C81009 * C11956) * C80628) *
                                    C81011 * C52708) *
                                   C80954) *
                                  C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C81011 * C52707 +
           (C53812 * C5064 + C53928 * C4984 - C30064 * C5065 - C30178 * C4985 +
            C32160 * C5066 + C32252 * C80962) *
               C81011 * C52708) *
              C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C81011 * C52707 +
           (C30062 * C5065 - (C53929 * C4984 + C53814 * C5064) +
            C30179 * C4985 - C33600 * C5066 - C33704 * C80962) *
               C81011 * C52708) *
              C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C81011 * C52707 +
           (C53816 * C5064 + C53930 * C4984 - C30066 * C5065 - C30180 * C4985 +
            (C26926 * C7589 + C81009 * C7590) * C5066 +
            (C26926 * C7691 + C81009 * C7692) * C80962) *
               C81011 * C52708) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C81011 * C52707 +
          (C53812 * C5716 + C53928 * C5652 - C30064 * C5717 - C30178 * C5653 +
           C32160 * C5718 + C32252 * C5654 - C34489 * C5719 - C34562 * C5655 +
           (C26926 * C34479 + C81009 * C34480) * C5720 +
           (C26926 * C34557 + C81009 * C34558) * C5656) *
              C81011 * C52708) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C81011 * C52707 +
           (C57846 + C57847 - C57848 - C57849 + C57850 + C57851) * C81011 *
               C52708) *
              C80588 * C81004 +
          ((C57848 - (C57847 + C57846) + C57849 - C57850 - C57851) * C81011 *
               C52707 +
           (C57852 - (C57853 + C57854) + C57855 - C57856 - C57857) * C81011 *
               C52708) *
              C80588 * C80990 +
          ((C57854 + C57853 - C57852 - C57855 + C57856 + C57857) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C5064 +
            (C26926 * C10527 + C81009 * C10531) * C4984 - C38387 * C5065 -
            C38460 * C4985 + (C26926 * C38377 + C81009 * C38378) * C5066 +
            (C26926 * C38455 + C81009 * C38456) * C80962) *
               C81011 * C52708) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C26926 * C99 + C81009 * C105) * C165 +
                                 (C26926 * C166 + C81009 * C172) * C80628) *
                                    C81011 * C52707 +
                                (C53910 + C53934) * C81011 * C52708) *
                                   C80998 -
                               ((C53935 + C53915) * C81011 * C52708 +
                                ((C26926 * C167 + C81009 * C173) * C80628 +
                                 (C26926 * C100 + C81009 * C106) * C165) *
                                    C81011 * C52707) *
                                   C80982 +
                               (((C26926 * C101 + C81009 * C109) * C165 +
                                 (C26926 * C168 + C81009 * C174) * C80628) *
                                    C81011 * C52707 +
                                (C53916 + C53936) * C81011 * C52708) *
                                   C80954) *
                                  C9133 +
                              (((C53915 + C53935) * C81011 * C52707 +
                                (C53919 + C53937) * C81011 * C52708) *
                                   C80982 -
                               ((C53938 + C53924) * C81011 * C52708 +
                                (C53934 + C53910) * C81011 * C52707) *
                                   C80998 -
                               ((C53939 + C53927) * C81011 * C52708 +
                                (C53936 + C53916) * C81011 * C52707) *
                                   C80954) *
                                  C9134 +
                              (((C53924 + C53938) * C81011 * C52707 +
                                ((C26926 * C10469 + C81009 * C10475) * C165 +
                                 (C26926 * C10527 + C81009 * C10531) * C80628) *
                                    C81011 * C52708) *
                                   C80998 -
                               (((C26926 * C10526 + C81009 * C10530) * C80628 +
                                 (C26926 * C10468 + C81009 * C10474) * C165) *
                                    C81011 * C52708 +
                                (C53937 + C53919) * C81011 * C52707) *
                                   C80982 +
                               ((C53927 + C53939) * C81011 * C52707 +
                                ((C26926 * C11885 + C81009 * C11886) * C165 +
                                 (C26926 * C11955 + C81009 * C11956) * C80628) *
                                    C81011 * C52708) *
                                   C80954) *
                                  C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C81011 * C52707 +
           (C61396 + C61397 - C61398 - C61399 + C61400 + C61401) * C81011 *
               C52708) *
              C80588 * C9133 +
          ((C61398 - (C61397 + C61396) + C61399 - C61400 - C61401) * C81011 *
               C52707 +
           (C61402 - (C61403 + C61404) + C61405 - C61406 - C61407) * C81011 *
               C52708) *
              C80588 * C9134 +
          ((C61404 + C61403 - C61402 - C61405 + C61406 + C61407) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C852 +
            (C26926 * C10527 + C81009 * C10531) * C81003 - C38387 * C853 -
            C38460 * C80988 + (C26926 * C38377 + C81009 * C38378) * C854 +
            (C26926 * C38455 + C81009 * C38456) * C80962) *
               C81011 * C52708) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C81011 * C52707 +
           (C53910 + C53934) * C81011 * C52708) *
              C80588 * C10463 -
          ((C53938 + C53924) * C81011 * C52708 +
           (C53934 + C53910) * C81011 * C52707) *
              C80588 * C10464 +
          ((C53924 + C53938) * C81011 * C52707 +
           (C62044 + C62052) * C81011 * C52708) *
              C80588 * C10465 -
          ((C62053 + C62049) * C81011 * C52708 +
           (C62052 + C62044) * C81011 * C52707) *
              C80588 * C10466 +
          ((C62049 + C62053) * C81011 * C52707 +
           ((C26926 * C61979 + C81009 * C61980) * C165 +
            (C26926 * C62041 + C81009 * C62042) * C80628) *
               C81011 * C52708) *
              C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C26926 * C99 + C81009 * C105) * C220 +
                (C26926 * C221 + C81009 * C227) * C80639) *
                   C81011 * C52707 +
               ((C26926 * C1684 + C81009 * C1694) * C220 +
                (C26926 * C1882 + C81009 * C1890) * C80639) *
                   C81011 * C52708) *
                  C80628 * C83 -
              (((C26926 * C1881 + C81009 * C1889) * C80639 +
                (C26926 * C1682 + C81009 * C1690) * C220) *
                   C81011 * C52708 +
               ((C26926 * C222 + C81009 * C228) * C80639 +
                (C26926 * C100 + C81009 * C106) * C220) *
                   C81011 * C52707) *
                  C80628 * C84 +
              (((C26926 * C101 + C81009 * C109) * C220 +
                (C26926 * C223 + C81009 * C229) * C80639) *
                   C81011 * C52707 +
               ((C26926 * C1683 + C81009 * C1691) * C220 +
                (C26926 * C1885 + C81009 * C1893) * C80639) *
                   C81011 * C52708) *
                  C80628 * C85 -
              (((C26926 * C1887 + C81009 * C1895) * C80639 +
                (C26926 * C1685 + C81009 * C1696) * C220) *
                   C81011 * C52708 +
               ((C26926 * C224 + C81009 * C230) * C80639 +
                (C26926 * C102 + C81009 * C111) * C220) *
                   C81011 * C52707) *
                  C80628 * C86 +
              (((C26926 * C103 + C81009 * C113) * C220 +
                (C26926 * C225 + C81009 * C231) * C80639) *
                   C81011 * C52707 +
               ((C26926 * C3283 + C81009 * C3284) * C220 +
                (C26926 * C3423 + C81009 * C3424) * C80639) *
                   C81011 * C52708) *
                  C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C26926 * C99 + C81009 * C105) * C220 +
                 (C26926 * C221 + C81009 * C227) * C80639) *
                    C81011 * C52707 +
                ((C26926 * C1684 + C81009 * C1694) * C220 +
                 (C26926 * C1882 + C81009 * C1890) * C80639) *
                    C81011 * C52708) *
                   C81003 -
               ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                (C27578 + C27554) * C81011 * C52707) *
                   C80988 +
               ((C27559 + C27579) * C81011 * C52707 +
                (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
                   C80962) *
                  C737 +
              (((C27560 + C27580) * C81011 * C52707 +
                (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                   C80988 -
               (((C26926 * C1881 + C81009 * C1889) * C80639 +
                 (C26926 * C1682 + C81009 * C1690) * C220) *
                    C81011 * C52708 +
                ((C26926 * C222 + C81009 * C228) * C80639 +
                 (C26926 * C100 + C81009 * C106) * C220) *
                    C81011 * C52707) *
                   C81003 -
               ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
                (C27581 + C27563) * C81011 * C52707) *
                   C80962) *
                  C738 +
              ((((C26926 * C101 + C81009 * C109) * C220 +
                 (C26926 * C223 + C81009 * C229) * C80639) *
                    C81011 * C52707 +
                ((C26926 * C1683 + C81009 * C1691) * C220 +
                 (C26926 * C1885 + C81009 * C1893) * C80639) *
                    C81011 * C52708) *
                   C81003 -
               ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
                (C27582 + C27566) * C81011 * C52707) *
                   C80988 +
               ((C27571 + C27583) * C81011 * C52707 +
                ((C26926 * C7589 + C81009 * C7590) * C220 +
                 (C26926 * C7791 + C81009 * C7792) * C80639) *
                    C81011 * C52708) *
                   C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C1878 +
            (C26926 * C221 + C81009 * C227) * C81004 - C53812 * C1879 -
            C54026 * C80990 + C53820 * C1880 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C1878 + C54026 * C81004 - C53820 * C1879 -
            C54027 * C80990 + (C26926 * C10469 + C81009 * C10475) * C1880 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C80628 * C737 +
          ((C53814 * C1879 -
            ((C26926 * C222 + C81009 * C228) * C81004 +
             (C26926 * C100 + C81009 * C106) * C1878) +
            C54028 * C80990 - C53818 * C1880 - C54029 * C80965) *
               C81011 * C52707 +
           (C53818 * C1879 - (C54028 * C81004 + C53814 * C1878) +
            C54029 * C80990 - (C26926 * C10468 + C81009 * C10474) * C1880 -
            (C26926 * C10581 + C81009 * C10585) * C80965) *
               C81011 * C52708) *
              C80628 * C738 +
          (((C26926 * C101 + C81009 * C109) * C1878 +
            (C26926 * C223 + C81009 * C229) * C81004 - C53816 * C1879 -
            C54030 * C80990 + C53822 * C1880 + C54031 * C80965) *
               C81011 * C52707 +
           (C53816 * C1878 + C54030 * C81004 - C53822 * C1879 -
            C54031 * C80990 + (C26926 * C11885 + C81009 * C11886) * C1880 +
            (C26926 * C12027 + C81009 * C12028) * C80965) *
               C81011 * C52708) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
               C4984 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C4985 +
           ((C27559 + C27579) * C81011 * C52707 +
            (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
               C80962) *
              C80998 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C4985 -
           ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C4984 -
           ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
            (C27581 + C27563) * C81011 * C52707) *
               C80962) *
              C80982 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C81011 * C52707 +
            (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
               C4984 -
           ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
            (C27582 + C27566) * C81011 * C52707) *
               C4985 +
           ((C27571 + C27583) * C81011 * C52707 +
            ((C26926 * C7589 + C81009 * C7590) * C220 +
             (C26926 * C7791 + C81009 * C7792) * C80639) *
                C81011 * C52708) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C81011 * C52707 +
           (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
              C5652 -
          ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
           (C27578 + C27554) * C81011 * C52707) *
              C5653 +
          ((C27559 + C27579) * C81011 * C52707 +
           (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
              C5654 -
          ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
           (C31768 + C31760) * C81011 * C52707) *
              C5655 +
          ((C31765 + C31769) * C81011 * C52707 +
           ((C26926 * C34479 + C81009 * C34480) * C220 +
            (C26926 * C34628 + C81009 * C34629) * C80639) *
               C81011 * C52708) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C1878 +
            (C26926 * C221 + C81009 * C227) * C81004 - C53812 * C1879 -
            C54026 * C80990 + C53820 * C1880 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C1878 + C54026 * C81004 - C53820 * C1879 -
            C54027 * C80990 + (C26926 * C10469 + C81009 * C10475) * C1880 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C4984 +
          ((C32333 - (C32332 + C32331) + C32334 - C32335 - C32349) * C81011 *
               C52707 +
           (C32158 * C1879 - (C30294 * C81004 + C30064 * C1878) +
            C32346 * C80990 - C38387 * C1880 - C38538 * C80965) *
               C81011 * C52708) *
              C4985 +
          ((C32340 + C32339 - C32338 - C32350 + C32343 + C32351) * C81011 *
               C52707 +
           (C32160 * C1878 + C32347 * C81004 - C32163 * C1879 -
            C32348 * C80990 + (C26926 * C38377 + C81009 * C38378) * C1880 +
            (C26926 * C38526 + C81009 * C38527) * C80965) *
               C81011 * C52708) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 - C53812 * C9285 -
            C54026 * C9134 + C53820 * C9286 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C9284 + C54026 * C9133 - C53820 * C9285 - C54027 * C9134 +
            (C26926 * C10469 + C81009 * C10475) * C9286 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C80628 * C80998 +
          ((C53814 * C9285 -
            ((C26926 * C222 + C81009 * C228) * C9133 +
             (C26926 * C100 + C81009 * C106) * C9284) +
            C54028 * C9134 - C53818 * C9286 - C54029 * C80965) *
               C81011 * C52707 +
           (C53818 * C9285 - (C54028 * C9133 + C53814 * C9284) +
            C54029 * C9134 - (C26926 * C10468 + C81009 * C10474) * C9286 -
            (C26926 * C10581 + C81009 * C10585) * C80965) *
               C81011 * C52708) *
              C80628 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C9284 +
            (C26926 * C223 + C81009 * C229) * C9133 - C53816 * C9285 -
            C54030 * C9134 + C53822 * C9286 + C54031 * C80965) *
               C81011 * C52707 +
           (C53816 * C9284 + C54030 * C9133 - C53822 * C9285 - C54031 * C9134 +
            (C26926 * C11885 + C81009 * C11886) * C9286 +
            (C26926 * C12027 + C81009 * C12028) * C80965) *
               C81011 * C52708) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 - C53812 * C9285 -
            C54026 * C9134 + C53820 * C9286 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C9284 + C54026 * C9133 - C53820 * C9285 - C54027 * C9134 +
            (C26926 * C10469 + C81009 * C10475) * C9286 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C81003 +
          ((C35950 - (C35949 + C35948) + C35951 - C35952 - C35953) * C81011 *
               C52707 +
           (C32158 * C9285 - (C30294 * C9133 + C30064 * C9284) +
            C32346 * C9134 - C38387 * C9286 - C38538 * C80965) *
               C81011 * C52708) *
              C80988 +
          ((C35956 + C35955 - C35954 - C35957 + C35958 + C35959) * C81011 *
               C52707 +
           (C32160 * C9284 + C32347 * C9133 - C32163 * C9285 - C32348 * C9134 +
            (C26926 * C38377 + C81009 * C38378) * C9286 +
            (C26926 * C38526 + C81009 * C38527) * C80965) *
               C81011 * C52708) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C10576 +
           (C26926 * C221 + C81009 * C227) * C10463 - C53812 * C10577 -
           C54026 * C10464 + C53820 * C10578 + C54027 * C10465 -
           C61992 * C10579 - C62102 * C10466 + C61995 * C10580 +
           C62103 * C10467) *
              C81011 * C52707 +
          (C53812 * C10576 + C54026 * C10463 - C53820 * C10577 -
           C54027 * C10464 + C61992 * C10578 + C62102 * C10465 -
           C61995 * C10579 - C62103 * C10466 +
           (C26926 * C61979 + C81009 * C61980) * C10580 +
           (C26926 * C62095 + C81009 * C62096) * C10467) *
              C81011 * C52708) *
         C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C275 * C99 + C81011 * C276) * C94 +
               (C275 * C107 + C81011 * C282) * C83 - C305 * C95 - C306 * C84 +
               C307 * C96 + C308 * C85 - C309 * C97 - C310 * C86 + C311 * C98 +
               C312 * C87) *
                  C52707 +
              ((C275 * C1684 + C81011 * C1972) * C94 +
               (C275 * C1693 + C81011 * C1979) * C83 - C2004 * C95 -
               C2005 * C84 + C2006 * C96 + C2007 * C85 - C3498 * C97 -
               C3499 * C86 + (C275 * C3283 + C81011 * C3491) * C98 +
               (C275 * C3285 + C81011 * C3492) * C87) *
                  C52708) *
             C81009 * C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C99 + C81011 * C276) * C743 +
                (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                C306 * C738 + C307 * C745 + C308 * C80954) *
                   C52707 +
               ((C275 * C1684 + C81011 * C1972) * C743 +
                (C275 * C1693 + C81011 * C1979) * C737 - C2004 * C744 -
                C2005 * C738 + C2006 * C745 + C2007 * C80954) *
                   C52708) *
                  C81009 * C80639 * C81003 +
              ((C1068 * C744 -
                ((C275 * C757 + C81011 * C1043) * C737 +
                 (C275 * C748 + C81011 * C1036) * C743) +
                C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                   C52707 +
               (C4322 * C744 -
                ((C275 * C3985 + C81011 * C4309) * C737 +
                 (C275 * C3979 + C81011 * C4305) * C743) +
                C4323 * C738 - C4324 * C745 - C4325 * C80954) *
                   C52708) *
                  C81009 * C80639 * C80988 +
              (((C275 * C750 + C81011 * C1039) * C743 +
                (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
                C1073 * C738 + C1074 * C745 + C1075 * C80954) *
                   C52707 +
               ((C275 * C6140 + C81011 * C6410) * C743 +
                (C275 * C6148 + C81011 * C6416) * C737 - C7898 * C744 -
                C7899 * C738 + (C275 * C7589 + C81011 * C7891) * C745 +
                (C275 * C7591 + C81011 * C7892) * C80954) *
                   C52708) *
                  C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C743 +
            (C275 * C107 + C81011 * C282) * C737 - C305 * C744 - C306 * C738 +
            C307 * C745 + C308 * C80954) *
               C52707 +
           (C54126 + C54127 - C54110 - C54111 + C54112 + C54113) * C52708) *
              C81009 * C81004 +
          ((C54110 - (C54127 + C54126) + C54111 - C54112 - C54113) * C52707 +
           (C54114 - (C54128 + C54129) + C54119 - C54120 - C54121) * C52708) *
              C81009 * C80990 +
          ((C54129 + C54128 - C54114 - C54119 + C54120 + C54121) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C743 +
            (C275 * C10473 + C81011 * C10636) * C737 - C12102 * C744 -
            C12103 * C738 + (C275 * C11885 + C81011 * C12095) * C745 +
            (C275 * C11887 + C81011 * C12096) * C80954) *
               C52708) *
              C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C4987 +
            (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
            C306 * C80982 + C307 * C4989 + C308 * C80954) *
               C52707 +
           (C54122 * C4987 + C54123 * C80998 - C2004 * C4988 - C2005 * C80982 +
            C2006 * C4989 + C2007 * C80954) *
               C52708) *
              C81009 * C80639 * C4984 +
          ((C1068 * C4988 -
            ((C275 * C757 + C81011 * C1043) * C80998 +
             (C275 * C748 + C81011 * C1036) * C4987) +
            C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
               C52707 +
           (C4322 * C4988 - (C56146 * C80998 + C56147 * C4987) +
            C4323 * C80982 - C4324 * C4989 - C4325 * C80954) *
               C52708) *
              C81009 * C80639 * C4985 +
          (((C275 * C750 + C81011 * C1039) * C4987 +
            (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
            C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C4987 +
            (C275 * C6148 + C81011 * C6416) * C80998 - C7898 * C4988 -
            C7899 * C80982 + (C275 * C7589 + C81011 * C7891) * C4989 +
            (C275 * C7591 + C81011 * C7892) * C80954) *
               C52708) *
              C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5657 +
            (C275 * C107 + C81011 * C282) * C80588) *
               C52707 +
           (C54122 * C5657 + C54123 * C80588) * C52708) *
              C81009 * C80639 * C5652 -
          ((C56146 * C80588 + C56147 * C5657) * C52708 +
           ((C275 * C757 + C81011 * C1043) * C80588 +
            (C275 * C748 + C81011 * C1036) * C5657) *
               C52707) *
              C81009 * C80639 * C5653 +
          (((C275 * C750 + C81011 * C1039) * C5657 +
            (C275 * C764 + C81011 * C1047) * C80588) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C5657 +
            (C275 * C6148 + C81011 * C6416) * C80588) *
               C52708) *
              C81009 * C80639 * C5654 -
          (((C275 * C8503 + C81011 * C8715) * C80588 +
            (C275 * C8499 + C81011 * C8713) * C5657) *
               C52708 +
           ((C275 * C5663 + C81011 * C5826) * C80588 +
            (C275 * C5659 + C81011 * C5822) * C5657) *
               C52707) *
              C81009 * C80639 * C5655 +
          (((C275 * C5660 + C81011 * C5823) * C5657 +
            (C275 * C5668 + C81011 * C5827) * C80588) *
               C52707 +
           ((C275 * C34479 + C81011 * C34703) * C5657 +
            (C275 * C34481 + C81011 * C34704) * C80588) *
               C52708) *
              C81009 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C81004 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C80990 +
           ((C58009 + C58008) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C5657 +
             (C275 * C10473 + C81011 * C10636) * C80588) *
                C52708) *
               C81009 * C80965) *
              C4984 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C80990 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C81004 -
           (((C275 * C12547 + C81011 * C12759) * C80588 +
             (C275 * C12543 + C81011 * C12757) * C5657) *
                C52708 +
            (C58031 + C58030) * C52707) *
               C81009 * C80965) *
              C4985 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C81004 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C80990 +
           ((C58035 + C58034) * C52707 +
            ((C275 * C38377 + C81011 * C38605) * C5657 +
             (C275 * C38379 + C81011 * C38606) * C80588) *
                C52708) *
               C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C4987 +
            (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
            C306 * C80982 + C307 * C4989 + C308 * C80954) *
               C52707 +
           (C60866 + C60867 - C60868 - C60869 + C60870 + C60871) * C52708) *
              C81009 * C9133 +
          ((C60868 - (C60867 + C60866) + C60869 - C60870 - C60871) * C52707 +
           (C60872 - (C60873 + C60874) + C60875 - C60876 - C60877) * C52708) *
              C81009 * C9134 +
          ((C60874 + C60873 - C60872 - C60875 + C60876 + C60877) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C4987 +
            (C275 * C10473 + C81011 * C10636) * C80998 - C12102 * C4988 -
            C12103 * C80982 + (C275 * C11885 + C81011 * C12095) * C4989 +
            (C275 * C11887 + C81011 * C12096) * C80954) *
               C52708) *
              C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C9133 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C9134 +
           ((C58009 + C58008) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C5657 +
             (C275 * C10473 + C81011 * C10636) * C80588) *
                C52708) *
               C81009 * C80965) *
              C81003 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C9134 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C9133 -
           (((C275 * C12547 + C81011 * C12759) * C80588 +
             (C275 * C12543 + C81011 * C12757) * C5657) *
                C52708 +
            (C58031 + C58030) * C52707) *
               C81009 * C80965) *
              C80988 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C9133 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C9134 +
           ((C58035 + C58034) * C52707 +
            ((C275 * C38377 + C81011 * C38605) * C5657 +
             (C275 * C38379 + C81011 * C38606) * C80588) *
                C52708) *
               C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5657 +
            (C275 * C107 + C81011 * C282) * C80588) *
               C52707 +
           (C58006 + C58007) * C52708) *
              C81009 * C10463 -
          ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
              C10464 +
          ((C58009 + C58008) * C52707 + (C62160 + C62161) * C52708) * C81009 *
              C10465 -
          ((C62162 + C62163) * C52708 + (C62161 + C62160) * C52707) * C81009 *
              C10466 +
          ((C62163 + C62162) * C52707 +
           ((C275 * C61979 + C81011 * C62145) * C5657 +
            (C275 * C61981 + C81011 * C62146) * C80588) *
               C52708) *
              C81009 * C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C99 + C81011 * C276) * C165 +
                (C275 * C166 + C81011 * C354) * C80628) *
                   C52707 +
               ((C275 * C1684 + C81011 * C1972) * C165 +
                (C275 * C1790 + C81011 * C2087) * C80628) *
                   C52708) *
                  C81009 * C83 -
              ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
                  C84 +
              ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
                  C85 -
              ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 *
                  C86 +
              ((C372 + C380) * C52707 +
               ((C275 * C3283 + C81011 * C3491) * C165 +
                (C275 * C3353 + C81011 * C3565) * C80628) *
                   C52708) *
                  C81009 * C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C99 + C81011 * C276) * C852 +
                (C275 * C166 + C81011 * C354) * C81003 -
                (C275 * C748 + C81011 * C1036) * C853 -
                (C275 * C856 + C81011 * C1149) * C80988 +
                (C275 * C750 + C81011 * C1039) * C854 +
                (C275 * C857 + C81011 * C1150) * C80962) *
                   C52707 +
               ((C275 * C1684 + C81011 * C1972) * C852 +
                (C275 * C1790 + C81011 * C2087) * C81003 -
                (C275 * C3979 + C81011 * C4305) * C853 -
                (C275 * C4093 + C81011 * C4423) * C80988 +
                (C275 * C6140 + C81011 * C6410) * C854 +
                (C275 * C6236 + C81011 * C6493) * C80962) *
                   C52708) *
                  C81009 * C737 +
              ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C52707 +
               (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) *
                   C52708) *
                  C81009 * C738 +
              ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C52707 +
               (C2006 * C852 + C2107 * C81003 - C4324 * C853 - C4439 * C80988 +
                (C275 * C7589 + C81011 * C7891) * C854 +
                (C275 * C7691 + C81011 * C7997) * C80962) *
                   C52708) *
                  C81009 * C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C737 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 * C738 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C80954) *
              C81004 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C738 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C737 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C80954) *
              C80990 +
          (((C54209 + C54213) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C165 +
             (C275 * C10527 + C81011 * C10682) * C80628) *
                C52708) *
               C81009 * C737 -
           ((C12175 + C12171) * C52708 + (C2112 + C2100) * C52707) * C81009 *
               C738 +
           ((C2105 + C2113) * C52707 +
            ((C275 * C11885 + C81011 * C12095) * C165 +
             (C275 * C11955 + C81011 * C12169) * C80628) *
                C52708) *
               C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C54122 * C5064 + C54210 * C4984 - C56147 * C5065 - C56253 * C4985 +
            (C275 * C6140 + C81011 * C6410) * C5066 +
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C52708) *
              C81009 * C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C52707 +
           (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C52708) *
              C81009 * C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C52707 +
           (C2006 * C5064 + C2107 * C4984 - C4324 * C5065 - C4439 * C4985 +
            (C275 * C7589 + C81011 * C7891) * C5066 +
            (C275 * C7691 + C81011 * C7997) * C80962) *
               C52708) *
              C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C52707 +
          (C54122 * C5716 + C54210 * C5652 - C56147 * C5717 - C56253 * C5653 +
           (C275 * C6140 + C81011 * C6410) * C5718 +
           (C275 * C6236 + C81011 * C6493) * C5654 -
           (C275 * C8499 + C81011 * C8713) * C5719 -
           (C275 * C8573 + C81011 * C8783) * C5655 +
           (C275 * C34479 + C81011 * C34703) * C5720 +
           (C275 * C34557 + C81011 * C34771) * C5656) *
              C52708) *
         C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C58110 + C58111 - C58112 - C58113 + C58114 + C58128) * C52708) *
              C81009 * C80588 * C81004 +
          ((C58112 - (C58111 + C58110) + C58113 - C58114 - C58128) * C52707 +
           (C58117 - (C58118 + C58119) + C58129 - C58122 - C58130) * C52708) *
              C81009 * C80588 * C80990 +
          ((C58119 + C58118 - C58117 - C58129 + C58122 + C58130) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C5064 +
            (C275 * C10527 + C81011 * C10682) * C4984 -
            (C275 * C12543 + C81011 * C12757) * C5065 -
            (C275 * C12617 + C81011 * C12827) * C4985 +
            (C275 * C38377 + C81011 * C38605) * C5066 +
            (C275 * C38455 + C81011 * C38673) * C80962) *
               C52708) *
              C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C80998 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C80982 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C80954) *
              C9133 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C80982 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C80998 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C80954) *
              C9134 +
          (((C54209 + C54213) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C165 +
             (C275 * C10527 + C81011 * C10682) * C80628) *
                C52708) *
               C81009 * C80998 -
           ((C12175 + C12171) * C52708 + (C2112 + C2100) * C52707) * C81009 *
               C80982 +
           ((C2105 + C2113) * C52707 +
            ((C275 * C11885 + C81011 * C12095) * C165 +
             (C275 * C11955 + C81011 * C12169) * C80628) *
                C52708) *
               C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C61630 + C61631 - C61632 - C61633 + C61634 + C61635) * C52708) *
              C81009 * C80588 * C9133 +
          ((C61632 - (C61631 + C61630) + C61633 - C61634 - C61635) * C52707 +
           (C61636 - (C61637 + C61638) + C61639 - C61640 - C61641) * C52708) *
              C81009 * C80588 * C9134 +
          ((C61638 + C61637 - C61636 - C61639 + C61640 + C61641) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C852 +
            (C275 * C10527 + C81011 * C10682) * C81003 -
            (C275 * C12543 + C81011 * C12757) * C853 -
            (C275 * C12617 + C81011 * C12827) * C80988 +
            (C275 * C38377 + C81011 * C38605) * C854 +
            (C275 * C38455 + C81011 * C38673) * C80962) *
               C52708) *
              C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C52707 +
           (C54204 + C54212) * C52708) *
              C81009 * C80588 * C10463 -
          ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
              C80588 * C10464 +
          ((C54209 + C54213) * C52707 + (C62207 + C62215) * C52708) * C81009 *
              C80588 * C10465 -
          ((C62216 + C62212) * C52708 + (C62215 + C62207) * C52707) * C81009 *
              C80588 * C10466 +
          ((C62212 + C62216) * C52707 +
           ((C275 * C61979 + C81011 * C62145) * C165 +
            (C275 * C62041 + C81011 * C62205) * C80628) *
               C52708) *
              C81009 * C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C99 + C81011 * C276) * C220 +
                (C275 * C221 + C81011 * C422) * C80639) *
                   C52707 +
               ((C275 * C1684 + C81011 * C1972) * C220 +
                (C275 * C1882 + C81011 * C2187) * C80639) *
                   C52708) *
                  C81009 * C80628 * C83 -
              ((C2212 * C80639 + C2004 * C220) * C52708 +
               (C445 + C429) * C52707) *
                  C81009 * C80628 * C84 +
              ((C434 + C446) * C52707 +
               (C2006 * C220 + C2214 * C80639) * C52708) *
                  C81009 * C80628 * C85 -
              ((C3652 * C80639 + C3498 * C220) * C52708 +
               (C447 + C435) * C52707) *
                  C81009 * C80628 * C86 +
              ((C440 + C448) * C52707 +
               ((C275 * C3283 + C81011 * C3491) * C220 +
                (C275 * C3423 + C81011 * C3637) * C80639) *
                   C52708) *
                  C81009 * C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C275 * C99 + C81011 * C276) * C220 +
                 (C275 * C221 + C81011 * C422) * C80639) *
                    C52707 +
                ((C275 * C1684 + C81011 * C1972) * C220 +
                 (C275 * C1882 + C81011 * C2187) * C80639) *
                    C52708) *
                   C81009 * C81003 -
               (((C275 * C4199 + C81011 * C4539) * C80639 +
                 (C275 * C3979 + C81011 * C4305) * C220) *
                    C52708 +
                ((C275 * C946 + C81011 * C1256) * C80639 +
                 (C275 * C748 + C81011 * C1036) * C220) *
                    C52707) *
                   C81009 * C80988 +
               (((C275 * C750 + C81011 * C1039) * C220 +
                 (C275 * C947 + C81011 * C1257) * C80639) *
                    C52707 +
                ((C275 * C6140 + C81011 * C6410) * C220 +
                 (C275 * C6324 + C81011 * C6575) * C80639) *
                    C52708) *
                   C81009 * C80962) *
                  C737 +
              (((C1266 + C1280) * C52707 +
                (C4322 * C220 + C4554 * C80639) * C52708) *
                   C81009 * C80988 -
               ((C2212 * C80639 + C2004 * C220) * C52708 +
                (C445 + C429) * C52707) *
                   C81009 * C81003 -
               ((C8112 * C80639 + C7898 * C220) * C52708 +
                (C1281 + C1267) * C52707) *
                   C81009 * C80962) *
                  C738 +
              (((C434 + C446) * C52707 +
                (C2006 * C220 + C2214 * C80639) * C52708) *
                   C81009 * C81003 -
               ((C4555 * C80639 + C4324 * C220) * C52708 +
                (C1282 + C1270) * C52707) *
                   C81009 * C80988 +
               ((C1275 + C1283) * C52707 +
                ((C275 * C7589 + C81011 * C7891) * C220 +
                 (C275 * C7791 + C81011 * C8105) * C80639) *
                    C52708) *
                   C81009 * C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 - C54122 * C1879 -
            C54292 * C80990 + C54125 * C1880 + C54293 * C80965) *
               C52707 +
           (C54122 * C1878 + C54292 * C81004 - C54125 * C1879 -
            C54293 * C80990 + (C275 * C10469 + C81011 * C10632) * C1880 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C80628 * C737 +
          ((C2198 - (C2197 + C2196) + C2216 - C2201 - C2217) * C52707 +
           (C2008 * C1879 - (C2212 * C81004 + C2004 * C1878) + C2213 * C80990 -
            C12102 * C1880 - C12252 * C80965) *
               C52708) *
              C81009 * C80628 * C738 +
          ((C2206 + C2205 - C2204 - C2218 + C2209 + C2219) * C52707 +
           (C2006 * C1878 + C2214 * C81004 - C2010 * C1879 - C2215 * C80990 +
            (C275 * C11885 + C81011 * C12095) * C1880 +
            (C275 * C12027 + C81011 * C12241) * C80965) *
               C52708) *
              C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C4984 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            ((C275 * C6140 + C81011 * C6410) * C220 +
             (C275 * C6324 + C81011 * C6575) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80998 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C4985 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C4984 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80962) *
              C80982 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C4984 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C4985 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C52707 +
           (C54122 * C220 + C54292 * C80639) * C52708) *
              C81009 * C5652 -
          ((C56355 * C80639 + C56147 * C220) * C52708 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C52707) *
              C81009 * C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C220 +
            (C275 * C6324 + C81011 * C6575) * C80639) *
               C52708) *
              C81009 * C5654 -
          (((C275 * C8643 + C81011 * C8851) * C80639 +
            (C275 * C8499 + C81011 * C8713) * C220) *
               C52708 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C52707) *
              C81009 * C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C52707 +
           ((C275 * C34479 + C81011 * C34703) * C220 +
            (C275 * C34628 + C81011 * C34838) * C80639) *
               C52708) *
              C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 - C54122 * C1879 -
            C54292 * C80990 + C54125 * C1880 + C54293 * C80965) *
               C52707 +
           (C54122 * C1878 + C54292 * C81004 - C54125 * C1879 -
            C54293 * C80990 + (C275 * C10469 + C81011 * C10632) * C1880 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C4984 +
          ((C56147 * C1879 -
            ((C275 * C946 + C81011 * C1256) * C81004 +
             (C275 * C748 + C81011 * C1036) * C1878) +
            C56355 * C80990 - C58024 * C1880 - C58211 * C80965) *
               C52707 +
           (C58024 * C1879 - (C56355 * C81004 + C56147 * C1878) +
            C58211 * C80990 - (C275 * C12543 + C81011 * C12757) * C1880 -
            (C275 * C12687 + C81011 * C12895) * C80965) *
               C52708) *
              C81009 * C4985 +
          (((C275 * C750 + C81011 * C1039) * C1878 +
            (C275 * C947 + C81011 * C1257) * C81004 - C58026 * C1879 -
            C58212 * C80990 + C58029 * C1880 + C58213 * C80965) *
               C52707 +
           (C58026 * C1878 + C58212 * C81004 - C58029 * C1879 -
            C58213 * C80990 + (C275 * C38377 + C81011 * C38605) * C1880 +
            (C275 * C38526 + C81011 * C38740) * C80965) *
               C52708) *
              C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 - C54122 * C9285 -
            C54292 * C9134 + C54125 * C9286 + C54293 * C80965) *
               C52707 +
           (C54122 * C9284 + C54292 * C9133 - C54125 * C9285 - C54293 * C9134 +
            (C275 * C10469 + C81011 * C10632) * C9286 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C80628 * C80998 +
          ((C9512 - (C9511 + C9510) + C9513 - C9514 - C9515) * C52707 +
           (C2008 * C9285 - (C2212 * C9133 + C2004 * C9284) + C2213 * C9134 -
            C12102 * C9286 - C12252 * C80965) *
               C52708) *
              C81009 * C80628 * C80982 +
          ((C9518 + C9517 - C9516 - C9519 + C9520 + C9521) * C52707 +
           (C2006 * C9284 + C2214 * C9133 - C2010 * C9285 - C2215 * C9134 +
            (C275 * C11885 + C81011 * C12095) * C9286 +
            (C275 * C12027 + C81011 * C12241) * C80965) *
               C52708) *
              C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 - C54122 * C9285 -
            C54292 * C9134 + C54125 * C9286 + C54293 * C80965) *
               C52707 +
           (C54122 * C9284 + C54292 * C9133 - C54125 * C9285 - C54293 * C9134 +
            (C275 * C10469 + C81011 * C10632) * C9286 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C81003 +
          ((C56147 * C9285 -
            ((C275 * C946 + C81011 * C1256) * C9133 +
             (C275 * C748 + C81011 * C1036) * C9284) +
            C56355 * C9134 - C58024 * C9286 - C58211 * C80965) *
               C52707 +
           (C58024 * C9285 - (C56355 * C9133 + C56147 * C9284) +
            C58211 * C9134 - (C275 * C12543 + C81011 * C12757) * C9286 -
            (C275 * C12687 + C81011 * C12895) * C80965) *
               C52708) *
              C81009 * C80988 +
          (((C275 * C750 + C81011 * C1039) * C9284 +
            (C275 * C947 + C81011 * C1257) * C9133 - C58026 * C9285 -
            C58212 * C9134 + C58029 * C9286 + C58213 * C80965) *
               C52707 +
           (C58026 * C9284 + C58212 * C9133 - C58029 * C9285 - C58213 * C9134 +
            (C275 * C38377 + C81011 * C38605) * C9286 +
            (C275 * C38526 + C81011 * C38740) * C80965) *
               C52708) *
              C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C10576 +
           (C275 * C221 + C81011 * C422) * C10463 - C54122 * C10577 -
           C54292 * C10464 + C54125 * C10578 + C54293 * C10465 -
           C62156 * C10579 - C62264 * C10466 + C62159 * C10580 +
           C62265 * C10467) *
              C52707 +
          (C54122 * C10576 + C54292 * C10463 - C54125 * C10577 -
           C54293 * C10464 + C62156 * C10578 + C62264 * C10465 -
           C62159 * C10579 - C62265 * C10466 +
           (C275 * C61979 + C81011 * C62145) * C10580 +
           (C275 * C62095 + C81011 * C62258) * C10467) *
              C52708) *
         C81009 * C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                  C94 +
              (C52961 * C107 + C52707 * C497 + C52962 * C1693 +
               C52708 * C2301) *
                  C83 -
              (C52962 * C1682 + C52708 * C2293 + C52961 * C100 +
               C52707 * C492) *
                  C95 -
              (C52962 * C1692 + C52708 * C2302 + C52961 * C108 +
               C52707 * C498) *
                  C84 +
              (C52961 * C101 + C52707 * C493 + C52962 * C1683 +
               C52708 * C2295) *
                  C96 +
              (C52961 * C110 + C52707 * C499 + C52962 * C1695 +
               C52708 * C2303) *
                  C85 -
              (C52962 * C1685 + C52708 * C2296 + C52961 * C102 +
               C52707 * C494) *
                  C97 -
              (C52962 * C1697 + C52708 * C2304 + C52961 * C112 +
               C52707 * C500) *
                  C86 +
              (C52961 * C103 + C52707 * C495 + C52962 * C3283 +
               C52708 * C3719) *
                  C98 +
              (C52961 * C114 + C52707 * C501 + C52962 * C3285 +
               C52708 * C3720) *
                  C87) *
             C81009 * C81011 * C80639 * C80628 +
         0.5 * std::pow(Pi, 2.5) *
             (((C52961 * C99 + C52707 * C491 + C52962 * C1684 +
                C52708 * C2294) *
                   C743 +
               (C52961 * C107 + C52707 * C497 + C52962 * C1693 +
                C52708 * C2301) *
                   C737 -
               (C52962 * C1682 + C52708 * C2293 + C52961 * C100 +
                C52707 * C492) *
                   C744 -
               (C52962 * C1692 + C52708 * C2302 + C52961 * C108 +
                C52707 * C498) *
                   C738 +
               (C52961 * C101 + C52707 * C493 + C52962 * C1683 +
                C52708 * C2295) *
                   C745 +
               (C52961 * C110 + C52707 * C499 + C52962 * C1695 +
                C52708 * C2303) *
                   C80954) *
                  C81009 * C81011 * C80639 * C81003 +
              ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 +
                C52708 * C4656) *
                   C744 -
               ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
                 C52707 * C1365) *
                    C737 +
                (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
                 C52707 * C1358) *
                    C743) +
               (C52961 * C756 + C52707 * C1366 + C52962 * C3986 +
                C52708 * C4660) *
                   C738 -
               (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
                C52707 * C1359) *
                   C745 -
               (C52962 * C3988 + C52708 * C4661 + C52961 * C759 +
                C52707 * C1367) *
                   C80954) *
                  C81009 * C81011 * C80639 * C80988 +
              ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 +
                C52708 * C6656) *
                   C743 +
               (C52961 * C764 + C52707 * C1369 + C52962 * C6148 +
                C52708 * C6662) *
                   C737 -
               (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
                C52707 * C1362) *
                   C744 -
               (C52962 * C6147 + C52708 * C6661 + C52961 * C765 +
                C52707 * C1370) *
                   C738 +
               (C52961 * C752 + C52707 * C1363 + C52962 * C7589 +
                C52708 * C8211) *
                   C745 +
               (C52961 * C767 + C52707 * C1371 + C52962 * C7591 +
                C52708 * C8212) *
                   C80954) *
                  C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C743 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C737 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C744 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C738 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C745 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C81004 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C744 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C737 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C743) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C738 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C745 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C80954) *
              C81009 * C81011 * C80990 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C743 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C737 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C744 -
           (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
            C52707 * C2306) *
               C738 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C745 +
           (C52961 * C1703 + C52707 * C2307 + C52962 * C11887 +
            C52708 * C12320) *
               C80954) *
              C81009 * C81011 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C4987 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80998 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C4988 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80982 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C4989 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C80639 * C4984 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C4988 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80998 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C4987) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80982 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C4989 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80954) *
              C81009 * C81011 * C80639 * C4985 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C4987 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80998 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C4988 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80982 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C4989 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C80954) *
              C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5657 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80588) *
              C81009 * C81011 * C80639 * C5652 -
          ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
               C80588 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5657) *
              C81009 * C81011 * C80639 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5657 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80588) *
              C81009 * C81011 * C80639 * C5654 -
          ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 + C52707 * C5968) *
               C80588 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C5657) *
              C81009 * C81011 * C80639 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C5657 +
           (C52961 * C5668 + C52707 * C5969 + C52962 * C34481 +
            C52708 * C34906) *
               C80588) *
              C81009 * C81011 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C81004 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C80990 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C5657 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80588) *
               C81009 * C81011 * C80965) *
              C4984 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C80990 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C81004 -
           ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
             C52707 * C6660) *
                C80588 +
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C5657) *
               C81009 * C81011 * C80965) *
              C4985 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C81004 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C80990 +
           ((C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
             C52708 * C38807) *
                C5657 +
            (C52961 * C6153 + C52707 * C6663 + C52962 * C38379 +
             C52708 * C38808) *
                C80588) *
               C81009 * C81011 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C4987 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80998 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C4988 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80982 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C4989 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C9133 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C4988 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80998 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C4987) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C80982 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C4989 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C80954) *
              C81009 * C81011 * C9134 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C4987 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C80998 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C4988 -
           (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
            C52707 * C2306) *
               C80982 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C4989 +
           (C52961 * C1703 + C52707 * C2307 + C52962 * C11887 +
            C52708 * C12320) *
               C80954) *
              C81009 * C81011 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C9133 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C9134 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C5657 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80588) *
               C81009 * C81011 * C80965) *
              C81003 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C9134 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C9133 -
           ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
             C52707 * C6660) *
                C80588 +
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C5657) *
               C81009 * C81011 * C80965) *
              C80988 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C9133 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C9134 +
           ((C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
             C52708 * C38807) *
                C5657 +
            (C52961 * C6153 + C52707 * C6663 + C52962 * C38379 +
             C52708 * C38808) *
                C80588) *
               C81009 * C81011 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5657 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80588) *
              C81009 * C81011 * C10463 -
          ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 + C52707 * C2301) *
               C80588 +
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C5657) *
              C81009 * C81011 * C10464 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C5657 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C80588) *
              C81009 * C81011 * C10465 -
          ((C52962 * C10478 + C52708 * C10779 + C52961 * C10473 +
            C52707 * C10778) *
               C80588 +
           (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
            C52707 * C10774) *
               C5657) *
              C81009 * C81011 * C10466 +
          ((C52961 * C10470 + C52707 * C10775 + C52962 * C61979 +
            C52708 * C62307) *
               C5657 +
           (C52961 * C10478 + C52707 * C10779 + C52962 * C61981 +
            C52708 * C62308) *
               C80588) *
              C81009 * C81011 * C10467) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C52961 * C99 + C52707 * C491 + C52962 * C1684 +
                C52708 * C2294) *
                   C165 +
               (C52961 * C166 + C52707 * C569 + C52962 * C1790 +
                C52708 * C2409) *
                   C80628) *
                  C81009 * C81011 * C83 -
              ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 +
                C52707 * C570) *
                   C80628 +
               (C52962 * C1682 + C52708 * C2293 + C52961 * C100 +
                C52707 * C492) *
                   C165) *
                  C81009 * C81011 * C84 +
              ((C52961 * C101 + C52707 * C493 + C52962 * C1683 +
                C52708 * C2295) *
                   C165 +
               (C52961 * C168 + C52707 * C571 + C52962 * C1789 +
                C52708 * C2408) *
                   C80628) *
                  C81009 * C81011 * C85 -
              ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 +
                C52707 * C572) *
                   C80628 +
               (C52962 * C1685 + C52708 * C2296 + C52961 * C102 +
                C52707 * C494) *
                   C165) *
                  C81009 * C81011 * C86 +
              ((C52961 * C103 + C52707 * C495 + C52962 * C3283 +
                C52708 * C3719) *
                   C165 +
               (C52961 * C170 + C52707 * C573 + C52962 * C3353 +
                C52708 * C3793) *
                   C80628) *
                  C81009 * C81011 * C87) *
             C80639 +
         0.5 * std::pow(Pi, 2.5) *
             (((C52961 * C99 + C52707 * C491 + C52962 * C1684 +
                C52708 * C2294) *
                   C852 +
               (C52961 * C166 + C52707 * C569 + C52962 * C1790 +
                C52708 * C2409) *
                   C81003 -
               (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
                C52707 * C1358) *
                   C853 -
               (C52962 * C4093 + C52708 * C4773 + C52961 * C856 +
                C52707 * C1471) *
                   C80988 +
               (C52961 * C750 + C52707 * C1361 + C52962 * C6140 +
                C52708 * C6656) *
                   C854 +
               (C52961 * C857 + C52707 * C1472 + C52962 * C6236 +
                C52708 * C6739) *
                   C80962) *
                  C81009 * C81011 * C737 +
              ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 +
                C52708 * C4656) *
                   C853 -
               ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 +
                 C52707 * C570) *
                    C81003 +
                (C52962 * C1682 + C52708 * C2293 + C52961 * C100 +
                 C52707 * C492) *
                    C852) +
               (C52961 * C855 + C52707 * C1473 + C52962 * C4094 +
                C52708 * C4774) *
                   C80988 -
               (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
                C52707 * C1362) *
                   C854 -
               (C52962 * C6235 + C52708 * C6740 + C52961 * C858 +
                C52707 * C1474) *
                   C80962) *
                  C81009 * C81011 * C738 +
              ((C52961 * C101 + C52707 * C493 + C52962 * C1683 +
                C52708 * C2295) *
                   C852 +
               (C52961 * C168 + C52707 * C571 + C52962 * C1789 +
                C52708 * C2408) *
                   C81003 -
               (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
                C52707 * C1359) *
                   C853 -
               (C52962 * C4095 + C52708 * C4775 + C52961 * C859 +
                C52707 * C1475) *
                   C80988 +
               (C52961 * C752 + C52707 * C1363 + C52962 * C7589 +
                C52708 * C8211) *
                   C854 +
               (C52961 * C860 + C52707 * C1476 + C52962 * C7691 +
                C52708 * C8317) *
                   C80962) *
                  C81009 * C81011 * C80954) *
             C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C737 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C738 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C80954) *
              C81004 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C738 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C737 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C80954) *
              C80990 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C165 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80628) *
               C81009 * C81011 * C737 -
           ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
             C52707 * C2412) *
                C80628 +
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C165) *
               C81009 * C81011 * C738 +
           ((C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
             C52708 * C12319) *
                C165 +
            (C52961 * C1794 + C52707 * C2413 + C52962 * C11955 +
             C52708 * C12393) *
                C80628) *
               C81009 * C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5064 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C4984 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5065 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C4985 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5066 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80998 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C5065 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C4984 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C5064) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C4985 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C5066 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80962) *
              C81009 * C81011 * C80982 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C5064 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C4984 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C5065 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C4985 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C5066 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C80962) *
              C81009 * C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C5716 +
          (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
              C5652 -
          (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
              C5717 -
          (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
              C5653 +
          (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
              C5718 +
          (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
              C5654 -
          (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
              C5719 -
          (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
              C5655 +
          (C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
           C52708 * C34905) *
              C5720 +
          (C52961 * C5723 + C52707 * C6014 + C52962 * C34557 +
           C52708 * C34981) *
              C5656) *
         C81009 * C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5064 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C4984 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5065 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C4985 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5066 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C81004 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C5065 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C4984 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5064) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C4985 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C5066 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C80990 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C5064 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C4984 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C5065 -
           (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
            C52707 * C6741) *
               C4985 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C5066 +
           (C52961 * C6239 + C52707 * C6742 + C52962 * C38455 +
            C52708 * C38883) *
               C80962) *
              C81009 * C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C80998 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C80982 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C80954) *
              C9133 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C80982 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C80998 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C80954) *
              C9134 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C165 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80628) *
               C81009 * C81011 * C80998 -
           ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
             C52707 * C2412) *
                C80628 +
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C165) *
               C81009 * C81011 * C80982 +
           ((C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
             C52708 * C12319) *
                C165 +
            (C52961 * C1794 + C52707 * C2413 + C52962 * C11955 +
             C52708 * C12393) *
                C80628) *
               C81009 * C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C852 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81003 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C853 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80988 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C854 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C9133 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C853 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C81003 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C852) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C80988 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C854 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C9134 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C852 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C81003 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C853 -
           (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
            C52707 * C6741) *
               C80988 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C854 +
           (C52961 * C6239 + C52707 * C6742 + C52962 * C38455 +
            C52708 * C38883) *
               C80962) *
              C81009 * C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C165 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80628) *
              C81009 * C81011 * C80588 * C10463 -
          ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 + C52707 * C2409) *
               C80628 +
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C165) *
              C81009 * C81011 * C80588 * C10464 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C165 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C80628) *
              C81009 * C81011 * C80588 * C10465 -
          ((C52962 * C10528 + C52708 * C10825 + C52961 * C10527 +
            C52707 * C10824) *
               C80628 +
           (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
            C52707 * C10774) *
               C165) *
              C81009 * C81011 * C80588 * C10466 +
          ((C52961 * C10470 + C52707 * C10775 + C52962 * C61979 +
            C52708 * C62307) *
               C165 +
           (C52961 * C10528 + C52707 * C10825 + C52962 * C62041 +
            C52708 * C62351) *
               C80628) *
              C81009 * C81011 * C80588 * C10467)) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C52961 * C99 + C52707 * C491 + C52962 * C1684 +
                C52708 * C2294) *
                   C220 +
               (C52961 * C221 + C52707 * C637 + C52962 * C1882 +
                C52708 * C2509) *
                   C80639) *
                  C81009 * C81011 * C80628 * C83 -
              ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 +
                C52707 * C638) *
                   C80639 +
               (C52962 * C1682 + C52708 * C2293 + C52961 * C100 +
                C52707 * C492) *
                   C220) *
                  C81009 * C81011 * C80628 * C84 +
              ((C52961 * C101 + C52707 * C493 + C52962 * C1683 +
                C52708 * C2295) *
                   C220 +
               (C52961 * C223 + C52707 * C639 + C52962 * C1885 +
                C52708 * C2513) *
                   C80639) *
                  C81009 * C81011 * C80628 * C85 -
              ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 +
                C52707 * C640) *
                   C80639 +
               (C52962 * C1685 + C52708 * C2296 + C52961 * C102 +
                C52707 * C494) *
                   C220) *
                  C81009 * C81011 * C80628 * C86 +
              ((C52961 * C103 + C52707 * C495 + C52962 * C3283 +
                C52708 * C3719) *
                   C220 +
               (C52961 * C225 + C52707 * C641 + C52962 * C3423 +
                C52708 * C3865) *
                   C80639) *
                  C81009 * C81011 * C80628 * C87) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 +
                 C52708 * C2294) *
                    C220 +
                (C52961 * C221 + C52707 * C637 + C52962 * C1882 +
                 C52708 * C2509) *
                    C80639) *
                   C81009 * C81011 * C81003 -
               ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
                 C52707 * C1578) *
                    C80639 +
                (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
                 C52707 * C1358) *
                    C220) *
                   C81009 * C81011 * C80988 +
               ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 +
                 C52708 * C6656) *
                    C220 +
                (C52961 * C947 + C52707 * C1579 + C52962 * C6324 +
                 C52708 * C6821) *
                    C80639) *
                   C81009 * C81011 * C80962) *
                  C737 +
              (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 +
                 C52708 * C4656) *
                    C220 +
                (C52961 * C945 + C52707 * C1577 + C52962 * C4200 +
                 C52708 * C4890) *
                    C80639) *
                   C81009 * C81011 * C80988 -
               ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 +
                 C52707 * C638) *
                    C80639 +
                (C52962 * C1682 + C52708 * C2293 + C52961 * C100 +
                 C52707 * C492) *
                    C220) *
                   C81009 * C81011 * C81003 -
               ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 +
                 C52707 * C1580) *
                    C80639 +
                (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
                 C52707 * C1362) *
                    C220) *
                   C81009 * C81011 * C80962) *
                  C738 +
              (((C52961 * C101 + C52707 * C493 + C52962 * C1683 +
                 C52708 * C2295) *
                    C220 +
                (C52961 * C223 + C52707 * C639 + C52962 * C1885 +
                 C52708 * C2513) *
                    C80639) *
                   C81009 * C81011 * C81003 -
               ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 +
                 C52707 * C1581) *
                    C80639 +
                (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
                 C52707 * C1359) *
                    C220) *
                   C81009 * C81011 * C80988 +
               ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 +
                 C52708 * C8211) *
                    C220 +
                (C52961 * C950 + C52707 * C1582 + C52962 * C7791 +
                 C52708 * C8425) *
                    C80639) *
                   C81009 * C81011 * C80962) *
                  C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C1878 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C81004 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C1879 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80990 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C1880 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C80628 * C737 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C1879 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C81004 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C1878) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C80990 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C1880 -
           (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
            C52707 * C2512) *
               C80965) *
              C81009 * C81011 * C80628 * C738 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C1878 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C81004 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C1879 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C80990 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C1880 +
           (C52961 * C1886 + C52707 * C2514 + C52962 * C12027 +
            C52708 * C12465) *
               C80965) *
              C81009 * C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80998 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C4985 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C4984 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80962) *
              C80982 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C220 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80639) *
              C81009 * C81011 * C5652 -
          ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
               C80639 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C220) *
              C81009 * C81011 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C220 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C80639) *
              C81009 * C81011 * C5654 -
          ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 + C52707 * C6060) *
               C80639 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C220) *
              C81009 * C81011 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C220 +
           (C52961 * C5773 + C52707 * C6061 + C52962 * C34628 +
            C52708 * C35051) *
               C80639) *
              C81009 * C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C1878 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C81004 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C1879 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80990 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C1880 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C4984 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C1879 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C81004 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C1878) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C80990 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C1880 -
           (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
            C52707 * C6819) *
               C80965) *
              C81009 * C81011 * C4985 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C1878 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C81004 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C1879 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C80990 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C1880 +
           (C52961 * C6325 + C52707 * C6822 + C52962 * C38526 +
            C52708 * C38953) *
               C80965) *
              C81009 * C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C9284 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C9133 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C9285 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C9134 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C9286 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C80628 * C80998 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C9285 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C9133 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C9284) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C9134 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C9286 -
           (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
            C52707 * C2512) *
               C80965) *
              C81009 * C81011 * C80628 * C80982 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C9284 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C9133 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C9285 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C9134 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C9286 +
           (C52961 * C1886 + C52707 * C2514 + C52962 * C12027 +
            C52708 * C12465) *
               C80965) *
              C81009 * C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C9284 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C9133 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C9285 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C9134 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C9286 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C81003 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C9285 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C9133 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C9284) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C9134 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C9286 -
           (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
            C52707 * C6819) *
               C80965) *
              C81009 * C81011 * C80988 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C9284 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C9133 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C9285 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C9134 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C9286 +
           (C52961 * C6325 + C52707 * C6822 + C52962 * C38526 +
            C52708 * C38953) *
               C80965) *
              C81009 * C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C10576 +
          (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
              C10463 -
          (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
              C10577 -
          (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
              C10464 +
          (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
           C52708 * C10774) *
              C10578 +
          (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
           C52708 * C10869) *
              C10465 -
          (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
           C52707 * C10774) *
              C10579 -
          (C52962 * C10583 + C52708 * C10870 + C52961 * C10582 +
           C52707 * C10869) *
              C10466 +
          (C52961 * C10470 + C52707 * C10775 + C52962 * C61979 +
           C52708 * C62307) *
              C10580 +
          (C52961 * C10583 + C52707 * C10870 + C52962 * C62095 +
           C52708 * C62394) *
              C10467) *
         C81009 * C81011 * C80628 * C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C59128 + C59129 - C59130 - C59131) * C81011 * C52708) *
                         C80933 +
                     ((C59130 - (C59129 + C59128) + C59131) * C81011 * C52707 +
                      (C53818 * C78260 - (C53819 * C80916 + C53820 * C78279) +
                       C53821 * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C4984 +
                    (((C32928 - (C32927 + C32926) + C32929) * C81011 * C52707 +
                      (C33590 - (C33591 + C33592) + C33593) * C81011 * C52708) *
                         C80933 +
                     ((C33592 + C33591 - C33590 - C33593) * C81011 * C52707 +
                      (C36908 + C36909 - C36916 - C36917) * C81011 * C52708) *
                         C80726) *
                        C4985 +
                    (((C32932 + C32931 - C32930 - C32933) * C81011 * C52707 +
                      (C33594 + C33595 - C33602 - C33603) * C81011 * C52708) *
                         C80933 +
                     ((C33602 - (C33595 + C33594) + C33603) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C78260 -
                       (C32162 * C80916 + C32163 * C78279) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C55176 + C55177 - C55178 - C55179 + C55180 + C55181 -
                      C55188 - C55189) *
                         C81011 * C52708) *
                        C80933 +
                    ((C55178 - (C55177 + C55176) + C55179 - C55180 - C55181 +
                      C55188 + C55189) *
                         C81011 * C52707 +
                     (C53818 * C2614 - (C53819 * C2607 + C53820 * C2613) +
                      C53821 * C2608 - C53822 * C2615 - C53823 * C2609 +
                      (C26926 * C1689 + C81009 * C1704) * C2616 +
                      (C26926 * C1705 + C81009 * C1713) * C80966) *
                         C81011 * C52708) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C78279 +
                      (C26926 * C107 + C81009 * C117) * C80916 -
                      (C26926 * C100 + C81009 * C106) * C78260 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C81011 * C52707 +
                     (C59128 + C59129 - C59130 - C59131) * C81011 * C52708) *
                        C11881 +
                    ((C59130 - (C59129 + C59128) + C59131) * C81011 * C52707 +
                     (C62494 - (C62495 + C62496) + C62497) * C81011 * C52708) *
                        C11882 +
                    ((C62496 + C62495 - C62494 - C62497) * C81011 * C52707 +
                     (C63368 + C63369 - C63376 - C63377) * C81011 * C52708) *
                        C11883 +
                    ((C63376 - (C63369 + C63368) + C63377) * C81011 * C52707 +
                     ((C26926 * C10471 + C81009 * C10477) * C78260 -
                      (C61994 * C80916 + C61995 * C78279) +
                      (C26926 * C10479 + C81009 * C10483) * C80598) *
                         C81011 * C52708) *
                        C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5064 +
             (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
             C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
                C81011 * C52707 +
            (C57846 + C57847 - C57848 - C57849 + C57850 + C57851) * C81011 *
                C52708) *
               C80916 +
           ((C27366 * C5065 -
             ((C26926 * C167 + C81009 * C173) * C4984 +
              (C26926 * C100 + C81009 * C106) * C5064) +
             C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
                C81011 * C52707 +
            (C59230 - (C59231 + C59232) + C59233 - C59234 - C59235) * C81011 *
                C52708) *
               C80598) *
              C80933 +
          (((C57848 - (C57847 + C57846) + C57849 - C57850 - C57851) * C81011 *
                C52707 +
            (C57852 - (C57853 + C57854) + C57855 - C57856 - C57857) * C81011 *
                C52708) *
               C80916 +
           ((C59232 + C59231 - C59230 - C59233 + C59234 + C59235) * C81011 *
                C52707 +
            (C53818 * C5064 + C53931 * C4984 - C36914 * C5065 - C37018 * C4985 +
             (C26926 * C6142 + C81009 * C6152) * C5066 +
             (C26926 * C6240 + C81009 * C6246) * C80962) *
                C81011 * C52708) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C2607 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C2608 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C81011 * C52707 +
            (C53916 + C53936) * C81011 * C52708) *
               C2609 -
           ((C55260 + C55258) * C81011 * C52708 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C81011 * C52707) *
               C80966) *
              C80933 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C2608 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C2607 -
           ((C53939 + C53927) * C81011 * C52708 +
            (C53936 + C53916) * C81011 * C52707) *
               C2609 +
           ((C55258 + C55260) * C81011 * C52707 +
            ((C26926 * C1689 + C81009 * C1704) * C165 +
             (C26926 * C1795 + C81009 * C1803) * C80628) *
                C81011 * C52708) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C80916 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C80598) *
              C11881 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C80598 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C80916) *
              C11882 +
          (((C53924 + C53938) * C81011 * C52707 +
            (C62044 + C62052) * C81011 * C52708) *
               C80916 -
           ((C63448 + C63446) * C81011 * C52708 +
            (C53937 + C53919) * C81011 * C52707) *
               C80598) *
              C11883 +
          (((C63446 + C63448) * C81011 * C52707 +
            ((C26926 * C10471 + C81009 * C10477) * C165 +
             (C26926 * C10529 + C81009 * C10533) * C80628) *
                C81011 * C52708) *
               C80598 -
           ((C62053 + C62049) * C81011 * C52708 +
            (C62052 + C62044) * C81011 * C52707) *
               C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       C53812 * C3422 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C4984 +
                     ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                      (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C4985 +
                     ((C33805 + C33804 - C33803 - C33806) * C81011 * C52707 +
                      (C32160 * C3421 + C32347 * C80933 - C32163 * C3422 -
                       C32348 * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C80916 +
                    (((C53814 * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C4984 +
                     ((C30286 + C30285 - C30284 - C30298) * C81011 * C52707 +
                      (C30062 * C3421 + C30295 * C80933 - C36914 * C3422 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C4985 +
                     ((C33809 - (C33808 + C33807) + C33813) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C3422 -
                       (C33812 * C80933 + C33600 * C3421) +
                       (C26926 * C6326 + C81009 * C6332) * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      C53812 * C3422 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C80628 * C2607 +
                    ((C53814 * C3422 -
                      ((C26926 * C222 + C81009 * C228) * C80933 +
                       (C26926 * C100 + C81009 * C106) * C3421) +
                      C54028 * C80726) *
                         C81011 * C52707 +
                     (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                      C54029 * C80726) *
                         C81011 * C52708) *
                        C80628 * C2608 +
                    (((C26926 * C101 + C81009 * C109) * C3421 +
                      (C26926 * C223 + C81009 * C229) * C80933 -
                      C53816 * C3422 - C54030 * C80726) *
                         C81011 * C52707 +
                     (C53816 * C3421 + C54030 * C80933 - C53822 * C3422 -
                      C54031 * C80726) *
                         C81011 * C52708) *
                        C80628 * C2609 +
                    ((C55186 * C3422 -
                      ((C26926 * C224 + C81009 * C230) * C80933 +
                       (C26926 * C102 + C81009 * C111) * C3421) +
                      C55329 * C80726) *
                         C81011 * C52707 +
                     ((C26926 * C1689 + C81009 * C1704) * C3422 -
                      (C55329 * C80933 + C55186 * C3421) +
                      (C26926 * C1888 + C81009 * C1896) * C80726) *
                         C81011 * C52708) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C12023 +
                      (C26926 * C221 + C81009 * C227) * C11881 -
                      C53812 * C12024 - C54026 * C11882 + C53820 * C12025 +
                      C54027 * C11883 - C61992 * C12026 - C62102 * C80978) *
                         C81011 * C52707 +
                     (C53812 * C12023 + C54026 * C11881 - C53820 * C12024 -
                      C54027 * C11882 + C61992 * C12025 + C62102 * C11883 -
                      C61995 * C12026 - C62103 * C80978) *
                         C81011 * C52708) *
                        C80628 * C80916 +
                    ((C53814 * C12024 -
                      ((C26926 * C222 + C81009 * C228) * C11881 +
                       (C26926 * C100 + C81009 * C106) * C12023) +
                      C54028 * C11882 - C53818 * C12025 - C54029 * C11883 +
                      C63374 * C12026 + C63517 * C80978) *
                         C81011 * C52707 +
                     (C53818 * C12024 - (C54028 * C11881 + C53814 * C12023) +
                      C54029 * C11882 - C63374 * C12025 - C63517 * C11883 +
                      (C26926 * C10471 + C81009 * C10477) * C12026 +
                      (C26926 * C10584 + C81009 * C10588) * C80978) *
                         C81011 * C52708) *
                        C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[63] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C78279 +
                       (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
                       C306 * C80598) *
                          C52707 +
                      (C59432 + C59433 - C59434 - C59435) * C52708) *
                         C81009 * C80933 +
                     ((C59434 - (C59433 + C59432) + C59435) * C52707 +
                      (C2008 * C78260 - (C54124 * C80916 + C54125 * C78279) +
                       C2009 * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C4984 +
                    (((C1068 * C78260 -
                       ((C275 * C757 + C81011 * C1043) * C80916 +
                        (C275 * C748 + C81011 * C1036) * C78279) +
                       C1069 * C80598) *
                          C52707 +
                      (C59436 - (C59437 + C59438) + C59439) * C52708) *
                         C81009 * C80933 +
                     ((C59438 + C59437 - C59436 - C59439) * C52707 +
                      (C58024 * C78279 + C58025 * C80916 - C11280 * C78260 -
                       C11281 * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C4985 +
                    ((((C275 * C750 + C81011 * C1039) * C78279 +
                       (C275 * C764 + C81011 * C1047) * C80916 -
                       C1072 * C78260 - C1073 * C80598) *
                          C52707 +
                      (C59440 + C59441 - C59442 - C59443) * C52708) *
                         C81009 * C80933 +
                     ((C59442 - (C59441 + C59440) + C59443) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C78260 -
                       (C58028 * C80916 + C58029 * C78279) +
                       (C275 * C6154 + C81011 * C6418) * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C2613 +
                      (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
                      C306 * C2608 + C307 * C2615 + C308 * C2609 -
                      C309 * C2616 - C310 * C80966) *
                         C52707 +
                     (C55396 + C55397 - C55398 - C55399 + C55400 + C55401 -
                      C55402 - C55403) *
                         C52708) *
                        C81009 * C80933 +
                    ((C55398 - (C55397 + C55396) + C55399 - C55400 - C55401 +
                      C55402 + C55403) *
                         C52707 +
                     (C2008 * C2614 - (C54124 * C2607 + C54125 * C2613) +
                      C2009 * C2608 - C2010 * C2615 - C2011 * C2609 +
                      (C275 * C1689 + C81011 * C1978) * C2616 +
                      (C275 * C1705 + C81011 * C1986) * C80966) *
                         C52708) *
                        C81009 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C78279 +
                      (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
                      C306 * C80598) *
                         C52707 +
                     (C59432 + C59433 - C59434 - C59435) * C52708) *
                        C81009 * C11881 +
                    ((C59434 - (C59433 + C59432) + C59435) * C52707 +
                     (C62800 - (C62801 + C62802) + C62803) * C52708) *
                        C81009 * C11882 +
                    ((C62802 + C62801 - C62800 - C62803) * C52707 +
                     (C63584 + C63585 - C63586 - C63587) * C52708) *
                        C81009 * C11883 +
                    ((C63586 - (C63585 + C63584) + C63587) * C52707 +
                     ((C275 * C10471 + C81011 * C10634) * C78260 -
                      (C62158 * C80916 + C62159 * C78279) +
                      (C275 * C10479 + C81011 * C10638) * C80598) *
                         C52708) *
                        C81009 * C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5064 +
             (C275 * C166 + C81011 * C354) * C4984 -
             (C275 * C748 + C81011 * C1036) * C5065 -
             (C275 * C856 + C81011 * C1149) * C4985 +
             (C275 * C750 + C81011 * C1039) * C5066 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C52707 +
            (C58110 + C58111 - C58112 - C58113 + C58114 + C58128) * C52708) *
               C81009 * C80916 +
           ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C52707 +
            (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C52708) *
               C81009 * C80598) *
              C80933 +
          (((C58112 - (C58111 + C58110) + C58113 - C58114 - C58128) * C52707 +
            (C58117 - (C58118 + C58119) + C58129 - C58122 - C58130) * C52708) *
               C81009 * C80916 +
           ((C8001 + C8000 - C7999 - C8002 + C8003 + C8007) * C52707 +
            (C2008 * C5064 + C2108 * C4984 - C11280 * C5065 - C11386 * C4985 +
             (C275 * C6142 + C81011 * C6412) * C5066 +
             (C275 * C6240 + C81011 * C6498) * C80962) *
                C52708) *
               C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C2607 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C2608 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C2609 -
           ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 *
               C80966) *
              C80933 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C2608 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C2607 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C2609 +
           ((C3569 + C3571) * C52707 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C52708) *
               C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C80916 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C80598) *
              C11881 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C80598 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C80916) *
              C11882 +
          (((C54209 + C54213) * C52707 + (C62207 + C62215) * C52708) * C81009 *
               C80916 -
           ((C12175 + C12171) * C52708 + (C2112 + C2100) * C52707) * C81009 *
               C80598) *
              C11883 +
          (((C12171 + C12175) * C52707 +
            ((C275 * C10471 + C81011 * C10634) * C165 +
             (C275 * C10529 + C81011 * C10684) * C80628) *
                C52708) *
               C81009 * C80598 -
           ((C62216 + C62212) * C52708 + (C62215 + C62207) * C52707) * C81009 *
               C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C3421 +
             (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
             C54292 * C80726) *
                C52707 +
            (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
             C54293 * C80726) *
                C52708) *
               C81009 * C4984 +
           ((C56147 * C3422 -
             ((C275 * C946 + C81011 * C1256) * C80933 +
              (C275 * C748 + C81011 * C1036) * C3421) +
             C56355 * C80726) *
                C52707 +
            (C58024 * C3422 - (C56355 * C80933 + C56147 * C3421) +
             C58211 * C80726) *
                C52708) *
               C81009 * C4985 +
           (((C275 * C750 + C81011 * C1039) * C3421 +
             (C275 * C947 + C81011 * C1257) * C80933 - C58026 * C3422 -
             C58212 * C80726) *
                C52707 +
            (C58026 * C3421 + C58212 * C80933 - C58029 * C3422 -
             C58213 * C80726) *
                C52708) *
               C81009 * C80962) *
              C80916 +
          (((C3641 - (C3640 + C3639) + C3642) * C52707 +
            (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) +
             C2213 * C80726) *
                C52708) *
               C81009 * C4984 +
           ((C4546 + C4545 - C4544 - C4556) * C52707 +
            (C4322 * C3421 + C4554 * C80933 - C11280 * C3422 -
             C11494 * C80726) *
                C52708) *
               C81009 * C4985 +
           ((C8109 - (C8108 + C8107) + C8113) * C52707 +
            ((C275 * C6142 + C81011 * C6412) * C3422 -
             (C8112 * C80933 + C7898 * C3421) +
             (C275 * C6326 + C81011 * C6578) * C80726) *
                C52708) *
               C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C3421 +
            (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
            C54292 * C80726) *
               C52707 +
           (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
            C54293 * C80726) *
               C52708) *
              C81009 * C80628 * C2607 +
          ((C3641 - (C3640 + C3639) + C3642) * C52707 +
           (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) + C2213 * C80726) *
               C52708) *
              C81009 * C80628 * C2608 +
          ((C3645 + C3644 - C3643 - C3646) * C52707 +
           (C2006 * C3421 + C2214 * C80933 - C2010 * C3422 - C2215 * C80726) *
               C52708) *
              C81009 * C80628 * C2609 +
          ((C3649 - (C3648 + C3647) + C3653) * C52707 +
           ((C275 * C1689 + C81011 * C1978) * C3422 -
            (C3652 * C80933 + C3498 * C3421) +
            (C275 * C1888 + C81011 * C2194) * C80726) *
               C52708) *
              C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C12023 +
            (C275 * C221 + C81011 * C422) * C11881 - C54122 * C12024 -
            C54292 * C11882 + C54125 * C12025 + C54293 * C11883 -
            C62156 * C12026 - C62264 * C80978) *
               C52707 +
           (C54122 * C12023 + C54292 * C11881 - C54125 * C12024 -
            C54293 * C11882 + C62156 * C12025 + C62264 * C11883 -
            C62159 * C12026 - C62265 * C80978) *
               C52708) *
              C81009 * C80628 * C80916 +
          ((C12245 - (C12244 + C12243) + C12246 - C12247 - C12248 + C12249 +
            C12253) *
               C52707 +
           (C2008 * C12024 - (C2212 * C11881 + C2004 * C12023) +
            C2213 * C11882 - C12102 * C12025 - C12252 * C11883 +
            (C275 * C10471 + C81011 * C10634) * C12026 +
            (C275 * C10584 + C81011 * C10730) * C80978) *
               C52708) *
              C81009 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78279 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80916 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78260 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78260 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80916 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78279) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80726) *
              C4984 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78260 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80916 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78279) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78279 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80916 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78260 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80726) *
              C4985 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C78279 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80916 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C78260 -
            (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C78260 -
            ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
              C52707 * C6662) *
                 C80916 +
             (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
              C52707 * C6656) *
                 C78279) +
            (C52961 * C6147 + C52707 * C6661 + C52962 * C6154 +
             C52708 * C6664) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C2613 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C2607 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C2614 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C2608 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C2615 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C2609 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C2616 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C80933 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C2614 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C2607 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C2613) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C2608 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C2615 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C2609 +
           (C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C2616 +
           (C52961 * C1697 + C52707 * C2304 + C52962 * C1705 + C52708 * C2308) *
               C80966) *
              C81009 * C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78279 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80916 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C78260 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80598) *
              C81009 * C81011 * C11881 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C78260 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80916 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C78279) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C80598) *
              C81009 * C81011 * C11882 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C78279 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C80916 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C78260 -
           (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
            C52707 * C2306) *
               C80598) *
              C81009 * C81011 * C11883 +
          ((C52961 * C10468 + C52707 * C10773 + C52962 * C10471 +
            C52708 * C10776) *
               C78260 -
           ((C52962 * C10478 + C52708 * C10779 + C52961 * C10473 +
             C52707 * C10778) *
                C80916 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C78279) +
           (C52961 * C10472 + C52707 * C10777 + C52962 * C10479 +
            C52708 * C10780) *
               C80598) *
              C81009 * C81011 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5064 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C4984 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5065 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C4985 +
            (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5066 +
            (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
                C80962) *
               C81009 * C81011 * C80916 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C5065 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C4984 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C5064) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C4985 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C5066 -
            (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
                C80962) *
               C81009 * C81011 * C80598) *
              C80933 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5065 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C4984 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C5064) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C4985 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5066 -
            (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 +
             C52707 * C6739) *
                C80962) *
               C81009 * C81011 * C80916 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C5064 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C4984 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C5065 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C4985 +
            (C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C5066 +
            (C52961 * C6235 + C52707 * C6740 + C52962 * C6240 +
             C52708 * C6744) *
                C80962) *
               C81009 * C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C2607 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C2608 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C2609 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C80628 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C165) *
               C81009 * C81011 * C80966) *
              C80933 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C2608 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C2607 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C2609 +
           ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 +
             C52708 * C2300) *
                C165 +
            (C52961 * C1791 + C52707 * C2410 + C52962 * C1795 +
             C52708 * C2414) *
                C80628) *
               C81009 * C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C80916 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C80598) *
              C11881 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C80598 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C80916) *
              C11882 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C165 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80628) *
               C81009 * C81011 * C80916 -
           ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
             C52707 * C2412) *
                C80628 +
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C165) *
               C81009 * C81011 * C80598) *
              C11883 +
          (((C52961 * C10468 + C52707 * C10773 + C52962 * C10471 +
             C52708 * C10776) *
                C165 +
            (C52961 * C10526 + C52707 * C10823 + C52962 * C10529 +
             C52708 * C10826) *
                C80628) *
               C81009 * C81011 * C80598 -
           ((C52962 * C10528 + C52708 * C10825 + C52961 * C10527 +
             C52707 * C10824) *
                C80628 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C165) *
               C81009 * C81011 * C80916) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C3421 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80933 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C3422 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C4984 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C3422 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80933 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C3421) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C4985 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C3421 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80933 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C3422 -
            (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 +
             C52707 * C6821) *
                C80726) *
               C81009 * C81011 * C80962) *
              C80916 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C3422 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80933 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C3421) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C4984 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C3421 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80933 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C3422 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C4985 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C3422 -
            ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 +
              C52707 * C1580) *
                 C80933 +
             (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
              C52707 * C1362) *
                 C3421) +
            (C52961 * C6323 + C52707 * C6823 + C52962 * C6326 +
             C52708 * C6824) *
                C80726) *
               C81009 * C81011 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C3421 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80933 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C3422 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C80628 * C2607 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C3422 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80933 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C3421) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C80726) *
              C81009 * C81011 * C80628 * C2608 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C3421 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C80933 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C3422 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C80726) *
              C81009 * C81011 * C80628 * C2609 +
          ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C3422 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C80933 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C3421) +
           (C52961 * C1887 + C52707 * C2515 + C52962 * C1888 + C52708 * C2516) *
               C80726) *
              C81009 * C81011 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C12023 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C11881 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C12024 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C11882 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C12025 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C11883 -
           (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
            C52707 * C10774) *
               C12026 -
           (C52962 * C10583 + C52708 * C10870 + C52961 * C10582 +
            C52707 * C10869) *
               C80978) *
              C81009 * C81011 * C80628 * C80916 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C12024 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C11881 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C12023) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C11882 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C12025 -
           (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
            C52707 * C2512) *
               C11883 +
           (C52961 * C10468 + C52707 * C10773 + C52962 * C10471 +
            C52708 * C10776) *
               C12026 +
           (C52961 * C10581 + C52707 * C10871 + C52962 * C10584 +
            C52708 * C10872) *
               C80978) *
              C81009 * C81011 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C743 +
            (C26926 * C1693 + C81009 * C1707) * C737 -
            (C26926 * C1682 + C81009 * C1690) * C744 -
            (C26926 * C1692 + C81009 * C1706) * C738 +
            (C26926 * C1683 + C81009 * C1691) * C745 +
            (C26926 * C1695 + C81009 * C1708) * C80954) *
               C81011 * C52708) *
              C80639 * C81003 +
          ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C81011 *
               C52707 +
           (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) * C81011 *
               C52708) *
              C80639 * C80988 +
          ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C81011 *
               C52707 +
           (C32160 * C743 + C32161 * C737 - C33600 * C744 - C33601 * C738 +
            (C26926 * C7589 + C81009 * C7590) * C745 +
            (C26926 * C7591 + C81009 * C7592) * C80954) *
               C81011 * C52708) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C94 +
           (C26926 * C107 + C81009 * C117) * C83 -
           (C26926 * C100 + C81009 * C106) * C95 -
           (C26926 * C108 + C81009 * C118) * C84 +
           (C26926 * C101 + C81009 * C109) * C96 +
           (C26926 * C110 + C81009 * C119) * C85 -
           (C26926 * C102 + C81009 * C111) * C97 -
           (C26926 * C112 + C81009 * C120) * C86 +
           (C26926 * C103 + C81009 * C113) * C98 +
           (C26926 * C114 + C81009 * C121) * C87) *
              C81011 * C52707 +
          ((C26926 * C1684 + C81009 * C1694) * C94 +
           (C26926 * C1693 + C81009 * C1707) * C83 -
           (C26926 * C1682 + C81009 * C1690) * C95 -
           (C26926 * C1692 + C81009 * C1706) * C84 +
           (C26926 * C1683 + C81009 * C1691) * C96 +
           (C26926 * C1695 + C81009 * C1708) * C85 -
           (C26926 * C1685 + C81009 * C1696) * C97 -
           (C26926 * C1697 + C81009 * C1709) * C86 +
           (C26926 * C3283 + C81009 * C3284) * C98 +
           (C26926 * C3285 + C81009 * C3286) * C87) *
              C81011 * C52708) *
         C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C53812 * C4987 + C53813 * C80998 - C53814 * C4988 -
            C53815 * C80982 + C53816 * C4989 + C53817 * C80954) *
               C81011 * C52708) *
              C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C81011 *
               C52707 +
           (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C81011 *
               C52708) *
              C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C81011 *
               C52707 +
           (C32160 * C4987 + C32161 * C80998 - C33600 * C4988 -
            C33601 * C80982 + (C26926 * C7589 + C81009 * C7590) * C4989 +
            (C26926 * C7591 + C81009 * C7592) * C80954) *
               C81011 * C52708) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C81011 * C52707 +
           (C53812 * C5657 + C53813 * C80588) * C81011 * C52708) *
              C80639 * C5652 -
          ((C32144 + C32145) * C81011 * C52708 +
           (C31647 + C31646) * C81011 * C52707) *
              C80639 * C5653 +
          ((C31649 + C31648) * C81011 * C52707 +
           (C32166 + C32167) * C81011 * C52708) *
              C80639 * C5654 -
          ((C34490 + C34491) * C81011 * C52708 +
           (C31663 + C31662) * C81011 * C52707) *
              C80639 * C5655 +
          ((C31665 + C31664) * C81011 * C52707 +
           ((C26926 * C34479 + C81009 * C34480) * C5657 +
            (C26926 * C34481 + C81009 * C34482) * C80588) *
               C81011 * C52708) *
              C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C60632 + C60633 - C60634 - C60635 + C60636 + C60637) * C81011 *
               C52708) *
              C9133 +
          ((C60634 - (C60633 + C60632) + C60635 - C60636 - C60637) * C81011 *
               C52707 +
           (C60638 - (C60639 + C60640) + C60641 - C60642 - C60643) * C81011 *
               C52708) *
              C9134 +
          ((C60640 + C60639 - C60638 - C60641 + C60642 + C60643) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C4987 +
            (C26926 * C10473 + C81009 * C10481) * C80998 -
            (C26926 * C10468 + C81009 * C10474) * C4988 -
            (C26926 * C10472 + C81009 * C10480) * C80982 +
            (C26926 * C11885 + C81009 * C11886) * C4989 +
            (C26926 * C11887 + C81009 * C11888) * C80954) *
               C81011 * C52708) *
              C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C9133 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C9134 +
           ((C57771 + C57770) * C81011 * C52707 +
            ((C26926 * C10469 + C81009 * C10475) * C5657 +
             (C26926 * C10473 + C81009 * C10481) * C80588) *
                C81011 * C52708) *
               C80965) *
              C81003 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C9134 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C9133 -
           ((C38388 + C38389) * C81011 * C52708 +
            (C32165 + C32164) * C81011 * C52707) *
               C80965) *
              C80988 +
          (((C31649 + C31648) * C81011 * C52707 +
            (C32166 + C32167) * C81011 * C52708) *
               C9133 -
           ((C32168 + C32169) * C81011 * C52708 +
            (C32167 + C32166) * C81011 * C52707) *
               C9134 +
           ((C32169 + C32168) * C81011 * C52707 +
            ((C26926 * C38377 + C81009 * C38378) * C5657 +
             (C26926 * C38379 + C81009 * C38380) * C80588) *
                C81011 * C52708) *
               C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C852 +
            (C26926 * C1790 + C81009 * C1798) * C81003 - C30064 * C853 -
            C30178 * C80988 + C32160 * C854 + C32252 * C80962) *
               C81011 * C52708) *
              C737 +
          ((C27366 * C853 -
            ((C26926 * C167 + C81009 * C173) * C81003 +
             (C26926 * C100 + C81009 * C106) * C852) +
            C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
               C81011 * C52707 +
           (C30062 * C853 -
            ((C26926 * C1788 + C81009 * C1796) * C81003 +
             (C26926 * C1682 + C81009 * C1690) * C852) +
            C30179 * C80988 - C33600 * C854 - C33704 * C80962) *
               C81011 * C52708) *
              C738 +
          (((C26926 * C101 + C81009 * C109) * C852 +
            (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
            C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C852 +
            (C26926 * C1789 + C81009 * C1797) * C81003 - C30066 * C853 -
            C30180 * C80988 + (C26926 * C7589 + C81009 * C7590) * C854 +
            (C26926 * C7691 + C81009 * C7692) * C80962) *
               C81011 * C52708) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C165 +
            (C26926 * C1790 + C81009 * C1798) * C80628) *
               C81011 * C52708) *
              C83 -
          (((C26926 * C1788 + C81009 * C1796) * C80628 +
            (C26926 * C1682 + C81009 * C1690) * C165) *
               C81011 * C52708 +
           ((C26926 * C167 + C81009 * C173) * C80628 +
            (C26926 * C100 + C81009 * C106) * C165) *
               C81011 * C52707) *
              C84 +
          (((C26926 * C101 + C81009 * C109) * C165 +
            (C26926 * C168 + C81009 * C174) * C80628) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C165 +
            (C26926 * C1789 + C81009 * C1797) * C80628) *
               C81011 * C52708) *
              C85 -
          (((C26926 * C1791 + C81009 * C1799) * C80628 +
            (C26926 * C1685 + C81009 * C1696) * C165) *
               C81011 * C52708 +
           ((C26926 * C169 + C81009 * C175) * C80628 +
            (C26926 * C102 + C81009 * C111) * C165) *
               C81011 * C52707) *
              C86 +
          (((C26926 * C103 + C81009 * C113) * C165 +
            (C26926 * C170 + C81009 * C176) * C80628) *
               C81011 * C52707 +
           ((C26926 * C3283 + C81009 * C3284) * C165 +
            (C26926 * C3353 + C81009 * C3354) * C80628) *
               C81011 * C52708) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C81011 * C52707 +
           (C53812 * C5064 + C53928 * C4984 - C30064 * C5065 - C30178 * C4985 +
            C32160 * C5066 + C32252 * C80962) *
               C81011 * C52708) *
              C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C81011 * C52707 +
           (C30062 * C5065 - (C53929 * C4984 + C53814 * C5064) +
            C30179 * C4985 - C33600 * C5066 - C33704 * C80962) *
               C81011 * C52708) *
              C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C81011 * C52707 +
           (C53816 * C5064 + C53930 * C4984 - C30066 * C5065 - C30180 * C4985 +
            (C26926 * C7589 + C81009 * C7590) * C5066 +
            (C26926 * C7691 + C81009 * C7692) * C80962) *
               C81011 * C52708) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C81011 * C52707 +
          (C53812 * C5716 + C53928 * C5652 - C30064 * C5717 - C30178 * C5653 +
           C32160 * C5718 + C32252 * C5654 - C34489 * C5719 - C34562 * C5655 +
           (C26926 * C34479 + C81009 * C34480) * C5720 +
           (C26926 * C34557 + C81009 * C34558) * C5656) *
              C81011 * C52708) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C80998 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C80982 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C81011 * C52707 +
            (C53916 + C53936) * C81011 * C52708) *
               C80954) *
              C9133 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C80982 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C80998 -
           ((C53939 + C53927) * C81011 * C52708 +
            (C53936 + C53916) * C81011 * C52707) *
               C80954) *
              C9134 +
          (((C53924 + C53938) * C81011 * C52707 +
            ((C26926 * C10469 + C81009 * C10475) * C165 +
             (C26926 * C10527 + C81009 * C10531) * C80628) *
                C81011 * C52708) *
               C80998 -
           (((C26926 * C10526 + C81009 * C10530) * C80628 +
             (C26926 * C10468 + C81009 * C10474) * C165) *
                C81011 * C52708 +
            (C53937 + C53919) * C81011 * C52707) *
               C80982 +
           ((C53927 + C53939) * C81011 * C52707 +
            ((C26926 * C11885 + C81009 * C11886) * C165 +
             (C26926 * C11955 + C81009 * C11956) * C80628) *
                C81011 * C52708) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C81011 * C52707 +
           (C61396 + C61397 - C61398 - C61399 + C61400 + C61401) * C81011 *
               C52708) *
              C80588 * C9133 +
          ((C61398 - (C61397 + C61396) + C61399 - C61400 - C61401) * C81011 *
               C52707 +
           (C61402 - (C61403 + C61404) + C61405 - C61406 - C61407) * C81011 *
               C52708) *
              C80588 * C9134 +
          ((C61404 + C61403 - C61402 - C61405 + C61406 + C61407) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C852 +
            (C26926 * C10527 + C81009 * C10531) * C81003 - C38387 * C853 -
            C38460 * C80988 + (C26926 * C38377 + C81009 * C38378) * C854 +
            (C26926 * C38455 + C81009 * C38456) * C80962) *
               C81011 * C52708) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            ((C26926 * C1684 + C81009 * C1694) * C220 +
             (C26926 * C1882 + C81009 * C1890) * C80639) *
                C81011 * C52708) *
               C81003 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C80988 +
           ((C27559 + C27579) * C81011 * C52707 +
            (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
               C80962) *
              C737 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C80988 -
           (((C26926 * C1881 + C81009 * C1889) * C80639 +
             (C26926 * C1682 + C81009 * C1690) * C220) *
                C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C81003 -
           ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
            (C27581 + C27563) * C81011 * C52707) *
               C80962) *
              C738 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C81011 * C52707 +
            ((C26926 * C1683 + C81009 * C1691) * C220 +
             (C26926 * C1885 + C81009 * C1893) * C80639) *
                C81011 * C52708) *
               C81003 -
           ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
            (C27582 + C27566) * C81011 * C52707) *
               C80988 +
           ((C27571 + C27583) * C81011 * C52707 +
            ((C26926 * C7589 + C81009 * C7590) * C220 +
             (C26926 * C7791 + C81009 * C7792) * C80639) *
                C81011 * C52708) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C220 +
            (C26926 * C1882 + C81009 * C1890) * C80639) *
               C81011 * C52708) *
              C80628 * C83 -
          (((C26926 * C1881 + C81009 * C1889) * C80639 +
            (C26926 * C1682 + C81009 * C1690) * C220) *
               C81011 * C52708 +
           ((C26926 * C222 + C81009 * C228) * C80639 +
            (C26926 * C100 + C81009 * C106) * C220) *
               C81011 * C52707) *
              C80628 * C84 +
          (((C26926 * C101 + C81009 * C109) * C220 +
            (C26926 * C223 + C81009 * C229) * C80639) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C220 +
            (C26926 * C1885 + C81009 * C1893) * C80639) *
               C81011 * C52708) *
              C80628 * C85 -
          (((C26926 * C1887 + C81009 * C1895) * C80639 +
            (C26926 * C1685 + C81009 * C1696) * C220) *
               C81011 * C52708 +
           ((C26926 * C224 + C81009 * C230) * C80639 +
            (C26926 * C102 + C81009 * C111) * C220) *
               C81011 * C52707) *
              C80628 * C86 +
          (((C26926 * C103 + C81009 * C113) * C220 +
            (C26926 * C225 + C81009 * C231) * C80639) *
               C81011 * C52707 +
           ((C26926 * C3283 + C81009 * C3284) * C220 +
            (C26926 * C3423 + C81009 * C3424) * C80639) *
               C81011 * C52708) *
              C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
               C4984 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C4985 +
           ((C27559 + C27579) * C81011 * C52707 +
            (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
               C80962) *
              C80998 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C4985 -
           ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C4984 -
           ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
            (C27581 + C27563) * C81011 * C52707) *
               C80962) *
              C80982 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C81011 * C52707 +
            (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
               C4984 -
           ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
            (C27582 + C27566) * C81011 * C52707) *
               C4985 +
           ((C27571 + C27583) * C81011 * C52707 +
            ((C26926 * C7589 + C81009 * C7590) * C220 +
             (C26926 * C7791 + C81009 * C7792) * C80639) *
                C81011 * C52708) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C81011 * C52707 +
           (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
              C5652 -
          ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
           (C27578 + C27554) * C81011 * C52707) *
              C5653 +
          ((C27559 + C27579) * C81011 * C52707 +
           (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
              C5654 -
          ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
           (C31768 + C31760) * C81011 * C52707) *
              C5655 +
          ((C31765 + C31769) * C81011 * C52707 +
           ((C26926 * C34479 + C81009 * C34480) * C220 +
            (C26926 * C34628 + C81009 * C34629) * C80639) *
               C81011 * C52708) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 - C53812 * C9285 -
            C54026 * C9134 + C53820 * C9286 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C9284 + C54026 * C9133 - C53820 * C9285 - C54027 * C9134 +
            (C26926 * C10469 + C81009 * C10475) * C9286 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C80628 * C80998 +
          ((C53814 * C9285 -
            ((C26926 * C222 + C81009 * C228) * C9133 +
             (C26926 * C100 + C81009 * C106) * C9284) +
            C54028 * C9134 - C53818 * C9286 - C54029 * C80965) *
               C81011 * C52707 +
           (C53818 * C9285 - (C54028 * C9133 + C53814 * C9284) +
            C54029 * C9134 - (C26926 * C10468 + C81009 * C10474) * C9286 -
            (C26926 * C10581 + C81009 * C10585) * C80965) *
               C81011 * C52708) *
              C80628 * C80982 +
          (((C26926 * C101 + C81009 * C109) * C9284 +
            (C26926 * C223 + C81009 * C229) * C9133 - C53816 * C9285 -
            C54030 * C9134 + C53822 * C9286 + C54031 * C80965) *
               C81011 * C52707 +
           (C53816 * C9284 + C54030 * C9133 - C53822 * C9285 - C54031 * C9134 +
            (C26926 * C11885 + C81009 * C11886) * C9286 +
            (C26926 * C12027 + C81009 * C12028) * C80965) *
               C81011 * C52708) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C9284 +
            (C26926 * C221 + C81009 * C227) * C9133 - C53812 * C9285 -
            C54026 * C9134 + C53820 * C9286 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C9284 + C54026 * C9133 - C53820 * C9285 - C54027 * C9134 +
            (C26926 * C10469 + C81009 * C10475) * C9286 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C81003 +
          ((C35950 - (C35949 + C35948) + C35951 - C35952 - C35953) * C81011 *
               C52707 +
           (C32158 * C9285 - (C30294 * C9133 + C30064 * C9284) +
            C32346 * C9134 - C38387 * C9286 - C38538 * C80965) *
               C81011 * C52708) *
              C80988 +
          ((C35956 + C35955 - C35954 - C35957 + C35958 + C35959) * C81011 *
               C52707 +
           (C32160 * C9284 + C32347 * C9133 - C32163 * C9285 - C32348 * C9134 +
            (C26926 * C38377 + C81009 * C38378) * C9286 +
            (C26926 * C38526 + C81009 * C38527) * C80965) *
               C81011 * C52708) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C743 +
            (C275 * C107 + C81011 * C282) * C737 - C305 * C744 - C306 * C738 +
            C307 * C745 + C308 * C80954) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C743 +
            (C275 * C1693 + C81011 * C1979) * C737 - C2004 * C744 -
            C2005 * C738 + C2006 * C745 + C2007 * C80954) *
               C52708) *
              C81009 * C80639 * C81003 +
          ((C1068 * C744 -
            ((C275 * C757 + C81011 * C1043) * C737 +
             (C275 * C748 + C81011 * C1036) * C743) +
            C1069 * C738 - C1070 * C745 - C1071 * C80954) *
               C52707 +
           (C4322 * C744 -
            ((C275 * C3985 + C81011 * C4309) * C737 +
             (C275 * C3979 + C81011 * C4305) * C743) +
            C4323 * C738 - C4324 * C745 - C4325 * C80954) *
               C52708) *
              C81009 * C80639 * C80988 +
          (((C275 * C750 + C81011 * C1039) * C743 +
            (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
            C1073 * C738 + C1074 * C745 + C1075 * C80954) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C743 +
            (C275 * C6148 + C81011 * C6416) * C737 - C7898 * C744 -
            C7899 * C738 + (C275 * C7589 + C81011 * C7891) * C745 +
            (C275 * C7591 + C81011 * C7892) * C80954) *
               C52708) *
              C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C94 +
           (C275 * C107 + C81011 * C282) * C83 - C305 * C95 - C306 * C84 +
           C307 * C96 + C308 * C85 - C309 * C97 - C310 * C86 + C311 * C98 +
           C312 * C87) *
              C52707 +
          ((C275 * C1684 + C81011 * C1972) * C94 +
           (C275 * C1693 + C81011 * C1979) * C83 - C2004 * C95 - C2005 * C84 +
           C2006 * C96 + C2007 * C85 - C3498 * C97 - C3499 * C86 +
           (C275 * C3283 + C81011 * C3491) * C98 +
           (C275 * C3285 + C81011 * C3492) * C87) *
              C52708) *
         C81009 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C4987 +
            (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
            C306 * C80982 + C307 * C4989 + C308 * C80954) *
               C52707 +
           (C54122 * C4987 + C54123 * C80998 - C2004 * C4988 - C2005 * C80982 +
            C2006 * C4989 + C2007 * C80954) *
               C52708) *
              C81009 * C80639 * C4984 +
          ((C1068 * C4988 -
            ((C275 * C757 + C81011 * C1043) * C80998 +
             (C275 * C748 + C81011 * C1036) * C4987) +
            C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
               C52707 +
           (C4322 * C4988 - (C56146 * C80998 + C56147 * C4987) +
            C4323 * C80982 - C4324 * C4989 - C4325 * C80954) *
               C52708) *
              C81009 * C80639 * C4985 +
          (((C275 * C750 + C81011 * C1039) * C4987 +
            (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
            C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C4987 +
            (C275 * C6148 + C81011 * C6416) * C80998 - C7898 * C4988 -
            C7899 * C80982 + (C275 * C7589 + C81011 * C7891) * C4989 +
            (C275 * C7591 + C81011 * C7892) * C80954) *
               C52708) *
              C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5657 +
            (C275 * C107 + C81011 * C282) * C80588) *
               C52707 +
           (C54122 * C5657 + C54123 * C80588) * C52708) *
              C81009 * C80639 * C5652 -
          ((C56146 * C80588 + C56147 * C5657) * C52708 +
           ((C275 * C757 + C81011 * C1043) * C80588 +
            (C275 * C748 + C81011 * C1036) * C5657) *
               C52707) *
              C81009 * C80639 * C5653 +
          (((C275 * C750 + C81011 * C1039) * C5657 +
            (C275 * C764 + C81011 * C1047) * C80588) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C5657 +
            (C275 * C6148 + C81011 * C6416) * C80588) *
               C52708) *
              C81009 * C80639 * C5654 -
          (((C275 * C8503 + C81011 * C8715) * C80588 +
            (C275 * C8499 + C81011 * C8713) * C5657) *
               C52708 +
           ((C275 * C5663 + C81011 * C5826) * C80588 +
            (C275 * C5659 + C81011 * C5822) * C5657) *
               C52707) *
              C81009 * C80639 * C5655 +
          (((C275 * C5660 + C81011 * C5823) * C5657 +
            (C275 * C5668 + C81011 * C5827) * C80588) *
               C52707 +
           ((C275 * C34479 + C81011 * C34703) * C5657 +
            (C275 * C34481 + C81011 * C34704) * C80588) *
               C52708) *
              C81009 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C4987 +
            (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
            C306 * C80982 + C307 * C4989 + C308 * C80954) *
               C52707 +
           (C60866 + C60867 - C60868 - C60869 + C60870 + C60871) * C52708) *
              C81009 * C9133 +
          ((C60868 - (C60867 + C60866) + C60869 - C60870 - C60871) * C52707 +
           (C60872 - (C60873 + C60874) + C60875 - C60876 - C60877) * C52708) *
              C81009 * C9134 +
          ((C60874 + C60873 - C60872 - C60875 + C60876 + C60877) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C4987 +
            (C275 * C10473 + C81011 * C10636) * C80998 - C12102 * C4988 -
            C12103 * C80982 + (C275 * C11885 + C81011 * C12095) * C4989 +
            (C275 * C11887 + C81011 * C12096) * C80954) *
               C52708) *
              C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C9133 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C9134 +
           ((C58009 + C58008) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C5657 +
             (C275 * C10473 + C81011 * C10636) * C80588) *
                C52708) *
               C81009 * C80965) *
              C81003 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C9134 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C9133 -
           (((C275 * C12547 + C81011 * C12759) * C80588 +
             (C275 * C12543 + C81011 * C12757) * C5657) *
                C52708 +
            (C58031 + C58030) * C52707) *
               C81009 * C80965) *
              C80988 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C9133 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C9134 +
           ((C58035 + C58034) * C52707 +
            ((C275 * C38377 + C81011 * C38605) * C5657 +
             (C275 * C38379 + C81011 * C38606) * C80588) *
                C52708) *
               C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C852 +
            (C275 * C1790 + C81011 * C2087) * C81003 -
            (C275 * C3979 + C81011 * C4305) * C853 -
            (C275 * C4093 + C81011 * C4423) * C80988 +
            (C275 * C6140 + C81011 * C6410) * C854 +
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C52708) *
              C81009 * C737 +
          ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C52707 +
           (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) * C52708) *
              C81009 * C738 +
          ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C52707 +
           (C2006 * C852 + C2107 * C81003 - C4324 * C853 - C4439 * C80988 +
            (C275 * C7589 + C81011 * C7891) * C854 +
            (C275 * C7691 + C81011 * C7997) * C80962) *
               C52708) *
              C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C165 +
            (C275 * C1790 + C81011 * C2087) * C80628) *
               C52708) *
              C81009 * C83 -
          ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 * C84 +
          ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 * C85 -
          ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 * C86 +
          ((C372 + C380) * C52707 + ((C275 * C3283 + C81011 * C3491) * C165 +
                                     (C275 * C3353 + C81011 * C3565) * C80628) *
                                        C52708) *
              C81009 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C54122 * C5064 + C54210 * C4984 - C56147 * C5065 - C56253 * C4985 +
            (C275 * C6140 + C81011 * C6410) * C5066 +
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C52708) *
              C81009 * C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C52707 +
           (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C52708) *
              C81009 * C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C52707 +
           (C2006 * C5064 + C2107 * C4984 - C4324 * C5065 - C4439 * C4985 +
            (C275 * C7589 + C81011 * C7891) * C5066 +
            (C275 * C7691 + C81011 * C7997) * C80962) *
               C52708) *
              C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C52707 +
          (C54122 * C5716 + C54210 * C5652 - C56147 * C5717 - C56253 * C5653 +
           (C275 * C6140 + C81011 * C6410) * C5718 +
           (C275 * C6236 + C81011 * C6493) * C5654 -
           (C275 * C8499 + C81011 * C8713) * C5719 -
           (C275 * C8573 + C81011 * C8783) * C5655 +
           (C275 * C34479 + C81011 * C34703) * C5720 +
           (C275 * C34557 + C81011 * C34771) * C5656) *
              C52708) *
         C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C80998 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C80982 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C80954) *
              C9133 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C80982 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C80998 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C80954) *
              C9134 +
          (((C54209 + C54213) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C165 +
             (C275 * C10527 + C81011 * C10682) * C80628) *
                C52708) *
               C81009 * C80998 -
           ((C12175 + C12171) * C52708 + (C2112 + C2100) * C52707) * C81009 *
               C80982 +
           ((C2105 + C2113) * C52707 +
            ((C275 * C11885 + C81011 * C12095) * C165 +
             (C275 * C11955 + C81011 * C12169) * C80628) *
                C52708) *
               C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C61630 + C61631 - C61632 - C61633 + C61634 + C61635) * C52708) *
              C81009 * C80588 * C9133 +
          ((C61632 - (C61631 + C61630) + C61633 - C61634 - C61635) * C52707 +
           (C61636 - (C61637 + C61638) + C61639 - C61640 - C61641) * C52708) *
              C81009 * C80588 * C9134 +
          ((C61638 + C61637 - C61636 - C61639 + C61640 + C61641) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C852 +
            (C275 * C10527 + C81011 * C10682) * C81003 -
            (C275 * C12543 + C81011 * C12757) * C853 -
            (C275 * C12617 + C81011 * C12827) * C80988 +
            (C275 * C38377 + C81011 * C38605) * C854 +
            (C275 * C38455 + C81011 * C38673) * C80962) *
               C52708) *
              C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            ((C275 * C1684 + C81011 * C1972) * C220 +
             (C275 * C1882 + C81011 * C2187) * C80639) *
                C52708) *
               C81009 * C81003 -
           (((C275 * C4199 + C81011 * C4539) * C80639 +
             (C275 * C3979 + C81011 * C4305) * C220) *
                C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80988 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            ((C275 * C6140 + C81011 * C6410) * C220 +
             (C275 * C6324 + C81011 * C6575) * C80639) *
                C52708) *
               C81009 * C80962) *
              C737 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80988 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C81003 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80962) *
              C738 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C81003 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80988 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C220 +
            (C275 * C1882 + C81011 * C2187) * C80639) *
               C52708) *
              C81009 * C80628 * C83 -
          ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
              C81009 * C80628 * C84 +
          ((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
              C81009 * C80628 * C85 -
          ((C3652 * C80639 + C3498 * C220) * C52708 + (C447 + C435) * C52707) *
              C81009 * C80628 * C86 +
          ((C440 + C448) * C52707 + ((C275 * C3283 + C81011 * C3491) * C220 +
                                     (C275 * C3423 + C81011 * C3637) * C80639) *
                                        C52708) *
              C81009 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C4984 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            ((C275 * C6140 + C81011 * C6410) * C220 +
             (C275 * C6324 + C81011 * C6575) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80998 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C4985 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C4984 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80962) *
              C80982 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C4984 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C4985 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C52707 +
           (C54122 * C220 + C54292 * C80639) * C52708) *
              C81009 * C5652 -
          ((C56355 * C80639 + C56147 * C220) * C52708 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C52707) *
              C81009 * C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C220 +
            (C275 * C6324 + C81011 * C6575) * C80639) *
               C52708) *
              C81009 * C5654 -
          (((C275 * C8643 + C81011 * C8851) * C80639 +
            (C275 * C8499 + C81011 * C8713) * C220) *
               C52708 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C52707) *
              C81009 * C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C52707 +
           ((C275 * C34479 + C81011 * C34703) * C220 +
            (C275 * C34628 + C81011 * C34838) * C80639) *
               C52708) *
              C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 - C54122 * C9285 -
            C54292 * C9134 + C54125 * C9286 + C54293 * C80965) *
               C52707 +
           (C54122 * C9284 + C54292 * C9133 - C54125 * C9285 - C54293 * C9134 +
            (C275 * C10469 + C81011 * C10632) * C9286 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C80628 * C80998 +
          ((C9512 - (C9511 + C9510) + C9513 - C9514 - C9515) * C52707 +
           (C2008 * C9285 - (C2212 * C9133 + C2004 * C9284) + C2213 * C9134 -
            C12102 * C9286 - C12252 * C80965) *
               C52708) *
              C81009 * C80628 * C80982 +
          ((C9518 + C9517 - C9516 - C9519 + C9520 + C9521) * C52707 +
           (C2006 * C9284 + C2214 * C9133 - C2010 * C9285 - C2215 * C9134 +
            (C275 * C11885 + C81011 * C12095) * C9286 +
            (C275 * C12027 + C81011 * C12241) * C80965) *
               C52708) *
              C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C9284 +
            (C275 * C221 + C81011 * C422) * C9133 - C54122 * C9285 -
            C54292 * C9134 + C54125 * C9286 + C54293 * C80965) *
               C52707 +
           (C54122 * C9284 + C54292 * C9133 - C54125 * C9285 - C54293 * C9134 +
            (C275 * C10469 + C81011 * C10632) * C9286 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C81003 +
          ((C56147 * C9285 -
            ((C275 * C946 + C81011 * C1256) * C9133 +
             (C275 * C748 + C81011 * C1036) * C9284) +
            C56355 * C9134 - C58024 * C9286 - C58211 * C80965) *
               C52707 +
           (C58024 * C9285 - (C56355 * C9133 + C56147 * C9284) +
            C58211 * C9134 - (C275 * C12543 + C81011 * C12757) * C9286 -
            (C275 * C12687 + C81011 * C12895) * C80965) *
               C52708) *
              C81009 * C80988 +
          (((C275 * C750 + C81011 * C1039) * C9284 +
            (C275 * C947 + C81011 * C1257) * C9133 - C58026 * C9285 -
            C58212 * C9134 + C58029 * C9286 + C58213 * C80965) *
               C52707 +
           (C58026 * C9284 + C58212 * C9133 - C58029 * C9285 - C58213 * C9134 +
            (C275 * C38377 + C81011 * C38605) * C9286 +
            (C275 * C38526 + C81011 * C38740) * C80965) *
               C52708) *
              C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C743 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C737 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C744 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C738 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C745 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C80639 * C81003 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C744 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C737 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C743) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C738 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C745 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80954) *
              C81009 * C81011 * C80639 * C80988 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C743 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C737 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C744 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C738 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C745 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C80954) *
              C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C94 +
          (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
              C83 -
          (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
              C95 -
          (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
              C84 +
          (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
              C96 +
          (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
              C85 -
          (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
              C97 -
          (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
              C86 +
          (C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
              C98 +
          (C52961 * C114 + C52707 * C501 + C52962 * C3285 + C52708 * C3720) *
              C87) *
         C81009 * C81011 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C4987 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80998 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C4988 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80982 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C4989 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C80639 * C4984 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C4988 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80998 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C4987) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80982 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C4989 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80954) *
              C81009 * C81011 * C80639 * C4985 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C4987 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80998 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C4988 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80982 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C4989 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C80954) *
              C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5657 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80588) *
              C81009 * C81011 * C80639 * C5652 -
          ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
               C80588 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5657) *
              C81009 * C81011 * C80639 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5657 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80588) *
              C81009 * C81011 * C80639 * C5654 -
          ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 + C52707 * C5968) *
               C80588 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C5657) *
              C81009 * C81011 * C80639 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C5657 +
           (C52961 * C5668 + C52707 * C5969 + C52962 * C34481 +
            C52708 * C34906) *
               C80588) *
              C81009 * C81011 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C4987 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80998 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C4988 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80982 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C4989 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C9133 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C4988 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80998 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C4987) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C80982 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C4989 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C80954) *
              C81009 * C81011 * C9134 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C4987 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C80998 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C4988 -
           (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
            C52707 * C2306) *
               C80982 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C4989 +
           (C52961 * C1703 + C52707 * C2307 + C52962 * C11887 +
            C52708 * C12320) *
               C80954) *
              C81009 * C81011 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C9133 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C9134 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C5657 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80588) *
               C81009 * C81011 * C80965) *
              C81003 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C9134 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C9133 -
           ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
             C52707 * C6660) *
                C80588 +
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C5657) *
               C81009 * C81011 * C80965) *
              C80988 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C9133 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C9134 +
           ((C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
             C52708 * C38807) *
                C5657 +
            (C52961 * C6153 + C52707 * C6663 + C52962 * C38379 +
             C52708 * C38808) *
                C80588) *
               C81009 * C81011 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C852 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81003 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C853 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80988 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C854 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C737 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C853 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C81003 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C852) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80988 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C854 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80962) *
              C81009 * C81011 * C738 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C852 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C81003 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C853 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80988 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C854 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C80962) *
              C81009 * C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C165 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80628) *
              C81009 * C81011 * C83 -
          ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
               C80628 +
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C165) *
              C81009 * C81011 * C84 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C165 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C80628) *
              C81009 * C81011 * C85 -
          ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
               C80628 +
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C165) *
              C81009 * C81011 * C86 +
          ((C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
               C165 +
           (C52961 * C170 + C52707 * C573 + C52962 * C3353 + C52708 * C3793) *
               C80628) *
              C81009 * C81011 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5064 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C4984 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5065 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C4985 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5066 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80998 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C5065 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C4984 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C5064) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C4985 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C5066 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80962) *
              C81009 * C81011 * C80982 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C5064 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C4984 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C5065 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C4985 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C5066 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C80962) *
              C81009 * C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C5716 +
          (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
              C5652 -
          (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
              C5717 -
          (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
              C5653 +
          (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
              C5718 +
          (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
              C5654 -
          (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
              C5719 -
          (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
              C5655 +
          (C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
           C52708 * C34905) *
              C5720 +
          (C52961 * C5723 + C52707 * C6014 + C52962 * C34557 +
           C52708 * C34981) *
              C5656) *
         C81009 * C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C80998 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C80982 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C80954) *
              C9133 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C80982 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C80998 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C80954) *
              C9134 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C165 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80628) *
               C81009 * C81011 * C80998 -
           ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
             C52707 * C2412) *
                C80628 +
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C165) *
               C81009 * C81011 * C80982 +
           ((C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
             C52708 * C12319) *
                C165 +
            (C52961 * C1794 + C52707 * C2413 + C52962 * C11955 +
             C52708 * C12393) *
                C80628) *
               C81009 * C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C852 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81003 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C853 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80988 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C854 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C9133 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C853 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C81003 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C852) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C80988 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C854 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C9134 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C852 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C81003 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C853 -
           (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
            C52707 * C6741) *
               C80988 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C854 +
           (C52961 * C6239 + C52707 * C6742 + C52962 * C38455 +
            C52708 * C38883) *
               C80962) *
              C81009 * C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C81003 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80988 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80962) *
              C737 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80988 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C81003 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80962) *
              C738 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C81003 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80988 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C220 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80639) *
              C81009 * C81011 * C80628 * C83 -
          ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
               C80639 +
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C220) *
              C81009 * C81011 * C80628 * C84 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C220 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C80639) *
              C81009 * C81011 * C80628 * C85 -
          ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
               C80639 +
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C220) *
              C81009 * C81011 * C80628 * C86 +
          ((C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
               C220 +
           (C52961 * C225 + C52707 * C641 + C52962 * C3423 + C52708 * C3865) *
               C80639) *
              C81009 * C81011 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80998 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C4985 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C4984 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80962) *
              C80982 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C220 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80639) *
              C81009 * C81011 * C5652 -
          ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
               C80639 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C220) *
              C81009 * C81011 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C220 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C80639) *
              C81009 * C81011 * C5654 -
          ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 + C52707 * C6060) *
               C80639 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C220) *
              C81009 * C81011 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C220 +
           (C52961 * C5773 + C52707 * C6061 + C52962 * C34628 +
            C52708 * C35051) *
               C80639) *
              C81009 * C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C9284 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C9133 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C9285 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C9134 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C9286 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C80628 * C80998 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C9285 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C9133 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C9284) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C9134 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C9286 -
           (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
            C52707 * C2512) *
               C80965) *
              C81009 * C81011 * C80628 * C80982 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C9284 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C9133 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C9285 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C9134 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C9286 +
           (C52961 * C1886 + C52707 * C2514 + C52962 * C12027 +
            C52708 * C12465) *
               C80965) *
              C81009 * C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C9284 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C9133 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C9285 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C9134 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C9286 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C81003 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C9285 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C9133 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C9284) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C9134 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C9286 -
           (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
            C52707 * C6819) *
               C80965) *
              C81009 * C81011 * C80988 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C9284 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C9133 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C9285 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C9134 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C9286 +
           (C52961 * C6325 + C52707 * C6822 + C52962 * C38526 +
            C52708 * C38953) *
               C80965) *
              C81009 * C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78289 +
             (C26926 * C107 + C81009 * C117) * C80593 -
             (C26926 * C100 + C81009 * C106) * C78285 -
             (C26926 * C108 + C81009 * C118) * C80601 +
             (C26926 * C101 + C81009 * C109) * C78295 +
             (C26926 * C110 + C81009 * C119) * C15341) *
                C81011 * C52707 +
            (C67416 + C67417 - C67418 - C67419 + C67420 + C67421) * C81011 *
                C52708) *
               C17817 +
           ((C67418 - (C67417 + C67416) + C67419 - C67420 - C67421) * C81011 *
                C52707 +
            (C53818 * C78285 - (C53819 * C80593 + C53820 * C78289) +
             C53821 * C80601 - C53822 * C78295 - C53823 * C15341) *
                C81011 * C52708) *
               C80726) *
              C80932 +
          (((C41174 - (C41173 + C41172) + C41175 - C41176 - C41177) * C81011 *
                C52707 +
            (C41886 - (C41887 + C41888) + C41889 - C41890 - C41891) * C81011 *
                C52708) *
               C17817 +
           ((C41888 + C41887 - C41886 - C41889 + C41890 + C41891) * C81011 *
                C52707 +
            (C32158 * C78289 + C32159 * C80593 - C36914 * C78285 -
             C36915 * C80601 + (C26926 * C10971 + C81009 * C10972) * C78295 +
             (C26926 * C10973 + C81009 * C10974) * C15341) *
                C81011 * C52708) *
               C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eexy[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C55930 + C55931 - C55932 - C55933) * C81011 * C52708) *
                         C80593 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C55934 - (C55935 + C55936) + C55937) * C81011 * C52708) *
                         C80601 +
                     (((C26926 * C101 + C81009 * C109) * C2687 +
                       (C26926 * C168 + C81009 * C174) * C80932 -
                       C27368 * C2688 - C27478 * C80686) *
                          C81011 * C52707 +
                      (C55938 + C55939 - C55940 - C55941) * C81011 * C52708) *
                         C15341) *
                        C17817 +
                    (((C55932 - (C55931 + C55930) + C55933) * C81011 * C52707 +
                      (C62596 - (C62597 + C62598) + C62599) * C81011 * C52708) *
                         C80593 +
                     ((C55936 + C55935 - C55934 - C55937) * C81011 * C52707 +
                      (C62600 + C62601 - C62602 - C62603) * C81011 * C52708) *
                         C80601 +
                     ((C55940 - (C55939 + C55938) + C55941) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C2688 -
                       (C53933 * C80932 + C53822 * C2687) +
                       (C26926 * C11073 + C81009 * C11074) * C80686) *
                          C81011 * C52708) *
                         C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       C53812 * C17952 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                      (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80593 +
                    (((C53814 * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C44470 + C44469 - C44468 - C44471) * C81011 * C52707 +
                      (C30062 * C17951 + C30295 * C17817 - C36914 * C17952 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80601 +
                    ((((C26926 * C101 + C81009 * C109) * C17951 +
                       (C26926 * C223 + C81009 * C229) * C17817 -
                       C53816 * C17952 - C54030 * C80726) *
                          C81011 * C52707 +
                      (C53816 * C17951 + C54030 * C17817 - C53822 * C17952 -
                       C54031 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C45962 - (C45961 + C45960) + C45963) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C17952 -
                       (C30296 * C17817 + C30066 * C17951) +
                       (C26926 * C11173 + C81009 * C11174) * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78289 +
             (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
             C306 * C80601 + C307 * C78295 + C308 * C15341) *
                C52707 +
            (C67720 + C67721 - C67722 - C67723 + C67724 + C67725) * C52708) *
               C81009 * C17817 +
           ((C67722 - (C67721 + C67720) + C67723 - C67724 - C67725) * C52707 +
            (C2008 * C78285 - (C54124 * C80593 + C54125 * C78289) +
             C2009 * C80601 - C2010 * C78295 - C2011 * C15341) *
                C52708) *
               C81009 * C80726) *
              C80932 +
          (((C1068 * C78285 -
             ((C275 * C757 + C81011 * C1043) * C80593 +
              (C275 * C748 + C81011 * C1036) * C78289) +
             C1069 * C80601 - C1070 * C78295 - C1071 * C15341) *
                C52707 +
            (C67726 - (C67727 + C67728) + C67729 - C67730 - C67731) * C52708) *
               C81009 * C17817 +
           ((C67728 + C67727 - C67726 - C67729 + C67730 + C67731) * C52707 +
            (C58024 * C78289 + C58025 * C80593 - C11280 * C78285 -
             C11281 * C80601 + (C275 * C10971 + C81011 * C11273) * C78295 +
             (C275 * C10973 + C81011 * C11274) * C15341) *
                C52708) *
               C81009 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C2687 +
                       (C275 * C166 + C81011 * C354) * C80932 -
                       (C275 * C748 + C81011 * C1036) * C2688 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C56248 + C56249 - C56250 - C56254) * C52708) *
                         C81009 * C80593 +
                     ((C2903 - (C2902 + C2901) + C2904) * C52707 +
                      (C4428 - (C4429 + C4430) + C4440) * C52708) *
                         C81009 * C80601 +
                     ((C2907 + C2906 - C2905 - C2908) * C52707 +
                      (C4433 + C4434 - C4435 - C4441) * C52708) *
                         C81009 * C15341) *
                        C17817 +
                    (((C56250 - (C56249 + C56248) + C56254) * C52707 +
                      (C62906 - (C62907 + C62908) + C62909) * C52708) *
                         C81009 * C80593 +
                     ((C4430 + C4429 - C4428 - C4440) * C52707 +
                      (C11381 + C11382 - C11383 - C11387) * C52708) *
                         C81009 * C80601 +
                     ((C4435 - (C4434 + C4433) + C4441) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C2688 -
                       (C2109 * C80932 + C2010 * C2687) +
                       (C275 * C11073 + C81011 * C11379) * C80686) *
                          C52708) *
                         C81009 * C15341) *
                        C80726)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C17951 +
                       (C275 * C221 + C81011 * C422) * C17817 -
                       C54122 * C17952 - C54292 * C80726) *
                          C52707 +
                      (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
                       C54293 * C80726) *
                          C52708) *
                         C81009 * C80932 +
                     ((C56147 * C17952 -
                       ((C275 * C946 + C81011 * C1256) * C17817 +
                        (C275 * C748 + C81011 * C1036) * C17951) +
                       C56355 * C80726) *
                          C52707 +
                      (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
                       C58211 * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80593 +
                    (((C18154 - (C18153 + C18152) + C18155) * C52707 +
                      (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
                       C2213 * C80726) *
                          C52708) *
                         C81009 * C80932 +
                     ((C18970 + C18969 - C18968 - C18971) * C52707 +
                      (C4322 * C17951 + C4554 * C17817 - C11280 * C17952 -
                       C11494 * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C80601 +
                    (((C18158 + C18157 - C18156 - C18159) * C52707 +
                      (C2006 * C17951 + C2214 * C17817 - C2010 * C17952 -
                       C2215 * C80726) *
                          C52708) *
                         C81009 * C80932 +
                     ((C20492 - (C20491 + C20490) + C20493) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C17952 -
                       (C4555 * C17817 + C4324 * C17951) +
                       (C275 * C11173 + C81011 * C11485) * C80726) *
                          C52708) *
                         C81009 * C80686) *
                        C15341)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78289 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80593 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78285 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80601 +
            (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C78295 +
            (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
                C15341) *
               C81009 * C81011 * C17817 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78285 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80593 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78289) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80601 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C78295 -
            (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 +
             C52707 * C2303) *
                C15341) *
               C81009 * C81011 * C80726) *
              C80932 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78285 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80593 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78289) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80601 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C78295 -
            (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
                C15341) *
               C81009 * C81011 * C17817 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78289 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80593 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78285 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80601 +
            (C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C78295 +
            (C52961 * C3988 + C52707 * C4661 + C52962 * C10973 +
             C52708 * C11594) *
                C15341) *
               C81009 * C81011 * C80726) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C2687 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80932 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C2688 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C80593 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C2688 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C80932 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C2687) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80601 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C2687 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80932 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C2688 -
            (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
                C80686) *
               C81009 * C81011 * C15341) *
              C17817 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C2688 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C80932 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C2687) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C80593 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C2687 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80932 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C2688 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80601 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C2688 -
            ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
              C52707 * C2408) *
                 C80932 +
             (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
              C52707 * C2295) *
                 C2687) +
            (C52961 * C4095 + C52707 * C4775 + C52962 * C11073 +
             C52708 * C11699) *
                C80686) *
               C81009 * C81011 * C15341) *
              C80726)) /
        (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C17951 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C17817 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C17952 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C17952 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C17817 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C17951) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80593 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C17952 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C17817 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C17951) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C17951 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C17817 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C17952 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80601 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C17951 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C17817 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C17952 -
            (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 +
             C52707 * C2513) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C17952 -
            ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 +
              C52707 * C1581) *
                 C17817 +
             (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
              C52707 * C1359) *
                 C17951) +
            (C52961 * C4201 + C52707 * C4891 + C52962 * C11173 +
             C52708 * C11805) *
                C80726) *
               C81009 * C81011 * C80686) *
              C15341)) /
        (p * q * std::sqrt(p + q));
    d2eexx[66] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C65820 + C65821 - C65822 - C65823) * C81011 * C52708) *
                         C80722 +
                     ((C65822 - (C65821 + C65820) + C65823) * C81011 * C52707 +
                      (C65824 - (C65825 + C65826) + C65827) * C81011 * C52708) *
                         C80729 +
                     ((C65826 + C65825 - C65824 - C65827) * C81011 * C52707 +
                      (C70690 + C70691 - C70692 - C70693) * C81011 * C52708) *
                         C20867) *
                        C80932 +
                    (((C39644 - (C39643 + C39642) + C39645) * C81011 * C52707 +
                      (C40292 - (C40293 + C40294) + C40295) * C81011 * C52708) *
                         C80722 +
                     ((C40294 + C40293 - C40292 - C40295) * C81011 * C52707 +
                      (C40296 + C40297 - C40298 - C40299) * C81011 * C52708) *
                         C80729 +
                     ((C40298 - (C40297 + C40296) + C40299) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C13806 -
                       (C38386 * C13799 + C38387 * C13805) +
                       (C26926 * C12548 + C81009 * C12550) * C80598) *
                          C81011 * C52708) *
                         C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[66] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C55930 + C55931 - C55932 - C55933) * C81011 * C52708) *
                         C13799 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C55934 - (C55935 + C55936) + C55937) * C81011 * C52708) *
                         C80598) *
                        C80722 +
                    (((C55932 - (C55931 + C55930) + C55933) * C81011 * C52707 +
                      (C62596 - (C62597 + C62598) + C62599) * C81011 * C52708) *
                         C13799 +
                     ((C55936 + C55935 - C55934 - C55937) * C81011 * C52707 +
                      (C62600 + C62601 - C62602 - C62603) * C81011 * C52708) *
                         C80598) *
                        C80729 +
                    (((C62598 + C62597 - C62596 - C62599) * C81011 * C52707 +
                      (C64050 + C64051 - C64052 - C64053) * C81011 * C52708) *
                         C13799 +
                     ((C62602 - (C62601 + C62600) + C62603) * C81011 * C52707 +
                      ((C26926 * C12544 + C81009 * C12546) * C2688 -
                       (C63447 * C80932 + C63374 * C2687) +
                       (C26926 * C12618 + C81009 * C12620) * C80686) *
                          C81011 * C52708) *
                         C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C78528 +
             (C26926 * C221 + C81009 * C227) * C80722 - C53812 * C78520 -
             C54026 * C80729 + C53820 * C78534 + C54027 * C20867) *
                C81011 * C52707 +
            (C53812 * C78528 + C54026 * C80722 - C53820 * C78520 -
             C54027 * C80729 + C61992 * C78534 + C62102 * C20867) *
                C81011 * C52708) *
               C80932 +
           ((C47514 - (C47513 + C47512) + C47515 - C47516 - C47517) * C81011 *
                C52707 +
            (C32158 * C78520 - (C30294 * C80722 + C30064 * C78528) +
             C32346 * C80729 - C38387 * C78534 - C38538 * C20867) *
                C81011 * C52708) *
               C80686) *
              C13799 +
          (((C53814 * C78520 -
             ((C26926 * C222 + C81009 * C228) * C80722 +
              (C26926 * C100 + C81009 * C106) * C78528) +
             C54028 * C80729 - C53818 * C78534 - C54029 * C20867) *
                C81011 * C52707 +
            (C53818 * C78520 - (C54028 * C80722 + C53814 * C78528) +
             C54029 * C80729 - C63374 * C78534 - C63517 * C20867) *
                C81011 * C52708) *
               C80932 +
           ((C47520 + C47519 - C47518 - C47521 + C47522 + C47523) * C81011 *
                C52707 +
            (C30062 * C78528 + C30295 * C80722 - C36914 * C78520 -
             C37124 * C80729 + (C26926 * C12544 + C81009 * C12546) * C78534 +
             (C26926 * C12688 + C81009 * C12690) * C20867) *
                C81011 * C52708) *
               C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[66] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13805 +
                       (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                       C306 * C80598) *
                          C52707 +
                      (C66138 + C66139 - C66140 - C66141) * C52708) *
                         C81009 * C80722 +
                     ((C66140 - (C66139 + C66138) + C66141) * C52707 +
                      (C66142 - (C66143 + C66144) + C66145) * C52708) *
                         C81009 * C80729 +
                     ((C66144 + C66143 - C66142 - C66145) * C52707 +
                      (C70892 + C70893 - C70894 - C70895) * C52708) *
                         C81009 * C20867) *
                        C80932 +
                    (((C1068 * C13806 -
                       ((C275 * C757 + C81011 * C1043) * C13799 +
                        (C275 * C748 + C81011 * C1036) * C13805) +
                       C1069 * C80598) *
                          C52707 +
                      (C66146 - (C66147 + C66148) + C66149) * C52708) *
                         C81009 * C80722 +
                     ((C66148 + C66147 - C66146 - C66149) * C52707 +
                      (C66150 + C66151 - C66152 - C66153) * C52708) *
                         C81009 * C80729 +
                     ((C66152 - (C66151 + C66150) + C66153) * C52707 +
                      ((C275 * C12544 + C81011 * C12758) * C13806 -
                       (C64190 * C13799 + C64191 * C13805) +
                       (C275 * C12548 + C81011 * C12760) * C80598) *
                          C52708) *
                         C81009 * C20867) *
                        C80686)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[66] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C2687 +
                       (C275 * C166 + C81011 * C354) * C80932 -
                       (C275 * C748 + C81011 * C1036) * C2688 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C56248 + C56249 - C56250 - C56254) * C52708) *
                         C81009 * C13799 +
                     ((C2903 - (C2902 + C2901) + C2904) * C52707 +
                      (C4428 - (C4429 + C4430) + C4440) * C52708) *
                         C81009 * C80598) *
                        C80722 +
                    (((C56250 - (C56249 + C56248) + C56254) * C52707 +
                      (C62906 - (C62907 + C62908) + C62909) * C52708) *
                         C81009 * C13799 +
                     ((C4430 + C4429 - C4428 - C4440) * C52707 +
                      (C11381 + C11382 - C11383 - C11387) * C52708) *
                         C81009 * C80598) *
                        C80729 +
                    (((C62908 + C62907 - C62906 - C62909) * C52707 +
                      (C64260 + C64261 - C64262 - C64266) * C52708) *
                         C81009 * C13799 +
                     ((C11383 - (C11382 + C11381) + C11387) * C52707 +
                      ((C275 * C12544 + C81011 * C12758) * C2688 -
                       (C12174 * C80932 + C12102 * C2687) +
                       (C275 * C12618 + C81011 * C12828) * C80686) *
                          C52708) *
                         C81009 * C80598) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C78528 +
             (C275 * C221 + C81011 * C422) * C80722 - C54122 * C78520 -
             C54292 * C80729 + C54125 * C78534 + C54293 * C20867) *
                C52707 +
            (C54122 * C78528 + C54292 * C80722 - C54125 * C78520 -
             C54293 * C80729 + C62156 * C78534 + C62264 * C20867) *
                C52708) *
               C81009 * C80932 +
           ((C56147 * C78520 -
             ((C275 * C946 + C81011 * C1256) * C80722 +
              (C275 * C748 + C81011 * C1036) * C78528) +
             C56355 * C80729 - C58024 * C78534 - C58211 * C20867) *
                C52707 +
            (C58024 * C78520 - (C56355 * C80722 + C56147 * C78528) +
             C58211 * C80729 - C64191 * C78534 - C64335 * C20867) *
                C52708) *
               C81009 * C80686) *
              C13799 +
          (((C21244 - (C21243 + C21242) + C21245 - C21246 - C21247) * C52707 +
            (C2008 * C78520 - (C2212 * C80722 + C2004 * C78528) +
             C2213 * C80729 - C12102 * C78534 - C12252 * C20867) *
                C52708) *
               C81009 * C80932 +
           ((C22078 + C22077 - C22076 - C22079 + C22080 + C22081) * C52707 +
            (C4322 * C78528 + C4554 * C80722 - C11280 * C78520 -
             C11494 * C80729 + (C275 * C12544 + C81011 * C12758) * C78534 +
             (C275 * C12688 + C81011 * C12896) * C20867) *
                C52708) *
               C81009 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13805 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C13799 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13806 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C80722 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13806 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C13799 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13805) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80729 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C13805 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C13799 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C13806 -
            (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
             C52707 * C2306) *
                C80598) *
               C81009 * C81011 * C20867) *
              C80932 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13806 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C13799 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C13805) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C80722 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13805 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C13799 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13806 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80729 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C13806 -
            ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
              C52707 * C6660) *
                 C13799 +
             (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
              C52707 * C6654) *
                 C13805) +
            (C52961 * C6143 + C52707 * C6659 + C52962 * C12548 +
             C52708 * C12966) *
                C80598) *
               C81009 * C81011 * C20867) *
              C80686)) /
        (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C2687 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80932 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C2688 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C13799 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C2688 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C80932 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C2687) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C80722 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C2688 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C80932 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C2687) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C13799 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C2687 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80932 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C2688 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C80598) *
              C80729 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C2687 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80932 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C2688 -
            (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
             C52707 * C6741) *
                C80686) *
               C81009 * C81011 * C13799 +
           ((C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C2688 -
            ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
              C52707 * C2412) *
                 C80932 +
             (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
              C52707 * C2298) *
                 C2687) +
            (C52961 * C6237 + C52707 * C6743 + C52962 * C12618 +
             C52708 * C13034) *
                C80686) *
               C81009 * C81011 * C80598) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78528 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80722 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C78520 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80729 +
            (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C78534 +
            (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
             C52708 * C10869) *
                C20867) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78520 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80722 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78528) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80729 -
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C78534 -
            (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
             C52707 * C6819) *
                C20867) *
               C81009 * C81011 * C80686) *
              C13799 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78520 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80722 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C78528) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80729 -
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C78534 -
            (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
             C52707 * C2512) *
                C20867) *
               C81009 * C81011 * C80932 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78528 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80722 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78520 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80729 +
            (C52961 * C6137 + C52707 * C6653 + C52962 * C12544 +
             C52708 * C12964) *
                C78534 +
            (C52961 * C6321 + C52707 * C6820 + C52962 * C12688 +
             C52708 * C13102) *
                C20867) *
               C81009 * C81011 * C80686) *
              C80598)) /
        (p * q * std::sqrt(p + q));
    d2eexx[67] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C65820 + C65821 - C65822 - C65823) * C81011 * C52708) *
                         C17817 +
                     ((C65822 - (C65821 + C65820) + C65823) * C81011 * C52707 +
                      (C65824 - (C65825 + C65826) + C65827) * C81011 * C52708) *
                         C80726) *
                        C81003 +
                    (((C39644 - (C39643 + C39642) + C39645) * C81011 * C52707 +
                      (C40292 - (C40293 + C40294) + C40295) * C81011 * C52708) *
                         C17817 +
                     ((C40294 + C40293 - C40292 - C40295) * C81011 * C52707 +
                      (C40296 + C40297 - C40298 - C40299) * C81011 * C52708) *
                         C80726) *
                        C80988 +
                    (((C39648 + C39647 - C39646 - C39649) * C81011 * C52707 +
                      (C42780 + C42781 - C42782 - C42783) * C81011 * C52708) *
                         C17817 +
                     ((C42782 - (C42781 + C42780) + C42783) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C13806 -
                       (C32162 * C13799 + C32163 * C13805) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C69192 + C69193 - C69194 - C69195 + C69196 + C69197 -
                      C69198 - C69199) *
                         C81011 * C52708) *
                        C17817 +
                    ((C69194 - (C69193 + C69192) + C69195 - C69196 - C69197 +
                      C69198 + C69199) *
                         C81011 * C52707 +
                     (C53818 * C13176 - (C53819 * C81010 + C53820 * C13175) +
                      C53821 * C81000 - C53822 * C13177 - C53823 * C80984 +
                      (C26926 * C1689 + C81009 * C1704) * C13178 +
                      (C26926 * C1705 + C81009 * C1713) * C80966) *
                         C81011 * C52708) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13805 +
                      (C26926 * C107 + C81009 * C117) * C13799 -
                      (C26926 * C100 + C81009 * C106) * C13806 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C81011 * C52707 +
                     (C65820 + C65821 - C65822 - C65823) * C81011 * C52708) *
                        C81014 +
                    ((C65822 - (C65821 + C65820) + C65823) * C81011 * C52707 +
                     (C65824 - (C65825 + C65826) + C65827) * C81011 * C52708) *
                        C81008 +
                    ((C65826 + C65825 - C65824 - C65827) * C81011 * C52707 +
                     (C70690 + C70691 - C70692 - C70693) * C81011 * C52708) *
                        C80996 +
                    ((C70692 - (C70691 + C70690) + C70693) * C81011 * C52707 +
                     ((C26926 * C10471 + C81009 * C10477) * C13806 -
                      (C61994 * C13799 + C61995 * C13805) +
                      (C26926 * C10479 + C81009 * C10483) * C80598) *
                         C81011 * C52708) *
                        C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C852 +
             (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
             C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
                C81011 * C52707 +
            (C61396 + C61397 - C61398 - C61399 + C61400 + C61401) * C81011 *
                C52708) *
               C13799 +
           ((C27366 * C853 -
             ((C26926 * C167 + C81009 * C173) * C81003 +
              (C26926 * C100 + C81009 * C106) * C852) +
             C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
                C81011 * C52707 +
            (C69932 - (C69933 + C69934) + C69935 - C69936 - C69937) * C81011 *
                C52708) *
               C80598) *
              C17817 +
          (((C61398 - (C61397 + C61396) + C61399 - C61400 - C61401) * C81011 *
                C52707 +
            (C61402 - (C61403 + C61404) + C61405 - C61406 - C61407) * C81011 *
                C52708) *
               C13799 +
           ((C69934 + C69933 - C69932 - C69935 + C69936 + C69937) * C81011 *
                C52707 +
            (C53818 * C852 + C53931 * C81003 - C36914 * C853 - C37018 * C80988 +
             (C26926 * C6142 + C81009 * C6152) * C854 +
             (C26926 * C6240 + C81009 * C6246) * C80962) *
                C81011 * C52708) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C81010 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C81000 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C81011 * C52707 +
            (C53916 + C53936) * C81011 * C52708) *
               C80984 -
           ((C55260 + C55258) * C81011 * C52708 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C81011 * C52707) *
               C80966) *
              C17817 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C81000 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C81010 -
           ((C53939 + C53927) * C81011 * C52708 +
            (C53936 + C53916) * C81011 * C52707) *
               C80984 +
           ((C55258 + C55260) * C81011 * C52707 +
            ((C26926 * C1689 + C81009 * C1704) * C165 +
             (C26926 * C1795 + C81009 * C1803) * C80628) *
                C81011 * C52708) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C13799 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C80598) *
              C81014 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C80598 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C13799) *
              C81008 +
          (((C53924 + C53938) * C81011 * C52707 +
            (C62044 + C62052) * C81011 * C52708) *
               C13799 -
           ((C63448 + C63446) * C81011 * C52708 +
            (C53937 + C53919) * C81011 * C52707) *
               C80598) *
              C80996 +
          (((C63446 + C63448) * C81011 * C52707 +
            ((C26926 * C10471 + C81009 * C10477) * C165 +
             (C26926 * C10529 + C81009 * C10533) * C80628) *
                C81011 * C52708) *
               C80598 -
           ((C62053 + C62049) * C81011 * C52708 +
            (C62052 + C62044) * C81011 * C52707) *
               C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       C53812 * C17952 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C81003 +
                     ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                      (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80988 +
                     ((C44466 + C44465 - C44464 - C44467) * C81011 * C52707 +
                      (C32160 * C17951 + C32347 * C17817 - C32163 * C17952 -
                       C32348 * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C13799 +
                    (((C53814 * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C81003 +
                     ((C44470 + C44469 - C44468 - C44471) * C81011 * C52707 +
                      (C30062 * C17951 + C30295 * C17817 - C36914 * C17952 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80988 +
                     ((C44474 - (C44473 + C44472) + C44475) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C17952 -
                       (C33812 * C17817 + C33600 * C17951) +
                       (C26926 * C6326 + C81009 * C6332) * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      C53812 * C17952 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C80628 * C81010 +
                    ((C53814 * C17952 -
                      ((C26926 * C222 + C81009 * C228) * C17817 +
                       (C26926 * C100 + C81009 * C106) * C17951) +
                      C54028 * C80726) *
                         C81011 * C52707 +
                     (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                      C54029 * C80726) *
                         C81011 * C52708) *
                        C80628 * C81000 +
                    (((C26926 * C101 + C81009 * C109) * C17951 +
                      (C26926 * C223 + C81009 * C229) * C17817 -
                      C53816 * C17952 - C54030 * C80726) *
                         C81011 * C52707 +
                     (C53816 * C17951 + C54030 * C17817 - C53822 * C17952 -
                      C54031 * C80726) *
                         C81011 * C52708) *
                        C80628 * C80984 +
                    ((C55186 * C17952 -
                      ((C26926 * C224 + C81009 * C230) * C17817 +
                       (C26926 * C102 + C81009 * C111) * C17951) +
                      C55329 * C80726) *
                         C81011 * C52707 +
                     ((C26926 * C1689 + C81009 * C1704) * C17952 -
                      (C55329 * C17817 + C55186 * C17951) +
                      (C26926 * C1888 + C81009 * C1896) * C80726) *
                         C81011 * C52708) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C19485 +
                      (C26926 * C221 + C81009 * C227) * C81014 -
                      C53812 * C19486 - C54026 * C81008 + C53820 * C19487 +
                      C54027 * C80996 - C61992 * C19488 - C62102 * C80978) *
                         C81011 * C52707 +
                     (C53812 * C19485 + C54026 * C81014 - C53820 * C19486 -
                      C54027 * C81008 + C61992 * C19487 + C62102 * C80996 -
                      C61995 * C19488 - C62103 * C80978) *
                         C81011 * C52708) *
                        C80628 * C13799 +
                    ((C53814 * C19486 -
                      ((C26926 * C222 + C81009 * C228) * C81014 +
                       (C26926 * C100 + C81009 * C106) * C19485) +
                      C54028 * C81008 - C53818 * C19487 - C54029 * C80996 +
                      C63374 * C19488 + C63517 * C80978) *
                         C81011 * C52707 +
                     (C53818 * C19486 - (C54028 * C81014 + C53814 * C19485) +
                      C54029 * C81008 - C63374 * C19487 - C63517 * C80996 +
                      (C26926 * C10471 + C81009 * C10477) * C19488 +
                      (C26926 * C10584 + C81009 * C10588) * C80978) *
                         C81011 * C52708) *
                        C80628 * C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[67] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13805 +
                       (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                       C306 * C80598) *
                          C52707 +
                      (C66138 + C66139 - C66140 - C66141) * C52708) *
                         C81009 * C17817 +
                     ((C66140 - (C66139 + C66138) + C66141) * C52707 +
                      (C66142 - (C66143 + C66144) + C66145) * C52708) *
                         C81009 * C80726) *
                        C81003 +
                    (((C1068 * C13806 -
                       ((C275 * C757 + C81011 * C1043) * C13799 +
                        (C275 * C748 + C81011 * C1036) * C13805) +
                       C1069 * C80598) *
                          C52707 +
                      (C66146 - (C66147 + C66148) + C66149) * C52708) *
                         C81009 * C17817 +
                     ((C66148 + C66147 - C66146 - C66149) * C52707 +
                      (C66150 + C66151 - C66152 - C66153) * C52708) *
                         C81009 * C80726) *
                        C80988 +
                    ((((C275 * C750 + C81011 * C1039) * C13805 +
                       (C275 * C764 + C81011 * C1047) * C13799 -
                       C1072 * C13806 - C1073 * C80598) *
                          C52707 +
                      (C68626 + C68627 - C68628 - C68629) * C52708) *
                         C81009 * C17817 +
                     ((C68628 - (C68627 + C68626) + C68629) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C13806 -
                       (C58028 * C13799 + C58029 * C13805) +
                       (C275 * C6154 + C81011 * C6418) * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13175 +
                      (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
                      C306 * C81000 + C307 * C13177 + C308 * C80984 -
                      C309 * C13178 - C310 * C80966) *
                         C52707 +
                     (C69398 + C69399 - C69400 - C69401 + C69402 + C69403 -
                      C69404 - C69405) *
                         C52708) *
                        C81009 * C17817 +
                    ((C69400 - (C69399 + C69398) + C69401 - C69402 - C69403 +
                      C69404 + C69405) *
                         C52707 +
                     (C2008 * C13176 - (C54124 * C81010 + C54125 * C13175) +
                      C2009 * C81000 - C2010 * C13177 - C2011 * C80984 +
                      (C275 * C1689 + C81011 * C1978) * C13178 +
                      (C275 * C1705 + C81011 * C1986) * C80966) *
                         C52708) *
                        C81009 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13805 +
                      (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                      C306 * C80598) *
                         C52707 +
                     (C66138 + C66139 - C66140 - C66141) * C52708) *
                        C81009 * C81014 +
                    ((C66140 - (C66139 + C66138) + C66141) * C52707 +
                     (C66142 - (C66143 + C66144) + C66145) * C52708) *
                        C81009 * C81008 +
                    ((C66144 + C66143 - C66142 - C66145) * C52707 +
                     (C70892 + C70893 - C70894 - C70895) * C52708) *
                        C81009 * C80996 +
                    ((C70894 - (C70893 + C70892) + C70895) * C52707 +
                     ((C275 * C10471 + C81011 * C10634) * C13806 -
                      (C62158 * C13799 + C62159 * C13805) +
                      (C275 * C10479 + C81011 * C10638) * C80598) *
                         C52708) *
                        C81009 * C80978) *
                   C80628) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C852 +
             (C275 * C166 + C81011 * C354) * C81003 -
             (C275 * C748 + C81011 * C1036) * C853 -
             (C275 * C856 + C81011 * C1149) * C80988 +
             (C275 * C750 + C81011 * C1039) * C854 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C52707 +
            (C61630 + C61631 - C61632 - C61633 + C61634 + C61635) * C52708) *
               C81009 * C13799 +
           ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C52707 +
            (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) * C52708) *
               C81009 * C80598) *
              C17817 +
          (((C61632 - (C61631 + C61630) + C61633 - C61634 - C61635) * C52707 +
            (C61636 - (C61637 + C61638) + C61639 - C61640 - C61641) * C52708) *
               C81009 * C13799 +
           ((C18866 + C18865 - C18864 - C18867 + C18868 + C18869) * C52707 +
            (C2008 * C852 + C2108 * C81003 - C11280 * C853 - C11386 * C80988 +
             (C275 * C6142 + C81011 * C6412) * C854 +
             (C275 * C6240 + C81011 * C6498) * C80962) *
                C52708) *
               C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C81010 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C81000 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C80984 -
           ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 *
               C80966) *
              C17817 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C81000 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C81010 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C80984 +
           ((C3569 + C3571) * C52707 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C52708) *
               C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C13799 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C80598) *
              C81014 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C80598 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C13799) *
              C81008 +
          (((C54209 + C54213) * C52707 + (C62207 + C62215) * C52708) * C81009 *
               C13799 -
           ((C12175 + C12171) * C52708 + (C2112 + C2100) * C52707) * C81009 *
               C80598) *
              C80996 +
          (((C12171 + C12175) * C52707 +
            ((C275 * C10471 + C81011 * C10634) * C165 +
             (C275 * C10529 + C81011 * C10684) * C80628) *
                C52708) *
               C81009 * C80598 -
           ((C62216 + C62212) * C52708 + (C62215 + C62207) * C52707) * C81009 *
               C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C17951 +
             (C275 * C221 + C81011 * C422) * C17817 - C54122 * C17952 -
             C54292 * C80726) *
                C52707 +
            (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
             C54293 * C80726) *
                C52708) *
               C81009 * C81003 +
           ((C56147 * C17952 -
             ((C275 * C946 + C81011 * C1256) * C17817 +
              (C275 * C748 + C81011 * C1036) * C17951) +
             C56355 * C80726) *
                C52707 +
            (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
             C58211 * C80726) *
                C52708) *
               C81009 * C80988 +
           (((C275 * C750 + C81011 * C1039) * C17951 +
             (C275 * C947 + C81011 * C1257) * C17817 - C58026 * C17952 -
             C58212 * C80726) *
                C52707 +
            (C58026 * C17951 + C58212 * C17817 - C58029 * C17952 -
             C58213 * C80726) *
                C52708) *
               C81009 * C80962) *
              C13799 +
          (((C18154 - (C18153 + C18152) + C18155) * C52707 +
            (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
             C2213 * C80726) *
                C52708) *
               C81009 * C81003 +
           ((C18970 + C18969 - C18968 - C18971) * C52707 +
            (C4322 * C17951 + C4554 * C17817 - C11280 * C17952 -
             C11494 * C80726) *
                C52708) *
               C81009 * C80988 +
           ((C18974 - (C18973 + C18972) + C18975) * C52707 +
            ((C275 * C6142 + C81011 * C6412) * C17952 -
             (C8112 * C17817 + C7898 * C17951) +
             (C275 * C6326 + C81011 * C6578) * C80726) *
                C52708) *
               C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C17951 +
            (C275 * C221 + C81011 * C422) * C17817 - C54122 * C17952 -
            C54292 * C80726) *
               C52707 +
           (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
            C54293 * C80726) *
               C52708) *
              C81009 * C80628 * C81010 +
          ((C18154 - (C18153 + C18152) + C18155) * C52707 +
           (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
            C2213 * C80726) *
               C52708) *
              C81009 * C80628 * C81000 +
          ((C18158 + C18157 - C18156 - C18159) * C52707 +
           (C2006 * C17951 + C2214 * C17817 - C2010 * C17952 - C2215 * C80726) *
               C52708) *
              C81009 * C80628 * C80984 +
          ((C18162 - (C18161 + C18160) + C18163) * C52707 +
           ((C275 * C1689 + C81011 * C1978) * C17952 -
            (C3652 * C17817 + C3498 * C17951) +
            (C275 * C1888 + C81011 * C2194) * C80726) *
               C52708) *
              C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C19485 +
            (C275 * C221 + C81011 * C422) * C81014 - C54122 * C19486 -
            C54292 * C81008 + C54125 * C19487 + C54293 * C80996 -
            C62156 * C19488 - C62264 * C80978) *
               C52707 +
           (C54122 * C19485 + C54292 * C81014 - C54125 * C19486 -
            C54293 * C81008 + C62156 * C19487 + C62264 * C80996 -
            C62159 * C19488 - C62265 * C80978) *
               C52708) *
              C81009 * C80628 * C13799 +
          ((C19690 - (C19689 + C19688) + C19691 - C19692 - C19693 + C19694 +
            C19695) *
               C52707 +
           (C2008 * C19486 - (C2212 * C81014 + C2004 * C19485) +
            C2213 * C81008 - C12102 * C19487 - C12252 * C80996 +
            (C275 * C10471 + C81011 * C10634) * C19488 +
            (C275 * C10584 + C81011 * C10730) * C80978) *
               C52708) *
              C81009 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13805 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C13799 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13806 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13806 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C13799 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13805) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80726) *
              C81003 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13806 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C13799 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C13805) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13805 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C13799 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13806 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80988 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C13805 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C13799 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C13806 -
            (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C13806 -
            ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
              C52707 * C6662) *
                 C13799 +
             (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
              C52707 * C6656) *
                 C13805) +
            (C52961 * C6147 + C52707 * C6661 + C52962 * C6154 +
             C52708 * C6664) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13175 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C81010 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C13176 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C81000 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C13177 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80984 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C13178 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C17817 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C13176 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C81010 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C13175) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C81000 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C13177 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C80984 +
           (C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C13178 +
           (C52961 * C1697 + C52707 * C2304 + C52962 * C1705 + C52708 * C2308) *
               C80966) *
              C81009 * C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13805 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C13799 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C13806 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80598) *
              C81009 * C81011 * C81014 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C13806 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C13799 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C13805) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C80598) *
              C81009 * C81011 * C81008 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C13805 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C13799 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C13806 -
           (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
            C52707 * C2306) *
               C80598) *
              C81009 * C81011 * C80996 +
          ((C52961 * C10468 + C52707 * C10773 + C52962 * C10471 +
            C52708 * C10776) *
               C13806 -
           ((C52962 * C10478 + C52708 * C10779 + C52961 * C10473 +
             C52707 * C10778) *
                C13799 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C13805) +
           (C52961 * C10472 + C52707 * C10777 + C52962 * C10479 +
            C52708 * C10780) *
               C80598) *
              C81009 * C81011 * C80978) *
         C80628) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C852 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C81003 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C853 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80988 +
            (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C854 +
            (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
                C80962) *
               C81009 * C81011 * C13799 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C853 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C81003 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C852) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80988 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C854 -
            (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
                C80962) *
               C81009 * C81011 * C80598) *
              C17817 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C853 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C81003 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C852) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80988 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C854 -
            (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 +
             C52707 * C6739) *
                C80962) *
               C81009 * C81011 * C13799 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C852 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C81003 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C853 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80988 +
            (C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C854 +
            (C52961 * C6235 + C52707 * C6740 + C52962 * C6240 +
             C52708 * C6744) *
                C80962) *
               C81009 * C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C81010 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C81000 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C80984 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C80628 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C165) *
               C81009 * C81011 * C80966) *
              C17817 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C81000 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C81010 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C80984 +
           ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 +
             C52708 * C2300) *
                C165 +
            (C52961 * C1791 + C52707 * C2410 + C52962 * C1795 +
             C52708 * C2414) *
                C80628) *
               C81009 * C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C13799 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C80598) *
              C81014 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C80598 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C13799) *
              C81008 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C165 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80628) *
               C81009 * C81011 * C13799 -
           ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
             C52707 * C2412) *
                C80628 +
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C165) *
               C81009 * C81011 * C80598) *
              C80996 +
          (((C52961 * C10468 + C52707 * C10773 + C52962 * C10471 +
             C52708 * C10776) *
                C165 +
            (C52961 * C10526 + C52707 * C10823 + C52962 * C10529 +
             C52708 * C10826) *
                C80628) *
               C81009 * C81011 * C80598 -
           ((C52962 * C10528 + C52708 * C10825 + C52961 * C10527 +
             C52707 * C10824) *
                C80628 +
            (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
             C52707 * C10774) *
                C165) *
               C81009 * C81011 * C13799) *
              C80978)) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C17951 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C17817 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C17952 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C81003 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C17952 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C17817 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C17951) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80988 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C17951 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C17817 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C17952 -
            (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 +
             C52707 * C6821) *
                C80726) *
               C81009 * C81011 * C80962) *
              C13799 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C17952 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C17817 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C17951) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C81003 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C17951 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C17817 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C17952 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80988 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C17952 -
            ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 +
              C52707 * C1580) *
                 C17817 +
             (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
              C52707 * C1362) *
                 C17951) +
            (C52961 * C6323 + C52707 * C6823 + C52962 * C6326 +
             C52708 * C6824) *
                C80726) *
               C81009 * C81011 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C17951 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C17817 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C17952 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C80628 * C81010 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C17952 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C17817 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C17951) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C80726) *
              C81009 * C81011 * C80628 * C81000 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C17951 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C17817 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C17952 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C80726) *
              C81009 * C81011 * C80628 * C80984 +
          ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C17952 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C17817 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C17951) +
           (C52961 * C1887 + C52707 * C2515 + C52962 * C1888 + C52708 * C2516) *
               C80726) *
              C81009 * C81011 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C19485 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C81014 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C19486 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C81008 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C19487 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80996 -
           (C52962 * C10470 + C52708 * C10775 + C52961 * C10469 +
            C52707 * C10774) *
               C19488 -
           (C52962 * C10583 + C52708 * C10870 + C52961 * C10582 +
            C52707 * C10869) *
               C80978) *
              C81009 * C81011 * C80628 * C13799 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C19486 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C81014 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C19485) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C81008 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C19487 -
           (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
            C52707 * C2512) *
               C80996 +
           (C52961 * C10468 + C52707 * C10773 + C52962 * C10471 +
            C52708 * C10776) *
               C19488 +
           (C52961 * C10581 + C52707 * C10871 + C52962 * C10584 +
            C52708 * C10872) *
               C80978) *
              C81009 * C81011 * C80628 * C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78289 +
            (C26926 * C107 + C81009 * C117) * C80593 -
            (C26926 * C100 + C81009 * C106) * C78285 -
            (C26926 * C108 + C81009 * C118) * C80601 +
            (C26926 * C101 + C81009 * C109) * C78295 +
            (C26926 * C110 + C81009 * C119) * C15341) *
               C81011 * C52707 +
           (C67416 + C67417 - C67418 - C67419 + C67420 + C67421) * C81011 *
               C52708) *
              C80722 +
          ((C67418 - (C67417 + C67416) + C67419 - C67420 - C67421) * C81011 *
               C52707 +
           (C72182 - (C72183 + C72184) + C72185 - C72186 - C72187) * C81011 *
               C52708) *
              C80729 +
          ((C72184 + C72183 - C72182 - C72185 + C72186 + C72187) * C81011 *
               C52707 +
           (C61992 * C78289 + C61993 * C80593 - C63374 * C78285 -
            C63375 * C80601 + (C26926 * C11885 + C81009 * C11886) * C78295 +
            (C26926 * C11887 + C81009 * C11888) * C15341) *
               C81011 * C52708) *
              C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C165 +
                       (C26926 * C166 + C81009 * C172) * C80628) *
                          C81011 * C52707 +
                      (C53910 + C53934) * C81011 * C52708) *
                         C80593 -
                     ((C53935 + C53915) * C81011 * C52708 +
                      ((C26926 * C167 + C81009 * C173) * C80628 +
                       (C26926 * C100 + C81009 * C106) * C165) *
                          C81011 * C52707) *
                         C80601 +
                     (((C26926 * C101 + C81009 * C109) * C165 +
                       (C26926 * C168 + C81009 * C174) * C80628) *
                          C81011 * C52707 +
                      (C53916 + C53936) * C81011 * C52708) *
                         C15341) *
                        C80722 +
                    (((C53915 + C53935) * C81011 * C52707 +
                      (C53919 + C53937) * C81011 * C52708) *
                         C80601 -
                     ((C53938 + C53924) * C81011 * C52708 +
                      (C53934 + C53910) * C81011 * C52707) *
                         C80593 -
                     ((C53939 + C53927) * C81011 * C52708 +
                      (C53936 + C53916) * C81011 * C52707) *
                         C15341) *
                        C80729 +
                    (((C53924 + C53938) * C81011 * C52707 +
                      (C62044 + C62052) * C81011 * C52708) *
                         C80593 -
                     ((C63448 + C63446) * C81011 * C52708 +
                      (C53937 + C53919) * C81011 * C52707) *
                         C80601 +
                     ((C53927 + C53939) * C81011 * C52707 +
                      ((C26926 * C11885 + C81009 * C11886) * C165 +
                       (C26926 * C11955 + C81009 * C11956) * C80628) *
                          C81011 * C52708) *
                         C15341) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C78528 +
            (C26926 * C221 + C81009 * C227) * C80722 - C53812 * C78520 -
            C54026 * C80729 + C53820 * C78534 + C54027 * C20867) *
               C81011 * C52707 +
           (C53812 * C78528 + C54026 * C80722 - C53820 * C78520 -
            C54027 * C80729 + C61992 * C78534 + C62102 * C20867) *
               C81011 * C52708) *
              C80628 * C80593 +
          ((C53814 * C78520 -
            ((C26926 * C222 + C81009 * C228) * C80722 +
             (C26926 * C100 + C81009 * C106) * C78528) +
            C54028 * C80729 - C53818 * C78534 - C54029 * C20867) *
               C81011 * C52707 +
           (C53818 * C78520 - (C54028 * C80722 + C53814 * C78528) +
            C54029 * C80729 - C63374 * C78534 - C63517 * C20867) *
               C81011 * C52708) *
              C80628 * C80601 +
          (((C26926 * C101 + C81009 * C109) * C78528 +
            (C26926 * C223 + C81009 * C229) * C80722 - C53816 * C78520 -
            C54030 * C80729 + C53822 * C78534 + C54031 * C20867) *
               C81011 * C52707 +
           (C53816 * C78528 + C54030 * C80722 - C53822 * C78520 -
            C54031 * C80729 + (C26926 * C11885 + C81009 * C11886) * C78534 +
            (C26926 * C12027 + C81009 * C12028) * C20867) *
               C81011 * C52708) *
              C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78289 +
            (C275 * C107 + C81011 * C282) * C80593 - C305 * C78285 -
            C306 * C80601 + C307 * C78295 + C308 * C15341) *
               C52707 +
           (C67720 + C67721 - C67722 - C67723 + C67724 + C67725) * C52708) *
              C81009 * C80722 +
          ((C67722 - (C67721 + C67720) + C67723 - C67724 - C67725) * C52707 +
           (C72410 - (C72411 + C72412) + C72413 - C72414 - C72415) * C52708) *
              C81009 * C80729 +
          ((C72412 + C72411 - C72410 - C72413 + C72414 + C72415) * C52707 +
           (C62156 * C78289 + C62157 * C80593 - C12102 * C78285 -
            C12103 * C80601 + (C275 * C11885 + C81011 * C12095) * C78295 +
            (C275 * C11887 + C81011 * C12096) * C15341) *
               C52708) *
              C81009 * C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eeyy[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C165 +
                       (C275 * C166 + C81011 * C354) * C80628) *
                          C52707 +
                      (C54204 + C54212) * C52708) *
                         C81009 * C80593 -
                     ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) *
                         C81009 * C80601 +
                     ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) *
                         C81009 * C15341) *
                        C80722 +
                    (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) *
                         C81009 * C80601 -
                     ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) *
                         C81009 * C80593 -
                     ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) *
                         C81009 * C15341) *
                        C80729 +
                    (((C54209 + C54213) * C52707 + (C62207 + C62215) * C52708) *
                         C81009 * C80593 -
                     ((C12175 + C12171) * C52708 + (C2112 + C2100) * C52707) *
                         C81009 * C80601 +
                     ((C2105 + C2113) * C52707 +
                      ((C275 * C11885 + C81011 * C12095) * C165 +
                       (C275 * C11955 + C81011 * C12169) * C80628) *
                          C52708) *
                         C81009 * C15341) *
                        C20867)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78528 +
            (C275 * C221 + C81011 * C422) * C80722 - C54122 * C78520 -
            C54292 * C80729 + C54125 * C78534 + C54293 * C20867) *
               C52707 +
           (C54122 * C78528 + C54292 * C80722 - C54125 * C78520 -
            C54293 * C80729 + C62156 * C78534 + C62264 * C20867) *
               C52708) *
              C81009 * C80628 * C80593 +
          ((C21244 - (C21243 + C21242) + C21245 - C21246 - C21247) * C52707 +
           (C2008 * C78520 - (C2212 * C80722 + C2004 * C78528) +
            C2213 * C80729 - C12102 * C78534 - C12252 * C20867) *
               C52708) *
              C81009 * C80628 * C80601 +
          ((C21250 + C21249 - C21248 - C21251 + C21252 + C21253) * C52707 +
           (C2006 * C78528 + C2214 * C80722 - C2010 * C78520 - C2215 * C80729 +
            (C275 * C11885 + C81011 * C12095) * C78534 +
            (C275 * C12027 + C81011 * C12241) * C20867) *
               C52708) *
              C81009 * C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78289 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80593 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C78285 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80601 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C78295 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C15341) *
              C81009 * C81011 * C80722 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C78285 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80593 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C78289) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C80601 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C78295 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C15341) *
              C81009 * C81011 * C80729 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C78289 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C80593 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C78285 -
           (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
            C52707 * C2306) *
               C80601 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C78295 +
           (C52961 * C1703 + C52707 * C2307 + C52962 * C11887 +
            C52708 * C12320) *
               C15341) *
              C81009 * C81011 * C20867) *
         C80628) /
        (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C80593 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C80601 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C15341) *
              C80722 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C80601 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C80593 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C15341) *
              C80729 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C165 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80628) *
               C81009 * C81011 * C80593 -
           ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
             C52707 * C2412) *
                C80628 +
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C165) *
               C81009 * C81011 * C80601 +
           ((C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
             C52708 * C12319) *
                C165 +
            (C52961 * C1794 + C52707 * C2413 + C52962 * C11955 +
             C52708 * C12393) *
                C80628) *
               C81009 * C81011 * C15341) *
              C20867)) /
        (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78528 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80722 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C78520 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80729 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C78534 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C20867) *
              C81009 * C81011 * C80628 * C80593 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C78520 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80722 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78528) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C80729 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C78534 -
           (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
            C52707 * C2512) *
               C20867) *
              C81009 * C81011 * C80628 * C80601 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C78528 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C80722 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C78520 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C80729 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C78534 +
           (C52961 * C1886 + C52707 * C2514 + C52962 * C12027 +
            C52708 * C12465) *
               C20867) *
              C81009 * C81011 * C80628 * C15341)) /
        (p * q * std::sqrt(p + q));
    d2eexx[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C13175 +
                      (C26926 * C107 + C81009 * C117) * C81010 -
                      (C26926 * C100 + C81009 * C106) * C13176 -
                      (C26926 * C108 + C81009 * C118) * C81000 +
                      (C26926 * C101 + C81009 * C109) * C13177 +
                      (C26926 * C110 + C81009 * C119) * C80984 -
                      (C26926 * C102 + C81009 * C111) * C13178 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C69192 + C69193 - C69194 - C69195 + C69196 + C69197 -
                      C69198 - C69199) *
                         C81011 * C52708) *
                        C17817 +
                    ((C69194 - (C69193 + C69192) + C69195 - C69196 - C69197 +
                      C69198 + C69199) *
                         C81011 * C52707 +
                     (C53818 * C13176 - (C53819 * C81010 + C53820 * C13175) +
                      C53821 * C81000 - C53822 * C13177 - C53823 * C80984 +
                      (C26926 * C1689 + C81009 * C1704) * C13178 +
                      (C26926 * C1705 + C81009 * C1713) * C80966) *
                         C81011 * C52708) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C13805 +
                       (C26926 * C107 + C81009 * C117) * C13799 -
                       (C26926 * C100 + C81009 * C106) * C13806 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C65820 + C65821 - C65822 - C65823) * C81011 * C52708) *
                         C17817 +
                     ((C65822 - (C65821 + C65820) + C65823) * C81011 * C52707 +
                      (C65824 - (C65825 + C65826) + C65827) * C81011 * C52708) *
                         C80726) *
                        C81003 +
                    (((C39644 - (C39643 + C39642) + C39645) * C81011 * C52707 +
                      (C40292 - (C40293 + C40294) + C40295) * C81011 * C52708) *
                         C17817 +
                     ((C40294 + C40293 - C40292 - C40295) * C81011 * C52707 +
                      (C40296 + C40297 - C40298 - C40299) * C81011 * C52708) *
                         C80726) *
                        C80988 +
                    (((C39648 + C39647 - C39646 - C39649) * C81011 * C52707 +
                      (C42780 + C42781 - C42782 - C42783) * C81011 * C52708) *
                         C17817 +
                     ((C42782 - (C42781 + C42780) + C42783) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C13806 -
                       (C32162 * C13799 + C32163 * C13805) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C81010 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C81000 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C81011 * C52707 +
            (C53916 + C53936) * C81011 * C52708) *
               C80984 -
           ((C55260 + C55258) * C81011 * C52708 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C81011 * C52707) *
               C80966) *
              C17817 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C81000 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C81010 -
           ((C53939 + C53927) * C81011 * C52708 +
            (C53936 + C53916) * C81011 * C52707) *
               C80984 +
           ((C55258 + C55260) * C81011 * C52707 +
            ((C26926 * C1689 + C81009 * C1704) * C165 +
             (C26926 * C1795 + C81009 * C1803) * C80628) *
                C81011 * C52708) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C852 +
             (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
             C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
                C81011 * C52707 +
            (C61396 + C61397 - C61398 - C61399 + C61400 + C61401) * C81011 *
                C52708) *
               C13799 +
           ((C27366 * C853 -
             ((C26926 * C167 + C81009 * C173) * C81003 +
              (C26926 * C100 + C81009 * C106) * C852) +
             C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
                C81011 * C52707 +
            (C69932 - (C69933 + C69934) + C69935 - C69936 - C69937) * C81011 *
                C52708) *
               C80598) *
              C17817 +
          (((C61398 - (C61397 + C61396) + C61399 - C61400 - C61401) * C81011 *
                C52707 +
            (C61402 - (C61403 + C61404) + C61405 - C61406 - C61407) * C81011 *
                C52708) *
               C13799 +
           ((C69934 + C69933 - C69932 - C69935 + C69936 + C69937) * C81011 *
                C52707 +
            (C53818 * C852 + C53931 * C81003 - C36914 * C853 - C37018 * C80988 +
             (C26926 * C6142 + C81009 * C6152) * C854 +
             (C26926 * C6240 + C81009 * C6246) * C80962) *
                C81011 * C52708) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C17951 +
                      (C26926 * C221 + C81009 * C227) * C17817 -
                      C53812 * C17952 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C80628 * C81010 +
                    ((C53814 * C17952 -
                      ((C26926 * C222 + C81009 * C228) * C17817 +
                       (C26926 * C100 + C81009 * C106) * C17951) +
                      C54028 * C80726) *
                         C81011 * C52707 +
                     (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                      C54029 * C80726) *
                         C81011 * C52708) *
                        C80628 * C81000 +
                    (((C26926 * C101 + C81009 * C109) * C17951 +
                      (C26926 * C223 + C81009 * C229) * C17817 -
                      C53816 * C17952 - C54030 * C80726) *
                         C81011 * C52707 +
                     (C53816 * C17951 + C54030 * C17817 - C53822 * C17952 -
                      C54031 * C80726) *
                         C81011 * C52708) *
                        C80628 * C80984 +
                    ((C55186 * C17952 -
                      ((C26926 * C224 + C81009 * C230) * C17817 +
                       (C26926 * C102 + C81009 * C111) * C17951) +
                      C55329 * C80726) *
                         C81011 * C52707 +
                     ((C26926 * C1689 + C81009 * C1704) * C17952 -
                      (C55329 * C17817 + C55186 * C17951) +
                      (C26926 * C1888 + C81009 * C1896) * C80726) *
                         C81011 * C52708) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C17951 +
                       (C26926 * C221 + C81009 * C227) * C17817 -
                       C53812 * C17952 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C17951 + C54026 * C17817 - C53820 * C17952 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C81003 +
                     ((C44462 - (C44461 + C44460) + C44463) * C81011 * C52707 +
                      (C32158 * C17952 - (C30294 * C17817 + C30064 * C17951) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80988 +
                     ((C44466 + C44465 - C44464 - C44467) * C81011 * C52707 +
                      (C32160 * C17951 + C32347 * C17817 - C32163 * C17952 -
                       C32348 * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C13799 +
                    (((C53814 * C17952 -
                       ((C26926 * C222 + C81009 * C228) * C17817 +
                        (C26926 * C100 + C81009 * C106) * C17951) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C17952 - (C54028 * C17817 + C53814 * C17951) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C81003 +
                     ((C44470 + C44469 - C44468 - C44471) * C81011 * C52707 +
                      (C30062 * C17951 + C30295 * C17817 - C36914 * C17952 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80988 +
                     ((C44474 - (C44473 + C44472) + C44475) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C17952 -
                       (C33812 * C17817 + C33600 * C17951) +
                       (C26926 * C6326 + C81009 * C6332) * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C13175 +
                      (C275 * C107 + C81011 * C282) * C81010 - C305 * C13176 -
                      C306 * C81000 + C307 * C13177 + C308 * C80984 -
                      C309 * C13178 - C310 * C80966) *
                         C52707 +
                     (C69398 + C69399 - C69400 - C69401 + C69402 + C69403 -
                      C69404 - C69405) *
                         C52708) *
                        C81009 * C17817 +
                    ((C69400 - (C69399 + C69398) + C69401 - C69402 - C69403 +
                      C69404 + C69405) *
                         C52707 +
                     (C2008 * C13176 - (C54124 * C81010 + C54125 * C13175) +
                      C2009 * C81000 - C2010 * C13177 - C2011 * C80984 +
                      (C275 * C1689 + C81011 * C1978) * C13178 +
                      (C275 * C1705 + C81011 * C1986) * C80966) *
                         C52708) *
                        C81009 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C13805 +
                       (C275 * C107 + C81011 * C282) * C13799 - C305 * C13806 -
                       C306 * C80598) *
                          C52707 +
                      (C66138 + C66139 - C66140 - C66141) * C52708) *
                         C81009 * C17817 +
                     ((C66140 - (C66139 + C66138) + C66141) * C52707 +
                      (C66142 - (C66143 + C66144) + C66145) * C52708) *
                         C81009 * C80726) *
                        C81003 +
                    (((C1068 * C13806 -
                       ((C275 * C757 + C81011 * C1043) * C13799 +
                        (C275 * C748 + C81011 * C1036) * C13805) +
                       C1069 * C80598) *
                          C52707 +
                      (C66146 - (C66147 + C66148) + C66149) * C52708) *
                         C81009 * C17817 +
                     ((C66148 + C66147 - C66146 - C66149) * C52707 +
                      (C66150 + C66151 - C66152 - C66153) * C52708) *
                         C81009 * C80726) *
                        C80988 +
                    ((((C275 * C750 + C81011 * C1039) * C13805 +
                       (C275 * C764 + C81011 * C1047) * C13799 -
                       C1072 * C13806 - C1073 * C80598) *
                          C52707 +
                      (C68626 + C68627 - C68628 - C68629) * C52708) *
                         C81009 * C17817 +
                     ((C68628 - (C68627 + C68626) + C68629) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C13806 -
                       (C58028 * C13799 + C58029 * C13805) +
                       (C275 * C6154 + C81011 * C6418) * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C81010 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C81000 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C80984 -
           ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 *
               C80966) *
              C17817 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C81000 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C81010 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C80984 +
           ((C3569 + C3571) * C52707 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C52708) *
               C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C852 +
             (C275 * C166 + C81011 * C354) * C81003 -
             (C275 * C748 + C81011 * C1036) * C853 -
             (C275 * C856 + C81011 * C1149) * C80988 +
             (C275 * C750 + C81011 * C1039) * C854 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C52707 +
            (C61630 + C61631 - C61632 - C61633 + C61634 + C61635) * C52708) *
               C81009 * C13799 +
           ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C52707 +
            (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) * C52708) *
               C81009 * C80598) *
              C17817 +
          (((C61632 - (C61631 + C61630) + C61633 - C61634 - C61635) * C52707 +
            (C61636 - (C61637 + C61638) + C61639 - C61640 - C61641) * C52708) *
               C81009 * C13799 +
           ((C18866 + C18865 - C18864 - C18867 + C18868 + C18869) * C52707 +
            (C2008 * C852 + C2108 * C81003 - C11280 * C853 - C11386 * C80988 +
             (C275 * C6142 + C81011 * C6412) * C854 +
             (C275 * C6240 + C81011 * C6498) * C80962) *
                C52708) *
               C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C17951 +
            (C275 * C221 + C81011 * C422) * C17817 - C54122 * C17952 -
            C54292 * C80726) *
               C52707 +
           (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
            C54293 * C80726) *
               C52708) *
              C81009 * C80628 * C81010 +
          ((C18154 - (C18153 + C18152) + C18155) * C52707 +
           (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
            C2213 * C80726) *
               C52708) *
              C81009 * C80628 * C81000 +
          ((C18158 + C18157 - C18156 - C18159) * C52707 +
           (C2006 * C17951 + C2214 * C17817 - C2010 * C17952 - C2215 * C80726) *
               C52708) *
              C81009 * C80628 * C80984 +
          ((C18162 - (C18161 + C18160) + C18163) * C52707 +
           ((C275 * C1689 + C81011 * C1978) * C17952 -
            (C3652 * C17817 + C3498 * C17951) +
            (C275 * C1888 + C81011 * C2194) * C80726) *
               C52708) *
              C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C17951 +
             (C275 * C221 + C81011 * C422) * C17817 - C54122 * C17952 -
             C54292 * C80726) *
                C52707 +
            (C54122 * C17951 + C54292 * C17817 - C54125 * C17952 -
             C54293 * C80726) *
                C52708) *
               C81009 * C81003 +
           ((C56147 * C17952 -
             ((C275 * C946 + C81011 * C1256) * C17817 +
              (C275 * C748 + C81011 * C1036) * C17951) +
             C56355 * C80726) *
                C52707 +
            (C58024 * C17952 - (C56355 * C17817 + C56147 * C17951) +
             C58211 * C80726) *
                C52708) *
               C81009 * C80988 +
           (((C275 * C750 + C81011 * C1039) * C17951 +
             (C275 * C947 + C81011 * C1257) * C17817 - C58026 * C17952 -
             C58212 * C80726) *
                C52707 +
            (C58026 * C17951 + C58212 * C17817 - C58029 * C17952 -
             C58213 * C80726) *
                C52708) *
               C81009 * C80962) *
              C13799 +
          (((C18154 - (C18153 + C18152) + C18155) * C52707 +
            (C2008 * C17952 - (C2212 * C17817 + C2004 * C17951) +
             C2213 * C80726) *
                C52708) *
               C81009 * C81003 +
           ((C18970 + C18969 - C18968 - C18971) * C52707 +
            (C4322 * C17951 + C4554 * C17817 - C11280 * C17952 -
             C11494 * C80726) *
                C52708) *
               C81009 * C80988 +
           ((C18974 - (C18973 + C18972) + C18975) * C52707 +
            ((C275 * C6142 + C81011 * C6412) * C17952 -
             (C8112 * C17817 + C7898 * C17951) +
             (C275 * C6326 + C81011 * C6578) * C80726) *
                C52708) *
               C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C13175 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C81010 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C13176 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C81000 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C13177 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80984 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C13178 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C17817 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C13176 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C81010 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C13175) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C81000 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C13177 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C80984 +
           (C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C13178 +
           (C52961 * C1697 + C52707 * C2304 + C52962 * C1705 + C52708 * C2308) *
               C80966) *
              C81009 * C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C13805 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C13799 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C13806 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C13806 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C13799 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C13805) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80726) *
              C81003 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C13806 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C13799 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C13805) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C13805 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C13799 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C13806 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80988 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C13805 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C13799 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C13806 -
            (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
                C80598) *
               C81009 * C81011 * C17817 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C13806 -
            ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
              C52707 * C6662) *
                 C13799 +
             (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
              C52707 * C6656) *
                 C13805) +
            (C52961 * C6147 + C52707 * C6661 + C52962 * C6154 +
             C52708 * C6664) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C81010 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C81000 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C80984 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C80628 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C165) *
               C81009 * C81011 * C80966) *
              C17817 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C81000 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C81010 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C80984 +
           ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 +
             C52708 * C2300) *
                C165 +
            (C52961 * C1791 + C52707 * C2410 + C52962 * C1795 +
             C52708 * C2414) *
                C80628) *
               C81009 * C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C852 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C81003 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C853 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80988 +
            (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C854 +
            (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
                C80962) *
               C81009 * C81011 * C13799 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C853 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C81003 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C852) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80988 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C854 -
            (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
                C80962) *
               C81009 * C81011 * C80598) *
              C17817 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C853 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C81003 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C852) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80988 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C854 -
            (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 +
             C52707 * C6739) *
                C80962) *
               C81009 * C81011 * C13799 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C852 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C81003 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C853 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80988 +
            (C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C854 +
            (C52961 * C6235 + C52707 * C6740 + C52962 * C6240 +
             C52708 * C6744) *
                C80962) *
               C81009 * C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C17951 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C17817 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C17952 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C80628 * C81010 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C17952 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C17817 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C17951) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C80726) *
              C81009 * C81011 * C80628 * C81000 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C17951 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C17817 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C17952 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C80726) *
              C81009 * C81011 * C80628 * C80984 +
          ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C17952 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C17817 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C17951) +
           (C52961 * C1887 + C52707 * C2515 + C52962 * C1888 + C52708 * C2516) *
               C80726) *
              C81009 * C81011 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C17951 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C17817 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C17952 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C81003 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C17952 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C17817 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C17951) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80988 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C17951 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C17817 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C17952 -
            (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 +
             C52707 * C6821) *
                C80726) *
               C81009 * C81011 * C80962) *
              C13799 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C17952 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C17817 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C17951) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C81003 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C17951 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C17817 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C17952 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80988 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C17952 -
            ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 +
              C52707 * C1580) *
                 C17817 +
             (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
              C52707 * C1362) *
                 C17951) +
            (C52961 * C6323 + C52707 * C6823 + C52962 * C6326 +
             C52708 * C6824) *
                C80726) *
               C81009 * C81011 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C53812 * C2613 + C53813 * C2607 - C53814 * C2614 -
                      C53815 * C2608 + C53816 * C2615 + C53817 * C2609 -
                      (C26926 * C1685 + C81009 * C1696) * C2616 -
                      (C26926 * C1697 + C81009 * C1709) * C80966) *
                         C81011 * C52708) *
                        C80639 * C80932 +
                    ((C28802 - (C28801 + C28800) + C28803 - C28804 - C28805 +
                      C28812 + C28813) *
                         C81011 * C52707 +
                     (C30062 * C2614 - (C30063 * C2607 + C30064 * C2613) +
                      C30065 * C2608 - C30066 * C2615 - C30067 * C2609 +
                      (C26926 * C3982 + C81009 * C3989) * C2616 +
                      (C26926 * C3990 + C81009 * C3994) * C80966) *
                         C81011 * C52708) *
                        C80639 * C80686)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C78279 +
                      (C26926 * C107 + C81009 * C117) * C80916 -
                      (C26926 * C100 + C81009 * C106) * C78260 -
                      (C26926 * C108 + C81009 * C118) * C80598) *
                         C81011 * C52707 +
                     (C53812 * C78279 + C53813 * C80916 - C53814 * C78260 -
                      C53815 * C80598) *
                         C81011 * C52708) *
                        C80639 * C6893 +
                    ((C32928 - (C32927 + C32926) + C32929) * C81011 * C52707 +
                     (C33590 - (C33591 + C33592) + C33593) * C81011 * C52708) *
                        C80639 * C6894 +
                    ((C32932 + C32931 - C32930 - C32933) * C81011 * C52707 +
                     (C33594 + C33595 - C33602 - C33603) * C81011 * C52708) *
                        C80639 * C6895 +
                    ((C32942 - (C32935 + C32934) + C32943) * C81011 * C52707 +
                     ((C26926 * C8500 + C81009 * C8502) * C78260 -
                      (C34488 * C80916 + C34489 * C78279) +
                      (C26926 * C8504 + C81009 * C8506) * C80598) *
                         C81011 * C52708) *
                        C80639 * C80972)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2687 +
                      (C26926 * C166 + C81009 * C172) * C80932 -
                      C27364 * C2688 - C27474 * C80686) *
                         C81011 * C52707 +
                     (C53812 * C2687 + C53928 * C80932 - C30064 * C2688 -
                      C30178 * C80686) *
                         C81011 * C52708) *
                        C2607 +
                    ((C27366 * C2688 -
                      ((C26926 * C167 + C81009 * C173) * C80932 +
                       (C26926 * C100 + C81009 * C106) * C2687) +
                      C27476 * C80686) *
                         C81011 * C52707 +
                     (C30062 * C2688 - (C53929 * C80932 + C53814 * C2687) +
                      C30179 * C80686) *
                         C81011 * C52708) *
                        C2608 +
                    (((C26926 * C101 + C81009 * C109) * C2687 +
                      (C26926 * C168 + C81009 * C174) * C80932 -
                      C27368 * C2688 - C27478 * C80686) *
                         C81011 * C52707 +
                     (C53816 * C2687 + C53930 * C80932 - C30066 * C2688 -
                      C30180 * C80686) *
                         C81011 * C52708) *
                        C2609 +
                    ((C28810 * C2688 -
                      ((C26926 * C169 + C81009 * C175) * C80932 +
                       (C26926 * C102 + C81009 * C111) * C2687) +
                      C28882 * C80686) *
                         C81011 * C52707 +
                     ((C26926 * C3982 + C81009 * C3989) * C2688 -
                      ((C26926 * C1791 + C81009 * C1799) * C80932 +
                       (C26926 * C1685 + C81009 * C1696) * C2687) +
                      (C26926 * C4096 + C81009 * C4100) * C80686) *
                         C81011 * C52708) *
                        C80966) *
                   C80639) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C53812 * C6969 + C53928 * C6893 - C30064 * C6970 -
                      C30178 * C6894 + C32160 * C6971 + C32252 * C6895 -
                      C34489 * C6972 - C34562 * C80972) *
                         C81011 * C52708) *
                        C80916 +
                    ((C27366 * C6970 -
                      ((C26926 * C167 + C81009 * C173) * C6893 +
                       (C26926 * C100 + C81009 * C106) * C6969) +
                      C27476 * C6894 - C27370 * C6971 - C27477 * C6895 +
                      C32940 * C6972 + C33012 * C80972) *
                         C81011 * C52707 +
                     (C30062 * C6970 - (C53929 * C6893 + C53814 * C6969) +
                      C30179 * C6894 - C33600 * C6971 - C33704 * C6895 +
                      (C26926 * C8500 + C81009 * C8502) * C6972 +
                      (C26926 * C8574 + C81009 * C8576) * C80972) *
                         C81011 * C52708) *
                        C80598) *
                   C80639) /
                      (p * q * std::sqrt(p + q));
    d2eexz[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C81011 * C52707 +
                      (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
                         C80932 -
                     ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                      (C27578 + C27554) * C81011 * C52707) *
                         C80686) *
                        C2607 +
                    (((C27560 + C27580) * C81011 * C52707 +
                      (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                         C80686 -
                     ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C81011 * C52707) *
                         C80932) *
                        C2608 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C81011 * C52707 +
                      (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
                         C80932 -
                     ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
                      (C27582 + C27566) * C81011 * C52707) *
                         C80686) *
                        C2609 +
                    (((C28949 + C28953) * C81011 * C52707 +
                      ((C26926 * C3982 + C81009 * C3989) * C220 +
                       (C26926 * C4202 + C81009 * C4206) * C80639) *
                          C81011 * C52708) *
                         C80686 -
                     (((C26926 * C1887 + C81009 * C1895) * C80639 +
                       (C26926 * C1685 + C81009 * C1696) * C220) *
                          C81011 * C52708 +
                      ((C26926 * C224 + C81009 * C230) * C80639 +
                       (C26926 * C102 + C81009 * C111) * C220) *
                          C81011 * C52707) *
                         C80932) *
                        C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C81011 * C52707 +
                      (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
                         C6893 -
                     ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                      (C27578 + C27554) * C81011 * C52707) *
                         C6894 +
                     ((C27559 + C27579) * C81011 * C52707 +
                      (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
                         C6895 -
                     ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
                      (C31768 + C31760) * C81011 * C52707) *
                         C80972) *
                        C80916 +
                    (((C27560 + C27580) * C81011 * C52707 +
                      (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                         C6894 -
                     ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C81011 * C52707) *
                         C6893 -
                     ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
                      (C27581 + C27563) * C81011 * C52707) *
                         C6895 +
                     ((C33081 + C33083) * C81011 * C52707 +
                      ((C26926 * C8500 + C81009 * C8502) * C220 +
                       (C26926 * C8644 + C81009 * C8646) * C80639) *
                          C81011 * C52708) *
                         C80972) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2613 +
            (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
            C306 * C2608 + C307 * C2615 + C308 * C2609 - C309 * C2616 -
            C310 * C80966) *
               C52707 +
           (C54122 * C2613 + C54123 * C2607 - C2004 * C2614 - C2005 * C2608 +
            C2006 * C2615 + C2007 * C2609 - C3498 * C2616 - C3499 * C80966) *
               C52708) *
              C81009 * C80639 * C80932 +
          ((C1068 * C2614 -
            ((C275 * C757 + C81011 * C1043) * C2607 +
             (C275 * C748 + C81011 * C1036) * C2613) +
            C1069 * C2608 - C1070 * C2615 - C1071 * C2609 + C2832 * C2616 +
            C2833 * C80966) *
               C52707 +
           (C4322 * C2614 -
            ((C275 * C3985 + C81011 * C4309) * C2607 +
             (C275 * C3979 + C81011 * C4305) * C2613) +
            C4323 * C2608 - C4324 * C2615 - C4325 * C2609 +
            (C275 * C3982 + C81011 * C4308) * C2616 +
            (C275 * C3990 + C81011 * C4312) * C80966) *
               C52708) *
              C81009 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C78279 +
            (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
            C306 * C80598) *
               C52707 +
           (C54122 * C78279 + C54123 * C80916 - C2004 * C78260 -
            C2005 * C80598) *
               C52708) *
              C81009 * C80639 * C6893 +
          ((C1068 * C78260 -
            ((C275 * C757 + C81011 * C1043) * C80916 +
             (C275 * C748 + C81011 * C1036) * C78279) +
            C1069 * C80598) *
               C52707 +
           (C4322 * C78260 - (C56146 * C80916 + C56147 * C78279) +
            C4323 * C80598) *
               C52708) *
              C81009 * C80639 * C6894 +
          (((C275 * C750 + C81011 * C1039) * C78279 +
            (C275 * C764 + C81011 * C1047) * C80916 - C1072 * C78260 -
            C1073 * C80598) *
               C52707 +
           (C58026 * C78279 + C58027 * C80916 - C7898 * C78260 -
            C7899 * C80598) *
               C52708) *
              C81009 * C80639 * C6895 +
          ((C7116 * C78260 -
            ((C275 * C5663 + C81011 * C5826) * C80916 +
             (C275 * C5659 + C81011 * C5822) * C78279) +
            C7117 * C80598) *
               C52707 +
           ((C275 * C8500 + C81011 * C8714) * C78260 -
            ((C275 * C8503 + C81011 * C8715) * C80916 +
             (C275 * C8499 + C81011 * C8713) * C78279) +
            (C275 * C8504 + C81011 * C8716) * C80598) *
               C52708) *
              C81009 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C2687 +
            (C275 * C166 + C81011 * C354) * C80932 -
            (C275 * C748 + C81011 * C1036) * C2688 -
            (C275 * C856 + C81011 * C1149) * C80686) *
               C52707 +
           (C54122 * C2687 + C54210 * C80932 -
            (C275 * C3979 + C81011 * C4305) * C2688 -
            (C275 * C4093 + C81011 * C4423) * C80686) *
               C52708) *
              C81009 * C2607 +
          ((C2903 - (C2902 + C2901) + C2904) * C52707 +
           (C4428 - (C4429 + C4430) + C4440) * C52708) *
              C81009 * C2608 +
          ((C2907 + C2906 - C2905 - C2908) * C52707 +
           (C4433 + C4434 - C4435 - C4441) * C52708) *
              C81009 * C2609 +
          ((C2911 - (C2910 + C2909) + C2915) * C52707 +
           ((C275 * C3982 + C81011 * C4308) * C2688 -
            (C3570 * C80932 + C3498 * C2687) +
            (C275 * C4096 + C81011 * C4426) * C80686) *
               C52708) *
              C81009 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C6969 +
            (C275 * C166 + C81011 * C354) * C6893 -
            (C275 * C748 + C81011 * C1036) * C6970 -
            (C275 * C856 + C81011 * C1149) * C6894 +
            (C275 * C750 + C81011 * C1039) * C6971 +
            (C275 * C857 + C81011 * C1150) * C6895 -
            (C275 * C5659 + C81011 * C5822) * C6972 -
            (C275 * C5722 + C81011 * C5871) * C80972) *
               C52707 +
           (C54122 * C6969 + C54210 * C6893 - C56147 * C6970 - C56253 * C6894 +
            C58026 * C6971 + C58125 * C6895 -
            (C275 * C8499 + C81011 * C8713) * C6972 -
            (C275 * C8573 + C81011 * C8783) * C80972) *
               C52708) *
              C81009 * C80916 +
          ((C7187 - (C7186 + C7185) + C7188 - C7189 - C7190 + C7191 + C7195) *
               C52707 +
           (C4322 * C6970 - (C2106 * C6893 + C2004 * C6969) + C4438 * C6894 -
            C7898 * C6971 - C8006 * C6895 +
            (C275 * C8500 + C81011 * C8714) * C6972 +
            (C275 * C8574 + C81011 * C8784) * C80972) *
               C52708) *
              C81009 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C80932 -
           (((C275 * C4199 + C81011 * C4539) * C80639 +
             (C275 * C3979 + C81011 * C4305) * C220) *
                C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80686) *
              C2607 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80686 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C80932) *
              C2608 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C80932 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80686) *
              C2609 +
          (((C2985 + C2987) * C52707 +
            ((C275 * C3982 + C81011 * C4308) * C220 +
             (C275 * C4202 + C81011 * C4542) * C80639) *
                C52708) *
               C81009 * C80686 -
           ((C3652 * C80639 + C3498 * C220) * C52708 + (C447 + C435) * C52707) *
               C81009 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C6893 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C6894 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            (C58026 * C220 + C58212 * C80639) * C52708) *
               C81009 * C6895 -
           (((C275 * C8643 + C81011 * C8851) * C80639 +
             (C275 * C8499 + C81011 * C8713) * C220) *
                C52708 +
            ((C275 * C5772 + C81011 * C5918) * C80639 +
             (C275 * C5659 + C81011 * C5822) * C220) *
                C52707) *
               C81009 * C80972) *
              C80916 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C6894 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C6893 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C6895 +
           ((C7265 + C7267) * C52707 +
            ((C275 * C8500 + C81011 * C8714) * C220 +
             (C275 * C8644 + C81011 * C8852) * C80639) *
                C52708) *
               C81009 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C2613 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C2607 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C2614 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C2608 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C2615 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C2609 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C2616 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C80639 * C80932 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C2614 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C2607 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C2613) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C2608 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C2615 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C2609 +
           (C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C2616 +
           (C52961 * C761 + C52707 * C1368 + C52962 * C3990 + C52708 * C4662) *
               C80966) *
              C81009 * C81011 * C80639 * C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C78279 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80916 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C78260 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80598) *
              C81009 * C81011 * C80639 * C6893 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C78260 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80916 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C78279) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80598) *
              C81009 * C81011 * C80639 * C6894 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C78279 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80916 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C78260 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80598) *
              C81009 * C81011 * C80639 * C6895 +
          ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C78260 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C80916 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C78279) +
           (C52961 * C5662 + C52707 * C5967 + C52962 * C8504 + C52708 * C8922) *
               C80598) *
              C81009 * C81011 * C80639 * C80972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C2687 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80932 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C2688 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80686) *
              C81009 * C81011 * C2607 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C2688 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80932 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C2687) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80686) *
              C81009 * C81011 * C2608 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C2687 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C80932 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C2688 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80686) *
              C81009 * C81011 * C2609 +
          ((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
               C2688 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C80932 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C2687) +
           (C52961 * C861 + C52707 * C1477 + C52962 * C4096 + C52708 * C4776) *
               C80686) *
              C81009 * C81011 * C80966) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C6969 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C6893 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C6970 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C6894 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C6971 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C6895 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C6972 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C80916 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C6970 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C6893 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C6969) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C6894 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C6971 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C6895 +
           (C52961 * C5658 + C52707 * C5963 + C52962 * C8500 + C52708 * C8920) *
               C6972 +
           (C52961 * C5721 + C52707 * C6015 + C52962 * C8574 + C52708 * C8990) *
               C80972) *
              C81009 * C81011 * C80598) *
         C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C80932 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80686) *
              C2607 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C80932) *
              C2608 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C80932 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80686) *
              C2609 +
          (((C52961 * C749 + C52707 * C1360 + C52962 * C3982 + C52708 * C4658) *
                C220 +
            (C52961 * C951 + C52707 * C1583 + C52962 * C4202 + C52708 * C4892) *
                C80639) *
               C81009 * C81011 * C80686 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C80639 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C220) *
               C81009 * C81011 * C80932) *
              C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C6893 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C6894 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C6895 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C80639 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C220) *
               C81009 * C81011 * C80972) *
              C80916 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C6894 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C6893 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C6895 +
           ((C52961 * C5658 + C52707 * C5963 + C52962 * C8500 +
             C52708 * C8920) *
                C220 +
            (C52961 * C5771 + C52707 * C6059 + C52962 * C8644 +
             C52708 * C9058) *
                C80639) *
               C81009 * C81011 * C80972) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C743 +
             (C26926 * C107 + C81009 * C117) * C737 -
             (C26926 * C100 + C81009 * C106) * C744 -
             (C26926 * C108 + C81009 * C118) * C738 +
             (C26926 * C101 + C81009 * C109) * C745 +
             (C26926 * C110 + C81009 * C119) * C80954) *
                C81011 * C52707 +
            (C53824 + C53825 - C53826 - C53827 + C53828 + C53829) * C81011 *
                C52708) *
               C80933 +
           ((C53826 - (C53825 + C53824) + C53827 - C53828 - C53829) * C81011 *
                C52707 +
            (C53830 - (C53831 + C53832) + C53833 - C53834 - C53835) * C81011 *
                C52708) *
               C80726) *
              C80932 +
          (((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C81011 *
                C52707 +
            (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) * C81011 *
                C52708) *
               C80933 +
           ((C30070 + C30069 - C30068 - C30071 + C30072 + C30073) * C81011 *
                C52707 +
            (C32158 * C743 + C32159 * C737 - C36914 * C744 - C36915 * C738 +
             (C26926 * C10971 + C81009 * C10972) * C745 +
             (C26926 * C10973 + C81009 * C10974) * C80954) *
                C81011 * C52708) *
               C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C80933 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C80726) *
              C6893 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C80726 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C80933) *
              C6894 +
          (((C31649 + C31648) * C81011 * C52707 +
            (C32166 + C32167) * C81011 * C52708) *
               C80933 -
           ((C32168 + C32169) * C81011 * C52708 +
            (C32167 + C32166) * C81011 * C52707) *
               C80726) *
              C6895 +
          (((C34491 + C34490) * C81011 * C52707 +
            ((C26926 * C32139 + C81009 * C32140) * C5657 +
             (C26926 * C32141 + C81009 * C32142) * C80588) *
                C81011 * C52708) *
               C80726 -
           ((C34490 + C34491) * C81011 * C52708 +
            (C31663 + C31662) * C81011 * C52707) *
               C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C2687 +
                       (C26926 * C166 + C81009 * C172) * C80932 -
                       C27364 * C2688 - C27474 * C80686) *
                          C81011 * C52707 +
                      (C55930 + C55931 - C55932 - C55933) * C81011 * C52708) *
                         C737 +
                     ((C27366 * C2688 -
                       ((C26926 * C167 + C81009 * C173) * C80932 +
                        (C26926 * C100 + C81009 * C106) * C2687) +
                       C27476 * C80686) *
                          C81011 * C52707 +
                      (C55934 - (C55935 + C55936) + C55937) * C81011 * C52708) *
                         C738 +
                     (((C26926 * C101 + C81009 * C109) * C2687 +
                       (C26926 * C168 + C81009 * C174) * C80932 -
                       C27368 * C2688 - C27478 * C80686) *
                          C81011 * C52707 +
                      (C55938 + C55939 - C55940 - C55941) * C81011 * C52708) *
                         C80954) *
                        C80933 +
                    (((C55932 - (C55931 + C55930) + C55933) * C81011 * C52707 +
                      (C32158 * C2688 - (C53932 * C80932 + C53820 * C2687) +
                       C32253 * C80686) *
                          C81011 * C52708) *
                         C737 +
                     ((C55936 + C55935 - C55934 - C55937) * C81011 * C52707 +
                      (C53818 * C2687 + C53931 * C80932 - C36914 * C2688 -
                       C37018 * C80686) *
                          C81011 * C52708) *
                         C738 +
                     ((C55940 - (C55939 + C55938) + C55941) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C2688 -
                       (C53933 * C80932 + C53822 * C2687) +
                       (C26926 * C11073 + C81009 * C11074) * C80686) *
                          C81011 * C52708) *
                         C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C6969 +
                      (C26926 * C166 + C81009 * C172) * C6893 - C27364 * C6970 -
                      C27474 * C6894 + C27372 * C6971 + C27475 * C6895 -
                      C31658 * C6972 - C31714 * C80972) *
                         C81011 * C52707 +
                     (C60066 + C60067 - C60068 - C60069 + C60070 + C60071 -
                      C60072 - C60073) *
                         C81011 * C52708) *
                        C80588 * C80933 +
                    ((C60068 - (C60067 + C60066) + C60069 - C60070 - C60071 +
                      C60072 + C60073) *
                         C81011 * C52707 +
                     (C32158 * C6970 - (C53932 * C6893 + C53820 * C6969) +
                      C32253 * C6894 - C32163 * C6971 - C32254 * C6895 +
                      (C26926 * C32139 + C81009 * C32140) * C6972 +
                      (C26926 * C32243 + C81009 * C32244) * C80972) *
                         C81011 * C52708) *
                        C80588 * C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       C53812 * C3422 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                      (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C737 +
                    (((C53814 * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C30286 + C30285 - C30284 - C30298) * C81011 * C52707 +
                      (C30062 * C3421 + C30295 * C80933 - C36914 * C3422 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C738 +
                    ((((C26926 * C101 + C81009 * C109) * C3421 +
                       (C26926 * C223 + C81009 * C229) * C80933 -
                       C53816 * C3422 - C54030 * C80726) *
                          C81011 * C52707 +
                      (C53816 * C3421 + C54030 * C80933 - C53822 * C3422 -
                       C54031 * C80726) *
                          C81011 * C52708) *
                         C80932 +
                     ((C30291 - (C30290 + C30289) + C30299) * C81011 * C52707 +
                      ((C26926 * C10971 + C81009 * C10972) * C3422 -
                       (C30296 * C80933 + C30066 * C3421) +
                       (C26926 * C11173 + C81009 * C11174) * C80726) *
                          C81011 * C52708) *
                         C80686) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      C53812 * C3422 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C6893 +
                    ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                     (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                      C32346 * C80726) *
                         C81011 * C52708) *
                        C6894 +
                    ((C33805 + C33804 - C33803 - C33806) * C81011 * C52707 +
                     (C32160 * C3421 + C32347 * C80933 - C32163 * C3422 -
                      C32348 * C80726) *
                         C81011 * C52708) *
                        C6895 +
                    ((C34633 - (C34632 + C34631) + C34637) * C81011 * C52707 +
                     ((C26926 * C32139 + C81009 * C32140) * C3422 -
                      (C34636 * C80933 + C34489 * C3421) +
                      (C26926 * C32328 + C81009 * C32329) * C80726) *
                         C81011 * C52708) *
                        C80972) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C743 +
             (C275 * C107 + C81011 * C282) * C737 - C305 * C744 - C306 * C738 +
             C307 * C745 + C308 * C80954) *
                C52707 +
            (C54126 + C54127 - C54110 - C54111 + C54112 + C54113) * C52708) *
               C81009 * C80933 +
           ((C54110 - (C54127 + C54126) + C54111 - C54112 - C54113) * C52707 +
            (C54114 - (C54128 + C54129) + C54119 - C54120 - C54121) * C52708) *
               C81009 * C80726) *
              C80932 +
          (((C1068 * C744 -
             ((C275 * C757 + C81011 * C1043) * C737 +
              (C275 * C748 + C81011 * C1036) * C743) +
             C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                C52707 +
            (C56138 - (C56148 + C56149) + C56143 - C56144 - C56145) * C52708) *
               C81009 * C80933 +
           ((C56149 + C56148 - C56138 - C56143 + C56144 + C56145) * C52707 +
            ((C275 * C6138 + C81011 * C6408) * C743 +
             (C275 * C6144 + C81011 * C6414) * C737 - C11280 * C744 -
             C11281 * C738 + (C275 * C10971 + C81011 * C11273) * C745 +
             (C275 * C10973 + C81011 * C11274) * C80954) *
                C52708) *
               C81009 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C80933 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C80726) *
              C6893 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C80726 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C80933) *
              C6894 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C80933 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C80726) *
              C6895 +
          (((C60212 + C60213) * C52707 +
            ((C275 * C32139 + C81011 * C32425) * C5657 +
             (C275 * C32141 + C81011 * C32426) * C80588) *
                C52708) *
               C81009 * C80726 -
           ((C60213 + C60212) * C52708 +
            ((C275 * C5663 + C81011 * C5826) * C80588 +
             (C275 * C5659 + C81011 * C5822) * C5657) *
                C52707) *
               C81009 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C2687 +
                       (C275 * C166 + C81011 * C354) * C80932 -
                       (C275 * C748 + C81011 * C1036) * C2688 -
                       (C275 * C856 + C81011 * C1149) * C80686) *
                          C52707 +
                      (C56248 + C56249 - C56250 - C56254) * C52708) *
                         C81009 * C737 +
                     ((C2903 - (C2902 + C2901) + C2904) * C52707 +
                      (C4428 - (C4429 + C4430) + C4440) * C52708) *
                         C81009 * C738 +
                     ((C2907 + C2906 - C2905 - C2908) * C52707 +
                      (C4433 + C4434 - C4435 - C4441) * C52708) *
                         C81009 * C80954) *
                        C80933 +
                    (((C56250 - (C56249 + C56248) + C56254) * C52707 +
                      ((C275 * C6138 + C81011 * C6408) * C2688 -
                       (C54211 * C80932 + C54125 * C2687) +
                       (C275 * C6238 + C81011 * C6495) * C80686) *
                          C52708) *
                         C81009 * C737 +
                     ((C4430 + C4429 - C4428 - C4440) * C52707 +
                      (C11381 + C11382 - C11383 - C11387) * C52708) *
                         C81009 * C738 +
                     ((C4435 - (C4434 + C4433) + C4441) * C52707 +
                      ((C275 * C10971 + C81011 * C11273) * C2688 -
                       (C2109 * C80932 + C2010 * C2687) +
                       (C275 * C11073 + C81011 * C11379) * C80686) *
                          C52708) *
                         C81009 * C80954) *
                        C80726)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C6969 +
                      (C275 * C166 + C81011 * C354) * C6893 -
                      (C275 * C748 + C81011 * C1036) * C6970 -
                      (C275 * C856 + C81011 * C1149) * C6894 +
                      (C275 * C750 + C81011 * C1039) * C6971 +
                      (C275 * C857 + C81011 * C1150) * C6895 -
                      (C275 * C5659 + C81011 * C5822) * C6972 -
                      (C275 * C5722 + C81011 * C5871) * C80972) *
                         C52707 +
                     (C60280 + C60281 - C60282 - C60283 + C60284 + C60285 -
                      C60286 - C60290) *
                         C52708) *
                        C81009 * C80588 * C80933 +
                    ((C60282 - (C60281 + C60280) + C60283 - C60284 - C60285 +
                      C60286 + C60290) *
                         C52707 +
                     (C58024 * C6970 - (C54211 * C6893 + C54125 * C6969) +
                      C58126 * C6894 - C58029 * C6971 - C58127 * C6895 +
                      (C275 * C32139 + C81011 * C32425) * C6972 +
                      (C275 * C32243 + C81011 * C32501) * C80972) *
                         C52708) *
                        C81009 * C80588 * C80726)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C3421 +
             (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
             C54292 * C80726) *
                C52707 +
            (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
             C54293 * C80726) *
                C52708) *
               C81009 * C80932 +
           ((C56147 * C3422 -
             ((C275 * C946 + C81011 * C1256) * C80933 +
              (C275 * C748 + C81011 * C1036) * C3421) +
             C56355 * C80726) *
                C52707 +
            ((C275 * C6138 + C81011 * C6408) * C3422 -
             (C56355 * C80933 + C56147 * C3421) +
             (C275 * C6322 + C81011 * C6573) * C80726) *
                C52708) *
               C81009 * C80686) *
              C737 +
          (((C3641 - (C3640 + C3639) + C3642) * C52707 +
            (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) +
             C2213 * C80726) *
                C52708) *
               C81009 * C80932 +
           ((C4546 + C4545 - C4544 - C4556) * C52707 +
            (C4322 * C3421 + C4554 * C80933 - C11280 * C3422 -
             C11494 * C80726) *
                C52708) *
               C81009 * C80686) *
              C738 +
          (((C3645 + C3644 - C3643 - C3646) * C52707 +
            (C2006 * C3421 + C2214 * C80933 - C2010 * C3422 - C2215 * C80726) *
                C52708) *
               C81009 * C80932 +
           ((C4551 - (C4550 + C4549) + C4557) * C52707 +
            ((C275 * C10971 + C81011 * C11273) * C3422 -
             (C4555 * C80933 + C4324 * C3421) +
             (C275 * C11173 + C81011 * C11485) * C80726) *
                C52708) *
               C81009 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C3421 +
            (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
            C54292 * C80726) *
               C52707 +
           (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
            C54293 * C80726) *
               C52708) *
              C81009 * C6893 +
          ((C56147 * C3422 -
            ((C275 * C946 + C81011 * C1256) * C80933 +
             (C275 * C748 + C81011 * C1036) * C3421) +
            C56355 * C80726) *
               C52707 +
           (C58024 * C3422 - (C56355 * C80933 + C56147 * C3421) +
            C58211 * C80726) *
               C52708) *
              C81009 * C6894 +
          (((C275 * C750 + C81011 * C1039) * C3421 +
            (C275 * C947 + C81011 * C1257) * C80933 - C58026 * C3422 -
            C58212 * C80726) *
               C52707 +
           (C58026 * C3421 + C58212 * C80933 - C58029 * C3422 -
            C58213 * C80726) *
               C52708) *
              C81009 * C6895 +
          ((C60210 * C3422 -
            ((C275 * C5772 + C81011 * C5918) * C80933 +
             (C275 * C5659 + C81011 * C5822) * C3421) +
            C60359 * C80726) *
               C52707 +
           ((C275 * C32139 + C81011 * C32425) * C3422 -
            (C60359 * C80933 + C60210 * C3421) +
            (C275 * C32328 + C81011 * C32576) * C80726) *
               C52708) *
              C81009 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C743 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C737 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C744 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C738 +
            (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C745 +
            (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
                C80954) *
               C81009 * C81011 * C80933 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C744 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C737 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C743) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C738 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C745 -
            (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 +
             C52707 * C2303) *
                C80954) *
               C81009 * C81011 * C80726) *
              C80932 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C744 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C737 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C743) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C738 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C745 -
            (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
                C80954) *
               C81009 * C81011 * C80933 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C743 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C737 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C744 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C738 +
            (C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C745 +
            (C52961 * C3988 + C52707 * C4661 + C52962 * C10973 +
             C52708 * C11594) *
                C80954) *
               C81009 * C81011 * C80726) *
              C80686)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C80933 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C80726) *
              C6893 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C80933) *
              C6894 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C80933 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C80726) *
              C6895 +
          (((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
             C52708 * C32651) *
                C5657 +
            (C52961 * C8503 + C52707 * C8921 + C52962 * C32141 +
             C52708 * C32652) *
                C80588) *
               C81009 * C81011 * C80726 -
           ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 +
             C52707 * C5968) *
                C80588 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C5657) *
               C81009 * C81011 * C80933) *
              C80972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C2687 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80932 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C2688 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C80686) *
               C81009 * C81011 * C737 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C2688 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C80932 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C2687) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C80686) *
               C81009 * C81011 * C738 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C2687 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80932 -
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C2688 -
            (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
                C80686) *
               C81009 * C81011 * C80954) *
              C80933 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C2688 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C80932 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C2687) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C80686) *
               C81009 * C81011 * C737 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C2687 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80932 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C2688 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C80686) *
               C81009 * C81011 * C738 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C2688 -
            ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
              C52707 * C2408) *
                 C80932 +
             (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
              C52707 * C2295) *
                 C2687) +
            (C52961 * C4095 + C52707 * C4775 + C52962 * C11073 +
             C52708 * C11699) *
                C80686) *
               C81009 * C81011 * C80954) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C6969 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C6893 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C6970 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C6894 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C6971 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C6895 -
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C6972 -
           (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
               C80972) *
              C81009 * C81011 * C80588 * C80933 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C6970 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C6893 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C6969) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C6894 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C6971 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C6895 +
           (C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C6972 +
           (C52961 * C8573 + C52707 * C8989 + C52962 * C32243 +
            C52708 * C32753) *
               C80972) *
              C81009 * C81011 * C80588 * C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C3421 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80933 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C3422 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C3422 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80933 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C3421) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C80686) *
              C737 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C3422 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80933 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C3421) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C3421 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80933 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C3422 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C80686) *
              C738 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C3421 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80933 -
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C3422 -
            (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 +
             C52707 * C2513) *
                C80726) *
               C81009 * C81011 * C80932 +
           ((C52961 * C3981 + C52707 * C4657 + C52962 * C10971 +
             C52708 * C11593) *
                C3422 -
            ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 +
              C52707 * C1581) *
                 C80933 +
             (C52962 * C3981 + C52708 * C4657 + C52961 * C747 +
              C52707 * C1359) *
                 C3421) +
            (C52961 * C4201 + C52707 * C4891 + C52962 * C11173 +
             C52708 * C11805) *
                C80726) *
               C81009 * C81011 * C80686) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C3421 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80933 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C3422 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C6893 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C3422 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80933 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C3421) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C80726) *
              C81009 * C81011 * C6894 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C3421 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C80933 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C3422 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C80726) *
              C81009 * C81011 * C6895 +
          ((C52961 * C8499 + C52707 * C8919 + C52962 * C32139 +
            C52708 * C32651) *
               C3422 -
           ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 +
             C52707 * C6060) *
                C80933 +
            (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 +
             C52707 * C5964) *
                C3421) +
           (C52961 * C8643 + C52707 * C9057 + C52962 * C32328 +
            C52708 * C32837) *
               C80726) *
              C81009 * C81011 * C80972) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C743 +
            (C26926 * C1693 + C81009 * C1707) * C737 -
            (C26926 * C1682 + C81009 * C1690) * C744 -
            (C26926 * C1692 + C81009 * C1706) * C738 +
            (C26926 * C1683 + C81009 * C1691) * C745 +
            (C26926 * C1695 + C81009 * C1708) * C80954) *
               C81011 * C52708) *
              C80639 * C81003 +
          ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C81011 *
               C52707 +
           (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) * C81011 *
               C52708) *
              C80639 * C80988 +
          ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C81011 *
               C52707 +
           (C32160 * C743 + C32161 * C737 - C33600 * C744 - C33601 * C738 +
            (C26926 * C7589 + C81009 * C7590) * C745 +
            (C26926 * C7591 + C81009 * C7592) * C80954) *
               C81011 * C52708) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C94 +
           (C26926 * C107 + C81009 * C117) * C83 -
           (C26926 * C100 + C81009 * C106) * C95 -
           (C26926 * C108 + C81009 * C118) * C84 +
           (C26926 * C101 + C81009 * C109) * C96 +
           (C26926 * C110 + C81009 * C119) * C85 -
           (C26926 * C102 + C81009 * C111) * C97 -
           (C26926 * C112 + C81009 * C120) * C86 +
           (C26926 * C103 + C81009 * C113) * C98 +
           (C26926 * C114 + C81009 * C121) * C87) *
              C81011 * C52707 +
          ((C26926 * C1684 + C81009 * C1694) * C94 +
           (C26926 * C1693 + C81009 * C1707) * C83 -
           (C26926 * C1682 + C81009 * C1690) * C95 -
           (C26926 * C1692 + C81009 * C1706) * C84 +
           (C26926 * C1683 + C81009 * C1691) * C96 +
           (C26926 * C1695 + C81009 * C1708) * C85 -
           (C26926 * C1685 + C81009 * C1696) * C97 -
           (C26926 * C1697 + C81009 * C1709) * C86 +
           (C26926 * C3283 + C81009 * C3284) * C98 +
           (C26926 * C3285 + C81009 * C3286) * C87) *
              C81011 * C52708) *
         C80639 * C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C53824 + C53825 - C53826 - C53827 + C53828 + C53829) * C81011 *
               C52708) *
              C81004 +
          ((C53826 - (C53825 + C53824) + C53827 - C53828 - C53829) * C81011 *
               C52707 +
           (C53830 - (C53831 + C53832) + C53833 - C53834 - C53835) * C81011 *
               C52708) *
              C80990 +
          ((C53832 + C53831 - C53830 - C53833 + C53834 + C53835) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C743 +
            (C26926 * C10473 + C81009 * C10481) * C737 -
            (C26926 * C10468 + C81009 * C10474) * C744 -
            (C26926 * C10472 + C81009 * C10480) * C738 +
            (C26926 * C11885 + C81009 * C11886) * C745 +
            (C26926 * C11887 + C81009 * C11888) * C80954) *
               C81011 * C52708) *
              C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C53812 * C4987 + C53813 * C80998 - C53814 * C4988 -
            C53815 * C80982 + C53816 * C4989 + C53817 * C80954) *
               C81011 * C52708) *
              C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C81011 *
               C52707 +
           (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C81011 *
               C52708) *
              C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C81011 *
               C52707 +
           (C32160 * C4987 + C32161 * C80998 - C33600 * C4988 -
            C33601 * C80982 + (C26926 * C7589 + C81009 * C7590) * C4989 +
            (C26926 * C7591 + C81009 * C7592) * C80954) *
               C81011 * C52708) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C81011 * C52707 +
           (C53812 * C5657 + C53813 * C80588) * C81011 * C52708) *
              C80639 * C5652 -
          ((C32144 + C32145) * C81011 * C52708 +
           (C31647 + C31646) * C81011 * C52707) *
              C80639 * C5653 +
          ((C31649 + C31648) * C81011 * C52707 +
           (C32166 + C32167) * C81011 * C52708) *
              C80639 * C5654 -
          ((C34490 + C34491) * C81011 * C52708 +
           (C31663 + C31662) * C81011 * C52707) *
              C80639 * C5655 +
          ((C31665 + C31664) * C81011 * C52707 +
           ((C26926 * C34479 + C81009 * C34480) * C5657 +
            (C26926 * C34481 + C81009 * C34482) * C80588) *
               C81011 * C52708) *
              C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5657 +
             (C26926 * C107 + C81009 * C117) * C80588) *
                C81011 * C52707 +
            (C57768 + C57769) * C81011 * C52708) *
               C81004 -
           ((C57770 + C57771) * C81011 * C52708 +
            (C57769 + C57768) * C81011 * C52707) *
               C80990 +
           ((C57771 + C57770) * C81011 * C52707 +
            ((C26926 * C10469 + C81009 * C10475) * C5657 +
             (C26926 * C10473 + C81009 * C10481) * C80588) *
                C81011 * C52708) *
               C80965) *
              C4984 +
          (((C32145 + C32144) * C81011 * C52707 +
            (C32164 + C32165) * C81011 * C52708) *
               C80990 -
           ((C32144 + C32145) * C81011 * C52708 +
            (C31647 + C31646) * C81011 * C52707) *
               C81004 -
           ((C38388 + C38389) * C81011 * C52708 +
            (C32165 + C32164) * C81011 * C52707) *
               C80965) *
              C4985 +
          (((C31649 + C31648) * C81011 * C52707 +
            (C32166 + C32167) * C81011 * C52708) *
               C81004 -
           ((C32168 + C32169) * C81011 * C52708 +
            (C32167 + C32166) * C81011 * C52707) *
               C80990 +
           ((C32169 + C32168) * C81011 * C52707 +
            ((C26926 * C38377 + C81009 * C38378) * C5657 +
             (C26926 * C38379 + C81009 * C38380) * C80588) *
                C81011 * C52708) *
               C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C852 +
            (C26926 * C1790 + C81009 * C1798) * C81003 - C30064 * C853 -
            C30178 * C80988 + C32160 * C854 + C32252 * C80962) *
               C81011 * C52708) *
              C737 +
          ((C27366 * C853 -
            ((C26926 * C167 + C81009 * C173) * C81003 +
             (C26926 * C100 + C81009 * C106) * C852) +
            C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
               C81011 * C52707 +
           (C30062 * C853 -
            ((C26926 * C1788 + C81009 * C1796) * C81003 +
             (C26926 * C1682 + C81009 * C1690) * C852) +
            C30179 * C80988 - C33600 * C854 - C33704 * C80962) *
               C81011 * C52708) *
              C738 +
          (((C26926 * C101 + C81009 * C109) * C852 +
            (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
            C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C852 +
            (C26926 * C1789 + C81009 * C1797) * C81003 - C30066 * C853 -
            C30180 * C80988 + (C26926 * C7589 + C81009 * C7590) * C854 +
            (C26926 * C7691 + C81009 * C7692) * C80962) *
               C81011 * C52708) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C165 +
            (C26926 * C1790 + C81009 * C1798) * C80628) *
               C81011 * C52708) *
              C83 -
          (((C26926 * C1788 + C81009 * C1796) * C80628 +
            (C26926 * C1682 + C81009 * C1690) * C165) *
               C81011 * C52708 +
           ((C26926 * C167 + C81009 * C173) * C80628 +
            (C26926 * C100 + C81009 * C106) * C165) *
               C81011 * C52707) *
              C84 +
          (((C26926 * C101 + C81009 * C109) * C165 +
            (C26926 * C168 + C81009 * C174) * C80628) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C165 +
            (C26926 * C1789 + C81009 * C1797) * C80628) *
               C81011 * C52708) *
              C85 -
          (((C26926 * C1791 + C81009 * C1799) * C80628 +
            (C26926 * C1685 + C81009 * C1696) * C165) *
               C81011 * C52708 +
           ((C26926 * C169 + C81009 * C175) * C80628 +
            (C26926 * C102 + C81009 * C111) * C165) *
               C81011 * C52707) *
              C86 +
          (((C26926 * C103 + C81009 * C113) * C165 +
            (C26926 * C170 + C81009 * C176) * C80628) *
               C81011 * C52707 +
           ((C26926 * C3283 + C81009 * C3284) * C165 +
            (C26926 * C3353 + C81009 * C3354) * C80628) *
               C81011 * C52708) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C737 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C738 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C81011 * C52707 +
            (C53916 + C53936) * C81011 * C52708) *
               C80954) *
              C81004 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C738 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C737 -
           ((C53939 + C53927) * C81011 * C52708 +
            (C53936 + C53916) * C81011 * C52707) *
               C80954) *
              C80990 +
          (((C53924 + C53938) * C81011 * C52707 +
            ((C26926 * C10469 + C81009 * C10475) * C165 +
             (C26926 * C10527 + C81009 * C10531) * C80628) *
                C81011 * C52708) *
               C737 -
           (((C26926 * C10526 + C81009 * C10530) * C80628 +
             (C26926 * C10468 + C81009 * C10474) * C165) *
                C81011 * C52708 +
            (C53937 + C53919) * C81011 * C52707) *
               C738 +
           ((C53927 + C53939) * C81011 * C52707 +
            ((C26926 * C11885 + C81009 * C11886) * C165 +
             (C26926 * C11955 + C81009 * C11956) * C80628) *
                C81011 * C52708) *
               C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C81011 * C52707 +
           (C53812 * C5064 + C53928 * C4984 - C30064 * C5065 - C30178 * C4985 +
            C32160 * C5066 + C32252 * C80962) *
               C81011 * C52708) *
              C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C81011 * C52707 +
           (C30062 * C5065 - (C53929 * C4984 + C53814 * C5064) +
            C30179 * C4985 - C33600 * C5066 - C33704 * C80962) *
               C81011 * C52708) *
              C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C81011 * C52707 +
           (C53816 * C5064 + C53930 * C4984 - C30066 * C5065 - C30180 * C4985 +
            (C26926 * C7589 + C81009 * C7590) * C5066 +
            (C26926 * C7691 + C81009 * C7692) * C80962) *
               C81011 * C52708) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C81011 * C52707 +
          (C53812 * C5716 + C53928 * C5652 - C30064 * C5717 - C30178 * C5653 +
           C32160 * C5718 + C32252 * C5654 - C34489 * C5719 - C34562 * C5655 +
           (C26926 * C34479 + C81009 * C34480) * C5720 +
           (C26926 * C34557 + C81009 * C34558) * C5656) *
              C81011 * C52708) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C81011 * C52707 +
           (C57846 + C57847 - C57848 - C57849 + C57850 + C57851) * C81011 *
               C52708) *
              C80588 * C81004 +
          ((C57848 - (C57847 + C57846) + C57849 - C57850 - C57851) * C81011 *
               C52707 +
           (C57852 - (C57853 + C57854) + C57855 - C57856 - C57857) * C81011 *
               C52708) *
              C80588 * C80990 +
          ((C57854 + C57853 - C57852 - C57855 + C57856 + C57857) * C81011 *
               C52707 +
           ((C26926 * C10469 + C81009 * C10475) * C5064 +
            (C26926 * C10527 + C81009 * C10531) * C4984 - C38387 * C5065 -
            C38460 * C4985 + (C26926 * C38377 + C81009 * C38378) * C5066 +
            (C26926 * C38455 + C81009 * C38456) * C80962) *
               C81011 * C52708) *
              C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            ((C26926 * C1684 + C81009 * C1694) * C220 +
             (C26926 * C1882 + C81009 * C1890) * C80639) *
                C81011 * C52708) *
               C81003 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C80988 +
           ((C27559 + C27579) * C81011 * C52707 +
            (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
               C80962) *
              C737 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C80988 -
           (((C26926 * C1881 + C81009 * C1889) * C80639 +
             (C26926 * C1682 + C81009 * C1690) * C220) *
                C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C81003 -
           ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
            (C27581 + C27563) * C81011 * C52707) *
               C80962) *
              C738 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C81011 * C52707 +
            ((C26926 * C1683 + C81009 * C1691) * C220 +
             (C26926 * C1885 + C81009 * C1893) * C80639) *
                C81011 * C52708) *
               C81003 -
           ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
            (C27582 + C27566) * C81011 * C52707) *
               C80988 +
           ((C27571 + C27583) * C81011 * C52707 +
            ((C26926 * C7589 + C81009 * C7590) * C220 +
             (C26926 * C7791 + C81009 * C7792) * C80639) *
                C81011 * C52708) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C220 +
            (C26926 * C1882 + C81009 * C1890) * C80639) *
               C81011 * C52708) *
              C80628 * C83 -
          (((C26926 * C1881 + C81009 * C1889) * C80639 +
            (C26926 * C1682 + C81009 * C1690) * C220) *
               C81011 * C52708 +
           ((C26926 * C222 + C81009 * C228) * C80639 +
            (C26926 * C100 + C81009 * C106) * C220) *
               C81011 * C52707) *
              C80628 * C84 +
          (((C26926 * C101 + C81009 * C109) * C220 +
            (C26926 * C223 + C81009 * C229) * C80639) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C220 +
            (C26926 * C1885 + C81009 * C1893) * C80639) *
               C81011 * C52708) *
              C80628 * C85 -
          (((C26926 * C1887 + C81009 * C1895) * C80639 +
            (C26926 * C1685 + C81009 * C1696) * C220) *
               C81011 * C52708 +
           ((C26926 * C224 + C81009 * C230) * C80639 +
            (C26926 * C102 + C81009 * C111) * C220) *
               C81011 * C52707) *
              C80628 * C86 +
          (((C26926 * C103 + C81009 * C113) * C220 +
            (C26926 * C225 + C81009 * C231) * C80639) *
               C81011 * C52707 +
           ((C26926 * C3283 + C81009 * C3284) * C220 +
            (C26926 * C3423 + C81009 * C3424) * C80639) *
               C81011 * C52708) *
              C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C1878 +
            (C26926 * C221 + C81009 * C227) * C81004 - C53812 * C1879 -
            C54026 * C80990 + C53820 * C1880 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C1878 + C54026 * C81004 - C53820 * C1879 -
            C54027 * C80990 + (C26926 * C10469 + C81009 * C10475) * C1880 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C80628 * C737 +
          ((C53814 * C1879 -
            ((C26926 * C222 + C81009 * C228) * C81004 +
             (C26926 * C100 + C81009 * C106) * C1878) +
            C54028 * C80990 - C53818 * C1880 - C54029 * C80965) *
               C81011 * C52707 +
           (C53818 * C1879 - (C54028 * C81004 + C53814 * C1878) +
            C54029 * C80990 - (C26926 * C10468 + C81009 * C10474) * C1880 -
            (C26926 * C10581 + C81009 * C10585) * C80965) *
               C81011 * C52708) *
              C80628 * C738 +
          (((C26926 * C101 + C81009 * C109) * C1878 +
            (C26926 * C223 + C81009 * C229) * C81004 - C53816 * C1879 -
            C54030 * C80990 + C53822 * C1880 + C54031 * C80965) *
               C81011 * C52707 +
           (C53816 * C1878 + C54030 * C81004 - C53822 * C1879 -
            C54031 * C80990 + (C26926 * C11885 + C81009 * C11886) * C1880 +
            (C26926 * C12027 + C81009 * C12028) * C80965) *
               C81011 * C52708) *
              C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C220 +
             (C26926 * C221 + C81009 * C227) * C80639) *
                C81011 * C52707 +
            (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
               C4984 -
           ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
            (C27578 + C27554) * C81011 * C52707) *
               C4985 +
           ((C27559 + C27579) * C81011 * C52707 +
            (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
               C80962) *
              C80998 +
          (((C27560 + C27580) * C81011 * C52707 +
            (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
               C4985 -
           ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
            ((C26926 * C222 + C81009 * C228) * C80639 +
             (C26926 * C100 + C81009 * C106) * C220) *
                C81011 * C52707) *
               C4984 -
           ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
            (C27581 + C27563) * C81011 * C52707) *
               C80962) *
              C80982 +
          ((((C26926 * C101 + C81009 * C109) * C220 +
             (C26926 * C223 + C81009 * C229) * C80639) *
                C81011 * C52707 +
            (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
               C4984 -
           ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
            (C27582 + C27566) * C81011 * C52707) *
               C4985 +
           ((C27571 + C27583) * C81011 * C52707 +
            ((C26926 * C7589 + C81009 * C7590) * C220 +
             (C26926 * C7791 + C81009 * C7792) * C80639) *
                C81011 * C52708) *
               C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C220 +
            (C26926 * C221 + C81009 * C227) * C80639) *
               C81011 * C52707 +
           (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
              C5652 -
          ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
           (C27578 + C27554) * C81011 * C52707) *
              C5653 +
          ((C27559 + C27579) * C81011 * C52707 +
           (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
              C5654 -
          ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
           (C31768 + C31760) * C81011 * C52707) *
              C5655 +
          ((C31765 + C31769) * C81011 * C52707 +
           ((C26926 * C34479 + C81009 * C34480) * C220 +
            (C26926 * C34628 + C81009 * C34629) * C80639) *
               C81011 * C52708) *
              C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C1878 +
            (C26926 * C221 + C81009 * C227) * C81004 - C53812 * C1879 -
            C54026 * C80990 + C53820 * C1880 + C54027 * C80965) *
               C81011 * C52707 +
           (C53812 * C1878 + C54026 * C81004 - C53820 * C1879 -
            C54027 * C80990 + (C26926 * C10469 + C81009 * C10475) * C1880 +
            (C26926 * C10582 + C81009 * C10586) * C80965) *
               C81011 * C52708) *
              C4984 +
          ((C32333 - (C32332 + C32331) + C32334 - C32335 - C32349) * C81011 *
               C52707 +
           (C32158 * C1879 - (C30294 * C81004 + C30064 * C1878) +
            C32346 * C80990 - C38387 * C1880 - C38538 * C80965) *
               C81011 * C52708) *
              C4985 +
          ((C32340 + C32339 - C32338 - C32350 + C32343 + C32351) * C81011 *
               C52707 +
           (C32160 * C1878 + C32347 * C81004 - C32163 * C1879 -
            C32348 * C80990 + (C26926 * C38377 + C81009 * C38378) * C1880 +
            (C26926 * C38526 + C81009 * C38527) * C80965) *
               C81011 * C52708) *
              C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C743 +
            (C275 * C107 + C81011 * C282) * C737 - C305 * C744 - C306 * C738 +
            C307 * C745 + C308 * C80954) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C743 +
            (C275 * C1693 + C81011 * C1979) * C737 - C2004 * C744 -
            C2005 * C738 + C2006 * C745 + C2007 * C80954) *
               C52708) *
              C81009 * C80639 * C81003 +
          ((C1068 * C744 -
            ((C275 * C757 + C81011 * C1043) * C737 +
             (C275 * C748 + C81011 * C1036) * C743) +
            C1069 * C738 - C1070 * C745 - C1071 * C80954) *
               C52707 +
           (C4322 * C744 -
            ((C275 * C3985 + C81011 * C4309) * C737 +
             (C275 * C3979 + C81011 * C4305) * C743) +
            C4323 * C738 - C4324 * C745 - C4325 * C80954) *
               C52708) *
              C81009 * C80639 * C80988 +
          (((C275 * C750 + C81011 * C1039) * C743 +
            (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
            C1073 * C738 + C1074 * C745 + C1075 * C80954) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C743 +
            (C275 * C6148 + C81011 * C6416) * C737 - C7898 * C744 -
            C7899 * C738 + (C275 * C7589 + C81011 * C7891) * C745 +
            (C275 * C7591 + C81011 * C7892) * C80954) *
               C52708) *
              C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C94 +
           (C275 * C107 + C81011 * C282) * C83 - C305 * C95 - C306 * C84 +
           C307 * C96 + C308 * C85 - C309 * C97 - C310 * C86 + C311 * C98 +
           C312 * C87) *
              C52707 +
          ((C275 * C1684 + C81011 * C1972) * C94 +
           (C275 * C1693 + C81011 * C1979) * C83 - C2004 * C95 - C2005 * C84 +
           C2006 * C96 + C2007 * C85 - C3498 * C97 - C3499 * C86 +
           (C275 * C3283 + C81011 * C3491) * C98 +
           (C275 * C3285 + C81011 * C3492) * C87) *
              C52708) *
         C81009 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C743 +
            (C275 * C107 + C81011 * C282) * C737 - C305 * C744 - C306 * C738 +
            C307 * C745 + C308 * C80954) *
               C52707 +
           (C54126 + C54127 - C54110 - C54111 + C54112 + C54113) * C52708) *
              C81009 * C81004 +
          ((C54110 - (C54127 + C54126) + C54111 - C54112 - C54113) * C52707 +
           (C54114 - (C54128 + C54129) + C54119 - C54120 - C54121) * C52708) *
              C81009 * C80990 +
          ((C54129 + C54128 - C54114 - C54119 + C54120 + C54121) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C743 +
            (C275 * C10473 + C81011 * C10636) * C737 - C12102 * C744 -
            C12103 * C738 + (C275 * C11885 + C81011 * C12095) * C745 +
            (C275 * C11887 + C81011 * C12096) * C80954) *
               C52708) *
              C81009 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C4987 +
            (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
            C306 * C80982 + C307 * C4989 + C308 * C80954) *
               C52707 +
           (C54122 * C4987 + C54123 * C80998 - C2004 * C4988 - C2005 * C80982 +
            C2006 * C4989 + C2007 * C80954) *
               C52708) *
              C81009 * C80639 * C4984 +
          ((C1068 * C4988 -
            ((C275 * C757 + C81011 * C1043) * C80998 +
             (C275 * C748 + C81011 * C1036) * C4987) +
            C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
               C52707 +
           (C4322 * C4988 - (C56146 * C80998 + C56147 * C4987) +
            C4323 * C80982 - C4324 * C4989 - C4325 * C80954) *
               C52708) *
              C81009 * C80639 * C4985 +
          (((C275 * C750 + C81011 * C1039) * C4987 +
            (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
            C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C4987 +
            (C275 * C6148 + C81011 * C6416) * C80998 - C7898 * C4988 -
            C7899 * C80982 + (C275 * C7589 + C81011 * C7891) * C4989 +
            (C275 * C7591 + C81011 * C7892) * C80954) *
               C52708) *
              C81009 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5657 +
            (C275 * C107 + C81011 * C282) * C80588) *
               C52707 +
           (C54122 * C5657 + C54123 * C80588) * C52708) *
              C81009 * C80639 * C5652 -
          ((C56146 * C80588 + C56147 * C5657) * C52708 +
           ((C275 * C757 + C81011 * C1043) * C80588 +
            (C275 * C748 + C81011 * C1036) * C5657) *
               C52707) *
              C81009 * C80639 * C5653 +
          (((C275 * C750 + C81011 * C1039) * C5657 +
            (C275 * C764 + C81011 * C1047) * C80588) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C5657 +
            (C275 * C6148 + C81011 * C6416) * C80588) *
               C52708) *
              C81009 * C80639 * C5654 -
          (((C275 * C8503 + C81011 * C8715) * C80588 +
            (C275 * C8499 + C81011 * C8713) * C5657) *
               C52708 +
           ((C275 * C5663 + C81011 * C5826) * C80588 +
            (C275 * C5659 + C81011 * C5822) * C5657) *
               C52707) *
              C81009 * C80639 * C5655 +
          (((C275 * C5660 + C81011 * C5823) * C5657 +
            (C275 * C5668 + C81011 * C5827) * C80588) *
               C52707 +
           ((C275 * C34479 + C81011 * C34703) * C5657 +
            (C275 * C34481 + C81011 * C34704) * C80588) *
               C52708) *
              C81009 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5657 +
             (C275 * C107 + C81011 * C282) * C80588) *
                C52707 +
            (C58006 + C58007) * C52708) *
               C81009 * C81004 -
           ((C58008 + C58009) * C52708 + (C58007 + C58006) * C52707) * C81009 *
               C80990 +
           ((C58009 + C58008) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C5657 +
             (C275 * C10473 + C81011 * C10636) * C80588) *
                C52708) *
               C81009 * C80965) *
              C4984 +
          (((C58010 + C58011) * C52707 + (C58030 + C58031) * C52708) * C81009 *
               C80990 -
           ((C58011 + C58010) * C52708 +
            ((C275 * C757 + C81011 * C1043) * C80588 +
             (C275 * C748 + C81011 * C1036) * C5657) *
                C52707) *
               C81009 * C81004 -
           (((C275 * C12547 + C81011 * C12759) * C80588 +
             (C275 * C12543 + C81011 * C12757) * C5657) *
                C52708 +
            (C58031 + C58030) * C52707) *
               C81009 * C80965) *
              C4985 +
          ((((C275 * C750 + C81011 * C1039) * C5657 +
             (C275 * C764 + C81011 * C1047) * C80588) *
                C52707 +
            (C58032 + C58033) * C52708) *
               C81009 * C81004 -
           ((C58034 + C58035) * C52708 + (C58033 + C58032) * C52707) * C81009 *
               C80990 +
           ((C58035 + C58034) * C52707 +
            ((C275 * C38377 + C81011 * C38605) * C5657 +
             (C275 * C38379 + C81011 * C38606) * C80588) *
                C52708) *
               C81009 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C852 +
            (C275 * C1790 + C81011 * C2087) * C81003 -
            (C275 * C3979 + C81011 * C4305) * C853 -
            (C275 * C4093 + C81011 * C4423) * C80988 +
            (C275 * C6140 + C81011 * C6410) * C854 +
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C52708) *
              C81009 * C737 +
          ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C52707 +
           (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) * C52708) *
              C81009 * C738 +
          ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C52707 +
           (C2006 * C852 + C2107 * C81003 - C4324 * C853 - C4439 * C80988 +
            (C275 * C7589 + C81011 * C7891) * C854 +
            (C275 * C7691 + C81011 * C7997) * C80962) *
               C52708) *
              C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C165 +
            (C275 * C1790 + C81011 * C2087) * C80628) *
               C52708) *
              C81009 * C83 -
          ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 * C84 +
          ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 * C85 -
          ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 * C86 +
          ((C372 + C380) * C52707 + ((C275 * C3283 + C81011 * C3491) * C165 +
                                     (C275 * C3353 + C81011 * C3565) * C80628) *
                                        C52708) *
              C81009 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C737 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 * C738 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C80954) *
              C81004 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C738 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C737 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C80954) *
              C80990 +
          (((C54209 + C54213) * C52707 +
            ((C275 * C10469 + C81011 * C10632) * C165 +
             (C275 * C10527 + C81011 * C10682) * C80628) *
                C52708) *
               C81009 * C737 -
           ((C12175 + C12171) * C52708 + (C2112 + C2100) * C52707) * C81009 *
               C738 +
           ((C2105 + C2113) * C52707 +
            ((C275 * C11885 + C81011 * C12095) * C165 +
             (C275 * C11955 + C81011 * C12169) * C80628) *
                C52708) *
               C81009 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C54122 * C5064 + C54210 * C4984 - C56147 * C5065 - C56253 * C4985 +
            (C275 * C6140 + C81011 * C6410) * C5066 +
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C52708) *
              C81009 * C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C52707 +
           (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C52708) *
              C81009 * C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C52707 +
           (C2006 * C5064 + C2107 * C4984 - C4324 * C5065 - C4439 * C4985 +
            (C275 * C7589 + C81011 * C7891) * C5066 +
            (C275 * C7691 + C81011 * C7997) * C80962) *
               C52708) *
              C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C52707 +
          (C54122 * C5716 + C54210 * C5652 - C56147 * C5717 - C56253 * C5653 +
           (C275 * C6140 + C81011 * C6410) * C5718 +
           (C275 * C6236 + C81011 * C6493) * C5654 -
           (C275 * C8499 + C81011 * C8713) * C5719 -
           (C275 * C8573 + C81011 * C8783) * C5655 +
           (C275 * C34479 + C81011 * C34703) * C5720 +
           (C275 * C34557 + C81011 * C34771) * C5656) *
              C52708) *
         C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C58110 + C58111 - C58112 - C58113 + C58114 + C58128) * C52708) *
              C81009 * C80588 * C81004 +
          ((C58112 - (C58111 + C58110) + C58113 - C58114 - C58128) * C52707 +
           (C58117 - (C58118 + C58119) + C58129 - C58122 - C58130) * C52708) *
              C81009 * C80588 * C80990 +
          ((C58119 + C58118 - C58117 - C58129 + C58122 + C58130) * C52707 +
           ((C275 * C10469 + C81011 * C10632) * C5064 +
            (C275 * C10527 + C81011 * C10682) * C4984 -
            (C275 * C12543 + C81011 * C12757) * C5065 -
            (C275 * C12617 + C81011 * C12827) * C4985 +
            (C275 * C38377 + C81011 * C38605) * C5066 +
            (C275 * C38455 + C81011 * C38673) * C80962) *
               C52708) *
              C81009 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            ((C275 * C1684 + C81011 * C1972) * C220 +
             (C275 * C1882 + C81011 * C2187) * C80639) *
                C52708) *
               C81009 * C81003 -
           (((C275 * C4199 + C81011 * C4539) * C80639 +
             (C275 * C3979 + C81011 * C4305) * C220) *
                C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80988 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            ((C275 * C6140 + C81011 * C6410) * C220 +
             (C275 * C6324 + C81011 * C6575) * C80639) *
                C52708) *
               C81009 * C80962) *
              C737 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80988 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C81003 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80962) *
              C738 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C81003 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80988 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C220 +
            (C275 * C1882 + C81011 * C2187) * C80639) *
               C52708) *
              C81009 * C80628 * C83 -
          ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
              C81009 * C80628 * C84 +
          ((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
              C81009 * C80628 * C85 -
          ((C3652 * C80639 + C3498 * C220) * C52708 + (C447 + C435) * C52707) *
              C81009 * C80628 * C86 +
          ((C440 + C448) * C52707 + ((C275 * C3283 + C81011 * C3491) * C220 +
                                     (C275 * C3423 + C81011 * C3637) * C80639) *
                                        C52708) *
              C81009 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 - C54122 * C1879 -
            C54292 * C80990 + C54125 * C1880 + C54293 * C80965) *
               C52707 +
           (C54122 * C1878 + C54292 * C81004 - C54125 * C1879 -
            C54293 * C80990 + (C275 * C10469 + C81011 * C10632) * C1880 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C80628 * C737 +
          ((C2198 - (C2197 + C2196) + C2216 - C2201 - C2217) * C52707 +
           (C2008 * C1879 - (C2212 * C81004 + C2004 * C1878) + C2213 * C80990 -
            C12102 * C1880 - C12252 * C80965) *
               C52708) *
              C81009 * C80628 * C738 +
          ((C2206 + C2205 - C2204 - C2218 + C2209 + C2219) * C52707 +
           (C2006 * C1878 + C2214 * C81004 - C2010 * C1879 - C2215 * C80990 +
            (C275 * C11885 + C81011 * C12095) * C1880 +
            (C275 * C12027 + C81011 * C12241) * C80965) *
               C52708) *
              C81009 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C4984 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            ((C275 * C6140 + C81011 * C6410) * C220 +
             (C275 * C6324 + C81011 * C6575) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80998 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C4985 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C4984 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80962) *
              C80982 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C4984 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C4985 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C52707 +
           (C54122 * C220 + C54292 * C80639) * C52708) *
              C81009 * C5652 -
          ((C56355 * C80639 + C56147 * C220) * C52708 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C52707) *
              C81009 * C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C220 +
            (C275 * C6324 + C81011 * C6575) * C80639) *
               C52708) *
              C81009 * C5654 -
          (((C275 * C8643 + C81011 * C8851) * C80639 +
            (C275 * C8499 + C81011 * C8713) * C220) *
               C52708 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C52707) *
              C81009 * C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C52707 +
           ((C275 * C34479 + C81011 * C34703) * C220 +
            (C275 * C34628 + C81011 * C34838) * C80639) *
               C52708) *
              C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C1878 +
            (C275 * C221 + C81011 * C422) * C81004 - C54122 * C1879 -
            C54292 * C80990 + C54125 * C1880 + C54293 * C80965) *
               C52707 +
           (C54122 * C1878 + C54292 * C81004 - C54125 * C1879 -
            C54293 * C80990 + (C275 * C10469 + C81011 * C10632) * C1880 +
            (C275 * C10582 + C81011 * C10727) * C80965) *
               C52708) *
              C81009 * C4984 +
          ((C56147 * C1879 -
            ((C275 * C946 + C81011 * C1256) * C81004 +
             (C275 * C748 + C81011 * C1036) * C1878) +
            C56355 * C80990 - C58024 * C1880 - C58211 * C80965) *
               C52707 +
           (C58024 * C1879 - (C56355 * C81004 + C56147 * C1878) +
            C58211 * C80990 - (C275 * C12543 + C81011 * C12757) * C1880 -
            (C275 * C12687 + C81011 * C12895) * C80965) *
               C52708) *
              C81009 * C4985 +
          (((C275 * C750 + C81011 * C1039) * C1878 +
            (C275 * C947 + C81011 * C1257) * C81004 - C58026 * C1879 -
            C58212 * C80990 + C58029 * C1880 + C58213 * C80965) *
               C52707 +
           (C58026 * C1878 + C58212 * C81004 - C58029 * C1879 -
            C58213 * C80990 + (C275 * C38377 + C81011 * C38605) * C1880 +
            (C275 * C38526 + C81011 * C38740) * C80965) *
               C52708) *
              C81009 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C743 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C737 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C744 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C738 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C745 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C80639 * C81003 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C744 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C737 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C743) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C738 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C745 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80954) *
              C81009 * C81011 * C80639 * C80988 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C743 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C737 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C744 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C738 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C745 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C80954) *
              C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C94 +
          (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
              C83 -
          (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
              C95 -
          (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
              C84 +
          (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
              C96 +
          (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
              C85 -
          (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
              C97 -
          (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
              C86 +
          (C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
              C98 +
          (C52961 * C114 + C52707 * C501 + C52962 * C3285 + C52708 * C3720) *
              C87) *
         C81009 * C81011 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C743 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C737 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C744 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C738 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C745 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C81004 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C744 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C737 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C743) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C738 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C745 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C80954) *
              C81009 * C81011 * C80990 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C743 +
           (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
            C52708 * C10778) *
               C737 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C744 -
           (C52962 * C10472 + C52708 * C10777 + C52961 * C1701 +
            C52707 * C2306) *
               C738 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C745 +
           (C52961 * C1703 + C52707 * C2307 + C52962 * C11887 +
            C52708 * C12320) *
               C80954) *
              C81009 * C81011 * C80965) *
         C80628) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C4987 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80998 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C4988 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80982 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C4989 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C80639 * C4984 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C4988 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80998 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C4987) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80982 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C4989 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80954) *
              C81009 * C81011 * C80639 * C4985 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C4987 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80998 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C4988 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80982 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C4989 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C80954) *
              C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5657 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80588) *
              C81009 * C81011 * C80639 * C5652 -
          ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
               C80588 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5657) *
              C81009 * C81011 * C80639 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5657 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80588) *
              C81009 * C81011 * C80639 * C5654 -
          ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 + C52707 * C5968) *
               C80588 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C5657) *
              C81009 * C81011 * C80639 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C5657 +
           (C52961 * C5668 + C52707 * C5969 + C52962 * C34481 +
            C52708 * C34906) *
               C80588) *
              C81009 * C81011 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5657 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80588) *
               C81009 * C81011 * C81004 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C80588 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5657) *
               C81009 * C81011 * C80990 +
           ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C5657 +
            (C52961 * C1700 + C52707 * C2305 + C52962 * C10473 +
             C52708 * C10778) *
                C80588) *
               C81009 * C81011 * C80965) *
              C4984 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5657 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80588) *
               C81009 * C81011 * C80990 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80588 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5657) *
               C81009 * C81011 * C81004 -
           ((C52962 * C12547 + C52708 * C12965 + C52961 * C6144 +
             C52707 * C6660) *
                C80588 +
            (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
             C52707 * C6654) *
                C5657) *
               C81009 * C81011 * C80965) *
              C4985 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5657 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80588) *
               C81009 * C81011 * C81004 -
           ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
             C52707 * C6662) *
                C80588 +
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5657) *
               C81009 * C81011 * C80990 +
           ((C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
             C52708 * C38807) *
                C5657 +
            (C52961 * C6153 + C52707 * C6663 + C52962 * C38379 +
             C52708 * C38808) *
                C80588) *
               C81009 * C81011 * C80965) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C852 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81003 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C853 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80988 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C854 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C737 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C853 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C81003 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C852) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80988 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C854 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80962) *
              C81009 * C81011 * C738 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C852 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C81003 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C853 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80988 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C854 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C80962) *
              C81009 * C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C165 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80628) *
              C81009 * C81011 * C83 -
          ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
               C80628 +
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C165) *
              C81009 * C81011 * C84 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C165 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C80628) *
              C81009 * C81011 * C85 -
          ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
               C80628 +
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C165) *
              C81009 * C81011 * C86 +
          ((C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
               C165 +
           (C52961 * C170 + C52707 * C573 + C52962 * C3353 + C52708 * C3793) *
               C80628) *
              C81009 * C81011 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C737 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C738 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C80954) *
              C81004 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C738 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C737 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C80954) *
              C80990 +
          (((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
             C52708 * C10774) *
                C165 +
            (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
             C52708 * C10824) *
                C80628) *
               C81009 * C81011 * C737 -
           ((C52962 * C10526 + C52708 * C10823 + C52961 * C1793 +
             C52707 * C2412) *
                C80628 +
            (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
             C52707 * C2298) *
                C165) *
               C81009 * C81011 * C738 +
           ((C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
             C52708 * C12319) *
                C165 +
            (C52961 * C1794 + C52707 * C2413 + C52962 * C11955 +
             C52708 * C12393) *
                C80628) *
               C81009 * C81011 * C80954) *
              C80965)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5064 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C4984 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5065 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C4985 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5066 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80998 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C5065 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C4984 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C5064) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C4985 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C5066 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80962) *
              C81009 * C81011 * C80982 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C5064 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C4984 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C5065 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C4985 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C5066 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C80962) *
              C81009 * C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C5716 +
          (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
              C5652 -
          (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
              C5717 -
          (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
              C5653 +
          (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
              C5718 +
          (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
              C5654 -
          (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
              C5719 -
          (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
              C5655 +
          (C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
           C52708 * C34905) *
              C5720 +
          (C52961 * C5723 + C52707 * C6014 + C52962 * C34557 +
           C52708 * C34981) *
              C5656) *
         C81009 * C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5064 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C4984 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5065 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C4985 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5066 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C81004 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C5065 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C4984 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C5064) +
           (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 + C52708 * C6741) *
               C4985 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C5066 -
           (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 + C52707 * C6739) *
               C80962) *
              C81009 * C81011 * C80588 * C80990 +
          ((C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C5064 +
           (C52961 * C1792 + C52707 * C2411 + C52962 * C10527 +
            C52708 * C10824) *
               C4984 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C5065 -
           (C52962 * C12617 + C52708 * C13033 + C52961 * C6238 +
            C52707 * C6741) *
               C4985 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C5066 +
           (C52961 * C6239 + C52707 * C6742 + C52962 * C38455 +
            C52708 * C38883) *
               C80962) *
              C81009 * C81011 * C80588 * C80965)) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C81003 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80988 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80962) *
              C737 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80988 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C81003 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80962) *
              C738 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C81003 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80988 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C220 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80639) *
              C81009 * C81011 * C80628 * C83 -
          ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
               C80639 +
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C220) *
              C81009 * C81011 * C80628 * C84 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C220 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C80639) *
              C81009 * C81011 * C80628 * C85 -
          ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
               C80639 +
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C220) *
              C81009 * C81011 * C80628 * C86 +
          ((C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
               C220 +
           (C52961 * C225 + C52707 * C641 + C52962 * C3423 + C52708 * C3865) *
               C80639) *
              C81009 * C81011 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C1878 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C81004 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C1879 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80990 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C1880 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C80628 * C737 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C1879 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C81004 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C1878) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C80990 -
           (C52962 * C10468 + C52708 * C10773 + C52961 * C1687 +
            C52707 * C2298) *
               C1880 -
           (C52962 * C10581 + C52708 * C10871 + C52961 * C1884 +
            C52707 * C2512) *
               C80965) *
              C81009 * C81011 * C80628 * C738 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C1878 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C81004 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C1879 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C80990 +
           (C52961 * C1688 + C52707 * C2299 + C52962 * C11885 +
            C52708 * C12319) *
               C1880 +
           (C52961 * C1886 + C52707 * C2514 + C52962 * C12027 +
            C52708 * C12465) *
               C80965) *
              C81009 * C81011 * C80628 * C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80998 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C4985 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C4984 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80962) *
              C80982 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C220 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80639) *
              C81009 * C81011 * C5652 -
          ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
               C80639 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C220) *
              C81009 * C81011 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C220 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C80639) *
              C81009 * C81011 * C5654 -
          ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 + C52707 * C6060) *
               C80639 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C220) *
              C81009 * C81011 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C220 +
           (C52961 * C5773 + C52707 * C6061 + C52962 * C34628 +
            C52708 * C35051) *
               C80639) *
              C81009 * C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C1878 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C81004 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C1879 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80990 +
           (C52961 * C1686 + C52707 * C2297 + C52962 * C10469 +
            C52708 * C10774) *
               C1880 +
           (C52961 * C1883 + C52707 * C2510 + C52962 * C10582 +
            C52708 * C10869) *
               C80965) *
              C81009 * C81011 * C4984 +
          ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 + C52708 * C6654) *
               C1879 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C81004 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C1878) +
           (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 + C52708 * C6819) *
               C80990 -
           (C52962 * C12543 + C52708 * C12963 + C52961 * C6138 +
            C52707 * C6654) *
               C1880 -
           (C52962 * C12687 + C52708 * C13101 + C52961 * C6322 +
            C52707 * C6819) *
               C80965) *
              C81009 * C81011 * C4985 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C1878 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C81004 -
           (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 + C52707 * C6656) *
               C1879 -
           (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 + C52707 * C6821) *
               C80990 +
           (C52961 * C6141 + C52707 * C6657 + C52962 * C38377 +
            C52708 * C38807) *
               C1880 +
           (C52961 * C6325 + C52707 * C6822 + C52962 * C38526 +
            C52708 * C38953) *
               C80965) *
              C81009 * C81011 * C80962) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C2613 +
                      (C26926 * C107 + C81009 * C117) * C2607 -
                      (C26926 * C100 + C81009 * C106) * C2614 -
                      (C26926 * C108 + C81009 * C118) * C2608 +
                      (C26926 * C101 + C81009 * C109) * C2615 +
                      (C26926 * C110 + C81009 * C119) * C2609 -
                      (C26926 * C102 + C81009 * C111) * C2616 -
                      (C26926 * C112 + C81009 * C120) * C80966) *
                         C81011 * C52707 +
                     (C55176 + C55177 - C55178 - C55179 + C55180 + C55181 -
                      C55188 - C55189) *
                         C81011 * C52708) *
                        C80933 +
                    ((C55178 - (C55177 + C55176) + C55179 - C55180 - C55181 +
                      C55188 + C55189) *
                         C81011 * C52707 +
                     (C53818 * C2614 - (C53819 * C2607 + C53820 * C2613) +
                      C53821 * C2608 - C53822 * C2615 - C53823 * C2609 +
                      (C26926 * C1689 + C81009 * C1704) * C2616 +
                      (C26926 * C1705 + C81009 * C1713) * C80966) *
                         C81011 * C52708) *
                        C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C78279 +
                       (C26926 * C107 + C81009 * C117) * C80916 -
                       (C26926 * C100 + C81009 * C106) * C78260 -
                       (C26926 * C108 + C81009 * C118) * C80598) *
                          C81011 * C52707 +
                      (C59128 + C59129 - C59130 - C59131) * C81011 * C52708) *
                         C80933 +
                     ((C59130 - (C59129 + C59128) + C59131) * C81011 * C52707 +
                      (C53818 * C78260 - (C53819 * C80916 + C53820 * C78279) +
                       C53821 * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C4984 +
                    (((C32928 - (C32927 + C32926) + C32929) * C81011 * C52707 +
                      (C33590 - (C33591 + C33592) + C33593) * C81011 * C52708) *
                         C80933 +
                     ((C33592 + C33591 - C33590 - C33593) * C81011 * C52707 +
                      (C36908 + C36909 - C36916 - C36917) * C81011 * C52708) *
                         C80726) *
                        C4985 +
                    (((C32932 + C32931 - C32930 - C32933) * C81011 * C52707 +
                      (C33594 + C33595 - C33602 - C33603) * C81011 * C52708) *
                         C80933 +
                     ((C33602 - (C33595 + C33594) + C33603) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C78260 -
                       (C32162 * C80916 + C32163 * C78279) +
                       (C26926 * C6154 + C81009 * C6160) * C80598) *
                          C81011 * C52708) *
                         C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C165 +
             (C26926 * C166 + C81009 * C172) * C80628) *
                C81011 * C52707 +
            (C53910 + C53934) * C81011 * C52708) *
               C2607 -
           ((C53935 + C53915) * C81011 * C52708 +
            ((C26926 * C167 + C81009 * C173) * C80628 +
             (C26926 * C100 + C81009 * C106) * C165) *
                C81011 * C52707) *
               C2608 +
           (((C26926 * C101 + C81009 * C109) * C165 +
             (C26926 * C168 + C81009 * C174) * C80628) *
                C81011 * C52707 +
            (C53916 + C53936) * C81011 * C52708) *
               C2609 -
           ((C55260 + C55258) * C81011 * C52708 +
            ((C26926 * C169 + C81009 * C175) * C80628 +
             (C26926 * C102 + C81009 * C111) * C165) *
                C81011 * C52707) *
               C80966) *
              C80933 +
          (((C53915 + C53935) * C81011 * C52707 +
            (C53919 + C53937) * C81011 * C52708) *
               C2608 -
           ((C53938 + C53924) * C81011 * C52708 +
            (C53934 + C53910) * C81011 * C52707) *
               C2607 -
           ((C53939 + C53927) * C81011 * C52708 +
            (C53936 + C53916) * C81011 * C52707) *
               C2609 +
           ((C55258 + C55260) * C81011 * C52707 +
            ((C26926 * C1689 + C81009 * C1704) * C165 +
             (C26926 * C1795 + C81009 * C1803) * C80628) *
                C81011 * C52708) *
               C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26926 * C99 + C81009 * C105) * C5064 +
             (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
             C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
                C81011 * C52707 +
            (C57846 + C57847 - C57848 - C57849 + C57850 + C57851) * C81011 *
                C52708) *
               C80916 +
           ((C27366 * C5065 -
             ((C26926 * C167 + C81009 * C173) * C4984 +
              (C26926 * C100 + C81009 * C106) * C5064) +
             C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
                C81011 * C52707 +
            (C59230 - (C59231 + C59232) + C59233 - C59234 - C59235) * C81011 *
                C52708) *
               C80598) *
              C80933 +
          (((C57848 - (C57847 + C57846) + C57849 - C57850 - C57851) * C81011 *
                C52707 +
            (C57852 - (C57853 + C57854) + C57855 - C57856 - C57857) * C81011 *
                C52708) *
               C80916 +
           ((C59232 + C59231 - C59230 - C59233 + C59234 + C59235) * C81011 *
                C52707 +
            (C53818 * C5064 + C53931 * C4984 - C36914 * C5065 - C37018 * C4985 +
             (C26926 * C6142 + C81009 * C6152) * C5066 +
             (C26926 * C6240 + C81009 * C6246) * C80962) *
                C81011 * C52708) *
               C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C3421 +
                      (C26926 * C221 + C81009 * C227) * C80933 -
                      C53812 * C3422 - C54026 * C80726) *
                         C81011 * C52707 +
                     (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                      C54027 * C80726) *
                         C81011 * C52708) *
                        C80628 * C2607 +
                    ((C53814 * C3422 -
                      ((C26926 * C222 + C81009 * C228) * C80933 +
                       (C26926 * C100 + C81009 * C106) * C3421) +
                      C54028 * C80726) *
                         C81011 * C52707 +
                     (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                      C54029 * C80726) *
                         C81011 * C52708) *
                        C80628 * C2608 +
                    (((C26926 * C101 + C81009 * C109) * C3421 +
                      (C26926 * C223 + C81009 * C229) * C80933 -
                      C53816 * C3422 - C54030 * C80726) *
                         C81011 * C52707 +
                     (C53816 * C3421 + C54030 * C80933 - C53822 * C3422 -
                      C54031 * C80726) *
                         C81011 * C52708) *
                        C80628 * C2609 +
                    ((C55186 * C3422 -
                      ((C26926 * C224 + C81009 * C230) * C80933 +
                       (C26926 * C102 + C81009 * C111) * C3421) +
                      C55329 * C80726) *
                         C81011 * C52707 +
                     ((C26926 * C1689 + C81009 * C1704) * C3422 -
                      (C55329 * C80933 + C55186 * C3421) +
                      (C26926 * C1888 + C81009 * C1896) * C80726) *
                         C81011 * C52708) *
                        C80628 * C80966)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C3421 +
                       (C26926 * C221 + C81009 * C227) * C80933 -
                       C53812 * C3422 - C54026 * C80726) *
                          C81011 * C52707 +
                      (C53812 * C3421 + C54026 * C80933 - C53820 * C3422 -
                       C54027 * C80726) *
                          C81011 * C52708) *
                         C4984 +
                     ((C30281 - (C30280 + C30279) + C30297) * C81011 * C52707 +
                      (C32158 * C3422 - (C30294 * C80933 + C30064 * C3421) +
                       C32346 * C80726) *
                          C81011 * C52708) *
                         C4985 +
                     ((C33805 + C33804 - C33803 - C33806) * C81011 * C52707 +
                      (C32160 * C3421 + C32347 * C80933 - C32163 * C3422 -
                       C32348 * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C80916 +
                    (((C53814 * C3422 -
                       ((C26926 * C222 + C81009 * C228) * C80933 +
                        (C26926 * C100 + C81009 * C106) * C3421) +
                       C54028 * C80726) *
                          C81011 * C52707 +
                      (C53818 * C3422 - (C54028 * C80933 + C53814 * C3421) +
                       C54029 * C80726) *
                          C81011 * C52708) *
                         C4984 +
                     ((C30286 + C30285 - C30284 - C30298) * C81011 * C52707 +
                      (C30062 * C3421 + C30295 * C80933 - C36914 * C3422 -
                       C37124 * C80726) *
                          C81011 * C52708) *
                         C4985 +
                     ((C33809 - (C33808 + C33807) + C33813) * C81011 * C52707 +
                      ((C26926 * C6142 + C81009 * C6152) * C3422 -
                       (C33812 * C80933 + C33600 * C3421) +
                       (C26926 * C6326 + C81009 * C6332) * C80726) *
                          C81011 * C52708) *
                         C80962) *
                        C80598)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C2613 +
                      (C275 * C107 + C81011 * C282) * C2607 - C305 * C2614 -
                      C306 * C2608 + C307 * C2615 + C308 * C2609 -
                      C309 * C2616 - C310 * C80966) *
                         C52707 +
                     (C55396 + C55397 - C55398 - C55399 + C55400 + C55401 -
                      C55402 - C55403) *
                         C52708) *
                        C81009 * C80933 +
                    ((C55398 - (C55397 + C55396) + C55399 - C55400 - C55401 +
                      C55402 + C55403) *
                         C52707 +
                     (C2008 * C2614 - (C54124 * C2607 + C54125 * C2613) +
                      C2009 * C2608 - C2010 * C2615 - C2011 * C2609 +
                      (C275 * C1689 + C81011 * C1978) * C2616 +
                      (C275 * C1705 + C81011 * C1986) * C80966) *
                         C52708) *
                        C81009 * C80726) *
                   C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C99 + C81011 * C276) * C78279 +
                       (C275 * C107 + C81011 * C282) * C80916 - C305 * C78260 -
                       C306 * C80598) *
                          C52707 +
                      (C59432 + C59433 - C59434 - C59435) * C52708) *
                         C81009 * C80933 +
                     ((C59434 - (C59433 + C59432) + C59435) * C52707 +
                      (C2008 * C78260 - (C54124 * C80916 + C54125 * C78279) +
                       C2009 * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C4984 +
                    (((C1068 * C78260 -
                       ((C275 * C757 + C81011 * C1043) * C80916 +
                        (C275 * C748 + C81011 * C1036) * C78279) +
                       C1069 * C80598) *
                          C52707 +
                      (C59436 - (C59437 + C59438) + C59439) * C52708) *
                         C81009 * C80933 +
                     ((C59438 + C59437 - C59436 - C59439) * C52707 +
                      (C58024 * C78279 + C58025 * C80916 - C11280 * C78260 -
                       C11281 * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C4985 +
                    ((((C275 * C750 + C81011 * C1039) * C78279 +
                       (C275 * C764 + C81011 * C1047) * C80916 -
                       C1072 * C78260 - C1073 * C80598) *
                          C52707 +
                      (C59440 + C59441 - C59442 - C59443) * C52708) *
                         C81009 * C80933 +
                     ((C59442 - (C59441 + C59440) + C59443) * C52707 +
                      ((C275 * C6142 + C81011 * C6412) * C78260 -
                       (C58028 * C80916 + C58029 * C78279) +
                       (C275 * C6154 + C81011 * C6418) * C80598) *
                          C52708) *
                         C81009 * C80726) *
                        C80962)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C165 +
             (C275 * C166 + C81011 * C354) * C80628) *
                C52707 +
            (C54204 + C54212) * C52708) *
               C81009 * C2607 -
           ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 *
               C2608 +
           ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 *
               C2609 -
           ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 *
               C80966) *
              C80933 +
          (((C2094 + C2110) * C52707 + (C2100 + C2112) * C52708) * C81009 *
               C2608 -
           ((C54213 + C54209) * C52708 + (C54212 + C54204) * C52707) * C81009 *
               C2607 -
           ((C2113 + C2105) * C52708 + (C2111 + C2097) * C52707) * C81009 *
               C2609 +
           ((C3569 + C3571) * C52707 +
            ((C275 * C1689 + C81011 * C1978) * C165 +
             (C275 * C1795 + C81011 * C2092) * C80628) *
                C52708) *
               C81009 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C5064 +
             (C275 * C166 + C81011 * C354) * C4984 -
             (C275 * C748 + C81011 * C1036) * C5065 -
             (C275 * C856 + C81011 * C1149) * C4985 +
             (C275 * C750 + C81011 * C1039) * C5066 +
             (C275 * C857 + C81011 * C1150) * C80962) *
                C52707 +
            (C58110 + C58111 - C58112 - C58113 + C58114 + C58128) * C52708) *
               C81009 * C80916 +
           ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C52707 +
            (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C52708) *
               C81009 * C80598) *
              C80933 +
          (((C58112 - (C58111 + C58110) + C58113 - C58114 - C58128) * C52707 +
            (C58117 - (C58118 + C58119) + C58129 - C58122 - C58130) * C52708) *
               C81009 * C80916 +
           ((C8001 + C8000 - C7999 - C8002 + C8003 + C8007) * C52707 +
            (C2008 * C5064 + C2108 * C4984 - C11280 * C5065 - C11386 * C4985 +
             (C275 * C6142 + C81011 * C6412) * C5066 +
             (C275 * C6240 + C81011 * C6498) * C80962) *
                C52708) *
               C81009 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C3421 +
            (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
            C54292 * C80726) *
               C52707 +
           (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
            C54293 * C80726) *
               C52708) *
              C81009 * C80628 * C2607 +
          ((C3641 - (C3640 + C3639) + C3642) * C52707 +
           (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) + C2213 * C80726) *
               C52708) *
              C81009 * C80628 * C2608 +
          ((C3645 + C3644 - C3643 - C3646) * C52707 +
           (C2006 * C3421 + C2214 * C80933 - C2010 * C3422 - C2215 * C80726) *
               C52708) *
              C81009 * C80628 * C2609 +
          ((C3649 - (C3648 + C3647) + C3653) * C52707 +
           ((C275 * C1689 + C81011 * C1978) * C3422 -
            (C3652 * C80933 + C3498 * C3421) +
            (C275 * C1888 + C81011 * C2194) * C80726) *
               C52708) *
              C81009 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C3421 +
             (C275 * C221 + C81011 * C422) * C80933 - C54122 * C3422 -
             C54292 * C80726) *
                C52707 +
            (C54122 * C3421 + C54292 * C80933 - C54125 * C3422 -
             C54293 * C80726) *
                C52708) *
               C81009 * C4984 +
           ((C56147 * C3422 -
             ((C275 * C946 + C81011 * C1256) * C80933 +
              (C275 * C748 + C81011 * C1036) * C3421) +
             C56355 * C80726) *
                C52707 +
            (C58024 * C3422 - (C56355 * C80933 + C56147 * C3421) +
             C58211 * C80726) *
                C52708) *
               C81009 * C4985 +
           (((C275 * C750 + C81011 * C1039) * C3421 +
             (C275 * C947 + C81011 * C1257) * C80933 - C58026 * C3422 -
             C58212 * C80726) *
                C52707 +
            (C58026 * C3421 + C58212 * C80933 - C58029 * C3422 -
             C58213 * C80726) *
                C52708) *
               C81009 * C80962) *
              C80916 +
          (((C3641 - (C3640 + C3639) + C3642) * C52707 +
            (C2008 * C3422 - (C2212 * C80933 + C2004 * C3421) +
             C2213 * C80726) *
                C52708) *
               C81009 * C4984 +
           ((C4546 + C4545 - C4544 - C4556) * C52707 +
            (C4322 * C3421 + C4554 * C80933 - C11280 * C3422 -
             C11494 * C80726) *
                C52708) *
               C81009 * C4985 +
           ((C8109 - (C8108 + C8107) + C8113) * C52707 +
            ((C275 * C6142 + C81011 * C6412) * C3422 -
             (C8112 * C80933 + C7898 * C3421) +
             (C275 * C6326 + C81011 * C6578) * C80726) *
                C52708) *
               C81009 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C2613 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C2607 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C2614 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C2608 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C2615 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C2609 -
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C2616 -
           (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
               C80966) *
              C81009 * C81011 * C80933 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C2614 -
           ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
             C52707 * C2301) *
                C2607 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C2613) +
           (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 + C52708 * C2306) *
               C2608 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C2615 -
           (C52962 * C1703 + C52708 * C2307 + C52961 * C1695 + C52707 * C2303) *
               C2609 +
           (C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C2616 +
           (C52961 * C1697 + C52707 * C2304 + C52962 * C1705 + C52708 * C2308) *
               C80966) *
              C81009 * C81011 * C80726) *
         C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C78279 +
            (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
                C80916 -
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C78260 -
            (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C78260 -
            ((C52962 * C1700 + C52708 * C2305 + C52961 * C1693 +
              C52707 * C2301) *
                 C80916 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C78279) +
            (C52961 * C1692 + C52707 * C2302 + C52962 * C1701 +
             C52708 * C2306) *
                C80598) *
               C81009 * C81011 * C80726) *
              C4984 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C78260 -
            ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 +
              C52707 * C1365) *
                 C80916 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C78279) +
            (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C78279 +
            (C52961 * C3985 + C52707 * C4659 + C52962 * C6144 +
             C52708 * C6660) *
                C80916 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C78260 -
            (C52962 * C6143 + C52708 * C6659 + C52961 * C3986 +
             C52707 * C4660) *
                C80598) *
               C81009 * C81011 * C80726) *
              C4985 +
          (((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C78279 +
            (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
                C80916 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C78260 -
            (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
                C80598) *
               C81009 * C81011 * C80933 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C78260 -
            ((C52962 * C6153 + C52708 * C6663 + C52961 * C6148 +
              C52707 * C6662) *
                 C80916 +
             (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
              C52707 * C6656) *
                 C78279) +
            (C52961 * C6147 + C52707 * C6661 + C52962 * C6154 +
             C52708 * C6664) *
                C80598) *
               C81009 * C81011 * C80726) *
              C80962)) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C165 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C80628) *
               C81009 * C81011 * C2607 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C80628 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C165) *
               C81009 * C81011 * C2608 +
           ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C165 +
            (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
                C80628) *
               C81009 * C81011 * C2609 -
           ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
                C80628 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C165) *
               C81009 * C81011 * C80966) *
              C80933 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C165 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C80628) *
               C81009 * C81011 * C2608 -
           ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
             C52707 * C2409) *
                C80628 +
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C165) *
               C81009 * C81011 * C2607 -
           ((C52962 * C1794 + C52708 * C2413 + C52961 * C1789 +
             C52707 * C2408) *
                C80628 +
            (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 +
             C52707 * C2295) *
                C165) *
               C81009 * C81011 * C2609 +
           ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 +
             C52708 * C2300) *
                C165 +
            (C52961 * C1791 + C52707 * C2410 + C52962 * C1795 +
             C52708 * C2414) *
                C80628) *
               C81009 * C81011 * C80966) *
              C80726)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C5064 +
            (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
                C4984 -
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C5065 -
            (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
                C4985 +
            (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C5066 +
            (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
                C80962) *
               C81009 * C81011 * C80916 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C5065 -
            ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                 C4984 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C5064) +
            (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
                C4985 -
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C5066 -
            (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
                C80962) *
               C81009 * C81011 * C80598) *
              C80933 +
          (((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C5065 -
            ((C52962 * C1792 + C52708 * C2411 + C52961 * C1790 +
              C52707 * C2409) *
                 C4984 +
             (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
              C52707 * C2294) *
                 C5064) +
            (C52961 * C4093 + C52707 * C4773 + C52962 * C6238 +
             C52708 * C6741) *
                C4985 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C5066 -
            (C52962 * C6239 + C52708 * C6742 + C52961 * C6236 +
             C52707 * C6739) *
                C80962) *
               C81009 * C81011 * C80916 +
           ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C5064 +
            (C52961 * C1788 + C52707 * C2407 + C52962 * C1793 +
             C52708 * C2412) *
                C4984 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C5065 -
            (C52962 * C6237 + C52708 * C6743 + C52961 * C4094 +
             C52707 * C4774) *
                C4985 +
            (C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C5066 +
            (C52961 * C6235 + C52707 * C6740 + C52962 * C6240 +
             C52708 * C6744) *
                C80962) *
               C81009 * C81011 * C80598) *
              C80726)) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C3421 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80933 -
           (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 + C52707 * C2294) *
               C3422 -
           (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 + C52707 * C2509) *
               C80726) *
              C81009 * C81011 * C80628 * C2607 +
          ((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 + C52708 * C2298) *
               C3422 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80933 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C3421) +
           (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 + C52708 * C2512) *
               C80726) *
              C81009 * C81011 * C80628 * C2608 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C3421 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C80933 -
           (C52962 * C1688 + C52708 * C2299 + C52961 * C1683 + C52707 * C2295) *
               C3422 -
           (C52962 * C1886 + C52708 * C2514 + C52961 * C1885 + C52707 * C2513) *
               C80726) *
              C81009 * C81011 * C80628 * C2609 +
          ((C52961 * C1685 + C52707 * C2296 + C52962 * C1689 + C52708 * C2300) *
               C3422 -
           ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
                C80933 +
            (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
                C3421) +
           (C52961 * C1887 + C52707 * C2515 + C52962 * C1888 + C52708 * C2516) *
               C80726) *
              C81009 * C81011 * C80628 * C80966)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C3421 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80933 -
            (C52962 * C1686 + C52708 * C2297 + C52961 * C1684 +
             C52707 * C2294) *
                C3422 -
            (C52962 * C1883 + C52708 * C2510 + C52961 * C1882 +
             C52707 * C2509) *
                C80726) *
               C81009 * C81011 * C4984 +
           ((C52961 * C3979 + C52707 * C4655 + C52962 * C6138 +
             C52708 * C6654) *
                C3422 -
            ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 +
              C52707 * C1578) *
                 C80933 +
             (C52962 * C3979 + C52708 * C4655 + C52961 * C748 +
              C52707 * C1358) *
                 C3421) +
            (C52961 * C4199 + C52707 * C4889 + C52962 * C6322 +
             C52708 * C6819) *
                C80726) *
               C81009 * C81011 * C4985 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C3421 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80933 -
            (C52962 * C6141 + C52708 * C6657 + C52961 * C6140 +
             C52707 * C6656) *
                C3422 -
            (C52962 * C6325 + C52708 * C6822 + C52961 * C6324 +
             C52707 * C6821) *
                C80726) *
               C81009 * C81011 * C80962) *
              C80916 +
          (((C52961 * C1682 + C52707 * C2293 + C52962 * C1687 +
             C52708 * C2298) *
                C3422 -
            ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                 C80933 +
             (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                 C3421) +
            (C52961 * C1881 + C52707 * C2511 + C52962 * C1884 +
             C52708 * C2512) *
                C80726) *
               C81009 * C81011 * C4984 +
           ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C3421 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80933 -
            (C52962 * C6137 + C52708 * C6653 + C52961 * C3980 +
             C52707 * C4656) *
                C3422 -
            (C52962 * C6321 + C52708 * C6820 + C52961 * C4200 +
             C52707 * C4890) *
                C80726) *
               C81009 * C81011 * C4985 +
           ((C52961 * C6139 + C52707 * C6655 + C52962 * C6142 +
             C52708 * C6658) *
                C3422 -
            ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 +
              C52707 * C1580) *
                 C80933 +
             (C52962 * C6139 + C52708 * C6655 + C52961 * C751 +
              C52707 * C1362) *
                 C3421) +
            (C52961 * C6323 + C52707 * C6823 + C52962 * C6326 +
             C52708 * C6824) *
                C80726) *
               C81009 * C81011 * C80962) *
              C80598)) /
            (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C94 +
           (C26926 * C107 + C81009 * C117) * C83 -
           (C26926 * C100 + C81009 * C106) * C95 -
           (C26926 * C108 + C81009 * C118) * C84 +
           (C26926 * C101 + C81009 * C109) * C96 +
           (C26926 * C110 + C81009 * C119) * C85 -
           (C26926 * C102 + C81009 * C111) * C97 -
           (C26926 * C112 + C81009 * C120) * C86 +
           (C26926 * C103 + C81009 * C113) * C98 +
           (C26926 * C114 + C81009 * C121) * C87) *
              C81011 * C52707 +
          ((C26926 * C1684 + C81009 * C1694) * C94 +
           (C26926 * C1693 + C81009 * C1707) * C83 -
           (C26926 * C1682 + C81009 * C1690) * C95 -
           (C26926 * C1692 + C81009 * C1706) * C84 +
           (C26926 * C1683 + C81009 * C1691) * C96 +
           (C26926 * C1695 + C81009 * C1708) * C85 -
           (C26926 * C1685 + C81009 * C1696) * C97 -
           (C26926 * C1697 + C81009 * C1709) * C86 +
           (C26926 * C3283 + C81009 * C3284) * C98 +
           (C26926 * C3285 + C81009 * C3286) * C87) *
              C81011 * C52708) *
         C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C743 +
            (C26926 * C107 + C81009 * C117) * C737 -
            (C26926 * C100 + C81009 * C106) * C744 -
            (C26926 * C108 + C81009 * C118) * C738 +
            (C26926 * C101 + C81009 * C109) * C745 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C743 +
            (C26926 * C1693 + C81009 * C1707) * C737 -
            (C26926 * C1682 + C81009 * C1690) * C744 -
            (C26926 * C1692 + C81009 * C1706) * C738 +
            (C26926 * C1683 + C81009 * C1691) * C745 +
            (C26926 * C1695 + C81009 * C1708) * C80954) *
               C81011 * C52708) *
              C80639 * C81003 +
          ((C27378 - (C27377 + C27376) + C27379 - C27380 - C27381) * C81011 *
               C52707 +
           (C30068 - (C30069 + C30070) + C30071 - C30072 - C30073) * C81011 *
               C52708) *
              C80639 * C80988 +
          ((C27384 + C27383 - C27382 - C27385 + C27386 + C27387) * C81011 *
               C52707 +
           (C32160 * C743 + C32161 * C737 - C33600 * C744 - C33601 * C738 +
            (C26926 * C7589 + C81009 * C7590) * C745 +
            (C26926 * C7591 + C81009 * C7592) * C80954) *
               C81011 * C52708) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C4987 +
            (C26926 * C107 + C81009 * C117) * C80998 -
            (C26926 * C100 + C81009 * C106) * C4988 -
            (C26926 * C108 + C81009 * C118) * C80982 +
            (C26926 * C101 + C81009 * C109) * C4989 +
            (C26926 * C110 + C81009 * C119) * C80954) *
               C81011 * C52707 +
           (C53812 * C4987 + C53813 * C80998 - C53814 * C4988 -
            C53815 * C80982 + C53816 * C4989 + C53817 * C80954) *
               C81011 * C52708) *
              C80639 * C4984 +
          ((C30986 - (C30985 + C30984) + C30987 - C30988 - C30989) * C81011 *
               C52707 +
           (C48216 - (C48217 + C48218) + C48219 - C48220 - C48221) * C81011 *
               C52708) *
              C80639 * C4985 +
          ((C30992 + C30991 - C30990 - C30993 + C30994 + C30995) * C81011 *
               C52707 +
           (C32160 * C4987 + C32161 * C80998 - C33600 * C4988 -
            C33601 * C80982 + (C26926 * C7589 + C81009 * C7590) * C4989 +
            (C26926 * C7591 + C81009 * C7592) * C80954) *
               C81011 * C52708) *
              C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5657 +
            (C26926 * C107 + C81009 * C117) * C80588) *
               C81011 * C52707 +
           (C53812 * C5657 + C53813 * C80588) * C81011 * C52708) *
              C80639 * C5652 -
          ((C32144 + C32145) * C81011 * C52708 +
           (C31647 + C31646) * C81011 * C52707) *
              C80639 * C5653 +
          ((C31649 + C31648) * C81011 * C52707 +
           (C32166 + C32167) * C81011 * C52708) *
              C80639 * C5654 -
          ((C34490 + C34491) * C81011 * C52708 +
           (C31663 + C31662) * C81011 * C52707) *
              C80639 * C5655 +
          ((C31665 + C31664) * C81011 * C52707 +
           ((C26926 * C34479 + C81009 * C34480) * C5657 +
            (C26926 * C34481 + C81009 * C34482) * C80588) *
               C81011 * C52708) *
              C80639 * C5656)) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C165 +
            (C26926 * C166 + C81009 * C172) * C80628) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C165 +
            (C26926 * C1790 + C81009 * C1798) * C80628) *
               C81011 * C52708) *
              C83 -
          (((C26926 * C1788 + C81009 * C1796) * C80628 +
            (C26926 * C1682 + C81009 * C1690) * C165) *
               C81011 * C52708 +
           ((C26926 * C167 + C81009 * C173) * C80628 +
            (C26926 * C100 + C81009 * C106) * C165) *
               C81011 * C52707) *
              C84 +
          (((C26926 * C101 + C81009 * C109) * C165 +
            (C26926 * C168 + C81009 * C174) * C80628) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C165 +
            (C26926 * C1789 + C81009 * C1797) * C80628) *
               C81011 * C52708) *
              C85 -
          (((C26926 * C1791 + C81009 * C1799) * C80628 +
            (C26926 * C1685 + C81009 * C1696) * C165) *
               C81011 * C52708 +
           ((C26926 * C169 + C81009 * C175) * C80628 +
            (C26926 * C102 + C81009 * C111) * C165) *
               C81011 * C52707) *
              C86 +
          (((C26926 * C103 + C81009 * C113) * C165 +
            (C26926 * C170 + C81009 * C176) * C80628) *
               C81011 * C52707 +
           ((C26926 * C3283 + C81009 * C3284) * C165 +
            (C26926 * C3353 + C81009 * C3354) * C80628) *
               C81011 * C52708) *
              C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C852 +
            (C26926 * C166 + C81009 * C172) * C81003 - C27364 * C853 -
            C27474 * C80988 + C27372 * C854 + C27475 * C80962) *
               C81011 * C52707 +
           ((C26926 * C1684 + C81009 * C1694) * C852 +
            (C26926 * C1790 + C81009 * C1798) * C81003 - C30064 * C853 -
            C30178 * C80988 + C32160 * C854 + C32252 * C80962) *
               C81011 * C52708) *
              C737 +
          ((C27366 * C853 -
            ((C26926 * C167 + C81009 * C173) * C81003 +
             (C26926 * C100 + C81009 * C106) * C852) +
            C27476 * C80988 - C27370 * C854 - C27477 * C80962) *
               C81011 * C52707 +
           (C30062 * C853 -
            ((C26926 * C1788 + C81009 * C1796) * C81003 +
             (C26926 * C1682 + C81009 * C1690) * C852) +
            C30179 * C80988 - C33600 * C854 - C33704 * C80962) *
               C81011 * C52708) *
              C738 +
          (((C26926 * C101 + C81009 * C109) * C852 +
            (C26926 * C168 + C81009 * C174) * C81003 - C27368 * C853 -
            C27478 * C80988 + C27374 * C854 + C27479 * C80962) *
               C81011 * C52707 +
           ((C26926 * C1683 + C81009 * C1691) * C852 +
            (C26926 * C1789 + C81009 * C1797) * C81003 - C30066 * C853 -
            C30180 * C80988 + (C26926 * C7589 + C81009 * C7590) * C854 +
            (C26926 * C7691 + C81009 * C7692) * C80962) *
               C81011 * C52708) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26926 * C99 + C81009 * C105) * C5064 +
            (C26926 * C166 + C81009 * C172) * C4984 - C27364 * C5065 -
            C27474 * C4985 + C27372 * C5066 + C27475 * C80962) *
               C81011 * C52707 +
           (C53812 * C5064 + C53928 * C4984 - C30064 * C5065 - C30178 * C4985 +
            C32160 * C5066 + C32252 * C80962) *
               C81011 * C52708) *
              C80998 +
          ((C27366 * C5065 -
            ((C26926 * C167 + C81009 * C173) * C4984 +
             (C26926 * C100 + C81009 * C106) * C5064) +
            C27476 * C4985 - C27370 * C5066 - C27477 * C80962) *
               C81011 * C52707 +
           (C30062 * C5065 - (C53929 * C4984 + C53814 * C5064) +
            C30179 * C4985 - C33600 * C5066 - C33704 * C80962) *
               C81011 * C52708) *
              C80982 +
          (((C26926 * C101 + C81009 * C109) * C5064 +
            (C26926 * C168 + C81009 * C174) * C4984 - C27368 * C5065 -
            C27478 * C4985 + C27374 * C5066 + C27479 * C80962) *
               C81011 * C52707 +
           (C53816 * C5064 + C53930 * C4984 - C30066 * C5065 - C30180 * C4985 +
            (C26926 * C7589 + C81009 * C7590) * C5066 +
            (C26926 * C7691 + C81009 * C7692) * C80962) *
               C81011 * C52708) *
              C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26926 * C99 + C81009 * C105) * C5716 +
           (C26926 * C166 + C81009 * C172) * C5652 - C27364 * C5717 -
           C27474 * C5653 + C27372 * C5718 + C27475 * C5654 - C31658 * C5719 -
           C31714 * C5655 + C31661 * C5720 + C31715 * C5656) *
              C81011 * C52707 +
          (C53812 * C5716 + C53928 * C5652 - C30064 * C5717 - C30178 * C5653 +
           C32160 * C5718 + C32252 * C5654 - C34489 * C5719 - C34562 * C5655 +
           (C26926 * C34479 + C81009 * C34480) * C5720 +
           (C26926 * C34557 + C81009 * C34558) * C5656) *
              C81011 * C52708) *
         C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C220 +
                      (C26926 * C221 + C81009 * C227) * C80639) *
                         C81011 * C52707 +
                     ((C26926 * C1684 + C81009 * C1694) * C220 +
                      (C26926 * C1882 + C81009 * C1890) * C80639) *
                         C81011 * C52708) *
                        C80628 * C83 -
                    (((C26926 * C1881 + C81009 * C1889) * C80639 +
                      (C26926 * C1682 + C81009 * C1690) * C220) *
                         C81011 * C52708 +
                     ((C26926 * C222 + C81009 * C228) * C80639 +
                      (C26926 * C100 + C81009 * C106) * C220) *
                         C81011 * C52707) *
                        C80628 * C84 +
                    (((C26926 * C101 + C81009 * C109) * C220 +
                      (C26926 * C223 + C81009 * C229) * C80639) *
                         C81011 * C52707 +
                     ((C26926 * C1683 + C81009 * C1691) * C220 +
                      (C26926 * C1885 + C81009 * C1893) * C80639) *
                         C81011 * C52708) *
                        C80628 * C85 -
                    (((C26926 * C1887 + C81009 * C1895) * C80639 +
                      (C26926 * C1685 + C81009 * C1696) * C220) *
                         C81011 * C52708 +
                     ((C26926 * C224 + C81009 * C230) * C80639 +
                      (C26926 * C102 + C81009 * C111) * C220) *
                         C81011 * C52707) *
                        C80628 * C86 +
                    (((C26926 * C103 + C81009 * C113) * C220 +
                      (C26926 * C225 + C81009 * C231) * C80639) *
                         C81011 * C52707 +
                     ((C26926 * C3283 + C81009 * C3284) * C220 +
                      (C26926 * C3423 + C81009 * C3424) * C80639) *
                         C81011 * C52708) *
                        C80628 * C87)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C81011 * C52707 +
                      ((C26926 * C1684 + C81009 * C1694) * C220 +
                       (C26926 * C1882 + C81009 * C1890) * C80639) *
                          C81011 * C52708) *
                         C81003 -
                     ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                      (C27578 + C27554) * C81011 * C52707) *
                         C80988 +
                     ((C27559 + C27579) * C81011 * C52707 +
                      (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
                         C80962) *
                        C737 +
                    (((C27560 + C27580) * C81011 * C52707 +
                      (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                         C80988 -
                     (((C26926 * C1881 + C81009 * C1889) * C80639 +
                       (C26926 * C1682 + C81009 * C1690) * C220) *
                          C81011 * C52708 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C81011 * C52707) *
                         C81003 -
                     ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
                      (C27581 + C27563) * C81011 * C52707) *
                         C80962) *
                        C738 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C81011 * C52707 +
                      ((C26926 * C1683 + C81009 * C1691) * C220 +
                       (C26926 * C1885 + C81009 * C1893) * C80639) *
                          C81011 * C52708) *
                         C81003 -
                     ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
                      (C27582 + C27566) * C81011 * C52707) *
                         C80988 +
                     ((C27571 + C27583) * C81011 * C52707 +
                      ((C26926 * C7589 + C81009 * C7590) * C220 +
                       (C26926 * C7791 + C81009 * C7792) * C80639) *
                          C81011 * C52708) *
                         C80962) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C26926 * C99 + C81009 * C105) * C220 +
                       (C26926 * C221 + C81009 * C227) * C80639) *
                          C81011 * C52707 +
                      (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
                         C4984 -
                     ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                      (C27578 + C27554) * C81011 * C52707) *
                         C4985 +
                     ((C27559 + C27579) * C81011 * C52707 +
                      (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
                         C80962) *
                        C80998 +
                    (((C27560 + C27580) * C81011 * C52707 +
                      (C30062 * C220 + C30295 * C80639) * C81011 * C52708) *
                         C4985 -
                     ((C54028 * C80639 + C53814 * C220) * C81011 * C52708 +
                      ((C26926 * C222 + C81009 * C228) * C80639 +
                       (C26926 * C100 + C81009 * C106) * C220) *
                          C81011 * C52707) *
                         C4984 -
                     ((C33812 * C80639 + C33600 * C220) * C81011 * C52708 +
                      (C27581 + C27563) * C81011 * C52707) *
                         C80962) *
                        C80982 +
                    ((((C26926 * C101 + C81009 * C109) * C220 +
                       (C26926 * C223 + C81009 * C229) * C80639) *
                          C81011 * C52707 +
                      (C53816 * C220 + C54030 * C80639) * C81011 * C52708) *
                         C4984 -
                     ((C30296 * C80639 + C30066 * C220) * C81011 * C52708 +
                      (C27582 + C27566) * C81011 * C52707) *
                         C4985 +
                     ((C27571 + C27583) * C81011 * C52707 +
                      ((C26926 * C7589 + C81009 * C7590) * C220 +
                       (C26926 * C7791 + C81009 * C7792) * C80639) *
                          C81011 * C52708) *
                         C80962) *
                        C80954)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C26926 * C99 + C81009 * C105) * C220 +
                      (C26926 * C221 + C81009 * C227) * C80639) *
                         C81011 * C52707 +
                     (C53812 * C220 + C54026 * C80639) * C81011 * C52708) *
                        C5652 -
                    ((C30294 * C80639 + C30064 * C220) * C81011 * C52708 +
                     (C27578 + C27554) * C81011 * C52707) *
                        C5653 +
                    ((C27559 + C27579) * C81011 * C52707 +
                     (C32160 * C220 + C32347 * C80639) * C81011 * C52708) *
                        C5654 -
                    ((C34636 * C80639 + C34489 * C220) * C81011 * C52708 +
                     (C31768 + C31760) * C81011 * C52707) *
                        C5655 +
                    ((C31765 + C31769) * C81011 * C52707 +
                     ((C26926 * C34479 + C81009 * C34480) * C220 +
                      (C26926 * C34628 + C81009 * C34629) * C80639) *
                         C81011 * C52708) *
                        C5656) *
                   C80588) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C275 * C99 + C81011 * C276) * C94 +
                     (C275 * C107 + C81011 * C282) * C83 - C305 * C95 -
                     C306 * C84 + C307 * C96 + C308 * C85 - C309 * C97 -
                     C310 * C86 + C311 * C98 + C312 * C87) *
                        C52707 +
                    ((C275 * C1684 + C81011 * C1972) * C94 +
                     (C275 * C1693 + C81011 * C1979) * C83 - C2004 * C95 -
                     C2005 * C84 + C2006 * C96 + C2007 * C85 - C3498 * C97 -
                     C3499 * C86 + (C275 * C3283 + C81011 * C3491) * C98 +
                     (C275 * C3285 + C81011 * C3492) * C87) *
                        C52708) *
                   C81009 * C80639 * C80628) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C743 +
                      (C275 * C107 + C81011 * C282) * C737 - C305 * C744 -
                      C306 * C738 + C307 * C745 + C308 * C80954) *
                         C52707 +
                     ((C275 * C1684 + C81011 * C1972) * C743 +
                      (C275 * C1693 + C81011 * C1979) * C737 - C2004 * C744 -
                      C2005 * C738 + C2006 * C745 + C2007 * C80954) *
                         C52708) *
                        C81009 * C80639 * C81003 +
                    ((C1068 * C744 -
                      ((C275 * C757 + C81011 * C1043) * C737 +
                       (C275 * C748 + C81011 * C1036) * C743) +
                      C1069 * C738 - C1070 * C745 - C1071 * C80954) *
                         C52707 +
                     (C4322 * C744 -
                      ((C275 * C3985 + C81011 * C4309) * C737 +
                       (C275 * C3979 + C81011 * C4305) * C743) +
                      C4323 * C738 - C4324 * C745 - C4325 * C80954) *
                         C52708) *
                        C81009 * C80639 * C80988 +
                    (((C275 * C750 + C81011 * C1039) * C743 +
                      (C275 * C764 + C81011 * C1047) * C737 - C1072 * C744 -
                      C1073 * C738 + C1074 * C745 + C1075 * C80954) *
                         C52707 +
                     ((C275 * C6140 + C81011 * C6410) * C743 +
                      (C275 * C6148 + C81011 * C6416) * C737 - C7898 * C744 -
                      C7899 * C738 + (C275 * C7589 + C81011 * C7891) * C745 +
                      (C275 * C7591 + C81011 * C7892) * C80954) *
                         C52708) *
                        C81009 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C4987 +
                      (C275 * C107 + C81011 * C282) * C80998 - C305 * C4988 -
                      C306 * C80982 + C307 * C4989 + C308 * C80954) *
                         C52707 +
                     (C54122 * C4987 + C54123 * C80998 - C2004 * C4988 -
                      C2005 * C80982 + C2006 * C4989 + C2007 * C80954) *
                         C52708) *
                        C81009 * C80639 * C4984 +
                    ((C1068 * C4988 -
                      ((C275 * C757 + C81011 * C1043) * C80998 +
                       (C275 * C748 + C81011 * C1036) * C4987) +
                      C1069 * C80982 - C1070 * C4989 - C1071 * C80954) *
                         C52707 +
                     (C4322 * C4988 - (C56146 * C80998 + C56147 * C4987) +
                      C4323 * C80982 - C4324 * C4989 - C4325 * C80954) *
                         C52708) *
                        C81009 * C80639 * C4985 +
                    (((C275 * C750 + C81011 * C1039) * C4987 +
                      (C275 * C764 + C81011 * C1047) * C80998 - C1072 * C4988 -
                      C1073 * C80982 + C1074 * C4989 + C1075 * C80954) *
                         C52707 +
                     ((C275 * C6140 + C81011 * C6410) * C4987 +
                      (C275 * C6148 + C81011 * C6416) * C80998 - C7898 * C4988 -
                      C7899 * C80982 + (C275 * C7589 + C81011 * C7891) * C4989 +
                      (C275 * C7591 + C81011 * C7892) * C80954) *
                         C52708) *
                        C81009 * C80639 * C80962)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C275 * C99 + C81011 * C276) * C5657 +
                      (C275 * C107 + C81011 * C282) * C80588) *
                         C52707 +
                     (C54122 * C5657 + C54123 * C80588) * C52708) *
                        C81009 * C80639 * C5652 -
                    ((C56146 * C80588 + C56147 * C5657) * C52708 +
                     ((C275 * C757 + C81011 * C1043) * C80588 +
                      (C275 * C748 + C81011 * C1036) * C5657) *
                         C52707) *
                        C81009 * C80639 * C5653 +
                    (((C275 * C750 + C81011 * C1039) * C5657 +
                      (C275 * C764 + C81011 * C1047) * C80588) *
                         C52707 +
                     ((C275 * C6140 + C81011 * C6410) * C5657 +
                      (C275 * C6148 + C81011 * C6416) * C80588) *
                         C52708) *
                        C81009 * C80639 * C5654 -
                    (((C275 * C8503 + C81011 * C8715) * C80588 +
                      (C275 * C8499 + C81011 * C8713) * C5657) *
                         C52708 +
                     ((C275 * C5663 + C81011 * C5826) * C80588 +
                      (C275 * C5659 + C81011 * C5822) * C5657) *
                         C52707) *
                        C81009 * C80639 * C5655 +
                    (((C275 * C5660 + C81011 * C5823) * C5657 +
                      (C275 * C5668 + C81011 * C5827) * C80588) *
                         C52707 +
                     ((C275 * C34479 + C81011 * C34703) * C5657 +
                      (C275 * C34481 + C81011 * C34704) * C80588) *
                         C52708) *
                        C81009 * C80639 * C5656)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C165 +
            (C275 * C166 + C81011 * C354) * C80628) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C165 +
            (C275 * C1790 + C81011 * C2087) * C80628) *
               C52708) *
              C81009 * C83 -
          ((C2110 + C2094) * C52708 + (C377 + C361) * C52707) * C81009 * C84 +
          ((C366 + C378) * C52707 + (C2097 + C2111) * C52708) * C81009 * C85 -
          ((C3571 + C3569) * C52708 + (C379 + C367) * C52707) * C81009 * C86 +
          ((C372 + C380) * C52707 + ((C275 * C3283 + C81011 * C3491) * C165 +
                                     (C275 * C3353 + C81011 * C3565) * C80628) *
                                        C52708) *
              C81009 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C852 +
            (C275 * C166 + C81011 * C354) * C81003 -
            (C275 * C748 + C81011 * C1036) * C853 -
            (C275 * C856 + C81011 * C1149) * C80988 +
            (C275 * C750 + C81011 * C1039) * C854 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C852 +
            (C275 * C1790 + C81011 * C2087) * C81003 -
            (C275 * C3979 + C81011 * C4305) * C853 -
            (C275 * C4093 + C81011 * C4423) * C80988 +
            (C275 * C6140 + C81011 * C6410) * C854 +
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C52708) *
              C81009 * C737 +
          ((C1160 - (C1159 + C1158) + C1178 - C1163 - C1179) * C52707 +
           (C18864 - (C18865 + C18866) + C18867 - C18868 - C18869) * C52708) *
              C81009 * C738 +
          ((C1168 + C1167 - C1166 - C1180 + C1171 + C1181) * C52707 +
           (C2006 * C852 + C2107 * C81003 - C4324 * C853 - C4439 * C80988 +
            (C275 * C7589 + C81011 * C7891) * C854 +
            (C275 * C7691 + C81011 * C7997) * C80962) *
               C52708) *
              C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C5064 +
            (C275 * C166 + C81011 * C354) * C4984 -
            (C275 * C748 + C81011 * C1036) * C5065 -
            (C275 * C856 + C81011 * C1149) * C4985 +
            (C275 * C750 + C81011 * C1039) * C5066 +
            (C275 * C857 + C81011 * C1150) * C80962) *
               C52707 +
           (C54122 * C5064 + C54210 * C4984 - C56147 * C5065 - C56253 * C4985 +
            (C275 * C6140 + C81011 * C6410) * C5066 +
            (C275 * C6236 + C81011 * C6493) * C80962) *
               C52708) *
              C81009 * C80998 +
          ((C5292 - (C5291 + C5290) + C5293 - C5294 - C5295) * C52707 +
           (C7999 - (C8000 + C8001) + C8002 - C8003 - C8007) * C52708) *
              C81009 * C80982 +
          ((C5298 + C5297 - C5296 - C5299 + C5300 + C5301) * C52707 +
           (C2006 * C5064 + C2107 * C4984 - C4324 * C5065 - C4439 * C4985 +
            (C275 * C7589 + C81011 * C7891) * C5066 +
            (C275 * C7691 + C81011 * C7997) * C80962) *
               C52708) *
              C81009 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C99 + C81011 * C276) * C5716 +
           (C275 * C166 + C81011 * C354) * C5652 -
           (C275 * C748 + C81011 * C1036) * C5717 -
           (C275 * C856 + C81011 * C1149) * C5653 +
           (C275 * C750 + C81011 * C1039) * C5718 +
           (C275 * C857 + C81011 * C1150) * C5654 -
           (C275 * C5659 + C81011 * C5822) * C5719 -
           (C275 * C5722 + C81011 * C5871) * C5655 +
           (C275 * C5660 + C81011 * C5823) * C5720 +
           (C275 * C5723 + C81011 * C5872) * C5656) *
              C52707 +
          (C54122 * C5716 + C54210 * C5652 - C56147 * C5717 - C56253 * C5653 +
           (C275 * C6140 + C81011 * C6410) * C5718 +
           (C275 * C6236 + C81011 * C6493) * C5654 -
           (C275 * C8499 + C81011 * C8713) * C5719 -
           (C275 * C8573 + C81011 * C8783) * C5655 +
           (C275 * C34479 + C81011 * C34703) * C5720 +
           (C275 * C34557 + C81011 * C34771) * C5656) *
              C52708) *
         C81009 * C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C52707 +
           ((C275 * C1684 + C81011 * C1972) * C220 +
            (C275 * C1882 + C81011 * C2187) * C80639) *
               C52708) *
              C81009 * C80628 * C83 -
          ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
              C81009 * C80628 * C84 +
          ((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
              C81009 * C80628 * C85 -
          ((C3652 * C80639 + C3498 * C220) * C52708 + (C447 + C435) * C52707) *
              C81009 * C80628 * C86 +
          ((C440 + C448) * C52707 + ((C275 * C3283 + C81011 * C3491) * C220 +
                                     (C275 * C3423 + C81011 * C3637) * C80639) *
                                        C52708) *
              C81009 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            ((C275 * C1684 + C81011 * C1972) * C220 +
             (C275 * C1882 + C81011 * C2187) * C80639) *
                C52708) *
               C81009 * C81003 -
           (((C275 * C4199 + C81011 * C4539) * C80639 +
             (C275 * C3979 + C81011 * C4305) * C220) *
                C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C80988 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            ((C275 * C6140 + C81011 * C6410) * C220 +
             (C275 * C6324 + C81011 * C6575) * C80639) *
                C52708) *
               C81009 * C80962) *
              C737 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C80988 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C81003 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80962) *
              C738 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C81003 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C80988 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C99 + C81011 * C276) * C220 +
             (C275 * C221 + C81011 * C422) * C80639) *
                C52707 +
            (C54122 * C220 + C54292 * C80639) * C52708) *
               C81009 * C4984 -
           ((C56355 * C80639 + C56147 * C220) * C52708 +
            ((C275 * C946 + C81011 * C1256) * C80639 +
             (C275 * C748 + C81011 * C1036) * C220) *
                C52707) *
               C81009 * C4985 +
           (((C275 * C750 + C81011 * C1039) * C220 +
             (C275 * C947 + C81011 * C1257) * C80639) *
                C52707 +
            ((C275 * C6140 + C81011 * C6410) * C220 +
             (C275 * C6324 + C81011 * C6575) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80998 +
          (((C1266 + C1280) * C52707 +
            (C4322 * C220 + C4554 * C80639) * C52708) *
               C81009 * C4985 -
           ((C2212 * C80639 + C2004 * C220) * C52708 + (C445 + C429) * C52707) *
               C81009 * C4984 -
           ((C8112 * C80639 + C7898 * C220) * C52708 +
            (C1281 + C1267) * C52707) *
               C81009 * C80962) *
              C80982 +
          (((C434 + C446) * C52707 + (C2006 * C220 + C2214 * C80639) * C52708) *
               C81009 * C4984 -
           ((C4555 * C80639 + C4324 * C220) * C52708 +
            (C1282 + C1270) * C52707) *
               C81009 * C4985 +
           ((C1275 + C1283) * C52707 +
            ((C275 * C7589 + C81011 * C7891) * C220 +
             (C275 * C7791 + C81011 * C8105) * C80639) *
                C52708) *
               C81009 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C99 + C81011 * C276) * C220 +
            (C275 * C221 + C81011 * C422) * C80639) *
               C52707 +
           (C54122 * C220 + C54292 * C80639) * C52708) *
              C81009 * C5652 -
          ((C56355 * C80639 + C56147 * C220) * C52708 +
           ((C275 * C946 + C81011 * C1256) * C80639 +
            (C275 * C748 + C81011 * C1036) * C220) *
               C52707) *
              C81009 * C5653 +
          (((C275 * C750 + C81011 * C1039) * C220 +
            (C275 * C947 + C81011 * C1257) * C80639) *
               C52707 +
           ((C275 * C6140 + C81011 * C6410) * C220 +
            (C275 * C6324 + C81011 * C6575) * C80639) *
               C52708) *
              C81009 * C5654 -
          (((C275 * C8643 + C81011 * C8851) * C80639 +
            (C275 * C8499 + C81011 * C8713) * C220) *
               C52708 +
           ((C275 * C5772 + C81011 * C5918) * C80639 +
            (C275 * C5659 + C81011 * C5822) * C220) *
               C52707) *
              C81009 * C5655 +
          (((C275 * C5660 + C81011 * C5823) * C220 +
            (C275 * C5773 + C81011 * C5919) * C80639) *
               C52707 +
           ((C275 * C34479 + C81011 * C34703) * C220 +
            (C275 * C34628 + C81011 * C34838) * C80639) *
               C52708) *
              C81009 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C94 +
          (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
              C83 -
          (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
              C95 -
          (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
              C84 +
          (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
              C96 +
          (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
              C85 -
          (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
              C97 -
          (C52962 * C1697 + C52708 * C2304 + C52961 * C112 + C52707 * C500) *
              C86 +
          (C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
              C98 +
          (C52961 * C114 + C52707 * C501 + C52962 * C3285 + C52708 * C3720) *
              C87) *
         C81009 * C81011 * C80639 * C80628) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C743 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C737 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C744 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C738 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C745 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C80639 * C81003 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C744 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C737 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C743) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C738 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C745 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80954) *
              C81009 * C81011 * C80639 * C80988 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C743 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C737 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C744 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C738 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C745 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C80954) *
              C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C4987 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80998 -
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C4988 -
           (C52962 * C1692 + C52708 * C2302 + C52961 * C108 + C52707 * C498) *
               C80982 +
           (C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C4989 +
           (C52961 * C110 + C52707 * C499 + C52962 * C1695 + C52708 * C2303) *
               C80954) *
              C81009 * C81011 * C80639 * C4984 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C4988 -
           ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
                C80998 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C4987) +
           (C52961 * C756 + C52707 * C1366 + C52962 * C3986 + C52708 * C4660) *
               C80982 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C4989 -
           (C52962 * C3988 + C52708 * C4661 + C52961 * C759 + C52707 * C1367) *
               C80954) *
              C81009 * C81011 * C80639 * C4985 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C4987 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80998 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C4988 -
           (C52962 * C6147 + C52708 * C6661 + C52961 * C765 + C52707 * C1370) *
               C80982 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C4989 +
           (C52961 * C767 + C52707 * C1371 + C52962 * C7591 + C52708 * C8212) *
               C80954) *
              C81009 * C81011 * C80639 * C80962)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5657 +
           (C52961 * C107 + C52707 * C497 + C52962 * C1693 + C52708 * C2301) *
               C80588) *
              C81009 * C81011 * C80639 * C5652 -
          ((C52962 * C3985 + C52708 * C4659 + C52961 * C757 + C52707 * C1365) *
               C80588 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5657) *
              C81009 * C81011 * C80639 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5657 +
           (C52961 * C764 + C52707 * C1369 + C52962 * C6148 + C52708 * C6662) *
               C80588) *
              C81009 * C81011 * C80639 * C5654 -
          ((C52962 * C8503 + C52708 * C8921 + C52961 * C5663 + C52707 * C5968) *
               C80588 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C5657) *
              C81009 * C81011 * C80639 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C5657 +
           (C52961 * C5668 + C52707 * C5969 + C52962 * C34481 +
            C52708 * C34906) *
               C80588) *
              C81009 * C81011 * C80639 * C5656)) /
            (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C165 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C80628) *
              C81009 * C81011 * C83 -
          ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
               C80628 +
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C165) *
              C81009 * C81011 * C84 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C165 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C80628) *
              C81009 * C81011 * C85 -
          ((C52962 * C1791 + C52708 * C2410 + C52961 * C169 + C52707 * C572) *
               C80628 +
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C165) *
              C81009 * C81011 * C86 +
          ((C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
               C165 +
           (C52961 * C170 + C52707 * C573 + C52962 * C3353 + C52708 * C3793) *
               C80628) *
              C81009 * C81011 * C87) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C852 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C81003 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C853 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C80988 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C854 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C737 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C853 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C81003 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C852) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C80988 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C854 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80962) *
              C81009 * C81011 * C738 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C852 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C81003 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C853 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C80988 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C854 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C80962) *
              C81009 * C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C5064 +
           (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
               C4984 -
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C5065 -
           (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
               C4985 +
           (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C5066 +
           (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
               C80962) *
              C81009 * C81011 * C80998 +
          ((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
               C5065 -
           ((C52962 * C1788 + C52708 * C2407 + C52961 * C167 + C52707 * C570) *
                C4984 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C5064) +
           (C52961 * C855 + C52707 * C1473 + C52962 * C4094 + C52708 * C4774) *
               C4985 -
           (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
               C5066 -
           (C52962 * C6235 + C52708 * C6740 + C52961 * C858 + C52707 * C1474) *
               C80962) *
              C81009 * C81011 * C80982 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C5064 +
           (C52961 * C168 + C52707 * C571 + C52962 * C1789 + C52708 * C2408) *
               C4984 -
           (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
               C5065 -
           (C52962 * C4095 + C52708 * C4775 + C52961 * C859 + C52707 * C1475) *
               C4985 +
           (C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
               C5066 +
           (C52961 * C860 + C52707 * C1476 + C52962 * C7691 + C52708 * C8317) *
               C80962) *
              C81009 * C81011 * C80954) *
         C80639) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
              C5716 +
          (C52961 * C166 + C52707 * C569 + C52962 * C1790 + C52708 * C2409) *
              C5652 -
          (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
              C5717 -
          (C52962 * C4093 + C52708 * C4773 + C52961 * C856 + C52707 * C1471) *
              C5653 +
          (C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
              C5718 +
          (C52961 * C857 + C52707 * C1472 + C52962 * C6236 + C52708 * C6739) *
              C5654 -
          (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
              C5719 -
          (C52962 * C8573 + C52708 * C8989 + C52961 * C5722 + C52707 * C6013) *
              C5655 +
          (C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
           C52708 * C34905) *
              C5720 +
          (C52961 * C5723 + C52707 * C6014 + C52962 * C34557 +
           C52708 * C34981) *
              C5656) *
         C81009 * C81011 * C80588 * C80639) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C220 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80639) *
              C81009 * C81011 * C80628 * C83 -
          ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
               C80639 +
           (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
               C220) *
              C81009 * C81011 * C80628 * C84 +
          ((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
               C220 +
           (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
               C80639) *
              C81009 * C81011 * C80628 * C85 -
          ((C52962 * C1887 + C52708 * C2515 + C52961 * C224 + C52707 * C640) *
               C80639 +
           (C52962 * C1685 + C52708 * C2296 + C52961 * C102 + C52707 * C494) *
               C220) *
              C81009 * C81011 * C80628 * C86 +
          ((C52961 * C103 + C52707 * C495 + C52962 * C3283 + C52708 * C3719) *
               C220 +
           (C52961 * C225 + C52707 * C641 + C52962 * C3423 + C52708 * C3865) *
               C80639) *
              C81009 * C81011 * C80628 * C87)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C81003 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C80988 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80962) *
              C737 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C80988 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C81003 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80962) *
              C738 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C81003 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C80988 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
                C220 +
            (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
                C80639 +
            (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
                C220 +
            (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80998 +
          (((C52961 * C746 + C52707 * C1357 + C52962 * C3980 + C52708 * C4656) *
                C220 +
            (C52961 * C945 + C52707 * C1577 + C52962 * C4200 + C52708 * C4890) *
                C80639) *
               C81009 * C81011 * C4985 -
           ((C52962 * C1881 + C52708 * C2511 + C52961 * C222 + C52707 * C638) *
                C80639 +
            (C52962 * C1682 + C52708 * C2293 + C52961 * C100 + C52707 * C492) *
                C220) *
               C81009 * C81011 * C4984 -
           ((C52962 * C6323 + C52708 * C6823 + C52961 * C948 + C52707 * C1580) *
                C80639 +
            (C52962 * C6139 + C52708 * C6655 + C52961 * C751 + C52707 * C1362) *
                C220) *
               C81009 * C81011 * C80962) *
              C80982 +
          (((C52961 * C101 + C52707 * C493 + C52962 * C1683 + C52708 * C2295) *
                C220 +
            (C52961 * C223 + C52707 * C639 + C52962 * C1885 + C52708 * C2513) *
                C80639) *
               C81009 * C81011 * C4984 -
           ((C52962 * C4201 + C52708 * C4891 + C52961 * C949 + C52707 * C1581) *
                C80639 +
            (C52962 * C3981 + C52708 * C4657 + C52961 * C747 + C52707 * C1359) *
                C220) *
               C81009 * C81011 * C4985 +
           ((C52961 * C752 + C52707 * C1363 + C52962 * C7589 + C52708 * C8211) *
                C220 +
            (C52961 * C950 + C52707 * C1582 + C52962 * C7791 + C52708 * C8425) *
                C80639) *
               C81009 * C81011 * C80962) *
              C80954)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C52961 * C99 + C52707 * C491 + C52962 * C1684 + C52708 * C2294) *
               C220 +
           (C52961 * C221 + C52707 * C637 + C52962 * C1882 + C52708 * C2509) *
               C80639) *
              C81009 * C81011 * C5652 -
          ((C52962 * C4199 + C52708 * C4889 + C52961 * C946 + C52707 * C1578) *
               C80639 +
           (C52962 * C3979 + C52708 * C4655 + C52961 * C748 + C52707 * C1358) *
               C220) *
              C81009 * C81011 * C5653 +
          ((C52961 * C750 + C52707 * C1361 + C52962 * C6140 + C52708 * C6656) *
               C220 +
           (C52961 * C947 + C52707 * C1579 + C52962 * C6324 + C52708 * C6821) *
               C80639) *
              C81009 * C81011 * C5654 -
          ((C52962 * C8643 + C52708 * C9057 + C52961 * C5772 + C52707 * C6060) *
               C80639 +
           (C52962 * C8499 + C52708 * C8919 + C52961 * C5659 + C52707 * C5964) *
               C220) *
              C81009 * C81011 * C5655 +
          ((C52961 * C5660 + C52707 * C5965 + C52962 * C34479 +
            C52708 * C34905) *
               C220 +
           (C52961 * C5773 + C52707 * C6061 + C52962 * C34628 +
            C52708 * C35051) *
               C80639) *
              C81009 * C81011 * C5656) *
         C80588) /
            (p * q * std::sqrt(p + q));
}
