/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include <boost/test/unit_test.hpp>
#include "gto_d2_kit/d2_overlap.hpp"

#include <armadillo>

using namespace boost::unit_test; 

BOOST_AUTO_TEST_SUITE(gto_d2_kit_overlap_test)

const double ae = 1.1; 
const double be = 1.7;
const double cc = ae * be / (ae + be);
const double xAB = 1.1;
const double yAB = 2.3;
const double zAB = 1.6;
const bool same_atom = true;


#define CHECK_HESSIAN(h, rh)                                                 \
    for (unsigned i = 0; i < h.n_rows; ++i)                                  \
        for (unsigned j = 0; j < h.n_cols; ++j)                              \
            for (int k = 0; k < 6; ++k)                                      \
                BOOST_CHECK_CLOSE(h(i, j, k), rh(i, j, k), 1e-5)

#define GENERATE_TEST_CASE(m, n, d)                                          \
    arma::cube h(2 * m + 1, 2 * n + 1, 6, arma::fill::zeros);                \
    overlap_second_derivative_##m##n(ae, be, cc, xAB, yAB, zAB,              \
                                     h.slice(0).begin(),                     \
                                     h.slice(1).begin(),                     \
                                     h.slice(2).begin(),                     \
                                     h.slice(3).begin(),                     \
                                     h.slice(4).begin(),                     \
                                     h.slice(5).begin(),                     \
                                     same_atom,                              \
                                     2 * n + 1, 0, 0);                       \
    CHECK_HESSIAN(h, arma::cube(d, h.n_rows, h.n_cols, 6))


BOOST_AUTO_TEST_CASE(overlap_ss)
{
    const double data[] = {
        0.65330603557102618,
        
        3.582770586403246,
        
        2.4923621470631274,
        
        6.4310546492173639,
        
        5.2113026711319934,
        
        2.5650610915569474 
    };
    GENERATE_TEST_CASE(0, 0, data);
}

BOOST_AUTO_TEST_CASE(overlap_sp)
{
    const double data[] = {
        -0.63398807609051933,
        0.59030866785524883,
        0.41064950807321654,
        
        0.59030866785524883,
        2.7791343305546476,
        2.2520272257391833,
        
        0.41064950807321665,
        2.2520272257391833,
        1.1084728288513959,
        
        2.7791343305546472,
        3.894997136933382,
        4.0423772080794871,
        
        2.2520272257391833,
        4.0423772080794871,
        2.3177159148711,
        
        1.1084728288513959,
        2.3177159148710995,
        0.27951013230623989    
    };
    GENERATE_TEST_CASE(0, 1, data);
}

// FIXME: !!!!!
//BOOST_AUTO_TEST_CASE(overlap_ps)
//{
//    const double data[] = {
//        0.97979975395807517, 0, 0,
//        
//        -0.91229521395811153, 0, -0.63464014884042563,
//        
//        -0.63464014884042541, 0, -3.4804057125060104,
//        
//        -4.2950257835844532, 0, -1.7130943718612475,
//        
//        -3.4804057125060104, 0, -6.2473102306682966,
//        
//        -1.7130943718612475, 0, -3.5819245957098804
//    };
//    GENERATE_TEST_CASE(1, 0, data);
//}

BOOST_AUTO_TEST_CASE(overlap_pp)
{
    const double data[] = {
        0.77339884130207515, 0.88531906339783228, 0.61587413105936162,
        0.88531906339783228, -0.70766209768875332, -0.57344270591652735,
        0.61587413105936162, -0.57344270591652746, -0.28225487291915574,
        
        0.88531906339783251, -0.7076620976887531, -0.57344270591652724,
        -0.70766209768875321, -2.6013016593090814, -2.6997304925388002,
        -0.57344270591652757, -2.6997304925388006, -1.5479031288603415,
        
        0.61587413105936184, -0.57344270591652724, -0.28225487291915574,
        -0.57344270591652735, -2.699730492538801, -1.547903128860342,
        -0.28225487291915574, -1.5479031288603413, -0.18667283836166745,
        
        -0.70766209768875321, -2.6013016593090801, -2.6997304925388002,
        -2.6013016593090805, -1.9938774398512411, -3.7837115044495713,
        -2.6997304925388006, -3.7837115044495717, -2.7784781004884009,
        
        -0.57344270591652757, -2.6997304925388002, -1.547903128860342,
        -2.6997304925388006, -3.783711504449573, -2.7784781004884014,
        -1.547903128860342, -2.7784781004884014, -0.39031593475621373,
        
        -0.28225487291915574, -1.5479031288603415, -0.1866728383616674,
        -1.5479031288603415, -2.7784781004884014, -0.39031593475621362,
        -0.1866728383616674, -0.39031593475621362, 1.1026157419508746
    };
    GENERATE_TEST_CASE(1, 1, data);
}

BOOST_AUTO_TEST_SUITE_END()
